<?php 
    
   /* Project		  :-  Image coin website
    * Controller Name :-  admins_contoller.php
    * Created  On     :-  15-02-10 (10:00am)
    * Description     :-  This controller contains all the methods for tasks that will be 
    *                     managed by admin of website                        
    */
	
	

	
	
	
    class AdminsController extends AppController 
    {
        var $name = 'Admins';
        //var $uses = 'CoinsHolder';
        var $layout = 'new_admin_layout';
        var $helpers = array('Tinymce','Pagination','Html', 'Form','Session','Qrcode','Javascript','Fck','Csv','csv','Common','Calendar');
        var $components = array('Email','Backup','EmailTemplates', 'ForceDownload', 'Cookie','Pagination','File','Sendemail','RequestHandler');
        var $uses  = array('Route','Point','ProductType','PricingType','CoinsHolder','Sponsor','Coinset','Holder','ProjectType','PointArchiveUser','MailFooter','RecurringEvent','Content','SystemVersion','SystemPricing','PriceTypeOption','UserAgreement','SpamPolicy','Term','NonProfitType','MemberNonProfit','MemberCoin','TimeZone','WpPost' ,'Link','Admin','Role','Access','Menu','Iteam');

        function pagenotavailable(){
            $this->layout = "";
        }

        function beforeFilter() {
			 /*permission code start*/	
			 if($this->Session->check("UserLoginDetails"))
			 {
			  	$admin =  $this->Session->read("UserLoginDetails");
				$permissions = array();
				$subpermissions = array();
				if(!empty($admin))
				{
						$permissions 	= $this->check_user_permissions($admin['Admin']['user_type'],'yes');
						$subpermissions = $this->check_user_permissions($admin['Admin']['user_type'],'no');
				}
				if(!empty($permissions))
				{
					$this->set('hideMenuPermission',$permissions);	
				}
				if(!empty($subpermissions))
				{
					$this->set('hideSubMenuPermission',$subpermissions);
					$this->set('c_name',$this->params['controller']);
					$this->set('f_name',$this->params['action']);
				}
			}
			/*permission code end*/	
			$projectid = $this->Session->Read('sessionprojectid');
            if($projectid) {
                App::import("Model", "Project");
                $this->Project =   & new Project();
                $fields=array('project_name','system_name','url');
                $data=$this->Project->find("first",array("fields"=>$fields,"conditions"=>array("Project.id"=>$projectid)));
                $this->Session->write("projectwebsite_name_admin",$data['Project']['project_name']);
				$this->Session->write("projectwebsite_name",$data['Project']['system_name']);
                $this->set('data',$data);
                if(!empty($data['Project']['url'])){
                    $redirect=$data['Project']['url'];
                    $this->set('redirect',"http://".$redirect); 
                }
                else{

                    $current_domain= $_SERVER['HTTP_HOST'];    
                    $redirect="http://".$current_domain.'/'.$data['Project']['project_name'];
                    $this->set('redirect',$redirect);     
                }
            }
        }
 
        /*
        * Function name          : index()
        * Description            : This function redirect the admin to login page 
        * @session_check_admin() : This function is defined in app_controller to check the session expiration. 
        * Created On             : 15-02-11 (09:00pm)          
        */
        
        function index()
        {
			##check active session
			// $check = $this->session_check_usertype();
            $this->session_check_admin();
			$projectid = 1;
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            //$this->set('current_project_name',$project_name);
            $this->set('page_url','index');
            ##set default selected
            //Configure::write('debug',3 );    
            $this->Session->delete('sessionprojectid');
            $this->set("selectedprojectid",'0');
	        $this->set("hlpdata",$this->getHelpContent(54));
            //App::import("Model", "Holder");
            //$this->Holder =   & new Holder();  
			$memberlist = $this->Holder->getMemberListByProject($member_type ="",$searchkey="",$order="", $limit=5, $page="");
            $this->set("memberlist",$memberlist);
			App::import("Model", "CommunicationTaskHistory");
            $this->CommunicationTaskHistory =   & new CommunicationTaskHistory();  
			$CommunicationTaskHistory = $this->CommunicationTaskHistory->find("all",array('order' => 'created DESC','limit' => '5'));		  $this->set("CommunicationTaskHistory",$CommunicationTaskHistory);
			
			App::import("Model", "MessageHolder");
            $this->MessageHolder =   & new MessageHolder();  
			$this->MessageHolder->bindModel(array('belongsTo'=>array(
            'Message'=>array(
            'foreignKey'=>false,
            'conditions'=>'MessageHolder.msgid = Message.id'
            )
            )));
			
			$condition = " MessageHolder.project_id = '$projectid' AND MessageHolder.delete_status='0'  AND MessageHolder.usertype='sponsor'";
			
			$newMsgs =  $this->MessageHolder->find('all',array('conditions'=>$condition,'order'=> 'MessageHolder.created DESC','limit' => 5));
			
			$this->set("newMsgs",$newMsgs);
			
			App::import("Model", "Coupon");
			$this->Coupon =   & new Coupon();
			$conditionC = "Coupon.project_id = '".$projectid."' AND Coupon.delete_status ='0'";
		
			$couponArray = $this->Coupon->find('all',array("conditions"=>$conditionC,'order'=>$order,'limit' => 5));
			$this->set("coupondata",$couponArray);
			
			App::import("Model", "FormSubmit");
            $this->FormSubmit =  & new FormSubmit();
			$conditionF = " FormSubmit.project_id='".$projectid."' AND FormSubmit.delete_status = '0'  ";
			$newinquirydata = $this->FormSubmit->find('all',array("conditions"=>$conditionF, 'order' =>'created DESC', 'limit' =>5));
			$this->set("newinquirydata",$newinquirydata);
			
			App::import("Model", "Event");
            $this->Event =   & new Event();
			$conditionE = "Event.project_id = '".$projectid."' and Event.delete_status ='0' ";
			
			$eventArray = $this->Event->find('all',array("conditions"=>$conditionE,'order'=>'created DESC','limit' => 5));
			$this->set("eventArray",$eventArray);
			//$this->pl($eventArray);
			

            # set help condition   
        }             
        
        function mail_task_list(){

            ##check admin session live or not
            $this->session_check_admin();
              
            ##fetch data from project type table for listing
            $field='';
            $condition = "delete_status = '0'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (system_version_name LIKE '%".$searchkeyword."%' OR note  LIKE '%".$searchkeyword."%' )";
            }

            $this->Pagination->sortByClass    = 'SystemVersion'; ##initaite pagination 

            $this->Pagination->total= count($this->SystemVersion->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $sys_ver_data = $this->SystemVersion->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
         
            $this->set("sys_ver_data",$sys_ver_data);  
        }
		
		
        function system_pricing_list(){

            ##check admin session live or not
            $this->session_check_admin();
                    
            ##fetch data from project type table for listing
            $field='';
            $condition = "SystemPricing.delete_status = '0'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (SystemPricing.system_pricing_name LIKE '%".$searchkeyword."%' OR SystemPricing.note  LIKE '%".$searchkeyword."%' )";
            }

            $this->SystemPricing->bindModel(array('belongsTo'=>array(
            'SystemVersion'=>array(
            'foreignKey'=>false,
            'conditions'=>'SystemPricing.system_version_id = SystemVersion.id'
            )
            )));

            $this->Pagination->sortByClass    = 'SystemPricing'; ##initaite pagination 

            $this->Pagination->total= count($this->SystemPricing->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            
            $this->SystemPricing->bindModel(array('belongsTo'=>array(
	            'SystemVersion'=>array(
	            'foreignKey'=>false,
	            'conditions'=>'SystemPricing.system_version_id = SystemVersion.id'
            ))));

            if($order=="SystemPricing.system_version_id ASC")
            {
               $order="SystemVersion.system_version_name ASC" ;
            }
            if($order=="SystemPricing.system_version_id DESC")
            {
                $order="SystemVersion.system_version_name DESC" ;
            }
            
            $sys_pri_data = $this->SystemPricing->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
         
            $this->set("sys_pri_data",$sys_pri_data);  
        }   
		
		/*
			@Auther			Suman Singh
			@Type			Created
			@Email			suman.singh@dotsqares.com				
			@Date			April 15, 2012
			@Link		
			@Description	To make Billing list view in types section
		*/
		function billingtype_list() {

            ##check admin session live or not
            $this->session_check_admin();
                    
            // Delete the section for projects to list basis on billing type in projectlist_by_btype.ctp page
			if($this->Session->check('billingTypeId') != '')
			$this->Session->delete('billingTypeId');

			##import project type model for processing
            App::import("Model", "BillingType");
            $this->BillingType =   & new BillingType();
			$condition = 'delete_status = 0';
			$field='';
            if(isset($this->data['BillingType']['searchkey']) && $this->data['BillingType']['searchkey']){
                $searchkeyword = $this->data['BillingType']['searchkey'];
                $condition .= "  BillingType.billing_type LIKE '%".$searchkeyword."%' OR BillingType.payment_type LIKE '%".$searchkeyword."%' ";
            }

            $this->Pagination->sortByClass    = 'BillingType'; ##initaite pagination 

            $this->Pagination->total= count($this->BillingType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $billingtype_list = $this->BillingType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
         
            $this->set("billingtype_list",$billingtype_list);  	
        }
		
		function addbillingtype($id=null) {
			##check admin session live or not
            $this->session_check_admin();
			
			##import BillingType model for processing
            App::import("Model", "BillingType");
            $this->BillingType =   & new BillingType();
			
			##check empty data
            if(!empty($this->data)) {
			//pr($this->data);die;
				if(!isset($this->data['BillingType']['default_cc']))
				$this->data['BillingType']['default_cc'] = 0;
				
				if($this->BillingType->save($this->data)) {
					$id = $this->BillingType->id;
					if(isset($this->data['Action']['redirectpage'])){
						$msg='Billing Type Added Successfully.';
						$this->Session->setFlash($msg,'default', array('class' => 'successmsg'));
					   $this->redirect(array('controller' =>'admins', 'action' =>'billingtype_list'));
					}
					else if(isset($this->data['Action']['noredirection'])){				
						$msg='Billing Type saved Successfully.';
						$this->Session->setFlash($msg,'default', array('class' => 'successmsg'));
						$this->redirect(array("controller"=>"admins" , "action"=>"addbillingtype",$id)); 			
					}
				} else
				{
					$this->validateErrors();
				}
			}
			
			if (empty($this->data)) {
            $this->data = $this->BillingType->read(null, $id);
			}
		}
        
        function system_pricing($opr='',$id=null)
        {
			App::import("Model", "SystemPricing");
            $this->SystemPricing =   & new SystemPricing();    
			
            
            $status=$this->SystemPricing->system_pricing($opr,$id,$this->data);
            
            if($status)
            {
                if($status['success']==1)             
                    $this->Session->setFlash($status['msg'],'default', array('class' => 'successmsg'));
                else           
                    $this->Session->setFlash($status['msg'],'default',array('class' => 'msgTXt'));
                           
                
                if($this->data['Action']['redirectpage'])
                        $this->redirect(array('controller' => 'admins','action' => 'system_pricing_list')); 
                    else
                        $this->redirect(array('controller' => 'admins','action' => 'system_pricing','edit',$id)); 
						//$this->redirect("/admins/system_pricing/".$opr."/".$id);
            }
            
            if($opr=="edit")
            {
                $this->SystemPricing->id = $id;
                $this->data = $this->SystemPricing->read();
                $this->set("data", $this->data);
				//pr($this->data);
				
                //$this->set("sys_ver_id", $this->data['SystemPricing']['system_version_id']);
               
                /********* get monthly pricing and no of members *******/
                $sys_monthly_pricing=$this->SystemPricing->query("select monthly_price from system_monthly_pricings where system_pricing_id=$id order by id asc");
                $this->set("sys_monthly_pricing", $sys_monthly_pricing);
				//pr($sys_monthly_pricing);
            }
            
            $condition = "SystemVersion.delete_status = '0'";  
            $sys_ver_data= $this->SystemVersion->find('all',array("conditions"=>$condition));

            $sys_ver_data = Set::combine($sys_ver_data, '{n}.SystemVersion.id', '{n}.SystemVersion.system_version_name');
            $this->set("sys_ver_data", $sys_ver_data);
			//$this->set("sys_ver_id", $sys_ver_data);
			//pr($sys_ver_data);
            
            $condition = "SystemPricing.delete_status = '0'";  
            $sys_pri_data= $this->SystemPricing->find('all',array("conditions"=>$condition));
            
            $sys_pri_data = Set::combine($sys_pri_data, '{n}.SystemPricing.id', '{n}.SystemPricing.system_pricing_name');
            $this->set("sys_pri_data", $sys_pri_data);
			
        }
        
        function spam_policy($opr,$id)
        {
            ##check admin session live or not
            $this->session_check_admin();
			
			$status=$this->SpamPolicy->spam_policy($opr,$id,$this->data);
            
			if($status)
            {
                if($status['success']==1)             
                    $this->Session->setFlash($status['msg'],'default', array('class' => 'successmsg'));
                else           
                    $this->Session->setFlash($status['msg'],'default',array('class' => 'msgTXt'));
                           
                
                if($this->data['Action']['redirectpage'])
                        $this->redirect("/admins/spam_policy/".$opr."/".$id);
                    else
                        $this->redirect("/admins/spam_policy/".$opr."/".$id);
            }
            
            if($opr=="edit")
            {
                $this->SpamPolicy->id = $id;
                $this->data = $this->SpamPolicy->read();
                $this->set("data", $this->data);
            }
            
            //get spam policy adn terms & cond status.
            $condition="SpamPolicy.created_by='1' and SpamPolicy.active_status='1'";
            $spam_policy_dts = $this->SpamPolicy->find('first',array("conditions"=>$condition));
            if(empty($spam_policy_dts))
                $spam_policy_url="/admins/spam_policy/add";
            else
                $spam_policy_url="/admins/spam_policy/edit/".$spam_policy_dts['SpamPolicy']['id'];
                
            $this->set("spam_policy_url", $spam_policy_url);
            
            ##check exist sponsor for particular project
            $condition = "Term.project_id = '0'";
            $ttdata = $this->Term->find('all',array("conditions"=>$condition));
            
            if($ttdata){
                if($ttdata[0]['Term']['id'] !=''){

                    $termid = $ttdata[0]['Term']['id'];
                    $terms_url="/admins/terms_by_admin/edit/".$termid;
                }
            }
            else
                $terms_url="/admins/terms_by_admin/add/";
                
            $this->set("terms_url", $terms_url);
         
        }
        
        function terms_by_admin($opr,$id)
        {

            ##check admin session live or not
            $this->session_check_admin();
            
            App::import("Model", "Term");
            $this->Term =  & new Term();
            
            $status=$this->Term->terms_by_admin($opr,$id,$this->data);            
            if($status)
            {
                if($status['success']==1)             
                    $this->Session->setFlash($status['msg'],'default', array('class' => 'successmsg'));
                else           
                    $this->Session->setFlash($status['msg'],'default',array('class' => 'msgTXt'));
                           
                
                if($this->data['Action']['redirectpage'])
                        $this->redirect("/admins/terms_by_admin/".$opr."/".$id);
                    else
                        $this->redirect("/admins/terms_by_admin/".$opr."/".$id);
            }
            
           
            ##check exist sponsor for particular project
            $condition = "Term.project_id = '0'";
            $ttdata = $this->Term->find('all',array("conditions"=>$condition));

            if($ttdata){
                if($ttdata[0]['Term']['id'] !=''){

                    $termid = $ttdata[0]['Term']['id'];

                    $this->Term->id = $termid;
                    $this->data = $this->Term->read();
                    $this->set("data", $this->data);
                    
                    $terms_url="/admins/terms_by_admin/edit/".$termid;
                }
            }
            else
                $terms_url="/admins/terms_by_admin/add/";
            
            $this->set("terms_url", $terms_url);
                
            
            //get spam policy adn terms & cond status.
            $condition="SpamPolicy.created_by='1' and SpamPolicy.active_status='1'";
            $spam_policy_dts = $this->SpamPolicy->find('first',array("conditions"=>$condition));
            if(empty($spam_policy_dts))
                $spam_policy_url="/admins/spam_policy/add";
            else
                $spam_policy_url="/admins/spam_policy/edit/".$spam_policy_dts['SpamPolicy']['id'];
                
            $this->set("spam_policy_url", $spam_policy_url);
            
            
            # set help condition

            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '17'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);

            # set help condition   


        }
        
        
        
        function user_agreement_project()
        {          
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            
            $condition="Project.id='$projectid'";
            $projectdataarr = $this->Project->find('first',array("conditions"=>$condition));
            $this->set('project',$projectdataarr);
            $user_agreement_id=$projectdataarr['Project']['user_agreement_id'];
            
            if($user_agreement_id==0)
            {
                $cont="UserAgreement.delete_status='0' and UserAgreement.active_status='1' and UserAgreement.default_new_projects='1'";           
                $selectedagreement=$this->UserAgreement->find('first',array('conditions'=>$cont,'fields'=>array('id','agreement_name'))); 
                $user_agreement_id=$selectedagreement['UserAgreement']['id'];
            }
            
            $this->UserAgreement->id = $user_agreement_id;
            $this->data = $this->UserAgreement->read();
            $this->set("data", $this->data);
        }
        
        
        function spam_policy_project()
        {          
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            
            $condition="Project.id='$projectid'";
            $projectdataarr = $this->Project->find('first',array("conditions"=>$condition));

            $this->set('project',$projectdataarr);
            
            $condition="SpamPolicy.created_by='1' and SpamPolicy.active_status='1' and SpamPolicy.delete_status='0'";
            $spamaarr = $this->SpamPolicy->find('first',array("conditions"=>$condition));
            $spam_id=$spamaarr['SpamPolicy']['id'];
            
            if($spam_id!="")
            {
                $this->SpamPolicy->id = $spam_id;
                $this->data = $this->SpamPolicy->read();
                $this->set("data", $this->data);
            }
        }

        /*
        * Function name          : projectlist()
        * Description            : This function show all project listing 
        * @session_check_admin() : This function is defined in app_controller to check the session expiration. 
        * Created On             : 21-9-2011 QUAD TEam         
        */

        function projectlist()
        {
            ##check active session
            $this->session_check_admin();
            $project_name=$this->Session->read("projectwebsite_name_admin");  
			 
            $this->set('current_project_name',$project_name);

            ##set default selected
            //Configure::write('debug',3 );    

            ## Script used for default pagination
            if(isset($_SERVER['QUERY_STRING']))
            {
				$this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata); 
			}    	
            if($this->data){
                if($this->data['Admins']['projectid'] !='' && $this->data['Admins']['projectid'] !='0' ){
                    $this->Session->delete('sessionprojectid');
                    $this->set("selectedprojectid",$this->data['Admins']['projectid']);
					
                    $this->Session->write("sessionprojectid",$this->data['Admins']['projectid']);
					//pr($this->data);
					//die("test");
                    $this->redirect(array("controller"=> "admins", "action" => "projectdashboard"));
                }

            }else{
                $this->Session->delete('sessionprojectid');
                ##read project id from session
                $projectid = $this->Session->Read('sessionprojectid');

                if($projectid){
                    $this->Session->write("sessionprojectid",$projectid);
                    $this->set("selectedprojectid",$projectid);
                }else{
                    $this->Session->delete('sessionprojectid');
                    $this->set("selectedprojectid",'0');
                }
            }
            $condition='';
            $searchkeyword='';        

            ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "(ProjectType.project_type_name like '%".addslashes($searchkeyword)."%' OR ";
                $condition .= "Project.project_name like '%".addslashes($searchkeyword)."%' OR ";
                $condition .= "Sponsor.sponsor_name like '%".addslashes($searchkeyword)."%' ) AND ";
            }
            $order='';
            $limit='';
            $page='';
            ##project listing in dashboard
            App::import("Model", "Project");
            $this->Project =   & new Project();    

            App::import("Model", "SiteType");
            $this->SiteType  =    &new SiteType();

            ##fetch data from Project table for listing
            $field='';
            $condition .= "Project.delete_status = '0'";
            //echo $condition; exit;
            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='sponsor_name'){
                $this->Pagination->sortByClass    = 'Sponsor'; ##initaite pagination
            }else if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='project_type_name'){
                    $this->Pagination->sortByClass    = 'ProjectType'; ##initaite pagination
                }else{
                    $this->Pagination->sortByClass    = 'Project'; ##initaite pagination
            }


            $this->Project->bindModel(array('belongsTo'=>array(
            'SiteType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.project_type_id = SiteType.id'
            )
            ),
			'hasMany'=>array(
					'ProjectOwner'=>array(
					'foreignKey'=>'project_id',
					)
				)
			));
            
            //$projectdata=$this->Project->find('all',array("conditions"=>$condition));  
			//pr($projectdata);die;
            $this->Pagination->total= count($this->Project->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->Project->bindModel(array('belongsTo'=>array(
            'SiteType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.project_type_id = SiteType.id'
            )
            ),
			'hasMany'=>array(
					'ProjectOwner'=>array(
					'foreignKey'=>'project_id',
					)
				)
			));
          
            /*if($this->data['Admins']['admincontrol']=='all'){
            $limit = $this->Pagination->total;
            }*/    


            $projectdataarr = $this->Project->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            
			for($p=0; $p< sizeof($projectdataarr); $p++)
            {
                $projectdata1=$projectdataarr[$p];
                $projectdata_id=$projectdata1['Project']['id'];
                $projectdata1['Project']['numunits']=$this->getcoinsetsunitbyprojectid($projectdata_id);
                $projectdataarr[$p]=$projectdata1;
            }
			// ------
			//  -------
            ##set project type data in variable
			//pr($projectdataarr);die;
            $this->set("projectdata",$projectdataarr);

            ##project dropdownlist
            $this->projectdropdown();

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '54'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition   
        }
		
        function projectlist_by_product() {

            ##check admin session live or not
            $this->session_check_admin();
            if(isset($_SERVER['QUERY_STRING']))
            {
                if(isset($_GET['sortBy'])) $sortby=$_GET['sortBy'];
                if(isset($_GET['direction'])) $sorttype=$_GET['direction'];
            }            
            if($this->data){

                if($this->data['Admins']['projectid'] !='' && $this->data['Admins']['projectid'] !='0' ){

                    $this->Session->delete('sessionprojectid');
                    $this->set("selectedprojectid",$this->data['Admins']['projectid']);
                    $this->Session->write("sessionprojectid",$this->data['Admins']['projectid']);
                    $this->redirect("/admins/projectdashboard");

                }else{

                }


            }else{
                $this->Session->delete('sessionprojectid');
                ##read project id from session
                $projectid = $this->Session->Read('sessionprojectid');

                if($projectid){
                    $this->Session->write("sessionprojectid",$projectid);
                    $this->set("selectedprojectid",$projectid);
                }else{
                    $this->Session->delete('sessionprojectid');
                    $this->set("selectedprojectid",'0');
                }
            }
            

            $current_url= $_SERVER['HTTP_HOST'];
            $this->set("current_url",$current_url);     

            ##import project type model for processing
            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();    
            ##fetch data from project type table for listing
            $field='';

            $condition = "Coinset.delete_status = '0'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (Project.project_name LIKE '%".$searchkeyword."%' OR Project.system_name  LIKE '%".$searchkeyword."%' ) or ProductType.product_type_name LIKE '%".$searchkeyword."%'";
            }

            $this->Coinset->bindModel(array('belongsTo'=>array(
            'Project'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.project_id = Project.id'
            ),
            'PriceTypeOption'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.price_type_options_id = PriceTypeOption.id'
            ),
            'ProductType'=>array(
            'foreignKey'=>false,
            'conditions'=>'PriceTypeOption.product_id = ProductType.id'
            )
            )));   

            $this->Pagination->sortByClass    = 'Coinset'; ##initaite pagination 

            $this->Pagination->total= count($this->Coinset->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            // if sort by company type name
            if(isset($sortby) && $sortby=="project_name"){
                $order="Project.project_name ";
                if(isset($sorttype)){
                    $order.=" ".$sorttype;
                }else{
                    $order.=" ASC";  
                }
            }
           
            if(isset($_GET['sortBy']) && $_GET['sortBy'] == "price_type_options_id"){
                  $order=" ProductType.product_type_name ".$_GET['direction'];
             }
            
            $this->Coinset->bindModel(array('belongsTo'=>array(
            'Project'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.project_id = Project.id'
            ),
            'PriceTypeOption'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.price_type_options_id = PriceTypeOption.id'
            ),
            'ProductType'=>array(
            'foreignKey'=>false,
            'conditions'=>'PriceTypeOption.product_id = ProductType.id'
            )
            )));   
            
            $coinset_orders = $this->Coinset->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
            /* for($i=0;$i<count($coinset_orders);$i++)
            {
            $coinset_orders[$i][Coinset][project_name]=$this->getprojectnamebyid($coinset_orders[$i][Coinset][project_id]);
            } */ 

            $this->set("coinset_orders",$coinset_orders);    
        }
        
        function projectlist_by_sys_price() {
            ##check admin session live or not
            $this->session_check_admin();
			$sortby='';
			$sorttype='';
            if(isset($_SERVER['QUERY_STRING']))
            {
               if(isset($_GET['sortBy'])) $sortby=$_GET['sortBy'];
               if(isset($_GET['direction'])) $sorttype=$_GET['direction'];
            }
           
           if($this->data){

                if($this->data['Admins']['projectid'] !='' && $this->data['Admins']['projectid'] !='0' ){

                    $this->Session->delete('sessionprojectid');
                    $this->set("selectedprojectid",$this->data['Admins']['projectid']);
                    $this->Session->write("sessionprojectid",$this->data['Admins']['projectid']);
                    $this->redirect("/admins/projectdashboard");

                }

            }else{
                $this->Session->delete('sessionprojectid');
                ##read project id from session
                $projectid = $this->Session->Read('sessionprojectid');

                if($projectid){
                    $this->Session->write("sessionprojectid",$projectid);
                    $this->set("selectedprojectid",$projectid);
                }else{
                    $this->Session->delete('sessionprojectid');
                    $this->set("selectedprojectid",'0');
                }
            }

            $current_url= $_SERVER['HTTP_HOST'];
            $this->set("current_url",$current_url);     

            ##import project type model for processing
            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();    
            ##fetch data from project type table for listing
            $field='';

            $condition = "Project.delete_status = '0'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (Project.project_name LIKE '%".$searchkeyword."%' OR Project.system_name  LIKE '%".$searchkeyword."%' ) or SystemPricing.system_pricing_name LIKE '%".$searchkeyword."%' or SystemVersion.system_version_name LIKE '%".$searchkeyword."%'";
            }

            $this->Project->bindModel(array('belongsTo'=>array(
            'SystemPricing'=>array(
            'foreignKey'=>false,
            'conditions'=>'SystemPricing.id = Project.system_pricing_id'
            ),
            'SystemVersion'=>array(
            'foreignKey'=>false,
            'conditions'=>'SystemVersion.id = SystemPricing.system_version_id'
            )
            )));   

            $this->Pagination->sortByClass    = 'Project'; ##initaite pagination 

            $this->Pagination->total= count($this->Project->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            // if sort by company type name
            if(isset($sortby) && $sortby=="project_name"){
                $order="Project.project_name ";
                if(isset($sorttype)){
                    $order.=" ".$sorttype;
                }else{
                    $order.=" ASC";  
                }
            }
           
            if(isset($_GET['sortBy']) && $_GET['sortBy']=="system_pricing_id"){
                  $order=" SystemPricing.system_pricing_name ".$_GET['direction'];
             }
             
             if(isset($_GET['sortBy']) && $_GET['sortBy']=="version_id"){
                  $order=" SystemVersion.system_version_name ".$_GET['direction'];
             }
            
            $this->Project->bindModel(array('belongsTo'=>array(
            'SystemPricing'=>array(
            'foreignKey'=>false,
            'conditions'=>'SystemPricing.id = Project.system_pricing_id'
            ),
            'SystemVersion'=>array(
            'foreignKey'=>false,
            'conditions'=>'SystemVersion.id = SystemPricing.system_version_id'
            )
            )));   
            
            $project_list = $this->Project->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable

            /* for($i=0;$i<count($coinset_orders);$i++)
            {
            $coinset_orders[$i][Coinset][project_name]=$this->getprojectnamebyid($coinset_orders[$i][Coinset][project_id]);
            } */ 

            $this->set("project_list",$project_list);    
        }

        function projectlist_by_btype($bid=null)
        {
            ##check active session
            $this->session_check_admin();
            $project_name=$this->Session->read("projectwebsite_name_admin");  
			 
            $this->set('current_project_name',$project_name);

            ##set default selected
            //Configure::write('debug',3 );    

            ## Script used for default pagination
            if(isset($_SERVER['QUERY_STRING']))
            {
				$this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata); 
			}    	
            if($this->data){
                if($this->data['Admins']['projectid'] !='' && $this->data['Admins']['projectid'] !='0' ){

                    $this->Session->delete('sessionprojectid');
                    $this->set("selectedprojectid",$this->data['Admins']['projectid']);
                    $this->Session->write("sessionprojectid",$this->data['Admins']['projectid']);
                    $this->redirect(array("controller"=> "admins", "action" => "projectdashboard"));
                }
            }else{
                $this->Session->delete('sessionprojectid');
                ##read project id from session
                $projectid = $this->Session->Read('sessionprojectid');

                if($projectid){
                    $this->Session->write("sessionprojectid",$projectid);
                    $this->set("selectedprojectid",$projectid);
                }else{
                    $this->Session->delete('sessionprojectid');
                    $this->set("selectedprojectid",'0');
                }
            }
			if($bid == null || $bid == '') {
				$bilType = $this->Session->Read('billingTypeId');
			} else {
				$this->Session->delete('billingTypeId');
				$this->Session->write("billingTypeId",$bid);
				$bilType = $bid;
			}
			
            $condition='';
            $searchkeyword='';     
			$condition .= "Project.delete_status = '0' and Project.billing_type_id=".$bilType." ";

            ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "(ProjectType.project_type_name like '%".addslashes($searchkeyword)."%' OR ";
                $condition .= "Project.project_name like '%".addslashes($searchkeyword)."%' OR ";
                $condition .= "Sponsor.sponsor_name like '%".addslashes($searchkeyword)."%' ) AND ";
            }
            $order='';
            $limit='';
            $page='';
            ##project listing in dashboard
            App::import("Model", "Project");
            $this->Project =   & new Project();    

            App::import("Model", "SiteType");
            $this->SiteType  =    &new SiteType();

            ##fetch data from Project table for listing
            $field='';
            
            //echo $condition; exit;
            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='sponsor_name'){
                $this->Pagination->sortByClass    = 'Sponsor'; ##initaite pagination
            }else if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='project_type_name'){
                    $this->Pagination->sortByClass    = 'ProjectType'; ##initaite pagination
                }else{
                    $this->Pagination->sortByClass    = 'Project'; ##initaite pagination
            }


            $this->Project->bindModel(array('belongsTo'=>array(
            'SiteType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.project_type_id = SiteType.id'
            ),'Sponsor'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.sponsor_id = Sponsor.id'
            )
            )));
            $projectdata=$this->Project->find('all',array("conditions"=>$condition));  

            $this->Pagination->total= count($this->Project->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->Project->bindModel(array('belongsTo'=>array(
            'SiteType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.project_type_id = SiteType.id'
            ),'Sponsor'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.sponsor_id = Sponsor.id'
            )
            )));
          
            $projectdataarr = $this->Project->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            
            ##set project type data in variable
			//pr($projectdataarr);die;
            $this->set("projectdata",$projectdataarr);

            ##project dropdownlist
            $this->projectdropdown();

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '54'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   
        } 
		
		/*
        * Function name          : ownerlist()
        * Description            : This function show all project sponsor's 'listing 
        * @session_check_admin() : This function is defined in app_controller to check the session expiration. 
        * Created On             : 21-9-2011 QUAD TEam         
        */

        function ownerlist()
        {
            ##check active session
            $this->session_check_admin();
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            ##set default selected
            //Configure::write('debug',3 );    

            ## Script used for default pagination
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    
            }    

            $this->Session->delete('sessionprojectid');
            $this->set("selectedprojectid",'0');
            if($this->data){ 

                if($this->data['Admins']['sponsorid'] !='' && $this->data['Admins']['sponsorid'] !='0' ){
                    $sponsorid=$this->data['Admins']['sponsorid'];
                    App::import("Model", "Sponsor");
                    $sponsor =   & new Sponsor();
                    $cond= "Sponsor.delete_status = '0' and Sponsor.id='".$sponsorid."'";
                    $spondata=$sponsor->find('first',array("conditions"=>$cond));  
                    if($spondata){
                        $project_id=$spondata['Sponsor']['project_id'];
                        $this->Session->delete('sessionprojectid');
                        $this->set("selectedprojectid",$project_id);
                        $this->Session->write("sessionprojectid",$project_id);
                        $this->redirect("/admins/projectsponsor");
                    }
                }
            }
            $condition='';
			
            $condition1='';
            $searchkeyword='';        

            ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "(SiteType.project_type_name like '%".addslashes($searchkeyword)."%' OR ";
                $condition .= "Project.project_name like '%".addslashes($searchkeyword)."%' OR ";
                $condition .= "Company.company_name like '%".addslashes($searchkeyword)."%' ) AND ";
            }
            $condition .= "Company.delete_status = '0' AND Project.delete_status = '0' ";
			$order='';
            $limit='';
            $page='';

            App::import("Model", "Sponsor");
            $sponsor =   & new Sponsor();
			
			App::import("Model", "Company");
            $this->Company =   & new Company();    

            ##project listing in dashboard
            App::import("Model", "Project");
            $this->Project =   & new Project();    

            App::import("Model", "SiteType");
            $this->SiteType  =    &new SiteType();

            ##project listing in dashboard
            App::import("Model", "State");
            $this->State =   & new State(); 

            ##fetch data from Project table for listing
            $field='';
           
            //echo $condition; exit;
            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='project_name' ){
                $this->Pagination->sortByClass    = 'Project'; ##initaite pagination
            } else if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='state_name' ){
                    $this->Pagination->sortByClass    = 'State'; ##initaite pagination
                }else if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='project_type_name'){
                        $this->Pagination->sortByClass    = 'SiteType'; ##initaite pagination
                    }else{
                        $this->Pagination->sortByClass    = 'Company'; ##initaite pagination
            }

            // Shift this below condition line no. from  1492
			// By Suman Singh
			/*
			 
			$sponsor->bindModel(array('belongsTo'=>array(
            'Project'=>array(
            'foreignKey'=>false,
            'conditions'=>'Sponsor.id = Project.sponsor_id'
            ),
            'SiteType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.project_type_id = SiteType.id'
            ),
            'State'=>array(
            'foreignKey'=>false,
            'conditions'=>'Sponsor.state = State.state_id'
            )
            )));
            $sponsordata=$sponsor->find('all',array("conditions"=>$condition));  

            $this->Pagination->total= count($this->Project->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
           
			$condition .= "Sponsor.delete_status = '0'";
			$sponsordataarr = $sponsor->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page,  
            'fields' => array('Sponsor.id', 'Sponsor.sponsor_name', 'Sponsor.email', 'Sponsor.city','Sponsor.state', 'Sponsor.active_status','Sponsor.delete_status','Project.id', 'Project.project_name','SiteType.project_type_name', 'State.state_name'),
            'joins' => array( 
            array( 
            'table' => 'projects', 
            'alias' => 'Project', 
            'type' => 'inner', 
            'foreignKey' => false, 
            'conditions'=> array('Project.sponsor_id = Sponsor.id') 
            ), 
            array( 
            'table' => 'states', 
            'alias' => 'State', 
            'type' => 'inner', 
            'foreignKey' => false, 
            'conditions'=> array('State.state_id = Sponsor.state') 
            ), 
            array( 
            'table' => 'site_types', 
            'alias' => 'SiteType', 
            'type' => 'inner', 
            'foreignKey' => false, 
            'conditions'=> array( 'SiteType.id = Project.project_type_id'    ) 
            ) 
            )));
			
			
			$this->Company->bindModel(array('belongsTo'=>array(
            'ProjectOwner'=>array(
            'foreignKey'=>false,
            'conditions'=>'Company.id = ProjectOwner.owner_id'
            ), 
			'Project'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.id = ProjectOwner.project_id'
            ),
            'SiteType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.project_type_id = SiteType.id'
            ),
            'State'=>array(
            'foreignKey'=>false,
            'conditions'=>'Company.state = State.state_id'
            )
            )));
            //$sponsordata = $this->Company->find('all',array("conditions"=>$condition));  
			*/
			
			$aa = $this->Company->find('all',array("conditions"=>$condition, 
			'fields' => array('Company.id'),
			'joins' => array( 
            array( 
            'table' => 'project_owners', 
            'alias' => 'ProjectOwner', 
            'type' => 'inner', 
            'foreignKey' => false, 
            'conditions'=> array('ProjectOwner.owner_id = Company.id') 
            ), 
			array( 
            'table' => 'projects', 
            'alias' => 'Project', 
            'type' => 'inner', 
            'foreignKey' => false, 
            'conditions'=> array('Project.id = ProjectOwner.project_id') 
            ), 
            array( 
            'table' => 'states', 
            'alias' => 'State', 
            'type' => 'left', 
            'foreignKey' => false, 
            'conditions'=> array('State.state_id = Company.state') 
            ), 
            array( 
            'table' => 'site_types', 
            'alias' => 'SiteType', 
            'type' => 'inner', 
            'foreignKey' => false, 
            'conditions'=> array( 'SiteType.id = Project.project_type_id'    ) 
            ) 
            )));
			//pr($aa);
			
            $this->Pagination->total= count($aa);

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
			
			//$condition1 .= "Company.delete_status = '0'";
			//$order1 = 'Company.id DESC';
			$sponsordataarr1 = $this->Company->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page,  
			'fields' => array('Company.id', 'Company.company_name', 'Company.email', 'Company.city','Company.state', 'Company.active_status','Company.delete_status','Project.id', 'Project.project_name','SiteType.project_type_name', 'State.state_name','State.Code'),
            'joins' => array( 
            array( 
            'table' => 'project_owners', 
            'alias' => 'ProjectOwner', 
            'type' => 'inner', 
            'foreignKey' => false, 
            'conditions'=> array('ProjectOwner.owner_id = Company.id') 
            ), 
			array( 
            'table' => 'projects', 
            'alias' => 'Project', 
            'type' => 'inner', 
            'foreignKey' => false, 
            'conditions'=> array('Project.id = ProjectOwner.project_id') 
            ), 
            array( 
            'table' => 'states', 
            'alias' => 'State', 
            'type' => 'left', 
            'foreignKey' => false, 
            'conditions'=> array('State.state_id = Company.state') 
            ), 
            array( 
            'table' => 'site_types', 
            'alias' => 'SiteType', 
            'type' => 'inner', 
            'foreignKey' => false, 
            'conditions'=> array( 'SiteType.id = Project.project_type_id'    ) 
            ) 
            )));
			//echo pr($sponsordataarr1);die;
            ##set project type data in variable
			//pr($sponsordataarr);die;
            //$this->set("projectdata",$sponsordataarr);
            $this->set("projectdata",$sponsordataarr1);

            ##project dropdownlist
            $this->projectdropdown();

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '42'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   
        }
        /*
        * Function name   : login()
        * Description     : This function is used for admin login
        * Created On      : 15-02-11 (09:45pm)
        *
        */
        function login(){

		    $this->layout= '';
            $this->layout= 'admin_layout';
            if(!empty($this->data)) {
                $this->Admin->set($this->data);
                if ($this->Admin->validates()) {
                    $username = $this->data['Admin']['username'];
                    $password = md5($this->data['Admin']['password']);
                    $condition = "username = '$username' and password = '$password' and active_status = '1' and delete_status = '0'";
                    $adminpresent = $this->Admin->find('first', array('conditions' => $condition));
                    // If registered admin, go to admin panel. If not, display message. 
                    if(is_array($adminpresent) && !empty($adminpresent)) {
                        $this->Session->write("Admin",$adminpresent);
						$this->Session->write("UserLoginDetails",$adminpresent);
                        if($this->Session->read("Admin")){
                            $adm = $this->Session->read("Admin");
                            $_SESSION["Admin"] = $adm; 
                            $this->Cookie->write('AdminId',$adm["Admin"]["id"],false, 36000);
                        }
                        $this->redirect('/admins/index');
                    }else{
                        $this->Session->setFlash("Invalid Username/Password.",'default', array('class' => 'errormsg1'));
                        $this->redirect('/admins/login');
                    }    
                }

            }

        }    

        /* ----------------------------------------  BEG OF FORGOT PASSWORD INFO ------------------------------------------------ */
        /*
        * Function name   : forgotpassword()
        * Description     : This function used to to retrive password
        * Created On      : 15-02-11 (10:00Pm)
        *
        */ 

        function forgotpassword()
        { 

            $noterror = true; 
            $errorMessage = "";
            ##layout for forgotpassword page
            $this->layout= 'admin_layout';
            if(!empty($this->data)) {
                $admindata = $this->Admin->findByEmail(addslashes($this->data['Admin']['email']));
                ##check array size
                if(sizeof($admindata['Admin']) == 0) {
                    $errorMessage = "This email address is not registered!";
                    $noterror = false; 
                }
                ##check flag for valid entry
                if($noterror == true) {
                    ## generate new random password
                    $new_password    = $this->Sendemail->genratepassword();
                    $protcted_password  = MD5($new_password);
                    $this->data['Admin']['password'] = $protcted_password;
                    $this->Admin->id = $admindata['Admin']['id'];
                    #save password in admins table
                    $this->Admin->save($this->data);
                    $userName  = $admindata['Admin']['username'];
                    $userEmail = $admindata['Admin']['email'];
                    $firstname = $admindata['Admin']['firstname'];
                    $lastname = $admindata['Admin']['lastname'];
                    #sending mail after successfully updation of password
                    $result = $this->Sendemail->sendmail($userName, $userEmail, $new_password,$firstname,$lastname); 
                    if($result == true) {
                        $this->Session->setFlash("Your new initial password is send to your e-mail address.",'default', array('class' => 'successmsg'));
                        $this->redirect('/admins/forgotpassword/');
                    }else{
                        $this->Session->setFlash("Unable to send mail. Please try again.",'default', array('class' => 'errormsg1'));
                    }
                }else{
                    $this->Session->setFlash($errorMessage,'default', array('class' => 'errormsg1'));
                } 
            }
        }

        /* ----------------------------------------  END OF FORGOT PASSWORD INFO ------------------------------------------------ */        
        /*    
        *     function    : ajaxpwdcheck($pwd)
        *     params      : $pwd :this contain the password entered the admin.
        *     Description : This function checks whether the password  entered by user already exists in database or not.
        *     Created On   : 15-02-11 (11:55pm)
        */


        function ajaxpwdcheck($pwd)
        {
            $this->layout=false;
            $pass = md5($pwd);
            $count = $this->Admin->findCount("password ='$pass'") ;
            $this->set('paswd', $count);    
            if($count == 1)
            {

                //$this->Session->setFlash('Admin Password is Matched','default',array('class' => 'successmsg'));

            }

        }

        /*
        * Function name   : addprojecttype()
        * Description : This function used to add project type
        * Created On      : 16-02-11 (01:45am)
        *
        */     
        function addprojecttype(){
            ##check admin session live or not
            $this->session_check_admin();

            ##import project type model for processing
            App::import("Model", "SiteType");
            $this->SiteType =   & new SiteType();
            /*App::import("Model", "SiteType");
            $this->SiteType =   & new SiteType();*/
            ##check empty data
            if(!empty($this->data)) {
                #set the posted data
               // pr($this->data);die;
                $this->SiteType->set($this->data);
                #check server side validation
                $this->SiteType->invalidFields();
                $ptname = $this->data['SiteType']['project_type_name'];

                $condition = "project_type_name = '".$ptname."'    AND  delete_status = '0'";
                $ptdata = $this->SiteType->find('all',array("conditions"=>$condition));

                if(!$ptdata){
                    $ptname = $this->data['SiteType']['project_type_name'];

                    $condition = "project_type_name = '".$ptname."'    AND  delete_status = '0'";
                    $ptdata = $this->SiteType->find('all',array("conditions"=>$condition));

                    if(!$ptdata){
                        #save data in project type table
                        if($this->SiteType->Save($this->data)){

                            $new_projecttype_id = $this->SiteType->getLastInsertId();
                            if(isset($this->data['ProjectType']['maxnumbercomment'])>1)
                            {            

                                App::import("Model", "ProjectCommentType");
                                $this->ProjectCommentType =   & new ProjectCommentType();                        
                                for($i=0;$i<=$this->data['ProjectType']['maxnumbercomment'];$i++){                    
                                    if($this->data['ProjectType']['commenttypeoption'.$i]>0){
                                        unset($this->data['ProjectCommentType']);
                                        $this->ProjectCommentType->create();
                                        $this->data['ProjectCommentType']['sequence_id']=$i;
                                        $this->data['ProjectCommentType']['comment_type_id']=$this->data['ProjectType']['commenttypeoption'.$i];
                                        $this->data['ProjectCommentType']['project_type_id']=$new_projecttype_id;
                                        $this->ProjectCommentType->Save($this->data['ProjectCommentType']);
                                    }                    
                                }
                            }

                            $this->Session->setFlash('Project Type added Successfully.','default', array('class' => 'successmsg'));
                            if(isset($this->data['Action']['redirectpage'])){

                                $sessdata=$this->Session->read('newsortingby');
                                $this->redirect('/'.$sessdata);

                            }else{

                                $this->redirect('/admins/addprojecttype');

                            }
                        }else{
                            $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                        }

                    }else{
                        $this->Session->setFlash('Project Type with same name already exists.','default',array('class' => 'msgTXt'));
                    }

                    //$this->redirect('/admins/addprojecttype/');
                }

            }

        }

        /*
        * Function name   : editprojecttype()
        * Description : This function used to add project type
        * Created On      : 16-02-11 (01:45am)
        *
        */     
        function editprojecttype($recid){

            //Configure::write('debug', 2);
            ##check admin session live or not
            $this->session_check_admin();
            $this->set('prid',$recid);
            ##import project type model for processing
            App::import("Model", "SiteType");
            $this->SiteType =   & new SiteType();

            ##check empty data
            if(!empty($this->data)) {
                #set the posted data
                //print_r($this->data);die;
                $this->SiteType->set($this->data);
                #check server side validation
                $this->SiteType->invalidFields();
                #save data in project type table
                $recid  = $this->data['SiteType']['id'];
                $ptname  = $this->data['SiteType']['project_type_name'];
                $condition = "project_type_name = '".$ptname."' AND id !=$recid AND  delete_status = '0'";
                $ptdata = $this->SiteType->find('all',array("conditions"=>$condition));
                if(!$ptdata){
                    if($recid !=''){

                        if($this->SiteType->Save($this->data)){

                            $typename=$this->data['SiteType']['project_type_name'];

                            $dataprojectupdate=array("ProjectType.defaultdeliverydays"=>$this->data['SiteType']['defaultdeliverydays'],
                            "ProjectType.notes"=>"'".$this->data['SiteType']['notes']."'",
                            "ProjectType.project_type_name"=>"'".$this->data['SiteType']['project_type_name']."'"
                            );
                            $conditionupdate=array('ProjectType.site_type_id'=>$recid);
                            App::import("Model", "ProjectType");
                            $this->ProjectType =   & new ProjectType();
                            $this->ProjectType->updateAll($dataprojectupdate,$conditionupdate);
                            if(true){





                                if($this->data['SiteType']['maxnumbercomment']>1)
                                {

                                    App::import("Model", "ProjectCommentType");
                                    $this->ProjectCommentType =   & new ProjectCommentType();


                                    for($i=0;$i<=$this->data['SiteType']['maxnumbercomment'];$i++){    

                                        if($this->data['SiteType']['commenttypeoption'.$i]>0){
                                            unset($this->data['ProjectCommentType']);
                                            $this->ProjectCommentType->create();            

                                            $comment_type_id = $this->ProjectCommentType->find('first',array("conditions"=>"ProjectCommentType.project_type_id=$recid and ProjectCommentType.sequence_id=".$i." and ProjectCommentType.active_status='1' and ProjectCommentType.delete_status='0'", 'fields' =>"id"));    
                                            if(is_array($comment_type_id) && !empty($comment_type_id)) 
                                            {
                                                $this->data['ProjectCommentType']['id']=$comment_type_id['ProjectCommentType']['id'];
                                            }
                                            $this->data['ProjectCommentType']['sequence_id']=$i;
                                            $this->data['ProjectCommentType']['comment_type_id']=$this->data['SiteType']['commenttypeoption'.$i];
                                            $this->data['ProjectCommentType']['project_type_id']=$this->data['SiteType']['id'];
                                            $this->ProjectCommentType->Save($this->data['ProjectCommentType']);
                                        }                    
                                    }
                                }
                                $this->Session->setFlash('Project Type updated Successfully.','default', array('class' => 'successmsg'));
                            } else{
                                $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                            }
                        }else{
                            $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                        }
                    }else{
                        $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));
                    }
                }else{

                    $this->Session->setFlash('Project Type with same name already exists.','default',array('class' => 'msgTXt'));
                }

                if(isset($this->data['Action']['redirectpage'])){

                    $sessdata=$this->Session->read('newsortingby');
                    $this->redirect('/'.$sessdata);
                }else
                {
                    $this->redirect("/admins/editprojecttype/$recid");
                }

            }
            $this->SiteType->id = $recid;
            $this->data = $this->SiteType->read();
            $this->set("ProjectTypeId", $recid);


            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '58'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

        }    
        

        /*
        * Function name   : projecttype()
        * Description : This function used to add project type
        * Created On      : 16-02-11 (02:45am)
        *
        */ 
        function projecttype(){
		
            ##check admin session live or not
            $this->session_check_admin();

            ##Used for default Pagination.

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }

            ##import project type model for processing
            App::import("Model", "SiteType");
            $this->SiteType =   & new SiteType();    
            ##fetch data from project type table for listing
            $field='';
            $condition = "delete_status = '0'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (project_type_name LIKE '%".$searchkeyword."%' OR notes  LIKE '%".$searchkeyword."%' )";
            }

            $this->Pagination->sortByClass    = 'SiteType'; ##initaite pagination 

            $this->Pagination->total= count($this->SiteType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $projecttypedata = $this->SiteType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
            //print_r($projecttypedata);

            $this->set("projecttypedata",$projecttypedata);    


            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '39'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

        }            
        function pricingtype(){

            ##check admin session live or not
            $this->session_check_admin();
            if(isset($_SERVER['QUERY_STRING']))
            {
                if(isset($_GET['sortBy'])) $sortby=$_GET['sortBy'];
                if(isset($_GET['direction'])) $sorttype=$_GET['direction'];
            }

            ##fetch data from project type table for listing
            $field='';
            $condition = "PricingType.delete_status = '0'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (pricing_type_name LIKE '%".$searchkeyword."%' OR ProductType.product_type_name  LIKE '%".$searchkeyword."%' )";
            }

            $this->Pagination->sortByClass    = 'PricingType'; ##initaite pagination 

            $this->PricingType->bindModel(array('belongsTo'=>array(
            'ProductType'=>array(
            'foreignKey'=>false,
            'conditions'=>'PricingType.product_id = ProductType.id'
            )
            )));

            $this->Pagination->total= count($this->PricingType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            // if sort by company type name
            if(isset($sortby) && $sortby=="product_type_name"){
                $order="ProductType.product_type_name ";
                if(isset($sorttype)){
                    $order.=" ".$sorttype;
                }else{
                    $order.=" ASC";  
                }
            }
            $this->PricingType->bindModel(array('belongsTo'=>array(
            'ProductType'=>array(
            'foreignKey'=>false,
            'conditions'=>'PricingType.product_id = ProductType.id'
            )
            )));


            $pricingtypedata = $this->PricingType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            for($i=0;$i<count($pricingtypedata);$i++)
            {
                $pricingtypedata[$i]['PricingType']['product_type_name']=$this->getproductnamebyid($pricingtypedata[$i]['PricingType']['product_id']);
            }

            $this->set("pricingtypedata",$pricingtypedata);    
        }   


        function addpricingtype(){


            ##check admin session live or not
            $this->session_check_admin();
            $cont="ProductType.delete_status=0 and ProductType.active_status=1";
            $product_types=$this->ProductType->find('list',array('fields'=>array('id','product_type_name'),'conditions' => array('ProductType.delete_status=0')));

            $this->set('product_types',$product_types);

            $cont="PricingType.delete_status=0 and PricingType.active_status=1";
            $copy_pricings=$this->PricingType->find('list',array('fields'=>array('id','pricing_type_name'),'conditions' => array('PricingType.delete_status=0')));

            $this->set('copy_pricings',$copy_pricings);

            //STEP: Set curretn url
            $current_url= $_SERVER['HTTP_HOST'];
            $this->set('current_url',$current_url);


            ##check empty data
            if(!empty($this->data)) {
                #set the posted data
                $this->PricingType->set($this->data);
                #check server side validation
                $this->PricingType->invalidFields();

                $err="";



                if($err=="")
                {

                    $ptname = $this->data['PricingType']['pricing_type_name'];

                    $rel_type = $this->data['PricingType']['relation_type'];
                    $waive_setup = $this->data['PricingType']['waive_setup'];
                    $count_quantity = $this->data['PricingType']['count_quantity'];
                    $product_id = $this->data['PricingType']['product_id'];

                    $condition = "pricing_type_name = '".$ptname."'    AND  delete_status = '0'";
                    $ptdata = $this->PricingType->find('all',array("conditions"=>$condition));

                    if(!$ptdata)
                    {

                        #save data in project type table
                        $this->PricingType->Save($this->data);
                        $pricing_id=$this->PricingType->getLastInsertId();

                        $cq=$this->data['PricingType']['coin_quantity'];
                        $ppu=$this->data['PricingType']['price_per_unit'];
                        $ao=$this->data['PricingType']['add_opts'];
                        $qr=$this->data['PricingType']['qr_per_unit'];
                        $serial=$this->data['PricingType']['serial_per_unit'];
                        $barcode=$this->data['PricingType']['barcode_per_unit'];
                        $uv=$this->data['PricingType']['uv_per_unit'];
                        $photo=$this->data['PricingType']['photo_per_unit'];
                        $rfid=$this->data['PricingType']['rfid_per_unit'];

                        for($i=0;$i<count($cq);$i++)
                        {
                            $coin_quantity=$cq[$i];
                            $price_per_unit=$ppu[$i];
                            $add_opts="";
                            $qr_per_unit=$qr[$i];
                            $serial_per_unit=$serial[$i];
                            $barcode_per_unit=$barcode[$i];
                            $uv_per_unit=$uv[$i];
                            $photo_per_unit=$photo[$i];
                            $rfid_per_unit=$rfid[$i];


                            $this->PricingType->query("insert into pricing_coin_quantities values('',$pricing_id,$product_id,'$coin_quantity','$price_per_unit','$add_opts','$qr_per_unit','$serial_per_unit','$barcode_per_unit','$uv_per_unit','$photo_per_unit','$rfid_per_unit')");

                        }


                        if($this->data['PricingType']['price_per_unit']['setup'])
                            $price_per_unit_setup=$this->data['PricingType']['price_per_unit']['setup'];
                        else
                            $price_per_unit_setup="";

                        if($this->data['PricingType']['add_opts']['setup'])
                            $add_opts_setup=$this->data['PricingType']['add_opts']['setup'];
                        else
                            $add_opts_setup="";

                        if($this->data['PricingType']['qr_per_unit']['setup'])
                            $qr_per_unit_setup=$this->data['PricingType']['qr_per_unit']['setup'];
                        else
                            $qr_per_unit_setup="";

                        if($this->data['PricingType']['serial_per_unit']['setup'])
                            $serial_per_unit_setup=$this->data['PricingType']['serial_per_unit']['setup'];
                        else
                            $serial_per_unit_setup="";

                        if($this->data['PricingType']['barcode_per_unit']['setup'])
                            $barcode_per_unit_setup=$this->data['PricingType']['barcode_per_unit']['setup'];
                        else
                            $barcode_per_unit_setup="";

                        if($this->data['PricingType']['uv_per_unit']['setup'])
                            $uv_per_unit_setup=$this->data['PricingType']['uv_per_unit']['setup'];
                        else
                            $uv_per_unit_setup="";

                        if($this->data['PricingType']['photo_per_unit']['setup'])
                            $photo_per_unit_setup=$this->data['PricingType']['photo_per_unit']['setup'];
                        else
                            $photo_per_unit_setup="";

                        if($this->data['PricingType']['rfid_per_unit']['setup'])
                            $rfid_per_unit_setup=$this->data['PricingType']['rfid_per_unit']['setup'];
                        else
                            $rfid_per_unit_setup="";


                        $this->PricingType->query("insert into pricing_setups values('',$pricing_id,$product_id,'$price_per_unit_setup','$add_opts_setup','$qr_per_unit_setup','$serial_per_unit_setup','$barcode_per_unit_setup','$uv_per_unit_setup','$photo_per_unit_setup','$rfid_per_unit_setup')");

                        $this->Session->setFlash('Pricing Type added Successfully.','default', array('class' => 'successmsg'));
                        if($this->data['Action']['redirectpage'])
                            $this->redirect('/admins/pricingtype/');
                        else
                            $this->redirect('/admins/addpricingtype/');


                    }
                    else
                    {
                        $this->Session->setFlash('Pricing Type with same name already exists.','default',array('class' => 'msgTXt'));
                        $this->redirect('/admins/addpricingtype/');
                    }



                }
                else
                {
                    $this->Session->setFlash($err,'default',array('class' => 'errormsg'));
                }
            }

        } 


        function editpricingtype($recid=null){


            ##check admin session live or not
            $this->session_check_admin();
            $cont="ProductType.delete_status=0 and ProductType.active_status=1";
            $product_types=$this->ProductType->find('list',array('fields'=>array('id','product_type_name')));
            $this->set('product_types',$product_types);

            $get_product_id=$this->PricingType->query("select product_id from pricing_types where id=$recid");
            $product_id=$get_product_id[0]['pricing_types']['product_id'];  
            $this->set('product_id',$product_id);

            /********* get coin quantity and per units *******/
            $coin_units=$this->ProductType->query("select * from pricing_coin_quantities where pricing_id=$recid and product_id=$product_id");
            $this->set("coin_units", $coin_units);



            /********* get setups per units *******/
            $setups=$this->ProductType->query("select * from pricing_setups where pricing_id=$recid and product_id=$product_id");
            $this->set("setups", $setups);




            ##check empty data
            if(isset($this->data['Action']['redirectpage']) || isset($this->data['Action']['noredirection'])) {

                //$product_id=$this->data['PricingType']['product_id'];  

                #set the posted data
                $this->PricingType->set($this->data);
                #check server side validation
                $this->PricingType->invalidFields();

                $err="";



                if($err=="")
                {

                    $id = $this->data['PricingType']['id'];
					if(isset($this->data['PricingType']['pricing_type_name'])){
	                    $ptname = $this->data['PricingType']['pricing_type_name'];
					}

                    $rel_type = $this->data['PricingType']['relation_type'];
                    $waive_setup = $this->data['PricingType']['waive_setup'];
                    $count_quantity = $this->data['PricingType']['count_quantity'];
                    $product_id = $this->data['PricingType']['set_product_id'];
                    $this->data['PricingType']['product_id']=$product_id;

                    //$condition = "pricing_type_name = '".$ptname."'    AND  delete_status = '0'";
                    //$ptdata = $this->PricingType->find('all',array("conditions"=>$condition));

                    #save data in project type table
                    $this->PricingType->Save($this->data);
                    $pricing_id=$id;            //$this->PricingType->getLastInsertId();

                    $cq_id=$this->data['PricingType']['coin_quantity_id'];  
					//main id of a single record in pricing_coin_quantities table
                    $cq=$this->data['PricingType']['coin_quantity'];
                    $ppu=$this->data['PricingType']['price_per_unit'];
					if(isset($this->data['PricingType']['add_opts'])){
	                    $ao=$this->data['PricingType']['add_opts'];
					}
                    $qr=$this->data['PricingType']['qr_per_unit'];
                    $serial=$this->data['PricingType']['serial_per_unit'];
                    $barcode=$this->data['PricingType']['barcode_per_unit'];
                    $uv=$this->data['PricingType']['uv_per_unit'];
                    $photo=$this->data['PricingType']['photo_per_unit'];
                    $rfid=$this->data['PricingType']['rfid_per_unit'];

                    for($i=0;$i<count($cq);$i++)
                    {
                        $id=$cq_id[$i];
                        $coin_quantity=$cq[$i];
                        $price_per_unit=$ppu[$i];
                        $add_opts="";
                        $qr_per_unit=$qr[$i];
                        $serial_per_unit=$serial[$i];
                        $barcode_per_unit=$barcode[$i];
                        $uv_per_unit=$uv[$i];
                        $photo_per_unit=$photo[$i];
                        $rfid_per_unit=$rfid[$i];


                        $check=$this->PricingType->query("select * from pricing_coin_quantities where id=$id");
                        if($check['0']['pricing_coin_quantities'])
                        {
                            $this->PricingType->query("update pricing_coin_quantities set coin_quantity='$coin_quantity',price_per_unit='$price_per_unit',additional_options='$add_opts',qr_per_unit='$qr_per_unit',serial_per_unit='$serial_per_unit',barcode_per_unit='$barcode_per_unit',uv_per_unit='$uv_per_unit',photo_per_unit='$photo_per_unit',rfid_per_unit='$rfid_per_unit' where id=$id");
                        }
                        else
                            $this->PricingType->query("insert into pricing_coin_quantities values('',$pricing_id,$product_id,'$coin_quantity','$price_per_unit','$add_opts','$qr_per_unit','$serial_per_unit','$barcode_per_unit','$uv_per_unit','$photo_per_unit','$rfid_per_unit')");

                    }


                    if($this->data['PricingType']['price_per_unit']['setup'])
                        $price_per_unit_setup=$this->data['PricingType']['price_per_unit']['setup'];
                    else
                        $price_per_unit_setup="";

                    if(isset($this->data['PricingType']['add_opts']['setup']))
                        $add_opts_setup=$this->data['PricingType']['add_opts']['setup'];
                    else
                        $add_opts_setup="";

                    if($this->data['PricingType']['qr_per_unit']['setup'])
                        $qr_per_unit_setup=$this->data['PricingType']['qr_per_unit']['setup'];
                    else
                        $qr_per_unit_setup="";

                    if($this->data['PricingType']['serial_per_unit']['setup'])
                        $serial_per_unit_setup=$this->data['PricingType']['serial_per_unit']['setup'];
                    else
                        $serial_per_unit_setup="";

                    if($this->data['PricingType']['barcode_per_unit']['setup'])
                        $barcode_per_unit_setup=$this->data['PricingType']['barcode_per_unit']['setup'];
                    else
                        $barcode_per_unit_setup="";

                    if($this->data['PricingType']['uv_per_unit']['setup'])
                        $uv_per_unit_setup=$this->data['PricingType']['uv_per_unit']['setup'];
                    else
                        $uv_per_unit_setup="";

                    if($this->data['PricingType']['photo_per_unit']['setup'])
                        $photo_per_unit_setup=$this->data['PricingType']['photo_per_unit']['setup'];
                    else
                        $photo_per_unit_setup="";

                    if($this->data['PricingType']['rfid_per_unit']['setup'])
                        $rfid_per_unit_setup=$this->data['PricingType']['rfid_per_unit']['setup'];
                    else
                        $rfid_per_unit_setup="";


                    $check=$this->PricingType->query("select * from pricing_setups where  pricing_id=$pricing_id and product_id=$product_id");
                    if($check['0']['pricing_setups'])
                    {
                        $this->PricingType->query("update pricing_setups set price_per_unit='$price_per_unit_setup',additional_options='$add_opts_setup',qr_per_unit='$qr_per_unit_setup' , serial_per_unit='$serial_per_unit_setup',barcode_per_unit='$barcode_per_unit_setup',uv_per_unit='$uv_per_unit_setup',photo_per_unit='$photo_per_unit_setup',rfid_per_unit='$rfid_per_unit_setup' where pricing_id=$pricing_id and product_id=$product_id");
                    }
                    else
                        $this->PricingType->query("insert into pricing_setups values('',$pricing_id,$product_id,'$price_per_unit_setup','$add_opts_setup','$qr_per_unit_setup','$serial_per_unit_setup','$barcode_per_unit_setup','$uv_per_unit_setup','$photo_per_unit_setup','$rfid_per_unit_setup')");




                    $this->Session->setFlash('Product Type added Successfully.','default', array('class' => 'successmsg'));


                    if($this->data['Action']['redirectpage'])
                        $this->redirect('/admins/pricingtype/');
                    else
                        $this->redirect('/admins/editpricingtype/'.$pricing_id);

                }
                else
                {
                    $this->Session->setFlash($err,'default',array('class' => 'errormsg'));
                }
            }

            /***** get all data for recid ****/

            $this->PricingType->id = $recid;
            $this->data = $this->PricingType->read();
            $this->set("PricingTypeId", $recid);



        } 



        /*
        * Function name   : addcommtask()
        * Description 	  : This function used to add commom task
        * Created On      : 16-02-11 (01:45am)
        *
        */     
        function addcommtask($opr=null,$recid=''){
            //Configure::write('debug', 2);
            ##check admin session live or not

            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $this->set('projectid',$projectid);        
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import communication Task model for processing
            App::import("Model", "CommunicationTask");
            $this->CommunicationTask =   & new CommunicationTask();

            ##check empty data
            $current_domain= $_SERVER['HTTP_HOST']; 
            $this->set("current_domain",$current_domain);

            $projectDetails=$this->getprojectdetails($projectid); 
            $this->set('fromemail',$projectDetails['Sponsor']['email']);
             
            if(!empty($this->data)) {   
               $task_id=null;
               if($this->data['CommunicationTask']['id']){
                      $task_id=$this->data['CommunicationTask']['id']; 
               }
             
              $uniqueTaskName = $this->CommunicationTask->isUniqueTaskName($this->data['CommunicationTask']['task_name'],$projectid,$task_id );  
              if ($uniqueTaskName == false) {
                    $this->Session->setFlash('Communication Task  with same name already exists.','default',array('class' => 'msgTXt'));
              }else{
                  // STEP : SAVE COMMUNICATION TASK  
                  $rec_id = $this->CommunicationTask->saveEmailTask($this->data['CommunicationTask'], $projectid, '0');
                  
                  if($rec_id > 0 ){
                        $this->Session->setFlash('Communication Task added Successfully.','default', array('class' => 'successmsg'));
                                                  
                        if(isset($this->data['Action']['redirectpage'])){
                               $this->redirect('/admins/commtasklist'); 
                        }else
                        {
                            $this->redirect('/admins/addcommtask/'.$rec_id);
                        }

                    }else{
                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));     
                    }
             }   
              
            }

            $this->customtemplatelisting($projectid);
            $this->commenttypelisting($projectid);        

            # set help condition

            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '14'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);            
            if($recid!=''){
                $this->CommunicationTask->id = $recid;
                $this->set('taskrecid', $recid);   
                $this->data = $this->CommunicationTask->read();
				$this->data['CommunicationTask']['task_startdate']=date("m-d-Y", strtotime($this->data['CommunicationTask']['task_startdate']));
                if($this->data['CommunicationTask']['task_end_by_date']!="" && $this->data['CommunicationTask']['task_end']=="by_date"){
                    $this->data['CommunicationTask']['task_end_by_date']=date("m-d-Y", strtotime($this->data['CommunicationTask']['task_end_by_date']));
                }
                
                 if($this->data['CommunicationTask']['company_type']=="" && $this->data['CommunicationTask']['contact_type']==""){
                    $is_contactdisabled="1";
                    $is_memebrdisabled="0";
                }else{
                    $is_contactdisabled="0";
                    $is_memebrdisabled="0";
                }
                
                
				
				$sel_email_temp=$this->data['CommunicationTask']['email_template_id'];
				
				
                $sel_subscription_types=$this->data['CommunicationTask']['subscription_type'];
                $sel_member_types=$this->data['CommunicationTask']['member_type'];
                $sel_donation_levels=$this->data['CommunicationTask']['donation_level'];
                $sel_days_since=$this->data['CommunicationTask']['member_days_since'];
                $sel_country=$this->data['CommunicationTask']['member_country'];
                $sel_state=$this->data['CommunicationTask']['member_state'];
                $sel_event=$this->data['CommunicationTask']['event_id'];
                $sel_event_rsvp=$this->data['CommunicationTask']['event_rsvp_type'];
                $sel_comment_typeid=$this->data['CommunicationTask']['relatesto_commenttype_id'];
                $sel_social_networks=$this->data['CommunicationTask']['social_network_members'];
                $sel_non_networks=$this->data['CommunicationTask']['non_network_members'];
                $sel_companytypeid=$this->data['CommunicationTask']['company_type'];
                $sel_contactypeid=$this->data['CommunicationTask']['contact_type'];
                $sel_recur_pattern=$this->data['CommunicationTask']['recur_pattern'];
                
            }else{
                $sel_email_temp="";
                $sel_subscription_types="0";
                $sel_member_types="";
                $sel_donation_levels="";
                $sel_days_since="";
                $sel_country="254";
                $sel_state="";
                $sel_event="";
                $sel_event_rsvp="";
                $sel_comment_typeid="0";
                $sel_social_networks="";
                $sel_non_networks="";
                $sel_companytypeid="";
                $sel_contactypeid="";                
                $sel_recur_pattern="Daily";
                
                $is_contactdisabled="0";
                $is_memebrdisabled="0";
                
            }

            $this->set('sel_email_temp',$sel_email_temp);
            $this->set('sel_subscription_types',$sel_subscription_types);
            $this->set('sel_member_types',$sel_member_types);
            $this->set('sel_donation_levels',$sel_donation_levels);
            $this->set('sel_days_since',$sel_days_since);
            $this->set('sel_country',$sel_country);
            $this->set('sel_state',$sel_state);
            $this->set('sel_event',$sel_event);
            $this->set('sel_event_rsvp',$sel_event_rsvp);
            $this->set('sel_comment_typeid',$sel_comment_typeid);
            $this->set('sel_social_networks',$sel_social_networks);
            $this->set('sel_non_networks',$sel_non_networks);
            $this->set('sel_companytypeid',$sel_companytypeid);
            $this->set('sel_contactypeid',$sel_contactypeid);
            $this->set('sel_recur_pattern',$sel_recur_pattern);
            
            $this->set('is_contactdisabled',$is_contactdisabled);
            $this->set('is_memebrdisabled',$is_memebrdisabled);
            
            # set help condition   
            // Set memeber types array
			//print_r($this->getMemberTypesListByProject($projectid, true));
			//die("sunil");
            
			
			  App::import("Model", "MemberType");
            $this->MemberType =   & new MemberType();               
          //   if(!empty($this->data))
         //   {      
         //       $searchkey=$this->data['Admins']['searchkey'];
         //   }else{
         //       $searchkey="";
         //   }
           // $condMemberTypes=$this->MemberType->getMemberTypesByProjectCondition($searchkey);
          //  $field='';
          ////  $this->Pagination->sortByClass    = 'MemberType'; ##initaite pagination 
           
           // $this->Pagination->total= count($this->MemberType->getMemberTypesByProject($condMemberTypes));    
           // list($order,$limit,$page) = $this->Pagination->init($condMemberTypes,$field);            
           // $membertypelist = $this->MemberType->getMemberTypesByProject($condMemberTypes,$order, $limit, $page);

            ##set Coinset data in variable            
          //  $this->set("member_types",$membertypelist);
			
			
			
			$this->set('member_types',$this->MemberType->find('list',array('fields' =>array('MemberType.id','MemberType.member_type')) ));
			//  $this->set("projectmembertypes",$projectmembertypes);
          // 
           //Set donation levles array 
            $this->set('donation_levels',$this->getDonationLevelsListByProject($projectid));
            
            // Set Subscription Type array
            $this->set('subscription_types',$this->getSubscriptionTypesArray());
            
           // Set Dasy Since  array
            $this->set('days_since',$this->getDaysSinceArray());       
            
            // Set Event RSVP array
            $this->set('event_rsvp',$this->getEventRSVPArray());  
            //Set Social Naetworks Array     
            $this->set('social_networks',$this->getSocialNetworkArray());       

            //Set Recur Pattern Array     
            $this->set('recur_pattern',$this->getRecurPatternkArray());  
            
             //Get Event Drop Down
            $this->getEventDropDownListByProjetcID($projectid); 
            
            //Get Company Type Drop Down
            $this->companytypedropdown($projectid); 
            
            //Get Company Type Drop Down   
            $contacttypedropdown =$this->contacttypedropdown($projectid);    
			$this->set('contacttypedropdown',$contacttypedropdown);
              
           ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();
        }
        
        
        
        function event_task($rec_event_id='',$recid=''){

            //Configure::write('debug', 2);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = '1';
            $this->set('projectid',$projectid);        
            ##import communication Task model for processing
            App::import("Model", "CommunicationTask");
            $this->CommunicationTask =   & new CommunicationTask();
            $this->set('rec_event_id',$rec_event_id);              
            ##check empty data
            $current_domain= $_SERVER['HTTP_HOST']; 
            $this->set("current_domain",$current_domain);			            
            if(!empty($this->data)) {   
               $task_id=null;
               if(isset($this->data['CommunicationTask']['id'])){
                      $task_id=$this->data['CommunicationTask']['id']; 
            }
             
            $uniqueTaskName = $this->CommunicationTask->isUniqueTaskName($this->data['CommunicationTask']['task_name'],$projectid,$task_id);  
            if ($uniqueTaskName == false) {
                   $this->Session->setFlash('Task  with same name already exists.','default',array('class' => 'msgTXt'));
            }else{
                  
                  
                  if($this->data['CommunicationTask']['rec_event_id']=="")
                    $this->data['CommunicationTask']['rec_event_id'] = $rec_event_id;			
                  
                  $this->data['CommunicationTask']['send_event_invitation']="1";
				// $this->pl($this->data['CommunicationTask']);
                   $rec_id = $this->CommunicationTask->saveEmailTask($this->data['CommunicationTask'], $projectid, '0');
                  
                  if($rec_id > 0 ){
                        $this->Session->setFlash('Event Task added Successfully.','default', array('class' => 'successmsg'));                         
                        if(isset($this->data['Action']['redirectpage'])){
                             	$this->redirect(array('controller'=>'admins','action'=>'eventtasklist',$rec_event_id)); 
                        }else{
								$this->redirect(array('controller'=>'admins','action'=>'event_task',$rec_event_id)); 
                        }
                  }else{
                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));     
                  }
             }   
              
            }

            $this->customtemplatelisting($projectid);
            $this->commenttypelisting($projectid);        
			$this->set("hlpdata",$this->getHelpContent(14));	
            if($recid!=''){
                $this->CommunicationTask->id = $recid;
                $this->set('taskrecid', $recid);   
                $this->data = $this->CommunicationTask->read();
				//$this->pl($this->data);
                $this->set("tdata",$this->data);
                $this->data['CommunicationTask']['task_startdate']=date("m-d-Y", strtotime($this->data['CommunicationTask']['task_startdate']));
                if($this->data['CommunicationTask']['task_end_by_date']!="" && $this->data['CommunicationTask']['task_end']=="by_date"){
                    $this->data['CommunicationTask']['task_end_by_date']=date("m-d-Y", strtotime($this->data['CommunicationTask']['task_end_by_date']));
                }
                
                 if($this->data['CommunicationTask']['company_type']=="" && $this->data['CommunicationTask']['contact_type']==""){
                    $is_contactdisabled="1";
                    $is_memebrdisabled="0";
                }else{
                    $is_contactdisabled="0";
                    $is_memebrdisabled="0";
                }
                
                $sel_email_temp=$this->data['CommunicationTask']['email_template_id'];
                $sel_subscription_types=$this->data['CommunicationTask']['subscription_type'];
                $sel_member_types=$this->data['CommunicationTask']['member_type'];
                $sel_donation_level=$this->data['CommunicationTask']['donation_level'];
                $sel_days_since=$this->data['CommunicationTask']['member_days_since'];
                $sel_country=$this->data['CommunicationTask']['member_country'];
                $sel_state=$this->data['CommunicationTask']['member_state'];
                $sel_event=$this->data['CommunicationTask']['event_id'];
                $sel_event_rsvp=$this->data['CommunicationTask']['event_rsvp_type'];
                $sel_comment_typeid=$this->data['CommunicationTask']['relatesto_commenttype_id'];
                $sel_social_networks=$this->data['CommunicationTask']['social_network_members'];
                $sel_non_networks=$this->data['CommunicationTask']['non_network_members'];
                $sel_companytypeid=$this->data['CommunicationTask']['company_type'];
                $sel_contactypeid=$this->data['CommunicationTask']['contact_type'];
                $sel_recur_pattern=$this->data['CommunicationTask']['recur_pattern'];
				$sel_event_id =$this->data['CommunicationTask']['rec_event_id'];                
                $sel_activestatus=$this->data['CommunicationTask']['active_status'];
				$member_zipcode_from = $this->data['CommunicationTask']['member_zipcode_from'];
                
            }else           
            {
                $sel_email_temp="";
                $sel_subscription_types="0";
                $sel_member_types="";
                $sel_donation_level="";
                $sel_days_since="";
                $sel_country="254";
                $sel_state="";
                $sel_event="";
                $sel_event_rsvp="";
                $sel_comment_typeid="0";
                $sel_social_networks="";
                $sel_non_networks="";
                $sel_companytypeid="";
                $sel_contactypeid="";                
                $sel_recur_pattern="Daily";
                
                $is_contactdisabled="0";
                $is_memebrdisabled="0";
                $sel_activestatus ='0';
                
            }
            $this->set('sel_email_temp',$sel_email_temp);
            $this->set('sel_subscription_types',$sel_subscription_types);
            $this->set('sel_member_types',$sel_member_types);
            $this->set('sel_donation_level',$sel_donation_level);
            $this->set('sel_days_since',$sel_days_since);
            $this->set('sel_country',$sel_country);
            $this->set('sel_state',$sel_state);
            $this->set('sel_event',$sel_event);
            $this->set('sel_event_rsvp',$sel_event_rsvp);
            $this->set('sel_comment_typeid',$sel_comment_typeid);
            $this->set('sel_social_networks',$sel_social_networks);
            $this->set('sel_non_networks',$sel_non_networks);
            $this->set('sel_companytypeid',$sel_companytypeid);
            $this->set('sel_contactypeid',$sel_contactypeid);
            $this->set('sel_recur_pattern',$sel_recur_pattern);            
            $this->set('is_contactdisabled',$is_contactdisabled);
            $this->set('is_memebrdisabled',$is_memebrdisabled);
            $this->set('$sel_event_id',$sel_event_id);
            $this->set('member_zipcode_from',$member_zipcode_from);
            # set help condition   
            // Set memeber types array
            $this->set('member_types',$this->getMemberTypes(true));
            
            $this->set('donation_levels',$this->getDonationLevelsListByProject($projectid));
            
            // Set Subscription Type array
            $this->set('subscription_types',$this->getSubscriptionTypesArray());
            
           // Set Dasy Since  array
            $this->set('days_since',$this->getDaysSinceArray());       
            
            // Set Event RSVP array
            $this->set('event_rsvp',$this->getEventRSVPArray());  
            //Set Social Naetworks Array     
            $this->set('social_networks',$this->getSocialNetworkArray());       

            //Set Recur Pattern Array     
            $this->set('recur_pattern',$this->getRecurPatternkArray());  
            
             //Get Event Drop Down
            $this->getEventDropDownListByProjetcID($projectid); 
            
            //Get Company Type Drop Down
            $this->companytypedropdown($projectid); 
            
            //Get Company Type Drop Down   
            $this->contacttypedropdown($projectid);    
              
           ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();
            
            App::import("Model", "EventInvitation");
            $this->EventInvitation =  & new EventInvitation();
            
            $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.in_waitlist='1'";
                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    
                
                if(empty($check_waiting_list))            
                    $waiting_list=0;
                else
                    $waiting_list=1;
             
                $this->set('waiting_list', $waiting_list); 
        }
        
        
        function event_donations($rec_event_id='',$recid=''){
           
            //Configure::write('debug', 2);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $this->set('projectid',$projectid);        
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import communication Task model for processing
            App::import("Model", "CommunicationTask");
            $this->CommunicationTask =   & new CommunicationTask();
            
            $this->set('rec_event_id',$rec_event_id);  
            
            ##check empty data
            $current_domain= $_SERVER['HTTP_HOST']; 
            $this->set("current_domain",$current_domain);

            $projectDetails=$this->getprojectdetails($projectid); 
            $this->set('fromemail',$projectDetails['Sponsor']['email']);
             
            if(!empty($this->data)) {   
               $task_id=null;
               if($this->data['CommunicationTask']['id']){
                      $task_id=$this->data['CommunicationTask']['id']; 
               }
             
              $uniqueTaskName = $this->CommunicationTask->isUniqueTaskName($this->data['CommunicationTask']['task_name'],$projectid,$task_id );  
              if ($uniqueTaskName == false) {
                    $this->Session->setFlash('Task  with same name already exists.','default',array('class' => 'msgTXt'));
              }else{
                  // STEP : SAVE COMMUNICATION TASK  
                  
                  
                  //$this->data['CommunicationTask']['start_date']="";
                  $this->data['CommunicationTask']['recur_pattern']="Daily";
                  $this->data['CommunicationTask']['daily_pattern']="everyday";
                  $this->data['CommunicationTask']['daily_every_noof_days']="1";
                  $this->data['CommunicationTask']['task_end']="after_accurrences";
                  $this->data['CommunicationTask']['task_end_after_occurrences']="1";
                  if($this->data['CommunicationTask']['rec_event_id']=="")
                    $this->data['CommunicationTask']['rec_event_id']=$rec_event_id;
                  $this->data['CommunicationTask']['send_event_invitation']="1";
                  
                  
                  $rec_id = $this->CommunicationTask->saveEmailTask($this->data['CommunicationTask'], $projectid, '0');
                  
                  if($rec_id > 0 ){
                        $this->Session->setFlash('Event Task added Successfully.','default', array('class' => 'successmsg'));
                                                  
                        if(isset($this->data['Action']['redirectpage'])){
                               $this->redirect('/admins/eventtasklist/'.$rec_event_id); 
                        }else
                        {
                            $this->redirect('/admins/event_task/'.$rec_event_id.'/'.$rec_id);
                        }

                    }else{
                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));     
                    }
             }   
              
            }

            
            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '14'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);
            
           
            
          
            
            
            App::import("Model", "EventInvitation");
            $this->EventInvitation =  & new EventInvitation();
            
            $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.in_waitlist='1'";
                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    
                
                if(empty($check_waiting_list))            
                    $waiting_list=0;
                else
                    $waiting_list=1;
             
                $this->set('waiting_list', $waiting_list); 
        }
      
       
        function event_volunteers($rec_event_id='',$recid=''){
           
            //Configure::write('debug', 2);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $this->set('projectid',$projectid);        
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import communication Task model for processing
            App::import("Model", "CommunicationTask");
            $this->CommunicationTask =   & new CommunicationTask();
            
            $this->set('rec_event_id',$rec_event_id);  
            
            ##check empty data
            $current_domain= $_SERVER['HTTP_HOST']; 
            $this->set("current_domain",$current_domain);

            $projectDetails=$this->getprojectdetails($projectid); 
            $this->set('fromemail',$projectDetails['Sponsor']['email']);
             
            if(!empty($this->data)) {   
               $task_id=null;
               if($this->data['CommunicationTask']['id']){
                      $task_id=$this->data['CommunicationTask']['id']; 
               }
             
              $uniqueTaskName = $this->CommunicationTask->isUniqueTaskName($this->data['CommunicationTask']['task_name'],$projectid,$task_id );  
              if ($uniqueTaskName == false) {
                    $this->Session->setFlash('Task  with same name already exists.','default',array('class' => 'msgTXt'));
              }else{
                  // STEP : SAVE COMMUNICATION TASK  
                  
                  
                  //$this->data['CommunicationTask']['start_date']="";
                  $this->data['CommunicationTask']['recur_pattern']="Daily";
                  $this->data['CommunicationTask']['daily_pattern']="everyday";
                  $this->data['CommunicationTask']['daily_every_noof_days']="1";
                  $this->data['CommunicationTask']['task_end']="after_accurrences";
                  $this->data['CommunicationTask']['task_end_after_occurrences']="1";
                  if($this->data['CommunicationTask']['rec_event_id']=="")
                    $this->data['CommunicationTask']['rec_event_id']=$rec_event_id;
                  $this->data['CommunicationTask']['send_event_invitation']="1";
                  
                  
                  $rec_id = $this->CommunicationTask->saveEmailTask($this->data['CommunicationTask'], $projectid, '0');
                  
                  if($rec_id > 0 ){
                        $this->Session->setFlash('Event Task added Successfully.','default', array('class' => 'successmsg'));
                                                  
                        if(isset($this->data['Action']['redirectpage'])){
                               $this->redirect('/admins/eventtasklist/'.$rec_event_id); 
                        }else
                        {
                            $this->redirect('/admins/event_task/'.$rec_event_id.'/'.$rec_id);
                        }

                    }else{
                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));     
                    }
             }   
              
            }

            
            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '14'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);
            
           
            
          
            
            
            App::import("Model", "EventInvitation");
            $this->EventInvitation =  & new EventInvitation();
            
            $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.in_waitlist='1'";
                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    
                
                if(empty($check_waiting_list))            
                    $waiting_list=0;
                else
                    $waiting_list=1;
             
                $this->set('waiting_list', $waiting_list); 
        }       
       
        /**
        * Function to get all comment types dorpdown bty ajax call 
        * 
        * @param mixed $project_id  - 
        * @param mixed $selectedid
        */
        function getcommenttypesbyajax($projectid, $selectedid=''){        
            $this->layout = false;
            
            $this->set("selectedid",$selectedid);
            // GET ALL Cumment Types
            $this->commenttypelisting($projectid); 
           
        }
        
       /**
       * Function to show list of Members or contacts who falls within given communication task set-up parametes
       * This function is called at addcommtask 
       *  
       */
        function commtask_get_report_list_by_ajax(){
                        #get record from global funtion for ajax calling
            $this->layout="ajax";
            ##check admin session live or not
            $this->session_check_admin();
           
               
            ##import communication Task model for processing
            App::import("Model", "CommunicationTask");
            $this->CommunicationTask =   & new CommunicationTask();    

            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin"); 


            if($projectid)
            {      
                $taskArray=$_POST['data']['CommunicationTask']; 
                
                if($taskArray['id']){
                    //STEP : Task is talready saved so 
                     $is_temp=1;
                     $taskArray['id']="";
                     $taskArray['task_name']= trim($taskArray['task_name'])."_temp";
                }else{
                     //STEP : Task is temporary so 
                     $is_temp=1; 
                     $taskArray['task_name']= trim($taskArray['task_name'])."_temp"; 
                }

               // STEP : Save Task Temporary  & get temp  Task id
                $tempTaskId= $this->CommunicationTask->saveEmailTask($taskArray,$projectid, $is_temp);  
               // STEP : Call Stored Procedure to get matching members or contacts list records 
               if($tempTaskId > 0){ 
                         
                        $result= $this->CommunicationTask->getEmailTaskMatchingMembersOrContacts($tempTaskId, $projectid);
                        if(isset($result['0']['Contact']) ){
                           $this->set('showlist',"contact");  
                           $this->set('contactdetails',$result);        
                        }else{
                            $this->set('showlist',"member");  
                            $this->set('userdetails',$result);
                        }
                      //  echo "<pre>"; print_r($result); echo "</pre>";
     
                     
               }else{
                    $this->set('userdetails',false); 
               }
               
            
            }else{
                 $this->set('userdetails',false);
            }
            
             

        }
        
        /*
        * Function name   : editcommtask()
        * Description : This function used to add commom task
        * Created On      : 16-02-11 (01:45am)
        *
        */  
           
        function editcommtask($recid){

            //Configure::write('debug', 2);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            ##import project type model for processing
            App::import("Model", "CommunicationTask");
            $this->CommunicationTask =   & new CommunicationTask();
            ##check empty data

            if(!empty($this->data)) {

                if($this->data['CommunicationTask']['recur_pattern']=="W")
                {
                    $this->data['CommunicationTask']['monday']=0;
                    $this->data['CommunicationTask']['tuesday']=0;
                    $this->data['CommunicationTask']['wednesday']=0;
                    $this->data['CommunicationTask']['thursday']=0;
                    $this->data['CommunicationTask']['friday']=0;
                    $this->data['CommunicationTask']['saturday']=0;
                    $this->data['CommunicationTask']['sunday']=0;
                }
                if($this->data['CommunicationTask']['end_after']=="O")
                    $this->data['CommunicationTask']['enddate']='0000-00-00';

                if($this->data['CommunicationTask']['end_after']=="E"){

                    if($this->data['CommunicationTask']['enddate']=="0000-00-00")
                    {
                        $this->Session->setFlash('Please enter end date','default',array('class' => 'msgTXt'));     
                        $this->redirect('/admins/editcommtask/'.$this->data['CommunicationTask']['id']);    
                    }
                }
                $this->data['CommunicationTask']['project_id']=$projectid;
                #set the posted data
                $this->CommunicationTask->set($this->data);
                #check server side validation
                $this->CommunicationTask->invalidFields();


                #save data in project type table
                if($this->CommunicationTask->Save($this->data)){
                    $this->Session->setFlash('Communication Task updated Successfully.','default', array('class' => 'successmsg'));
                }else{
                    $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));     
                }

                if(isset($this->data['Action']['redirectpage'])){

                    $sessdata=$this->Session->read('newsortingby');
                    $this->redirect('/'.$sessdata);
                }else
                {
                    $this->redirect("/admins/editcommtask/$recid");
                }

                //$this->redirect('/admins/commtasklist');
            }

            $this->customtemplatelisting($projectid);
            $this->commenttypelisting($projectid);

            if($recid){
                $this->CommunicationTask->id = $recid;
                $this->data = $this->CommunicationTask->read();
                $this->set("recid",$recid);
            }
            if($this->data['CommunicationTask']['email_template_id'])
                $this->set("selectedtemplate",$this->data['CommunicationTask']['email_template_id']);
            else
                $this->set("selectedtemplate",0);

            if($this->data['CommunicationTask']['comment_type_id'])
                $this->set("selectedcommenttype",$this->data['CommunicationTask']['comment_type_id']);
            else
                $this->set("selectedcommenttype",0);

            if($this->data['CommunicationTask']['recur_pattern'])
                $this->set("selectedrecpattern",$this->data['CommunicationTask']['recur_pattern']);
            else
                $this->set("selectedrecpattern",0);        

            if($this->data['CommunicationTask']['occurrences'])
                $this->set("selectedoccurrences",$this->data['CommunicationTask']['occurrences']);
            else
                $this->set("selectedoccurrences",0);


            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '23'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   

        }
        
        /*
        * Function name   : commtasklist()
        * Description : This function used to view commtask list
        * Created On      : 16-02-11 (02:45am)
        *
        */ 
        function commtasklist(){
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }
            ##import project type model for processing
            App::import("Model", "CommunicationTask");
            $this->CommunicationTask =   & new CommunicationTask();    

            
            $this->CommunicationTask->bindModel(array('belongsTo'=>array(
            'EmailTemplate'=>array(
            'foreignKey'=>false,
            'conditions'=>'EmailTemplate.id = CommunicationTask.email_template_id'
            ))));
            ##fetch data from project type table for listing
            $field='';
           
             ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."' AND CommunicationTask.is_temp = '0'  AND CommunicationTask.send_event_invitation != '1' AND (CommunicationTask.task_name LIKE '%".$searchkeyword."%' OR CommunicationTask.notes LIKE '%".$searchkeyword."%')";
            }else{
                 $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."' AND CommunicationTask.is_temp = '0'  AND CommunicationTask.send_event_invitation != '1'";
            }
            
           // $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."'";
            $this->Pagination->sortByClass    = 'CommunicationTask'; ##initaite pagination 

            $this->Pagination->total= count($this->CommunicationTask->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->CommunicationTask->bindModel(array('belongsTo'=>array(
            'EmailTemplate'=>array(
            'foreignKey'=>false,
            'conditions'=>'EmailTemplate.id = CommunicationTask.email_template_id'
            ))));
            
            $taskdata = $this->CommunicationTask->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable

            $this->set("taskdata",$taskdata);

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '13'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition   

        }
        
        
        function eventtasklist($rec_event_id=''){
            ##check admin session live or not
              $this->session_check_admin();
             $projectid = '1';            
             $this->set('rec_event_id',$rec_event_id);
			 $event_id = $this->Session->read('event_id');
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }
            ##import project type model for processing
            App::import("Model", "CommunicationTask");
            $this->CommunicationTask =   & new CommunicationTask();    

            
            $this->CommunicationTask->bindModel(array('belongsTo'=>array(
            'EmailTemplate'=>array(
            'foreignKey'=>false,
            'conditions'=>'EmailTemplate.id = CommunicationTask.email_template_id'
            ),
            'RecurringEvent'=>array(
            'foreignKey'=>false,
            'conditions'=>'RecurringEvent.id = CommunicationTask.rec_event_id'
            ),
			
            'Event'=>array(
            'foreignKey'=>false,
            'conditions'=>'Event.id = CommunicationTask.rec_event_id'
            )
            )));
            
            ##fetch data from project type table for listing
            $field='';
           
             ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."' AND CommunicationTask.is_temp = '0'  AND CommunicationTask.send_event_invitation = '1' and CommunicationTask.rec_event_id = '".$event_id."' AND (CommunicationTask.task_name LIKE '%".$searchkeyword."%' OR CommunicationTask.notes LIKE '%".$searchkeyword."%')";
            }else{
                 $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."' AND CommunicationTask.is_temp = '0'  AND CommunicationTask.send_event_invitation = '1' and CommunicationTask.rec_event_id = '".$event_id."'";
            }
            
           // $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."'";
            $this->Pagination->sortByClass    = 'CommunicationTask'; ##initaite pagination 
            $this->Pagination->total= count($this->CommunicationTask->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->CommunicationTask->bindModel(array('belongsTo'=>array(
			            'EmailTemplate'=>array(
			            'foreignKey'=>false,
			            'conditions'=>'EmailTemplate.id = CommunicationTask.email_template_id'
			            ),
			            'RecurringEvent'=>array(
			            'foreignKey'=>false,
			            'conditions'=>'RecurringEvent.id = CommunicationTask.rec_event_id'
			),
			 'Event'=>array(
            'foreignKey'=>false,
            'conditions'=>'Event.id = CommunicationTask.rec_event_id'
            )
            )));
            
            $taskdata = $this->CommunicationTask->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
		
            ##set project type data in variable
	
            $this->set("taskdata",$taskdata);

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '13'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);

            # set help condition   
            App::import("Model", "EventInvitation");
            $this->EventInvitation =   & new EventInvitation();    
        
            $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.in_waitlist='1'";
            $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    
            
            if(empty($check_waiting_list))            
                $waiting_list=0;
            else
                $waiting_list=1;
         
            $this->set('waiting_list', $waiting_list); 

        }


           

        /*
        * Function name   : commtaskhistorylist()
        * Description : This function used to view communication task execution history list
        * Created On      : 25-Jan-2012 
        * 
        */ 
        function commtaskhistorylist(){
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }
            
            ##set current domain
            $current_domain= $_SERVER['HTTP_HOST']; 
            $this->set("current_domain",$current_domain);
            
            ##import project type model for processing
            App::import("Model", "CommunicationTaskHistory");
            $this->CommunicationTaskHistory =   & new CommunicationTaskHistory();    

             
            $this->CommunicationTaskHistory->bindModel(array('belongsTo'=>array(
            'EmailTemplate'=>array(
            'foreignKey'=>false,
            'conditions'=>'EmailTemplate.id = CommunicationTaskHistory.email_template_id'
            ))));
            ##fetch data from project type table for listing
            $field='';
               ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition = "CommunicationTaskHistory.delete_status = '0' and CommunicationTaskHistory.project_id='".$projectid."' AND (CommunicationTaskHistory.task_name LIKE '%".$searchkeyword."%' OR CommunicationTaskHistory.notes LIKE '%".$searchkeyword."%')";
            }else{
                $condition = "CommunicationTaskHistory.delete_status = '0' and CommunicationTaskHistory.project_id='".$projectid."'";
            }
            
            
            $this->Pagination->sortByClass    = 'CommunicationTaskHistory'; ##initaite pagination 

            $this->Pagination->total= count($this->CommunicationTaskHistory->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->CommunicationTaskHistory->bindModel(array('belongsTo'=>array(
            'EmailTemplate'=>array(
            'foreignKey'=>false,
            'conditions'=>'EmailTemplate.id = CommunicationTaskHistory.email_template_id'
            ))));
          
            $taskdata = $this->CommunicationTaskHistory->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
			
            ##set project type data in variable

            $this->set("taskdata",$taskdata);

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '13'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   


        }
        
        
        function eventinvitationhistory(){
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = '1';
			$rec_event_id = $this->Session->read('event_id');
            $this->set('rec_event_id',$rec_event_id);
            ##set current domain
            $current_domain= $_SERVER['HTTP_HOST']; 
            $this->set("current_domain",$current_domain);
            
            ##import project type model for processing
            App::import("Model", "CommunicationTaskHistory");
            $this->CommunicationTaskHistory =   & new CommunicationTaskHistory(); 
            
             App::import("Model", "EventInvitation");
            $this->EventInvitation =   & new EventInvitation(); 
            
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();
			 App::import("Model", "Event");
            $this->Event =   & new Event();
                        
 			$this->Event->bindModel(array('belongsTo'=>array(
            'EventInvitation'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.event_id = Event.id'
            ),
            'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.invite_to_holder_id = Holder.id'
            ),
            'MemberType'=>array(
            'foreignKey'=>false,
            'conditions'=>'MemberType.id = Holder.member_type'
            )
            )));
            
            ##fetch data from project type table for listing
            $field='';
               ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
               $searchkeyword = $this->data['Admins']['searchkey'];
                $condition = "EventInvitation.delete_status = '0' and EventInvitation.event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.invitation='1' AND (Holder.firstname like '%".$searchkeyword."%' 	OR Holder.lastnameshow like '%".$searchkeyword."%' OR MemberType.member_type like '%".$searchkeyword."%')";
            }else{
                 $condition = "EventInvitation.delete_status = '0' and EventInvitation.event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.invitation='1'";
            }
            
            $this->Pagination->sortByClass    = 'Event'; ##initaite pagination 

            $this->Pagination->total= count($this->Event->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            
            $this->Event->bindModel(array('belongsTo'=>array(
            'EventInvitation'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.event_id = Event.id'
            ),
            'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.invite_to_holder_id = Holder.id'
            ),
            'MemberType'=>array(
            'foreignKey'=>false,
            'conditions'=>'MemberType.id = Holder.member_type'
            )
            )));
            //$group="CommunicationTaskHistory.id"      ;    
            
            $taskdata = $this->Event->find('all',array("conditions"=>$condition,'order' =>$order, 'limit' => $limit, 'page' => $page));
			$this->set('taskdata',$taskdata);
		//$this->pl($taskdata);
            
            
           $this->set("hlpdata",$this->getHelpContent(14));  

            # set help condition   
            
           
                
                $cond="EventInvitation.event_id='".event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.in_waitlist='1'";
                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    
                
                if(empty($check_waiting_list))            
                    $waiting_list=0;
                else
                    $waiting_list=1;
             
                $this->set('waiting_list', $waiting_list); 


        }
        
      /**
       * Function to show list of Members or contacts to whom task email is sent 
       * This function is called at commtaskhistorylist 
       *  
       */
        function commtask_get_history_sentitem_list_by_ajax($task_execution_id, $task_id){
            #get record from global funtion for ajax calling
            $this->layout="ajax";
            ##check admin session live or not
            $this->session_check_admin();

             
            ##import communication Task model for processing
            App::import("Model", "CommunicationTaskExecutionReport");
            $this->CommunicationTaskExecutionReport =   & new CommunicationTaskExecutionReport();    

            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin"); 
             

            if($task_execution_id && $task_id!="" && $projectid)
            {      
                  $taskExeCond=" CommunicationTaskExecutionReport.task_execution_id='".$task_execution_id."' AND CommunicationTaskExecutionReport.task_id='".$task_id."' AND CommunicationTaskExecutionReport.project_id='".$projectid."' ";
                  $taskExeSentItemData  =  $this->CommunicationTaskExecutionReport->find("all", array('conditions' => $taskExeCond,'order'=>'CommunicationTaskExecutionReport.created ASC')); 
                  $this->set('taskExeSentItemData',$taskExeSentItemData);   
            }else{
                 $this->set('taskExeSentItemData',false);
            }
            
             

        }
        
        
        function changest($projid,$spid) {
            App::import("Model","Project");
            $this->Project = new Project();
            $projArr = $this->Project->findById($projid);
            $projArr["Project"]['delete_status'] = 1;

            $this->Project->save($projArr);

            App::import("Model","Sponsor");
            $this->Sponsor = new Sponsor();
            $condition1 = "id = '".$spid."' AND  delete_status = '0'";
            $spArr = $this->Sponsor->find('all',array("conditions"=>$condition1));
            //$spArr = $this->Sponsor->findById($projid);print_r($spArr);
            $userid= $spArr[0]["Sponsor"]['user_id'];
            //         $this->query("update users set delete_status=1 where id=".$spArr['Sponsor']['user_id']);

            App::import("Model","User");
            $this->User = new User();
            $condition = "id = '".$userid."' AND  delete_status = '0'";
            $usrArr = $this->User->find('all',array("conditions"=>$condition));      
            //$usrArr = $this->User->findById($sponsorid);print_r($usrArr);
            $usrArr[0]["User"]['delete_status'] = 1;

            if($this->User->Save($usrArr[0]['User'])){
                $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));
            }else{
                $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));
            }
            //$this->User->save($usrArr);
            $this->redirect("/admins/projectlist/");
        }



        /*
        * Function name   : changestatus()
        * Arguments : $recid,$modelname,$status,$methodname
        * Description : This function used to change status as active or deactive
        * Created On      : 16-02-11 (03:45am)
        *
        */ 
        function changestatus($recid,$modelname,$status,$methodname,$action='cngstatus',$othermodel='',$otherid='',$param=''){
			
		
		
			##check user session live or not

			$this->session_check_admin();
            
			##import dynamic model for processing
            App::import("Model", $modelname);
            $this->$modelname =   & new $modelname();       
            ##set the record for updation

            $allid=str_replace('*', ' or id = ',$recid);                    
            $where="id=$allid";  
            if(count(explode('*',$recid))==1){
                $this->data["$modelname"]['id'] = $recid;
            }   
      
            if($modelname=="EventInvitation")       
            {
                $methodname=$methodname."/".$otherid;
            }
            
            if($methodname=="event_pages" || $methodname=="eventtasklist")       
            {
                $methodname=$methodname."/".$otherid;
            }
			
            if($action =='permanant_delete')
            {
			
                //$this->Content->delete($this->data['$modelname']['id'],true);
                $this->Content->query("delete from contents where id=".$recid);
                $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));
                $this->redirect("$methodname/");
            }

            if($action =='undo_delete') //if it is already archived or permanantly delete
            {
			
                $this->$modelname->updateAll(array('delete_status'=>'0'),array('id' => $recid));
                $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));
                $this->redirect("$methodname/");
            }
            
            //handle for current events
            if($action=="rec_status")
            {
               
                $today=date('Y-m-d');
                
                $id_data=$this->$modelname->query("select event_id,project_id from recurring_events where id='".$recid."'");
                
                $event_id=$id_data[0]['recurring_events']['event_id'];
                $project_id=$id_data[0]['recurring_events']['project_id'];
              
                $this->$modelname->query("update recurring_events set active_status='".$status."' where event_id = '".$event_id."' and project_id='".$project_id."' and start_date >= '".$today."'");
                
                $this->$modelname->query("update events set active_status='".$status."' where id = '".$event_id."'");
                
                $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));
                $this->redirect("$methodname/");
            }
            
            if($action=="delete_rec")
            {
                
				
                $today=date('Y-m-d');
                
                $id_data=$this->$modelname->query("select event_id,project_id from recurring_events where id='".$recid."'");
                
                $event_id=$id_data[0]['recurring_events']['event_id'];
                $project_id=$id_data[0]['recurring_events']['project_id'];
              
                $this->$modelname->query("update recurring_events set delete_status='1' where event_id = '".$event_id."' and project_id='".$project_id."' and start_date >= '".$today."'");
                $this->$modelname->query("update events set delete_status='1' where id = '".$event_id."'");
                
                $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));
				if(!empty($param)){
	                $this->redirect("$methodname/$param");
				}else{
					 $this->redirect("$methodname/");
				}
            } 

            if($action !='delete'){
               $this->data["$modelname"]['active_status'] = $status;
            }else{
			
			
                $this->data["$modelname"]['delete_status'] = 1;    
				
				
				
				            
                if($modelname=="Project")
                {
                    $project_details=$this->Project->query("select project_name from projects where id=".$recid); 
					//pr($project_details);die;
                    $p_name=$project_details['0']['projects']['project_name'];                    
                    $this->Project->query("delete from projects where id=".$recid);
                    $this->User->query("delete from users where project_id=".$recid);      
                    $this->Project->query("delete from coins_holders where project_id=".$recid); 
                    $this->Project->query("delete from coinsets where project_id=".$recid); 
                    $this->Project->query("delete from companies where project_id=".$recid); 
                    $this->Project->query("delete from contacts where project_id=".$recid);
                    $this->Project->query("delete from contents where project_id=".$recid);  
                    $this->Project->query("delete from email_templates where project_id=".$recid); 
                    $this->Project->query("delete from event_comments where project_id=".$recid); 
                    $this->Project->query("delete from event_invitations where project_id=".$recid); 
                    $this->Project->query("delete from events where project_id=".$recid); 
                    $this->Project->query("delete from holders where project_id=".$recid); 
                    $this->Project->query("delete from message_holders where project_id=".$recid); 
                    $this->Project->query("delete from message_replies where project_id=".$recid); 
                    $this->Project->query("delete from messages where project_id=".$recid); 
                    $this->Project->query("delete from points_awards where project_id=".$recid); 
                    $this->Project->query("delete from price_type_options where project_id=".$recid); 
                    $this->Project->query("delete from project_graphics where project_id=".$recid); 
                    $this->Project->query("delete from routes where project_id=".$recid); 
                    $this->Project->query("delete from sponsors where project_id=".$recid); 
                    $this->Project->query("delete from terms where project_id=".$recid); 
                    $this->Project->query("delete from themes where project_id=".$recid); 
					 
                   
                   if($p_name!="" || $p_name!=NULL)
                   {
                   //clean up all the directories and files related to project                   
                    $up_dir="img/".$p_name."/";
                    
                    if (file_exists($up_dir))
                    {

                        foreach(glob($up_dir.'*') as $v)        //delete existing files from directory then delete directory
                        {
                            if(is_dir($v))
                            {
                                $v=$v."/";
                                   foreach(glob($v.'*.*') as $x)        //delete existing files from directory then delete directory
                                   {
                                       unlink($x); 
                                   }
                                   rmdir($v);    
                            }
                            else
                                unlink($v);
                        }
                        
                        rmdir($up_dir);
                    }
                    
                }                   
                    
                }
				

            }


            ##in the case of other model like User
            if($othermodel && $otherid){
			
			
                App::import("Model", $othermodel);
                $this->$othermodel =   & new $othermodel();
                $this->data["$othermodel"]['id'] = $otherid;
                if($action !='delete'){
                    $this->data["$othermodel"]['active_status'] = $status;
                }else{
                    $this->data["$othermodel"]['delete_status'] = 1;
                }
				
                $this->$othermodel->Save($this->data["$othermodel"]);
            }

            if(count(explode('*',$recid))==1){
			  
			if($modelname === 'Donation')
				{
			
					$i=$this->Donation->delete($recid);
				
				}
				elseif($modelname === 'DonationType')
				{
			
					$i=$this->DonationType->delete($recid);
					//echo "nmxnvx"; die;
				
				}
				
				else{
			
				$i=$this->$modelname->Save($this->data["$modelname"]);
				}
				if($modelname === 'Donationupload')
				{
				
					$path='uploads/donation/';
					App::import("Model", "Donationupload");
            		$this->Donationupload =   & new Donationupload();
					$id=$this->data['Donationupload']['id'];
			$condition = " Donationupload.status='1' and Donationupload.id=".$id." ";
			
			$selectedfile = $this->Donationupload->find('all', array ('conditions' => array('id' =>$id)));
					$deleteimage=$selectedfile[0]['Donationupload']['filename'];
					unlink($path.$deleteimage);
					$i=$this->Donationupload->delete($recid);
					
				}
				
            }else{
                if($action!="delete")
                    $i=$this->$modelname->updateAll(array('active_status'=>"'".$status."'"),$where);
                else{
                    $res = Set::enum('yes', array('no' => 0, 'yes' => 1));
                    $i=$this->$modelname->updateAll(array('delete_status'=>"'".$res."'"),$where);

                }
            }
			
            if($i){
                $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));

            }else{
                $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));
            }

			//$methodname="admins/".$methodname;exit;
            $this->redirect("$methodname/");

        }


        //*for  delete  content this is make seperate due to management of parent n child\

        function deletecontent($recid){
            App::import("Model", 'Content');
            $this->Content =   & new Content();    
            ##set the record for updation

            $alldeid=str_replace('*', ' or parent_id = ',$recid);              
            $parcond="parent_id=$alldeid and (delete_status='0' )"; 
            if(count(explode('*',$recid))==1){
                $parcond="parent_id=$alldeid and (delete_status='0' )"; 
            }
            $ptdata = $this->Content->find('all',array("conditions"=>$parcond));
            if(!empty($ptdata))
            {
                $this->Session->setFlash('Page to be deleted is Parent page for some pages. So manage them first.','default', array('class' => 'successmsg'));
                $this->redirect("contentlist/");
            }
            else
            {
                $allid=str_replace('*', ' or id = ',$recid);              
                $where="id=$allid";
                if(count(explode('*',$recid))==1){
                    $where="id=$recid"; 
                }

                if(count(explode('*',$recid))==1){
                    $this->data["Content"]['id'] = $recid;
                    $this->data["Content"]['delete_status'] = 1;

                    $i=$this->Content->Save($this->data["Content"]);
                }else{
                    $res = Set::enum('yes', array('no' => 0, 'yes' => 1));
                    $i=$this->Content->updateAll(array('delete_status'=>"'".$res."'"),$where);
                }

                if($i){
                    //print_r($i);exit;
                    $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));

                }else{
                    $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));
                }


                $this->redirect("contentlist/");

            }


        }




       /*
        * Function name   : addcompanytype()
        * Description : This function used to add company type
        * Created On      : 16-02-11 (01:45am)
        *
        */     
        function addcompanytype(){
            ##check admin session live or not
            $this->session_check_admin();
			App::import("Model", "CompanyType");
            $this->CompanyType =   & new CompanyType();
            ##check empty data
            if(!empty($this->data)) {
               //echo '<pre>';print_r($this->data);die;
				#set the posted data
				if($this->data['CompanyTypeCategory']['hidctc'] =='company_type_category_name_text'){
					App::import("Model", "CompanyTypeCategory");
					$this->CompanyTypeCategory =   & new CompanyTypeCategory();    
					$this->data['CompanyTypeCategory']['company_type_category_name'] = $this->data['CompanyTypeCategory']['company_type_category_name_text'];
					if(!empty($this->data['CompanyTypeCategory'])) {
						$this->CompanyTypeCategory->Save($this->data['CompanyTypeCategory']);
					}
					$this->data['CompanyType']['company_type_category_id'] = $this->CompanyTypeCategory->getLastInsertId();
				}else{
					$this->data['CompanyType']['company_type_category_id'] = $this->data['CompanyTypeCategory']['company_type_category_name'];
				}
				
				if($this->data['CompanyTypeStatus']['hidcts'] =='company_type_status_name_text'){
				
					App::import("Model", "CompanyTypeStatus");
					$this->CompanyTypeStatus =   & new CompanyTypeStatus();    
					$this->data['CompanyTypeStatus']['company_type_status_name'] = $this->data['CompanyTypeStatus']['company_type_status_name_text'];
					if(!empty($this->data['CompanyTypeStatus'])) {
						$this->CompanyTypeStatus->Save($this->data['CompanyTypeStatus']);
					}
					$this->data['CompanyType']['company_type_status_id'] = $this->CompanyTypeStatus->getLastInsertId();
				}else{ 
					$this->data['CompanyType']['company_type_status_id'] = $this->data['CompanyType']['company_type_status_name'];
				}
                $this->CompanyType->set($this->data);
                #check server side validation
                $this->CompanyType->invalidFields();
                //echo '<pre>';print_r($this->data);die;
                $categoryTypeId = $this->data['CompanyType']['company_type_category_id'];
				$categoryStatusId = $this->data['CompanyType']['company_type_status_id'];
                $condition = "company_type_category_id = '".$categoryTypeId."' AND company_type_status_id ='".$categoryStatusId."'   AND  delete_status = '0'  AND  project_id='0' AND active_status = '1'";
                $ptdata = $this->CompanyType->find('all',array("conditions"=>$condition));
                if(empty($ptdata)){
                    #save data in company type table
					//echo '<pre>';print_r($this->data['CompanyType']);die;	
                    if($this->CompanyType->Save($this->data)){
                        $this->Session->setFlash('Company Type added Successfully.','default', array('class' => 'successmsg'));
                    }else{
                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                    }

                }else{
                    $this->Session->setFlash('Company Type with same name already exists.','default',array('class' => 'msgTXt'));
                }
                if(isset($this->data['Action']['redirectpage'])){

                    $sessdata=$this->Session->read('newsortingby');
                    $this->redirect('/'.$sessdata);
                }else
                {
                    $this->redirect('/admins/addcompanytype/');
                    //	$this->redirect("/admins/editprojecttype/$recid");
                }			 	
            }


            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '60'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition
			$companytypecategorydropdown = $this->getCompanyTypeCategoryDropdown();
			$this->set("companytypecategorydropdown", $companytypecategorydropdown);
			$this->set("selectedcompanytypecategory", '');
			
			$companytypestatusdropdown = $this->getCompanyTypeStatusDropdown();
			$this->set("companytypestatusdropdown", $companytypestatusdropdown);
			$this->set("selectedcompanytypestatus", '');
        }    



        /*
        * Function name   : editcompanytype()
        * Description : This function used to add company type
        * Created On      : 16-02-11 (06:00am)
        *
        */     
        function editcompanytype($recid){
		
            ##check admin session live or not
            $this->session_check_admin();
            ##import company type model for processing
            App::import("Model", "CompanyType");
            $this->CompanyType =   & new CompanyType();
            $this->set("recid",$recid);
			
			$companytypecategorydropdown = $this->getCompanyTypeCategoryDropdown();
			$this->set("companytypecategorydropdown", $companytypecategorydropdown);
			$this->set("selectedcompanytypecategory", '');
			$companytypestatusdropdown = $this->getCompanyTypeStatusDropdown();
			$this->set("companytypestatusdropdown", $companytypestatusdropdown);
			$this->set("selectedcompanytypestatus", '');
			
            ##check empty data
            if(!empty($this->data)) {
				
				if($this->data['CompanyTypeCategory']['hidctc'] =='company_type_category_name_text'){
					App::import("Model", "CompanyTypeCategory");
					$this->CompanyTypeCategory =   & new CompanyTypeCategory(); 
					$id = $this->data['CompanyTypeCategory']['company_type_category_name'];   
					$this->data['CompanyTypeCategory']['company_type_category_name'] = "'".$this->data['CompanyTypeCategory']['company_type_category_name_text']."'";
					unset($this->data['CompanyTypeCategory']['company_type_category_name_text']);
					unset($this->data['CompanyTypeCategory']['hidctc']);
					if(!empty($this->data['CompanyTypeCategory'])) {
						$conditions = array('CompanyTypeCategory.id'=>$id);
						$this->CompanyTypeCategory->updateAll($this->data['CompanyTypeCategory'],$conditions);
					}
					$this->data['CompanyType']['company_type_category_id'] = $id;
				}else{
					$this->data['CompanyType']['company_type_category_id'] = $this->data['CompanyTypeCategory']['company_type_category_name'];
				}
				
				if($this->data['CompanyTypeStatus']['hidcts'] =='company_type_status_name_text'){
					App::import("Model", "CompanyTypeStatus");
					$this->CompanyTypeStatus =   & new CompanyTypeStatus();    
					$id = $this->data['CompanyTypeStatus']['company_type_status_name'];
					$this->data['CompanyTypeStatus']['company_type_status_name'] = "'".$this->data['CompanyTypeStatus']['company_type_status_name_text']."'";
					unset($this->data['CompanyTypeStatus']['company_type_status_name_text']);
					unset($this->data['CompanyTypeStatus']['hidcts']);
					if(!empty($this->data['CompanyTypeStatus'])) {
						$conditions = array('CompanyTypeStatus.id'=>$id);
						$this->CompanyTypeStatus->updateAll($this->data['CompanyTypeStatus'],$conditions);
					}
					$this->data['CompanyType']['company_type_status_id'] = $id;
				}else{
					$this->data['CompanyType']['company_type_status_id'] = $this->data['CompanyTypeStatus']['company_type_status_name'];
				}
			
                #set the posted data\
                $this->CompanyType->set($this->data);
                #check server side validation
                $this->CompanyType->invalidFields();
                #save data in company type table
                $this->data['CompanyType']['id']=$recid;
                $ptname  = $this->data['CompanyType']['company_type_name'];
                $condition = "company_type_name = '".$ptname."' AND id !=$recid AND  delete_status = '0'  and project_id='0'";
                $ptdata = $this->CompanyType->find('all',array("conditions"=>$condition));
                if(!$ptdata){
                    if($recid !=''){

                        if($this->CompanyType->Save($this->data)){
                            $this->Session->setFlash('Company Type updated Successfully.','default', array('class' => 'successmsg'));

                        }else{
                            $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                        }
                    }else{
                        $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));
                    }
                }else{

                    $this->Session->setFlash('Company Type with same name already exists.','default',array('class' => 'msgTXt'));
                }
                if(isset($this->data['Action']['redirectpage'])){

                    $sessdata=$this->Session->read('newsortingby');
                    $this->redirect('/'.$sessdata);
                }else
                {
                    $this->redirect("/admins/editcompanytype/$recid");                
                }

            }

            $this->CompanyType->id = $recid;
            $this->data = $this->CompanyType->read();
			$this->set("selectedcompanytypecategory", $this->data['CompanyType']['company_type_category_id']);
			$this->set("selectedcompanytypestatus", $this->data['CompanyType']['company_type_status_id']);
				
            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '61'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

        }    

        /*
        * Function name   : companytype()
        * Description : This function used to add company type
        * Created On      : 16-02-11 (05:45am)
        *
        */ 
        function companytype(){
            ##check admin session live or not
            $this->session_check_admin();    

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);  
			}				
            ##import company type model for processing
            App::import("Model", "CompanyType");
            $this->CompanyType =   & new CompanyType();
			
			$this->CompanyType->bindModel(					 
				array('belongsTo' => array(
					'CompanyTypeStatus' => array(
					'className' => 'CompanyTypeStatus',
					'foreignKey'=> 'company_type_status_id'
					),
					'CompanyTypeCategory' => array(
					'className' => 'CompanyTypeCategory',
					'foreignKey'	=> 'company_type_category_id'
					)
				  )
				)
			);	 
			
            ##fetch data from project type table for listing
            $field='';
            $condition = "delete_status = '0'  AND project_id='0'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                 $searchkeyword = $this->data['Admins']['searchkey'];
                 $condition .= "  AND (CompanyTypeCategory.company_type_category_name LIKE '%".$searchkeyword."%' OR CompanyTypeStatus.company_type_status_name LIKE '%".$searchkeyword."%'  )";
            }
			
			$this->Pagination->sortByClass    = 'CompanyType'; 
			
            $this->Pagination->total= count($this->CompanyType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
			
			$this->CompanyType->bindModel(  
					 
					array('belongsTo' => array(
								'CompanyTypeStatus' => array(
								'className' => 'CompanyTypeStatus',
								'foreignKey'=> 'company_type_status_id'
								),
								'CompanyTypeCategory' => array(
								'className' => 'CompanyTypeCategory',
								'foreignKey'	=> 'company_type_category_id'
								)
							)
					)
			);	
			//echo $condition;
            $companytypedata = $this->CompanyType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
			 
            $this->set("companytypedata",$companytypedata);

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '62'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition



        }    

        /*
        * Function name   : addcommenttype()
        * Description : This function used to add comment type
        * Created On      : 16-02-11 (01:45am)
        *
        */     
        function addcommenttype($returnurl=""){
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
			if($projectid > 0){
	            $project_name=$this->Session->read("projectwebsite_name_admin");  	
	            $this->set('current_project_name',$project_name);
			}
            ##import company type model for processing
            App::import("Model", "CommentType");
            $this->CommentType =   & new CommentType();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            ##check empty data
            if(!empty($this->data)) {
					
                  $returnurl=$this->data['Admins']['returnurl'];       
                #set the posted data
              //  $this->data['CommentType']['project_id']=$projectid; 
                $this->CommentType->set($this->data);
                #check server side validation
                $this->CommentType->invalidFields();
                $ptname = $this->data['CommentType']['comment_type_name'];
                // print_r($this->data);die;
                $condition = "comment_type_name = '".$ptname."' AND  delete_status = '0' AND project_id = $projectid";
                $ptdata = $this->CommentType->find('all',array("conditions"=>$condition));
//echo '<pre>';print_r($this->data);die;
                if(empty($ptdata)){
                    #save data in company type table
					if($projectid > 0 ){
						$this->data['CommentType']['project_id']=$projectid;
					}else{
							$this->data['CommentType']['project_id '] = 0;
					}
					//echo '<pre>';print_r($this->data);die;
                    if($this->CommentType->Save($this->data)){
                        
                           if($returnurl!=""){
                               // $gotourl=explode("_id_",$this->data['companies']['returnurl']);
                               
                                  $gotourl=str_replace("_id_", "/", $returnurl);
                                  
                                  $this->set("closeit","yes");
                                //$this->redirect('/companies/'.$gotourl); 
                            }else{
                                $this->Session->setFlash('Comment Type added Successfully.','default', array('class' => 'successmsg'));
                                if(isset($this->data['Action']['redirectpage'])){

                                    $sessdata=$this->Session->read('newsortingby');
                                    $this->redirect(array('controller' => 'admins','action' => 'suggestedcomments'));

                                }else{

                                    $this->redirect(array('controller' =>'admins','action' =>'addcommenttype'));

                                }
                            }

                    }else{
                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                    }

                }else{
                    $this->Session->setFlash('Comment Type with same name already exists.','default',array('class' => 'msgTXt'));
                }
            }
            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '49'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   
            
               $this->set("returnurl",$returnurl);  

        }    

        /*
        * Function name   : editcommenttype()
        * Description : This function used to add comment type
        * Created On      : 16-02-11 (06:00am)
        *
        */     
        function editcommenttype($recid){
            ##check admin session live or not
            $this->session_check_admin();
            ##import company type model for processing
            App::import("Model", "CommentType");
            $this->CommentType =   & new CommentType();
            $this->set("recid",$recid);

            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            ##check empty data
            if(!empty($this->data)) {
                //print_r($recid);die; 
                #set the posted data
                $this->CommentType->set($this->data);
                #check server side validation
                $this->CommentType->invalidFields();
                #save data in company type table
                //print_r($this->data);
                $this->data['CommentType']['id']=$recid;
                $ptname  = $this->data['CommentType']['company_type_name'];
                //print_r($recid);print_r($ptname);die;
                $condition = "company_type_name = '".$ptname."' AND id !=$recid AND  delete_status = '0'";
                $ptdata = $this->CommentType->find('all',array("conditions"=>$condition));
                if(!$ptdata){
                    if($recid !=''){

                        if($this->CommentType->Save($this->data)){
                            $this->Session->setFlash('Comment Type updated Successfully.','default', array('class' => 'successmsg'));
                            if(isset($this->data['Action']['redirectpage'])){

                                $sessdata=$this->Session->read('newsortingby');
                                $this->redirect('/'.$sessdata);

                            }else{

                                $this->redirect('/admins/editcommenttype'/$recid);

                            }

                        }else{
                            $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                        }
                    }else{
                        $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));
                    }
                }else{

                    $this->Session->setFlash('Comment Type with same name already exists.','default',array('class' => 'msgTXt'));
                }

                $this->redirect("/admins/suggestedcomments");
            }
            $this->CommentType->id = $recid;
            $this->data = $this->CommentType->read();



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '50'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   

        }    

        /*
        * Function name   : commenttype()
        * Description : This function used to add comment type
        * Created On      : 16-02-11 (05:45am)
        *
        */ 
        function commenttype(){
            ##check admin session live or not
            $this->session_check_admin();    

            ##import company type model for processing
            App::import("Model", "CommentType");
            $this->CommentType =   & new CommentType();    
            ##fetch data from project type table for listing
            $field='';
            $condition = "delete_status = '0' AND project_id = 0";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (comment_type_name LIKE '%".$searchkeyword."%'  )";
            }
            $this->Pagination->sortByClass    = 'CommentType'; ##initaite pagination 

            $this->Pagination->total= count($this->CommentType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $commenttypedata = $this->CommentType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
//echo '<pre>';print_r($commenttypedata);
            $this->set("commenttypedata",$commenttypedata);

        }    
        /*
        * Function name   : addprojecttype()
        * Description : This function used to add contact type
        * Created On      : 16-02-11 (06:45am)
        *
        */     
        function addcontacttype(){
            ##check admin session live or not
            $this->session_check_admin();

            ##import contact type model for processing
            App::import("Model", "ContactType");
            $this->ContactType =   & new ContactType();
            ##check empty data
            if(!empty($this->data)) {
                #set the posted data
                $this->ContactType->set($this->data);
                #check server side validation
                $this->ContactType->invalidFields();
                $ptname = $this->data['ContactType']['contact_type_name'];

                $condition = "contact_type_name = '".$ptname."' AND delete_status = '0' and project_id='0'";
                $ptdata = $this->ContactType->find('all',array("conditions"=>$condition));

                if(!$ptdata){
                    #save data in contact type table
					if($this->data['ContactType']['project_lead'] == 1)
					$this->data['ContactType']['active_status'] = "1";
						
                    if($this->ContactType->Save($this->data)){
						if($this->data['ContactType']['project_lead'] == 1) {
							$this->ContactType->updateAll(array('ContactType.project_lead'=> '0'), array('ContactType.id !=' => $this->ContactType->id,'ContactType.delete_status' => '0','ContactType.project_id' => '0'));
						}
                        $this->Session->setFlash('Contact Type added Successfully.','default', array('class' => 'successmsg'));
                    }else{
                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                    }

                }else{
                    $this->Session->setFlash('Contact Type with same name already exists.','default',array('class' => 'msgTXt'));
                }

                if(isset($this->data['Action']['redirectpage'])){

                    $sessdata=$this->Session->read('newsortingby');
                    $this->redirect('/'.$sessdata);
                }else
                {
                    $this->redirect('/admins/addcontacttype/');
                }

            }
            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '57'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition
        }    

        /*
        * Function name   : editcontacttype()
        * Description : This function used to edit contact type
        * Created On      : 16-02-11 (06:00am)
        *
        */     
        function editcontacttype($recid){
            ##check admin session live or not
            $this->session_check_admin();

            ##import company type model for processing
            App::import("Model", "ContactType");
            $this->ContactType =   & new ContactType();

            ##check empty data
            if(!empty($this->data)) {
                #set the posted data
                $this->ContactType->set($this->data);
                #check server side validation
                $this->ContactType->invalidFields();
                #save data in company type table
                $recid  = $this->data['ContactType']['id'];
                $ptname  = $this->data['ContactType']['contact_type_name'];
                $condition = "contact_type_name = '".$ptname."' AND id !=$recid AND  delete_status = '0'  and project_id='0'";
                $ptdata = $this->ContactType->find('all',array("conditions"=>$condition));
                if(!$ptdata){
                    if($recid !=''){
                        //pr($this->data);die;
						if($this->data['ContactType']['project_lead'] == 1)
						$this->data['ContactType']['active_status'] = "1";
						
						if($this->ContactType->Save($this->data)){
                            if($this->data['ContactType']['project_lead'] == 1) {
								$this->ContactType->updateAll(array('ContactType.project_lead'=> '0'), array('ContactType.id !=' => $this->ContactType->id,'ContactType.delete_status' => '0','ContactType.project_id' => '0'));
							}
							$this->Session->setFlash('Contact Type updated Successfully.','default', array('class' => 'successmsg'));

                        }else{
                            $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                        }
                    }else{
                        $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));
                    }
                }else{

                    $this->Session->setFlash('Contact Type with same name already exists.','default',array('class' => 'msgTXt'));
                }
                if(isset($this->data['Action']['redirectpage'])){

                    $sessdata=$this->Session->read('newsortingby');
                    $this->redirect('/'.$sessdata);
                }else
                {
                    $this->redirect("/admins/editcontacttype/$recid");
                }

            }
            $this->ContactType->id = $recid;
            $this->data = $this->ContactType->read();
        }



        /*
        * Function name   : contacttype()
        * Description : This function used to list contact  type
        * Created On      : 16-02-11 (05:45am)
        *
        */ 
        function contacttype(){
            ##check admin session live or not
            $this->session_check_admin();
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }

            ##import contact type model for processing
            App::import("Model", "ContactType");
            $this->ContactType =   & new ContactType();    
            ##fetch data from contact type table for listing
            $field='';
            $condition = "delete_status = '0' and project_id='0'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (contact_type_name LIKE '%".$searchkeyword."%'  )";
            }
            $this->Pagination->sortByClass    = 'ContactType'; ##initaite pagination 

            $this->Pagination->total= count($this->ContactType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $contacttypedata = $this->ContactType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable

            $this->set("contacttypedata",$contacttypedata);

        }    

        /*
        * Function name   : addshippingtype()
        * Description : This function used to add shipping type
        * Created On      : 16-02-11 (09:10pm)
        *
        */     
        function addshippingtype(){
            ##check admin session live or not
            $this->session_check_admin();

            ##import shipping type model for processing
            App::import("Model", "ShippingType");
            $this->ShippingType =   & new ShippingType();
            ##check empty data
            if(!empty($this->data)) {
                #set the posted data
                $this->ShippingType->set($this->data);
                #check server side validation
                $this->ShippingType->invalidFields();
                $ptname = $this->data['ShippingType']['shipping_type_name'];

                $condition = "shipping_type_name = '".$ptname."'    AND  delete_status = '0'";
                $ptdata = $this->ShippingType->find('all',array("conditions"=>$condition));

                if(!$ptdata){
                    #save data in shipping type table
                    if($this->ShippingType->Save($this->data)){
                        $this->Session->setFlash('Shipping Type added Successfully.','default', array('class' => 'successmsg'));
                        if(isset($this->data['Action']['redirectpage'])){

                            $sessdata=$this->Session->read('newsortingby');
                            $this->redirect('/'.$sessdata);
                        }else
                        {
                            $this->redirect('/admins/shippingtype/');
                        }
                    }else{
                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                    }

                }else{
                    $this->Session->setFlash('Shipping Type with same name already exists.','default',array('class' => 'msgTXt'));
                }

            }

        }    
        /*
        * Function name   : editshippingtype()
        * Description : This function used to edit shipping type
        * Created On      : 16-02-11 (08:00pm)
        *
        */     
        function editshippingtype($recid){
            ##check admin session live or not
            $this->session_check_admin();

            ##import shipping type model for processing
            App::import("Model", "ShippingType");
            $this->ShippingType =   & new ShippingType();

            ##check empty data
            if(!empty($this->data)) {
                #set the posted data
                $this->ShippingType->set($this->data);
                #check server side validation
                $this->ShippingType->invalidFields();
                #save data in company type table
                $recid  = $this->data['ShippingType']['id'];
                $ptname  = $this->data['ShippingType']['shipping_type_name'];
                $condition = "shipping_type_name = '".$ptname."' AND id !=$recid AND  delete_status = '0'";
                $ptdata = $this->ShippingType->find('all',array("conditions"=>$condition));
                if(!$ptdata){
                    if($recid !=''){

                        if($this->ShippingType->Save($this->data)){
                            $this->Session->setFlash('Shipping Type updated Successfully.','default', array('class' => 'successmsg'));

                        }else{
                            $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                        }
                    }else{
                        $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));
                    }
                }else{

                    $this->Session->setFlash('Shipping Type with same name already exists.','default',array('class' => 'msgTXt'));
                }
                if(isset($this->data['Action']['redirectpage'])){

                    $sessdata=$this->Session->read('newsortingby');
                    $this->redirect('/'.$sessdata);
                }else
                {
                    $this->redirect("/admins/editshippingtype/$recid");
                }



            }
            $this->ShippingType->id = $recid;
            $this->data = $this->ShippingType->read();
        }


        /*
        * Function name   : shippingtype()
        * Description : This function used to list shipping  type
        * Created On      : 16-02-11 (07:40am)
        *
        */ 
        function shippingtype(){
            ##check admin session live or not
            $this->session_check_admin();

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }

            ##import contact type model for processing
            App::import("Model", "ShippingType");
            $this->ShippingType =   & new ShippingType();    
            ##fetch data from contact type table for listing
            $field='';
            $condition = "delete_status = '0'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (shipping_type_name LIKE '%".$searchkeyword."%'  )";
            }
            $this->Pagination->sortByClass    = 'ShippingType'; ##initaite pagination 

            $this->Pagination->total= count($this->ShippingType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $shippingtypedata = $this->ShippingType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable

            $this->set("shippingtypedata",$shippingtypedata);

        }    

        //=====================================Project Section==================================================//



        /*    
        *     function    : uniqueprojectname($pwd)
        *     params      : $projectname :this contain the project name entered the admin.
        *     Description : This function checks whether the project name  entered by user already exists in database or not.
        *     Created On   : 17-02-11 (01:30am)
        */


        function uniqueprojectname($projectname)
        {
            $this->layout = false;
            $err=0;
            //if($projectname==" "  || preg_match ("/[&<>%\*\,\.]/i", $projectname) || $projectname!=strtolower($projectname)) {
            if($projectname==" "  || preg_match('/^[a-zA-Z ][a-z0-9A-Z ]+$/', $projectname)==0) {
                $err=1;
                $count=1;
            } else {
                ##import Project  model for processing
                App::import("Model", "Project");
                $this->Project =   & new Project();
                $condition = "Project.project_name = '".$projectname."' AND Project.delete_status= '0'";         
                $count = $this->Project->findCount($condition) ;
            }
            ///$this->set('errormsg', $count);
            ///$this->set('projectname',trim($projectname));
            ///$this->set('err',$err);

            echo $count;
            exit;
        }    

        function uniquesystemname($systemname)
        {

            $this->layout = "ajax";
            $err=0;
            //if($projectname==" "  || preg_match ("/[&<>%\*\,\.]/i", $projectname) || $projectname!=strtolower($projectname)) {
            if($systemname==" "  || preg_match('/^[a-zA-Z ][a-z0-9A-Z ]+$/', $systemname)==0) {
                $err=1;
                $count=1;
            } else {
                ##import Project  model for processing
                App::import("Model", "Project");
                $this->Project =   & new Project();
                $condition = "Project.system_name = '".$systemname."' AND Project.delete_status= '0'";
                $count = $this->Project->findCount($condition) ;
            }
            //$this->set('errormsg', $count);
            //$this->set('systemname',trim($systemname));
            //$this->set('err',$err);

            echo $count;
            exit;
        }    


        function uniquesponsorusername($sponsorusername)
        {

            $this->layout = "ajax";
            $err=0;
            //if($projectname==" "  || preg_match ("/[&<>%\*\,\.]/i", $projectname) || $projectname!=strtolower($projectname)) {
            if($sponsorusername==" "  || preg_match('/^[a-zA-Z][a-z0-9A-Z]+$/', $sponsorusername)==0) {
                $err=1;
                $count=1;
            } else {
                ##import Project  model for processing
                App::import("Model", "User");
                $this->User =   & new User();
                $condition = "User.username = '".$sponsorusername."' AND User.delete_status= '0'";
                $count = $this->User->findCount($condition) ;
            }
            //$this->set('errormsg', $count);
            //$this->set('systemname',trim($systemname));
            //$this->set('err',$err);

            echo $count;
            exit;
        }    


        /*    
        *     function    : uniqueprojectprefix($pwd)
        *     params      : $projectname :this contain the prefix name entered the admin.
        *     Description : This function checks whether the prefix name  entered by user already exists in database or not.
        *     Created On   : 17-02-11 (01:30am)
        */


        function uniqueprojectprefix($prefixname)
        {
            $this->layout = false;
            $err=0;
            if($prefixname==" "  || preg_match ("/[&<>%\*\,\.]/i", $prefixname) || $prefixname!=strtolower($prefixname)) {
                $err=1;
                $count=1;
            } else {

                /*    ##import Project  model for processing
                App::import("Model", "Project");
                $this->Project =   & new Project();

                $condition = "Project.serialprefix = '".$prefixname."' AND Project.delete_status= '0'";
                $count = $this->Project->findCount($condition) ;*/
            }
            $this->set('errormsg', $count);    
            $this->set('prefixname',$prefixname);
        }    




        function getcontacts($companyid)
        {

            //Configure::write('debug', 2);
            $this->layout ="";
            ##import Project  model for processing

            App::import("Model", "Contact");
            $this->Contact =   & new Contact();

            $contactname = $this->getcontactsbycompanyid($companyid,'yes');    

            //$contactname =array('1'=>'1');
            $this->set('contacts1',$contactname);



        }    


        function get_product_details($rel_type){
            $this->layout="ajax"; 
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");

            if($rel_type==1)
                $rel_type="Direct";
            else
                $rel_type="3rd Party";


            if($rel_type)
            {
                $get_ids=$this->ProductType->query("select distinct pricing_coin_quantities.pricing_id,pricing_coin_quantities.product_id from pricing_coin_quantities,pricing_types where pricing_types.id=pricing_coin_quantities.pricing_id and pricing_types.product_id=pricing_coin_quantities.product_id and pricing_types.relation_type='$rel_type' and pricing_types.delete_status=0 and pricing_types.active_status=1");

                $sel_opts=$this->ProductType->query("select * from price_type_options where project_id='$projectid'");

                $product_type_names=array();
                $pricing_type_names=array();
                $selected_options=array();
				$flag=0;
                for($i=0;$i<count($get_ids);$i++)
                {
                    for($j=0;$j<count($sel_opts);$j++)
                    {
                        $flag=0;
                        if($sel_opts[$j]['price_type_options']['product_id']==$get_ids[$i]['pricing_coin_quantities']['product_id'] && $sel_opts[$j]['price_type_options']['pricing_id']==$get_ids[$i]['pricing_coin_quantities']['pricing_id'])
                        {
                            $flag=1;
                            break;
                        }
                    }

                    array_push($selected_options,$flag);
                    array_push($product_type_names,$this->getproductnamebyid($get_ids[$i]['pricing_coin_quantities']['product_id']));
                    array_push($pricing_type_names,$this->getpricingnamebyid($get_ids[$i]['pricing_coin_quantities']['pricing_id']));

                }

                $this->set('selected_options',$selected_options);
                $this->set('product_type_names',$product_type_names);
                $this->set('pricing_type_names',$pricing_type_names);
            }                   
        }

        /*
        * Function name   : addproject()
        * Description : This function used to add shipping type
        * Created On      : 16-02-11 (09:10pm)
		*/     
        function addproject($id=null) {
            //echo $this->webroot;
			##check admin session live or not
            $this->session_check_admin();

            ##import Project model for processing
            App::import("Model", "Project");
            $this->Project =   & new Project();
            $this->set("selectedprojecttype",'');
            $checkflag = false;
      
            $get_ids = $this->ProductType->query("select distinct pricing_coin_quantities.pricing_id,pricing_coin_quantities.product_id from pricing_coin_quantities,pricing_types where pricing_types.id=pricing_coin_quantities.pricing_id 
            and pricing_types.product_id=pricing_coin_quantities.product_id and pricing_types.relation_type='Direct' and pricing_types.delete_status=0 and pricing_types.active_status=1");

			$sel_opts=$this->ProductType->query("select * from price_type_options where project_id='$id'");

            $product_type_names=array();
            $pricing_type_names=array();
			$selected_options=array();
			$flag=0;

            for($i=0;$i<count($get_ids);$i++)
            {
				for($j=0;$j<count($sel_opts);$j++)
                {
                    $flag=0;
                    if($sel_opts[$j]['price_type_options']['product_id']==$get_ids[$i]['pricing_coin_quantities']['product_id'] && $sel_opts[$j]['price_type_options']['pricing_id']==$get_ids[$i]['pricing_coin_quantities']['pricing_id'])
                    {
                        $flag=1;
                        break;
                    }
                }
				array_push($selected_options,$flag);
                array_push($product_type_names,$this->getproductnamebyid($get_ids[$i]['pricing_coin_quantities']['product_id']));
                array_push($pricing_type_names,$this->getpricingnamebyid($get_ids[$i]['pricing_coin_quantities']['pricing_id']));
            }
			$this->set('selected_options',$selected_options);
            $this->set('product_type_names',$product_type_names);
            $this->set('pricing_type_names',$pricing_type_names);

            $cont="ProductType.delete_status=0 and ProductType.active_status=1";           

            ##check empty data
            if(!empty($this->data)){
				
				$this->set("selectedprojecttype",$this->data['Project']['project_type_id']);
				$this->data['Project']['start_billingdate']=$this->data['Project']['start_billing_date']; 
				$this->data['Project']['project_name'] = trim($this->data['Project']['project_name']);
				$this->data['Project']['system_name'] = strtolower(trim($this->data['Project']['system_name']));

				//echo '<pre>';print_r($this->data);die;
                #set the posted data
                $this->Project->set($this->data);
				
                #check server side validation
                $errormsg = $this->Project->invalidFields();
                if(!$errormsg){

                    if($this->data['Project']['relation_type']=="3rd Party")
                    {
                        if($this->data['Project']['distributor'])
                            $this->data['Project']['distributor']=$this->data['Project']['distributor'];
                    }
                    else{
                        $this->data['Project']['distributor']="";
					}

                    $ptname = $this->data['Project']['project_name'];
                    $sysname = $this->data['Project']['system_name'];
                    //$sername = $this->data['Project']['serialprefix']; 
                    $sername = ''; 
                    $ptname= strtolower($sysname);    // create project directory using system name not by project name   - because project name is user friendly name with spaces 
                    $condition = "system_name = '".$ptname."' AND  delete_status = '0'";
                    $ptdata = $this->Project->find('all',array("conditions"=>$condition));
					if(!$ptdata){
						//$this->configurejs($ptname);
                        //exit;
                        $condition1 = "serialprefix = '".$sername."' AND  delete_status = '0'";
                        $spdata = $this->Project->find('all',array("conditions"=>$condition1));
                        $this->data['Project']['detail_project_name']=$this->data['Project']['project_name'];
						$projecttype = array();
						
						//$projecttype['ProjectType']['project_id']= 0;
						
						/*
						//swap system and project name
                        $tmp=$this->data['Project']['project_name'];
                        $this->data['Project']['project_name']=$this->data['Project']['system_name'];
                        $this->data['Project']['system_name']=$tmp; 
						*/
						$this->data['Project']['project_name']=$this->data['Project']['project_name'];
						$this->data['Project']['system_name']=$ptname;
						
                        $projecttype['ProjectType']['site_type_id']=$this->data['Project']['project_type_id'];
                        $projecttype['ProjectType']['project_type_name']=$this->getSiteTypebyId($projecttype['ProjectType']['site_type_id']);
                        //$projecttype['ProjectType']['project_id']= $lastid;
                        //echo '<pre>';print_r($this->data);die;
                        $this->ProjectType->Save($projecttype['ProjectType']);                        
                        $project_type_id = $this->ProjectType->getLastInsertId();
                        //$this->data['Project']['project_type_id']= $project_type_id;  
						
						
                        if($this->Project->Save($this->data))
                        {
                            $this->Session->setFlash('New Project Created.','default',array('class' => 'successmsg'));                        
                            //$lastid = $this->Project->getLastInsertId();
                            $lastid = $this->Project->id;
                            
                            $projecttype['ProjectType']['project_id']= $lastid;
                            $projecttype['ProjectType']['id']=$project_type_id;
                            
                            $this->ProjectType->Save($projecttype['ProjectType']); 
                           
							// For Add section Only
						    $this->data['Sponsor']['project_id']=$lastid;

                            $this->data['Sponsor']['password'] = md5($this->data['Sponsor']['password']);
							$this->data['Sponsor']['username'] = trim($this->data['Sponsor']['username']);

                            $this->User->Save($this->data['Sponsor']);
                            $user_id = $this->User->getLastInsertId();

                            $this->data['Sponsor']['user_id']=$user_id;

                            $this->Sponsor->Save($this->data['Sponsor']);
                            $sponid = $this->Sponsor->getLastInsertId();
                            
                            $this->Project->query("update projects set sponsor_id=$sponid where id= $lastid");
							
							
                            if(isset($this->data['price_type_options']))
                            {
                                $rel_type=$this->data['Project']['relation_type'];

                                $get_ids=$this->ProductType->query("select distinct pricing_coin_quantities.pricing_id,pricing_coin_quantities.product_id from pricing_coin_quantities,pricing_types where pricing_types.id=pricing_coin_quantities.pricing_id 
                                and pricing_types.product_id=pricing_coin_quantities.product_id and pricing_types.relation_type='$rel_type' and pricing_types.delete_status=0 and pricing_types.active_status=1");
                                for($i=0;$i<count($get_ids);$i++)
                                {
                                    if($this->data['price_type_options'][$i]==1)
                                    {
                                        $this->ProductType->query("insert into price_type_options values('',$lastid,".$get_ids[$i]['pricing_coin_quantities']['product_id'].",".$get_ids[$i]['pricing_coin_quantities']['pricing_id'].")");
                                    }
                                }
                            }

                            $sponsoremail=$this->data['Sponsor']['email'];
                            //Copy default mail contents for each project ie forgotpassword, offencive comments , coin registration confirmation , comment by holder  
                            ##import EmailTemplate  model for processing
                   
                           /**
                           * Super Admin Mail Templated Enhancement : Inherit Super admin mail tempaltes to new project mail tempaltes
                           * Date : 12th Dec 2011 (QUAD-U)
                           */
                           $this->inheritSuperMailTempaltesToNewProject($lastid);
                            
                            //End copy default super admin mail templates

                            ##import Content  model for processing
                            App::import("Model", "Content");
                            $this->Content =   & new Content();

                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '1';
                            $this->data['Content']['title'] = 'Home';
                            $this->data['Content']['metatitle'] = 'Home';
                            $this->data['Content']['alias'] = 'home-page';
                            $this->data['Content']['internal_alias'] = 'home-page';
                            $this->data['Content']['content'] = HOME_PAGE;
                            $this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);
                            
                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '2';
                            $this->data['Content']['title'] = 'About Us';
                            $this->data['Content']['metatitle'] = 'About Us';
                            $this->data['Content']['alias'] = 'about-us';
                            $this->data['Content']['internal_alias'] = 'about-us';
                            $this->data['Content']['content'] = ABOUT_US;
                            $this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);

                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '3';
                            $this->data['Content']['title'] = 'Coins';
                            $this->data['Content']['metatitle'] = 'COINS';
                            $this->data['Content']['alias'] = 'coins';
                            $this->data['Content']['internal_alias'] = 'coins';
                            $this->data['Content']['content'] = COINS;
                            $this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);

                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '4';
                            $this->data['Content']['title'] = 'FAQ';
                            $this->data['Content']['metatitle'] = 'FAQ';
                            $this->data['Content']['alias'] = 'faq';
                            $this->data['Content']['internal_alias'] = 'faq';
                            $this->data['Content']['content'] = FAQ;
                            $this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);
                             
                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '5';
                            $this->data['Content']['title'] = 'Contact';
                            $this->data['Content']['metatitle'] = 'Contact';
                            $this->data['Content']['alias'] = 'contact';
                            $this->data['Content']['internal_alias'] = 'contact';
                            $this->data['Content']['content'] = CONTACT;
                            $this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);
                            
                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '6';
                            $this->data['Content']['title'] = 'Comments';
                            $this->data['Content']['metatitle'] = 'Comments';
                            $this->data['Content']['alias'] = 'comments';
                            $this->data['Content']['internal_alias'] = 'comments';
                            $this->data['Content']['content'] = ' ';
                            $this->data['Content']['is_sytem'] = '1';
                            $this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);
                             
                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '7';
                            $this->data['Content']['title'] = 'Events';
                            $this->data['Content']['metatitle'] = 'Events';
                            $this->data['Content']['alias'] = 'events';
                            $this->data['Content']['internal_alias'] = 'events';
                            $this->data['Content']['is_sytem'] = '1';
                            $this->data['Content']['active_status'] = '0';
                            $this->data['Content']['content'] =' ' ;
                            $eventchk=$this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);
                            if($eventchk){ // add child past  evetns to evetn menus 
                                   $eventpageid = $this->Content->getLastInsertId();
                                    $this->data['Content']['id'] = "";
                                    $this->data['Content']['project_id'] = $lastid;
                                    $this->data['Content']['parent_id'] = $eventpageid;
                                    $this->data['Content']['file_sequence'] = '0';
                                    $this->data['Content']['title'] = 'Past Events';
                                    $this->data['Content']['metatitle'] = 'Past Events';
                                    $this->data['Content']['alias'] = 'pastevents';
                                    $this->data['Content']['internal_alias'] = 'pastevents';
                                    $this->data['Content']['is_sytem'] = '1';
                                    $this->data['Content']['active_status'] = '0';
                                    $this->data['Content']['content'] =' ' ;
                                    $eventchk=$this->Content->Save($this->data['Content']);
                                    unset($this->data['Content']);
                                    
                                    //add event calendar as child to events
                                    $this->data['Content']['id'] = "";
                                    $this->data['Content']['project_id'] = $lastid;
                                    $this->data['Content']['parent_id'] = $eventpageid;
                                    $this->data['Content']['file_sequence'] = '0';
                                    $this->data['Content']['title'] = 'Calendar';
                                    $this->data['Content']['metatitle'] = 'Calendar';
                                    $this->data['Content']['alias'] = 'calendar';
                                    $this->data['Content']['internal_alias'] = 'calendar';
                                    $this->data['Content']['is_sytem'] = '1';
                                    $this->data['Content']['active_status'] = '0';
                                    $this->data['Content']['content'] =' ' ;
                                    $eventchk=$this->Content->Save($this->data['Content']);
                                    unset($this->data['Content']);
                            }

                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '8';
                            $this->data['Content']['title'] = 'Blogs';
                            $this->data['Content']['metatitle'] = 'Blogs';
                            $this->data['Content']['alias'] = 'blogs';
                            $this->data['Content']['internal_alias'] = 'blogs';
                            $this->data['Content']['is_sytem'] = '1';
                            $this->data['Content']['active_status'] = '0';                            
                            $this->data['Content']['content'] =' ' ;
                            $this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);
                            
                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '9';
                            $this->data['Content']['title'] = 'Chat';
                            $this->data['Content']['metatitle'] = 'Chat';
                            $this->data['Content']['alias'] = 'chat';
                            $this->data['Content']['internal_alias'] = 'chat';
                            $this->data['Content']['is_sytem'] = '1';
                            $this->data['Content']['active_status'] = '0';
                            $this->data['Content']['content'] =' ' ;
                            $this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);
                        

                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '0';
                            $this->data['Content']['title'] = 'Register';
                            $this->data['Content']['metatitle'] = 'Register';
                            $this->data['Content']['alias'] = 'register';
                            $this->data['Content']['internal_alias'] = 'register';
                            $this->data['Content']['content']=' ' ;
                            $this->data['Content']['active_status'] = '1';
                            $this->data['Content']['is_sytem'] = '2';
                            $this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);
                             
                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '0';
                            $this->data['Content']['title'] = 'Login';
                            $this->data['Content']['metatitle'] = 'Login';
                            $this->data['Content']['alias'] = 'login';
                            $this->data['Content']['internal_alias'] = 'login';
                            $this->data['Content']['content'] =' ' ;
                            $this->data['Content']['active_status'] = '1';
                            $this->data['Content']['is_sytem'] = '2';
                            $this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);
                            
                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '0';
                            $this->data['Content']['title'] = 'Dashboard';
                            $this->data['Content']['metatitle'] = 'Dashboard';
                            $this->data['Content']['alias'] = 'dashboard';
                            $this->data['Content']['internal_alias'] = 'dashboard';
                            $this->data['Content']['is_sytem'] = '2';
                            $this->data['Content']['active_status'] = '1';
                            $this->data['Content']['content'] ='' ;
                            $this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);
                             
                            $this->data['Content']['id'] = "";
                            $this->data['Content']['project_id'] = $lastid;
                            $this->data['Content']['file_sequence'] = '0';
                            $this->data['Content']['title'] = 'Logout';
                            $this->data['Content']['metatitle'] = 'Logout';
                            $this->data['Content']['alias'] = 'logout';
                            $this->data['Content']['internal_alias'] = 'logout';
                            $this->data['Content']['is_sytem'] = '2';
                            $this->data['Content']['active_status'] = '1';
                            $this->data['Content']['content'] ='' ;
                            $this->Content->Save($this->data['Content']);
                            unset($this->data['Content']);
      
                            ##import EmailTemplate  model for processing
                            App::import("Model", "Term");
                            $this->Term =   & new Term();
                            
                            $cont="Term.delete_status='0' and Term.active_status='1' and Term.project_id='0'";           
                            $terms_data=$this->Term->find('first',array('conditions'=>$cont)); 
                            $LOGINTERMS=$terms_data['Term']['termscontent'];
                            $LOGINPRIVACY=$terms_data['Term']['privacycontent'];
                            
                            $this->data['Term']['id'] = "";
                            $this->data['Term']['project_id'] = $lastid;
                            $this->data['Term']['termstitle'] = $terms_data['Term']['termstitle'];
                            $this->data['Term']['termscontent'] = $LOGINTERMS;
                            $this->data['Term']['privacytitle'] = $terms_data['Term']['privacytitle'];;
                            $this->data['Term']['privacycontent'] = $LOGINPRIVACY;
                            $this->Term->Save($this->data['Term']);

                            //STEP: IF 'Shopping Cart Enabled' id checked on , then create new shopping cart for project
                            if($this->data['Project']['is_shoppingcartenabled']=='1'){
                                $installData=Configure::read('Cart');
                                ##import Shopping Cart model for processing
                                App::import("Model", "ProjectShoppingCart");
                                $this->ProjectShoppingCart =   & new ProjectShoppingCart();
                                $cartData['project_id']=$lastid;
                                $cartData['shop_dbname']=$installData['DB_PREFIX'].$this->data['Project']['project_name'];
                                $cartData['shop_name']=$installData['DIR_PREFIX'].$this->data['Project']['project_name'];
                                $cartData['shop_fronturl']='';
                                $cartData['shop_adminurl']='';
                                $cartData['shop_adminuser']=$this->data['Sponsor']['username'];
                                $cartData['shop_adminpassword']=md5($this->data['Sponsor']['password']);    
                                $cartData['shop_adminemail']=$this->data['Sponsor']['email'];    
                                
                                $newCart=$this->ProjectShoppingCart->createShoppingCart($lastid, $cartData, $installData);
                            }
							
							// By suman
							if(!empty($this->data['ProjectOwner']['owners'])){
							 
								##import ProjectOwner model for processing
                                App::import("Model", "ProjectOwner");
                                $this->ProjectOwner =   & new ProjectOwner();
								
								$ownerArray = array();
								foreach($this->data['ProjectOwner']['owners'] as $value)
								{
								$ownerArray[] = array('owner_id' => $value,'project_id'=>$lastid );
								}
								
								$this->ProjectOwner->create();
								$this->ProjectOwner->saveAll($ownerArray);
                            }
						/*	
							if(!empty($this->data['ProjectOwner']['contacts'])){
							 
								##import ProjectContact model for processing
                                App::import("Model", "ProjectContact");
                                $this->ProjectContact =   & new ProjectContact();
								
								//pr($this->data['ProjectOwner']['contacts']);die;
								$cid=$this->data['ProjectOwner']['contacts'];
								$contactArray = array();
								//foreach($this->data['ProjectOwner']['contacts'] as $value)
								//{
								$contactArray = array('contact_id' => $cid,'project_id'=>$lastid );
								//}
														
								$this->ProjectContact->create();
								$this->ProjectContact->saveall($contactArray);
								
								//die("Hel");
                            }
						*/
                            
							/**
                            * Form Enhanacement : Set Super admin Form types as default form type for newly created projects
                            * Date : 23rd Nov 2011 (QUAD-U) 
                            */
                           $this->setDefaultFormTypesToNewProject($lastid);
                           
                            /**
                            * Form Enhanacement : Set default Member types as default memebr type for newly created projects
                            * Date : 20th Feb 2011 (QUAD-U) - Member Types and Member Enhacement 
                            */
                           $this->setDefaultMemberTypesToNewProject($lastid);
                           /**
                           * Contact Type Enhancement : Inherit Super admin contact types to new project contact type
                           * Date : 6th Dec 2011 (QUAD-U)
                           */
                           $this->inheritSuperContactTypeToNewProject($lastid);
                            
                            //Write Route file & Other Configuration//
                            $this->configureroutesfile($lastid,$ptname);
                            $this->configurejs($ptname);
                            $this->configurecss($ptname);
                            $this->configureimages($ptname);
							
							//End Write //
                            if(isset($this->data['Action']['redirectpage'])){
                                $sessdta=$this->Session->read("newsortingby");     
                                $this->redirect('/'.$sessdta);

                            }else{
                                $this->redirect(array('controller'=>'admins','action'=>'projectlist'));

                            }                
                        }
                    }else{
                        $this->Session->setFlash('Project with same name already exists.','default',array('class' => 'msgTXt'));
                    }
                }
            }
            
			$this->projecttypedropdown();            
            //get system pricing
            $cont="SystemPricing.delete_status='0' and SystemPricing.active_status='1'";           
            $sys_pri_data=$this->SystemPricing->find('list',array('conditions'=>$cont,'fields'=>array('id','system_pricing_name')));        
            $this->set('sys_pri_data',$sys_pri_data);            
            $this->getuseragreementlist($p_id=0);            
			$projectStatusTypes = $this->project_status_types();
			$this->set('projectStatusTypes',$projectStatusTypes);	
			$defaulProjectStatus = $this->get_default_projectStatus();
			$this->set('defaulProjectStatus',$defaulProjectStatus);	

			$super_borderFooter_list = $this->super_borderFooter_list();
			$this->set('super_borderFooter_list',$super_borderFooter_list);
			
			$defaultborderFooter = $this->get_default_borderFooter();
			$this->set('defaultborderFooter',$defaultborderFooter);	
			
			$billingType_list = $this->billing_type();
			$this->set('billingType_list',$billingType_list);
			
			$companies = $this->getcompaniesbyprojectid(0,'yes');
			$this->set('companies',$companies);

			//Add by puneet for display # of coins
			$unitcount = $this->getcoinsetsunitbyprojectid($id);
			$this->set('totalnumunits',$unitcount);

			 //get no of memebrs and non members
            $holders_id=$this->getMemberTypeIdByTypeName("Holder",$id);
			//get coinset
			$coinsetname = $this->getcoinsetsbyprojectid($id,'yes');
            $this->set('coinsetsdisplay',$coinsetname);
			
			$members_cnt_res = $this->Holder->getMemberListByProject($id, '','');
			$member_type = MemberType::MEMBER_TYPE_NON_MEMBER;  
			$non_members_cnt_res = $this->Holder->getMemberListByProject($id, $member_type,'');
			$members_cnt = (!empty($members_cnt_res))?count($members_cnt_res):0;
			$non_members_cnt = (!empty($non_members_cnt_res))?count($non_members_cnt_res):0;
			$this->set('members_cnt',$members_cnt);
			$this->set('non_members_cnt',$non_members_cnt);

//			echo '<pre>*********';print_r($members_cnt);
			//$contects = $this->getcontactsbyprojectid(0,'yes');
			$contects = array();
			$this->set('contects',$contects);
			
			$ownersIds = array();
			$contactsIds = array();
			if(isset($id) && !empty($id)) {
			$this->Project->id = $id;
			App::import("Model", "ProjectOwner");
            $this->ProjectOwner =   & new ProjectOwner();
			$this->Project->bindModel(  
					array('hasMany' => array(
								'ProjectOwner' => array(
								'className' => 'ProjectOwner',
								'fields'	=> array('owner_id')
								),
								'ProjectContact' => array(
								'className' => 'ProjectContact',
								'fields'	=> array('contact_id')
								),
								'PriceTypeOption' => array(
								'className' => 'PriceTypeOption'
								),
								'Sponsor' => array(
								'className' => 'Sponsor'
								)
							),
							'hasOne' => array(
								'User' => array(
								'className' => 'User'
								),
								'ProjectType' => array(
								'className' => 'ProjectType'
								)
							)
					)
				);	

				$this->data = $this->Project->read();
				//pr($this->data);die; 
				if(isset($this->data['Sponsor']['0']['email'])){
					$SponserName=$this->data['Sponsor']['0']['email'];	
					$this->set('SponserName',$SponserName);
				}			
				//$this->set("selectedprojecttype",$this->data['Project']['project_type_id']);
				//pr($this->data);
				
				if(isset($this->data['ProjectOwner']) && count($this->data['ProjectOwner']) > 0) {
					foreach($this->data['ProjectOwner'] as $owners) {
					$ownersIds[] = $owners['owner_id'];
					}
					//$ownersIds_str = implode(',',$ownersIds);
				}
				
				if(isset($this->data['ProjectContact']) && count($this->data['ProjectContact']) > 0) {
					foreach($this->data['ProjectContact'] as $contact) {
					$contactsIds[] = $contact['contact_id'];
					}
					//$ownersIds_str = implode(',',$ownersIds);
				}
			
			//print_r($this->data);
			}
			
			$this->set('contactsIds',$contactsIds);
			$this->set('ownersIds',$ownersIds);
			
		}

		/*
			@Auther			Suman Singh
			@Type			Created
			@Variable name	Project Edit action
			@Date			May 28, 2012
		*/
		
		function editproject($id=null){
            ##check admin session live or not
            $this->session_check_admin();

            ##import Project model for processing
            App::import("Model", "Project");
            $this->Project =   & new Project();
            $this->set("selectedprojecttype",'');
            $checkflag = false;
      
            $get_ids = $this->ProductType->query("select distinct pricing_coin_quantities.pricing_id,pricing_coin_quantities.product_id from pricing_coin_quantities,pricing_types where pricing_types.id=pricing_coin_quantities.pricing_id 
            and pricing_types.product_id=pricing_coin_quantities.product_id and pricing_types.relation_type='Direct' and pricing_types.delete_status=0 and pricing_types.active_status=1");

			$sel_opts=$this->ProductType->query("select * from price_type_options where project_id='$id'");

            $product_type_names=array();
            $pricing_type_names=array();
			$selected_options=array();
			$flag=0;

            for($i=0;$i<count($get_ids);$i++)
            {
				for($j=0;$j<count($sel_opts);$j++)
                {
                    $flag=0;
                    if($sel_opts[$j]['price_type_options']['product_id']==$get_ids[$i]['pricing_coin_quantities']['product_id'] && $sel_opts[$j]['price_type_options']['pricing_id']==$get_ids[$i]['pricing_coin_quantities']['pricing_id'])
                    {
                        $flag=1;
                        break;
                    }
                }
				array_push($selected_options,$flag);
                array_push($product_type_names,$this->getproductnamebyid($get_ids[$i]['pricing_coin_quantities']['product_id']));
                array_push($pricing_type_names,$this->getpricingnamebyid($get_ids[$i]['pricing_coin_quantities']['pricing_id']));
            }
			$this->set('selected_options',$selected_options);
            $this->set('product_type_names',$product_type_names);
            $this->set('pricing_type_names',$pricing_type_names);

            $cont="ProductType.delete_status=0 and ProductType.active_status=1";           
            
            ##check empty data
            if(!empty($this->data)){
				//echo '<pre>';print_r($this->data);print_r($_POST);die;
				$this->set("selectedprojecttype",$this->data['Project']['project_type_id']);
                #set the posted data
                $this->Project->set($this->data);
                #check server side validation
                $errormsg = $this->Project->invalidFields();
                if(!$errormsg){

                    if($this->data['Project']['relation_type']=="3rd Party")
                    {
                        if($this->data['Project']['distributor'])
                            $this->data['Project']['distributor']=$this->data['Project']['distributor'];
                    }
                    else{
                        $this->data['Project']['distributor']="";
					}

                    $ptname = $this->data['Project']['project_name'];
                    $sysname = $this->data['Project']['system_name'];
					$sername = ''; 
                    $ptname= strtolower($sysname);    // create project directory using system name not by project name   - because project name is user friendly name with spaces 
                    //echo $ptname;
					$condition = "system_name = '".$ptname."' AND  delete_status = '0'";
                    $ptdata = $this->Project->find('first',array("conditions"=>$condition,"order"=>"Project.id DESC"));
					//var_dump($this->data['Project']['id']);
					//var_dump($ptdata); die;
					if($ptdata['Project']['id'] === $this->data['Project']['id']){
						//$this->configurejs($ptname);
                        //die("test ohhh");
                        $condition1 = "serialprefix = '".$sername."' AND  delete_status = '0'";
                        $spdata = $this->Project->find('all',array("conditions"=>$condition1));
                        $this->data['Project']['detail_project_name']=$this->data['Project']['project_name'];
						$projecttype = array();
						
						// For Edit section
						$projecttype['ProjectType']['id'] = $this->data['ProjectType']['id'];
						$projecttype['ProjectType']['project_id']= $this->data['Project']['id'];
						
						/*
						//swap system and project name
                        $tmp=$this->data['Project']['project_name'];
                        $this->data['Project']['project_name']=$this->data['Project']['system_name'];
                        $this->data['Project']['system_name']=$tmp; 
                        */
						
						$this->data['Project']['project_name']=$this->data['Project']['project_name'];
						$this->data['Project']['system_name']=$ptname; 
						
						$projecttype['ProjectType']['site_type_id']=$this->data['Project']['project_type_id'];
                        $projecttype['ProjectType']['project_type_name']=$this->getSiteTypebyId($projecttype['ProjectType']['site_type_id']);
                        //$projecttype['ProjectType']['project_id']= $lastid;
                        
                        $this->ProjectType->Save($projecttype['ProjectType']);                        
                        $project_type_id = $this->ProjectType->getLastInsertId();
                        //$this->data['Project']['project_type_id']= $project_type_id;  

                        if($this->Project->Save($this->data))
                        {
                            $lastid = $this->Project->id;
                            
                            $projecttype['ProjectType']['project_id']= $lastid;
                            $projecttype['ProjectType']['id']=$project_type_id;
                            
                            $this->ProjectType->Save($projecttype['ProjectType']); 

							// For Edit section Only
							
                            if(isset($this->data['price_type_options']))
                            {
                                //delete prvious entries in price type options
								$this->ProductType->query("delete from price_type_options where project_id=$lastid");
								
								$rel_type=$this->data['Project']['relation_type'];
                                $get_ids=$this->ProductType->query("select distinct pricing_coin_quantities.pricing_id,pricing_coin_quantities.product_id from pricing_coin_quantities,pricing_types where pricing_types.id=pricing_coin_quantities.pricing_id 
                                and pricing_types.product_id=pricing_coin_quantities.product_id and pricing_types.relation_type='$rel_type' and pricing_types.delete_status=0 and pricing_types.active_status=1");
                                for($i=0;$i<count($get_ids);$i++) {
                                    if($this->data['price_type_options'][$i]==1)
                                    {
                                        $this->ProductType->query("insert into price_type_options values('',$lastid,".$get_ids[$i]['pricing_coin_quantities']['product_id'].",".$get_ids[$i]['pricing_coin_quantities']['pricing_id'].")");
                                    }
                                }
                            }

							//STEP: IF 'Shopping Cart Enabled' id checked on , then create new shopping cart for project
                            if($this->data['Project']['is_shoppingcartenabled']=='1'){
                                $installData=Configure::read('Cart');
                                ##import Shopping Cart model for processing
                                App::import("Model", "ProjectShoppingCart");
                                $this->ProjectShoppingCart =   & new ProjectShoppingCart();
                                $cartData['project_id']=$lastid;
                                $cartData['shop_dbname']=$installData['DB_PREFIX'].$this->data['Project']['project_name'];
                                $cartData['shop_name']=$installData['DIR_PREFIX'].$this->data['Project']['project_name'];
                                $cartData['shop_fronturl']='';
                                $cartData['shop_adminurl']='';
                                $cartData['shop_adminuser']=$this->data['User']['username'];
                                
								// By suman ... set password on basis of user password ...will do later
								//$cartData['shop_adminpassword']=md5($this->data['Sponsor']['password']);    
								$cartData['shop_adminpassword']=md5('123456');    
                                
								$cartData['shop_adminemail']=$this->data['Sponsor']['email'];    
                                //$newCart=$this->ProjectShoppingCart->createShoppingCart($lastid, $cartData, $installData);
                            }
							
							// By suman
							if(!empty($this->data['ProjectOwner']['owners'])){
							 
								##import ProjectOwner model for processing
                                App::import("Model", "ProjectOwner");
                                $this->ProjectOwner =   & new ProjectOwner();
								// Delete older records
								$this->ProjectOwner->deleteAll(array('project_id'=>$lastid));
								
								$ownerArray = array();
								if(is_array($this->data['ProjectOwner']['owners'])) {
									foreach($this->data['ProjectOwner']['owners'] as $value)
									{
									$ownerArray[] = array('owner_id' => $value,'project_id'=>$lastid );
									}
								} else {
									$ownerArray[] = array('owner_id' => $this->data['ProjectOwner']['owners'],'project_id'=>$lastid );
								}								
								$this->ProjectOwner->create();
								$this->ProjectOwner->saveAll($ownerArray);
                            }
							
							/*
							if(!empty($this->data['Admins']['pa_contacts']))
							array_push($this->data['ProjectOwner']['contacts1'], $this->data['Admins']['pa_contacts']);
							//$this->data['ProjectOwner']['contacts'] = array_merge($this->data['ProjectOwner']['contacts'],$this->data['ProjectOwner']['contacts1']);
							*/
							if(!empty($this->data['ProjectOwner']['contacts'])){
							 
								##import ProjectContact model for processing
                                App::import("Model", "ProjectContact");
                                $this->ProjectContact =   & new ProjectContact();
								
								// Delete older records
								$this->ProjectContact->deleteAll(array('project_id'=>$lastid));
								
								$contactArray = array();
								foreach($this->data['ProjectOwner']['contacts'] as $value)
								{
								$contactArray[] = array('contact_id' => $value,'project_id'=>$lastid );
								}
								
								$this->ProjectContact->create();
								$this->ProjectContact->saveAll($contactArray);
                            }

                            //End Write //
                            $this->Session->setFlash('Project Edit successfully.','default',array('class' => 'successmsg'));  
							if(isset($this->data['Action']['noredirection'])){
                                $this->redirect(array('controller'=>'admins','action'=>'editproject',$lastid));
                            } else {
								$this->redirect(array('controller'=>'admins','action'=>'projectlist'));
							}
                        }
                    }else{
                        $this->Session->setFlash('A database error occured with Project name.','default',array('class' => 'msgTXt'));
						//$this->redirect(array('controller'=>'admins','action'=>'editproject',$lastid));
                    }
                }
            }
            
			$this->projecttypedropdown();            
            //get system pricing
            $cont="SystemPricing.delete_status='0' and SystemPricing.active_status='1'";           
            $sys_pri_data=$this->SystemPricing->find('list',array('conditions'=>$cont,'fields'=>array('id','system_pricing_name')));        
            $this->set('sys_pri_data',$sys_pri_data);            
            $this->getuseragreementlist($p_id=0);            
			$projectStatusTypes = $this->project_status_types();
			$this->set('projectStatusTypes',$projectStatusTypes);	
			$defaulProjectStatus = $this->get_default_projectStatus();
			$this->set('defaulProjectStatus',$defaulProjectStatus);	

			$super_borderFooter_list = $this->super_borderFooter_list();
			$this->set('super_borderFooter_list',$super_borderFooter_list);
			
			$defaultborderFooter = $this->get_default_borderFooter();
			$this->set('defaultborderFooter',$defaultborderFooter);	
			
			$billingType_list = $this->billing_type();	 
			$this->set('billingType_list',$billingType_list);

			// To get all comapny by project id
			//$companies = $this->getcompaniesbyprojectid(0,'yes');
			// To get only project owner companies

			$cpdata = $this->getOwnerCompaniesbyprojectid($id,'yes');
			//pr($companies);
			if(empty($cpdata)) {
			//$companies = $this->getcompaniesbyprojectid(0,'yes');
			$cpdata = $this->getOwnerCompaniesbyprojectid(0,'yes');
			}
			
			$companies = Set::combine($cpdata, '{n}.Company.id', '{n}.Company.company_name');
			//print_r($companies);
			//pr($ocn);
			$this->set('companies',$companies);

			//Add by puneet for display # of coins
			$unitcount = $this->getcoinsetsunitbyprojectid($id);
			$this->set('totalnumunits',$unitcount);

			 //get no of memebrs and non members
            $holders_id=$this->getMemberTypeIdByTypeName("Holder",$id);
			//get coinset
			$coinsetname = $this->getcoinsetsbyprojectid($id,'yes');
            $this->set('coinsetsdisplay',$coinsetname);
			
			$members_cnt_res = $this->Holder->getMemberListByProject($id, '','');
			$member_type = MemberType::MEMBER_TYPE_NON_MEMBER;  
			$non_members_cnt_res = $this->Holder->getMemberListByProject($id, $member_type,'');
			$members_cnt = (!empty($members_cnt_res))?count($members_cnt_res):0;
			$non_members_cnt = (!empty($non_members_cnt_res))?count($non_members_cnt_res):0;
			$this->set('members_cnt',$members_cnt);
			$this->set('non_members_cnt',$non_members_cnt);
			$total_billing_cnt = $members_cnt;
			
//			echo '<pre>*********';print_r($members_cnt);
			$contects = $this->getcontactsbyprojectid(0,'yes');	
			//$contects = array();
			$this->set('contects',$contects);
			
			$ownersIds = array();
			$contactsIds = array();
			if(isset($id) && !empty($id)) {
			$this->Project->id = $id;
			App::import("Model", "ProjectOwner");
            $this->ProjectOwner =   & new ProjectOwner();
			$this->Project->bindModel(  
					array('hasMany' => array(
								'ProjectOwner' => array(
								'className' => 'ProjectOwner',
								'fields'	=> array('owner_id')
								),
								'ProjectContact' => array(
								'className' => 'ProjectContact',
								'fields'	=> array('contact_id')
								),
								'PriceTypeOption' => array(
								'className' => 'PriceTypeOption'
								),
								'Sponsor' => array(
								'className' => 'Sponsor'
								)
							),
							'hasOne' => array(
								'User' => array(
								'className' => 'User'
								),
								'ProjectType' => array(
								'className' => 'ProjectType'
								)
							)
					)
				);	

				$this->data = $this->Project->read();
				//echo '<pre>';print_r($this->data);
				if(isset($this->data['Sponsor']['0']['email'])){
					$SponserName=$this->data['Sponsor']['0']['email'];	
					$this->set('SponserName',$SponserName);
				}			
				//$this->set("selectedprojecttype",$this->data['Project']['project_type_id']);
				//pr($this->data);die;
				if(isset($this->data['ProjectOwner']) && count($this->data['ProjectOwner']) > 0) {
					foreach($this->data['ProjectOwner'] as $owners) {
					$ownersIds[] = $owners['owner_id'];
					}
					//$ownersIds_str = implode(',',$ownersIds);
				}
				
				if(isset($this->data['ProjectContact']) && count($this->data['ProjectContact']) > 0) {
					foreach($this->data['ProjectContact'] as $contact) {
					$contactsIds[] = $contact['contact_id'];
					}

					//$ownersIds_str = implode(',',$ownersIds);
				}
				
				if(isset($this->data['Project']['billing_type_id']) && !empty($this->data['Project']['billing_type_id'])) {
				    $pdate = $this->data['Project']['start_billingdate'];
					if( $pdate != '0000-00-00') {
					//echo "<br>";
					//$period 	= $this->getBillingPeriod($this->data['Project']['billing_type_id']);

					$nextBdate 	= $this->calculatenextdate($this->data['Project']['billing_type_id'],$pdate);
					//echo "<br>";
					
					$this->data['Project']['start_billing_date'] = $nextBdate;
					} else {
						$this->data['Project']['start_billing_date'] = date("Y-m-d",strtotime($this->data['Project']['created']));
					}
					//$nextBdate = $this->data[0]['Project']['billing_type_id'];
				}
				
				if(isset($this->data['Project']['inc_non_members_in_charge']) && !empty($this->data['Project']['inc_non_members_in_charge'])) {
					$total_billing_cnt = $members_cnt+$non_members_cnt;
					
				}
			
			//pr($this->data);die;
			}
			$this->set('total_billing_cnt',$total_billing_cnt);
			$this->set('contactsIds',$contactsIds);
			$this->set('ownersIds',$ownersIds);
			//$this->set('contacts_pa_Ids',$contacts_pa_Ids);
			
		}
		
		/*
			@Auther			Suman Singh
			@Type			Created
			@Variable name	odified
			@Date			April 19, 2012
		*/
	
        function billing_status_list() {
			##check active session
            $this->session_check_admin();
            $project_name=$this->Session->read("projectwebsite_name_admin"); 
			
			$condition='';
            $searchkeyword='';        

            ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "(ProjectType.project_type_name like '%".addslashes($searchkeyword)."%' OR ";
                $condition .= "Project.project_name like '%".addslashes($searchkeyword)."%' OR ";
                $condition .= "Sponsor.sponsor_name like '%".addslashes($searchkeyword)."%' ) AND ";
            }
            $order='';
            $limit='';
            $page='';
            ##project listing in dashboard
            App::import("Model", "Project");
            $this->Project =   & new Project();    

            App::import("Model", "SiteType");
            $this->SiteType  =    &new SiteType();

            ##fetch data from Project table for listing
            $field='';
            $condition .= "Project.delete_status = '0'";
            //echo $condition; exit;
            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='sponsor_name'){
                $this->Pagination->sortByClass    = 'Sponsor'; ##initaite pagination
            }else if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='project_type_name'){
                    $this->Pagination->sortByClass    = 'ProjectType'; ##initaite pagination
                }else{
                    $this->Pagination->sortByClass    = 'Project'; ##initaite pagination
            }

				$this->Project->bindModel(  
					array('belongsTo' => array(
								'StatusType' => array(
								'className' => 'StatusType',
								'fields'	=> array('status_type')
								)
							)
					)
				);
            
            //$projectdata=$this->Project->find('all',array("conditions"=>$condition));  


            $this->Pagination->total= count($this->Project->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->Project->bindModel(  
					array('belongsTo' => array(
								'StatusType' 	=> array(
								'className' 	=> 'StatusType',
								'fields'		=> array('status_type')
								),
								'BillingType' 	=> array(
								'className' 	=> 'BillingType',
								'fields'		=> array('billing_type')
								),
								'SystemPricing' 	=> array(
								'className' 	=> 'SystemPricing',
								'fields'		=> array('system_pricing_name')
								)
							),
							
					)
				);
				
			//echo $order;  
            //$projectdataarr = $this->Project->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            $projectdataarr = $this->Project->find('all',array("conditions"=>$condition, 'order' =>'BillingType.billing_type DESC', 'limit' => $limit, 'page' => $page));
            
			##set project Billing and Coins data in variable
			
			for($p=0; $p< sizeof($projectdataarr); $p++)
            {
                $projectdata1=$projectdataarr[$p];
                $projectdata_id=$projectdata1['Project']['id'];
                $projectdata1['Project']['numunits']=$this->getcoinsetsunitbyprojectid($projectdata_id);
				$members_cnt_res = $this->Holder->getMemberListByProject($projectdata_id, '','');
				$members_cnt = (!empty($members_cnt_res))?count($members_cnt_res):0;
                $projectdata1['Project']['members_cnt'] = $members_cnt;
				
				$member_type = MemberType::MEMBER_TYPE_NON_MEMBER;  
				$non_members_cnt_res = $this->Holder->getMemberListByProject($projectdata_id, $member_type,'');
				$non_members_cnt = (!empty($non_members_cnt_res))?count($non_members_cnt_res):0;
				$projectdata1['Project']['non_members_cnt'] = $non_members_cnt;
				$total_billing_cnt = $members_cnt;
				if(!empty($projectdata1['Project']['inc_non_members_in_charge'])) {
					$total_billing_cnt = $members_cnt+$non_members_cnt;
				}
				$projectdata1['Project']['total_billing_cnt'] = $total_billing_cnt;
				
                $projectdataarr[$p]=$projectdata1;
            }
			//pr($projectdataarr); die;
            $this->set("projectdata",$projectdataarr);

            ##project dropdownlist
            $this->projectdropdown();

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '54'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);
		}
		
		/*
			@Auther			Suman Singh
			@Type			Created
			@Variable name	odified
			@Date			April 19, 2012
		*/
	
        function email_uploads_list() {
			##check admin session live or not
            $this->session_check_admin();
          
            ##import EmailUpload type model for processing
            App::import("Model", "EmailUpload");
            $this->EmailUpload =   & new EmailUpload();
			
			App::import("Model", "User");
            //$this->EmailUpload =   & new EmailUpload();
			
			
			
			$condition = '';
			$field='';
            if(isset($this->data['EmailUpload']['searchkey']) && $this->data['EmailUpload']['searchkey']){
                $searchkeyword = $this->data['EmailUpload']['searchkey'];
                $condition .= "  EmailUpload.upload_filename LIKE '%".$searchkeyword."%' OR EmailUpload.project_name LIKE '%".$searchkeyword."%' ";
            }

            $this->Pagination->sortByClass    = 'EmailUpload'; ##initaite pagination 

           
			$this->Pagination->total= count($this->EmailUpload->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

			 $this->EmailUpload->bindModel(array('belongsTo'=>array(
										'User'=>array(
										'className' => 'User',
										'fields'=> array('User.username')
										)
									)
									)
							);
							
			//pr($this->EmailUpload->find('all'));
			
            $emailUpload_list = $this->EmailUpload->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable

            $this->set("emailUpload_list",$emailUpload_list);  
			
           
		
		}
		
		function email_upload($id = null) {
			##check admin session live or not
            $this->session_check_admin();
			##import EmailUpload type model for processing
            App::import("Model", "EmailUpload");
            $this->EmailUpload =   & new EmailUpload();
			
			App::import("Model", "User");
			
			$this->EmailUpload->bindModel(array('belongsTo'=>array(
										'User'=>array(
										'className' => 'User',
										'fields'=> array('User.username')
										)
									)
									)
							);
			$this->data = $this->EmailUpload->read(null, $id);
		}
		
		function download_email_upload($file_name=null) {
		
			/* decode the values, then set the params for downloading the file*/
			
			$file_name = base64_decode($file_name);
			
			$file = basename($file_name, ".csv");  // $file is set to "index"
			
			$this->view = 'Media';
			
			$params = array('id' => $file_name,
			
							'name' => $file,
			
							'download' => true, // force the download, don't just open.
			
							'extension' => 'csv',
			
							'path' => APP . 'webroot/files/email_uploads' . DS   // don't forget terminal 'DS'
			
							);
			
			$this->set($params);
		
		}
		
		/*
			@Auther			Suman Singh
			@Type			Created
			@Variable name	odified
			@Date			April 19, 2012
		*/
	
        function status_type_list() {
			##check admin session live or not
            $this->session_check_admin();
          
            ##import project type model for processing
            App::import("Model", "StatusType");
            $this->StatusType =   & new StatusType();
			$condition = 'delete_status=0';
			$field='';
            if(isset($this->data['StatusType']['searchkey']) && $this->data['StatusType']['searchkey']){
                $searchkeyword = $this->data['StatusType']['searchkey'];
                $condition .= "  status_type LIKE '%".$searchkeyword."%' OR notes  LIKE '%".$searchkeyword."%' ";
            }

            $this->Pagination->sortByClass    = 'StatusType'; ##initaite pagination 

            $this->Pagination->total= count($this->StatusType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $status_type_list = $this->StatusType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
         
            $this->set("status_type_list",$status_type_list);  
		}
		
		function status_type($id = null) {
			##check admin session live or not
            $this->session_check_admin();

            ##import project type model for processing
            App::import("Model", "StatusType");
            $this->StatusType =   & new StatusType();
			//pr($this->StatusType);
			##check empty data
            if(!empty($this->data)) {
				$this->StatusType->create();
				/*if($this->data['StatusType']['default']=='1'){
					 $this->StatusType->updateAll(array('StatusType.default'=> 0));
					 $this->data['StatusType']['active_status']='1';
				}*/
				$this->data['StatusType']['active_status']='1';
				if($this->StatusType->save($this->data)) {
					if(!empty($this->data['StatusType']['id'])){
						$status_id=$this->data['StatusType']['id'];
					}else{
						$status_id=$this->StatusType->getLastInsertID();
					}
					if($this->data['StatusType']['default']=='1'){
						  $this->StatusType->updateAll(array('StatusType.default'=> 1,'StatusType.active_status'=> 1), array('StatusType.id' => $status_id));
							$this->StatusType->updateAll(array('StatusType.default'=> 0), array('StatusType.id !=' => $status_id));
					}
						if(isset($this->data['Action']['redirectpage'])){
						$msg='Status Type Added Successfully.';
						$this->Session->setFlash($msg,'default', array('class' => 'successmsg'));
					   $this->redirect(array('controller' =>'admins', 'action' =>'status_type_list'));
					}
					else if(isset($this->data['Action']['noredirection'])){				
						$id = $this->StatusType->id;
						//$id=$this->data['StatusType']['id'];
						//$opr=$id==""?'add':'edit';
						$msg='Status Type saved Successfully.';
						$this->Session->setFlash($msg,'default', array('class' => 'successmsg'));
						$this->redirect(array("controller"=>"admins" , "action"=>"status_type",$id)); 			
					}
				} else
				{
					$this->validateErrors();
				}
			}
			
			if (empty($this->data)) {
            $this->data = $this->StatusType->read(null, $id);
			}

		}
		
		//========================== Configuration Functions for projects ================================//

        function replace_file($path, $path2,$string, $replace) {
            if (is_file($path) === true)
            {    
                $file = fopen($path, 'r');

                if (is_resource($file) === true)
                {
                    while (feof($file) === false)
                    {
                        file_put_contents($path2, str_replace($string, $replace, fgets($file)), FILE_APPEND);
                    }
                    fclose($file);
                }
            }
        }

        function configureroutesfile($pid,$projectname){
            if($projectname){

               /*    $filename = $_SERVER['DOCUMENT_ROOT'].'/app/config/routes.php';
                // The new person to add to the file
                $routestext ="<?php";
                $routestext .= "\n //For the project $projectname // \n";
                $routestext .="Router::connect('/(?i)$projectname/*', array('controller' => 'companies', 'action' => 'index'));";
                $routestext .= "\n //End project $projectname // \n";
                $routestext .="?>";

                file_put_contents($filename, $routestext, FILE_APPEND | LOCK_EX);
                */

                /*instead of wrinting into route file we stored route data in db and fetch it in route file*/


                $routestext="Router::connect('/(?i)$projectname/*', array('controller' => 'companies', 'action' => 'index'));";


                $data['project_id']=$pid;
                $data['project_name']=$projectname;
                $data['route_content']=$routestext;

                $this->Route->save($data);      //save it into routes table

            }else{
                return false;
            }
        }

        function configurecss($projectname,$demoproject='testproject'){
            if($projectname){
                $imgfolder = "css/$demoproject/";
                $newimgfolder ="css/$projectname/";
                $cssTree= $this->scan_directory_recursively($imgfolder);
                if(mkdir($newimgfolder)){
                    chmod($newimgfolder,0777);

                    foreach($cssTree as $dirFile){
                        $destination='';
                        $destination=$newimgfolder;
                        if($dirFile['kind']=='file'){

                            $dfile = $destination."/".$dirFile['name'];
                            copy($dirFile['path'],$dfile);
                        }
                    }
                }

                ##system style        
                $filename = "css/$demoproject/styles.css";
                $filename2 = "css/$projectname/styles.css";
                @unlink($this->webroot.$filename2);
                $fhandler=fopen($filename2,"w+");
                fwrite($fhandler,'');

                $matchstr = "/img/$demoproject";
                $repstr = "/img/$projectname";


                ##facebox css

                $filenameface = "css/$demoproject/facebox.css";
                $filename2face = "css/$projectname/facebox.css";

                @unlink($this->webroot.$filename2face);
                $fhandlerface=fopen($filename2face,"w+");
                fwrite($fhandlerface,'');

                $matchstrface = "/img/$demoproject";
                $repstrface = "/img/$projectname";

                ##admin_css.php

                $filenamephpcss = "css/$demoproject/admin_css.php";
                $filename2phpcss = "css/$projectname/admin_css.php";

                @unlink($this->webroot.$filename2phpcss);
                $fhandlerphpcss=fopen($filename2phpcss,"w+");
                fwrite($fhandlerphpcss,'');

                $matchstrphpcss = "/img/$demoproject";
                $repstrphpcss = "/img/$projectname";

                ##styles.php

                $filenamestyphp = "css/$demoproject/facebox.css";
                $filename2styphp = "css/$projectname/facebox.css";

                @unlink($this->webroot.$filename2styphp);
                $fhandlerstyphp=fopen($filename2styphp,"w+");
                fwrite($fhandlerstyphp,'');

                $matchstrstyphp = "/img/$demoproject";
                $repstrstyphp = "/img/$projectname";

                if(is_file($filename2)){
                    $this->replace_file($filename,$filename2, $matchstr, $repstr);
                } 
                if(is_file($filename2face)){
                    $this->replace_file($filenameface,$filename2face, $matchstrface, $repstrface);
                }
                if(is_file($filename2phpcss)){
                    $this->replace_file($filenamephpcss,$filename2phpcss, $matchstrphpcss, $repstrphpcss);
                }
                if(is_file($filename2styphp)){
                    $this->replace_file($filenamestyphp,$filename2styphp, $matchstrstyphp, $repstrstyphp);
                }
            }else{
                return false;
            }       
        }

        function configureimages($projectname,$demoproject='testproject'){
            if($projectname){
                $imgfolder = "img/$demoproject/";
                $imgfolder2 = "img/$demoproject/uploads";
                $newimgfolder = "img/$projectname/";
                $uploadfolder = "img/$projectname/uploads";
                $cssTree= $this->scan_directory_recursively($imgfolder);
                $cssTree1= $this->scan_directory_recursively($imgfolder2);

                if(mkdir($newimgfolder)){
                    chmod($newimgfolder,0777);
                    mkdir($uploadfolder);
                    chmod($uploadfolder,0777);

                    foreach($cssTree as $dirFile){
                        $destination='';
                        $destination=$newimgfolder;
                        if($dirFile['kind']=='file'){
                            $dfile = $destination."/".$dirFile['name'];
                            copy($dirFile['path'],$dfile);
                        }
                    }

                    foreach($cssTree1 as $dirFile1){
                        $destination1='';
                        $destination=$uploadfolder;
                        if($dirFile1['kind']=='file'){

                            $dfile1 = $destination."/".$dirFile1['name'];

                            copy($dirFile1['path'],$dfile1);

                        }
                    }

                    return true;
                }else{
                    return false;
                }
            }else{
                return false;
            }
        }

        function configurejs($projectname,$demoproject='testproject'){
            if($projectname){
                $imgfolder = "js/$demoproject/";
                $newimgfolder = "js/$projectname/";
                $cssTree= $this->scan_directory_recursively($imgfolder);
                if(mkdir($newimgfolder)){
                    chmod($newimgfolder,0777);

                    foreach($cssTree as $dirFile){
                        $destination='';
                        $destination=$newimgfolder;
                        if($dirFile['kind']=='file'){

                            $dfile = $destination."/".$dirFile['name'];

                            copy($dirFile['path'],$dfile);

                        }
                    }
                }

                ##facebox css

                $filenameface = "js/$demoproject/facebox.js";
                $filename2face = "js/$projectname/facebox.js";

                unlink($filename2face);
                $fhandlerface=fopen($filename2face,"w+");
                fwrite($fhandlerface,'');

                $matchstrface = "/img/$demoproject";
                $repstrface = "/img/$projectname";

                if(is_file($filename2face)){
                    $this->replace_file($filenameface,$filename2face, $matchstrface, $repstrface);
                }         
            }else{
                return false;
            }
        }

        //$imgTree= scan_directory_recursively($imgfolder,'img');
        //$jsTree= scan_directory_recursively($jsfolder,'js');

        function scan_directory_recursively($directory, $filter=FALSE)
        {          

            // if the path has a slash at the end we remove it here
            if(substr($directory,-1) == '/')
            {
                $directory = substr($directory,0,-1);
            }

            // if the path is not valid or is not a directory ...
            if(!file_exists($directory) || !is_dir($directory))
            {
                // ... we return false and exit the function
                return FALSE;

                // ... else if the path is readable
            }else if(is_readable($directory))
                {
                    // we open the directory
                    $directory_list = opendir($directory);

                    // and scan through the items inside
                    while (FALSE !== ($file = readdir($directory_list)))
                    {
                        // if the filepointer is not the current directory
                        // or the parent directory
                        if($file != '.' && $file != '..')
                        {
                            // we build the new path to scan
                            $path = $directory.'/'.$file;

                            // if the path is readable
                            if(is_readable($path))
                            {
                                // we split the new path by directories
                                $subdirectories = explode('/',$path);

                                // if the new path is a directory
                                if(is_dir($path))
                                {

                                    // add the directory details to the file list
                                    $directory_tree[] = array(
                                    'path'    => $path,
                                    'name'    => end($subdirectories),
                                    'kind'    => 'directory',

                                    // we scan the new path by calling this function
                                    'content' => $this->scan_directory_recursively($path, $filter));

                                    // if the new path is a file
                                }else if(is_file($path))
                                    {
                                        // get the file extension by taking everything after the last dot
                                        $extension = end(explode('.',end($subdirectories)));

                                        // if there is no filter set or the filter is set and matches
                                        if($filter === FALSE || $filter == $extension)
                                        {
                                            // add the file details to the file list
                                            $directory_tree[] = array(
                                            'path'      => $path,
                                            'name'      => end($subdirectories),
                                            'extension' => $extension,
                                            'size'      => filesize($path),
                                            'kind'      => 'file');
                                        }
                                }
                        }
                    }
                }
                // close the directory
                closedir($directory_list); 

                // return file list
                return $directory_tree;

                // if the path is not readable ...
            }else{
                // ... we return false
                return FALSE;    
            }
        }    

       //===============================================================================================================================//
        //==================================================End configuration functions==================================================//    
        //===============================================================================================================================//        

        function getcompaniesbyprojectid($projectid,$displaytype=''){
            ##display companys in a company box
            ##import Company  model for processing
            App::import("Model", "Company");
            $this->Company =   & new Company();    
            //company box
            $companyname='';

            $condition2 = "project_id = '".$projectid."' AND  delete_status = '0'";
            $cpdata = $this->Company->find('all',array("conditions"=>$condition2,'order' => array('Company.company_name ASC')));
            if($cpdata){
                if($displaytype){
                    $companyname = Set::combine($cpdata, '{n}.Company.id', '{n}.Company.company_name');

                }else{
                    foreach ($cpdata as $eachcompany){
                        $companyname = $eachcompany['Company']['company_name'].','.$companyname;
                    }
                    $companyname = substr($companyname,0,-1);
                }
            }

            return $companyname;
        }
		
		
		function getOwnerCompaniesbyprojectid($projectid,$displaytype=''){
            ##display companys in a company box
            ##import Company  model for processing
            //$projectid = 245;

			App::import("Model", "Company");
            $this->Company =   & new Company();    
			
			App::import("Model", "ProjectOwner");
            $this->ProjectOwner =   & new ProjectOwner();    
			
			 $this->ProjectOwner->bindModel(array('belongsTo'=>array(
            'Company'=>array(
            'foreignKey'=>false,
            'conditions'=>'Company.id = ProjectOwner.owner_id'
            )
            )));
			
            //company box
            $companyname='';

            //$condition2 = "project_id = '".$projectid."' AND  delete_status = '0'";
            $cpdata = $this->ProjectOwner->find('all',array("conditions"=>array('ProjectOwner.project_id'=>$projectid )));
            //pr( $cpdata);
			if($cpdata){
                /*if($displaytype){
                    $companyname = Set::combine($cpdata, '{n}.Company.id', '{n}.Company.company_name');

                }else{
                    foreach ($cpdata as $eachcompany){
                        $companyname = $eachcompany['Company']['company_name'].','.$companyname;
                    }
                    $companyname = substr($companyname,0,-1);
                } */
				return $cpdata;
            }

            
        }

		function contactsRealted_to_projects($projectid){
			App::import("Model", "Contact");
            $this->Contact =   & new Contact(); 
			
			App::import("Model", "ProjectContact");
            $this->ProjectContact =   & new ProjectContact();    
			
			 $this->ProjectContact->bindModel(array('belongsTo'=>array(
				'Contact'=>array(
				'foreignKey'=>false,
				'conditions'=>'ProjectContact.contact_id = Contact.id'
				)
				)));
				$condition2 = array('ProjectContact.project_id' => $projectid);
				$condata = $this->ProjectContact->find('all',array("conditions"=>$condition2));
				if($condata){
					$contactname = Set::combine($condata, '{n}.Contact.id', array('%s %s','{n}.Contact.firstname', '{n}.Contact.lastname'), '{n}.Company.company_name'); 
					}
			   if(!empty($contactname)){					
						return  $contactname;
			   }
						

		}

        function getcontactsbyprojectid($projectid,$displaytype=''){ 
            ##import Contacts  model for processing

            App::import("Model", "Contact");
            $this->Contact =   & new Contact();    
            $contactname="";
            //contact box
            ##relation with company
            $this->Contact->bindModel(array('belongsTo'=>array(
            'ContactType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Contact.contact_type_id = ContactType.id'
            ),'Company'=>array(
            'foreignKey'=>false,
            'conditions'=>'Contact.company_id = Company.id'
            )
            )));

            $condition2 = "Contact.project_id = '".$projectid."' AND  Contact.delete_status = '0'";
            $condata = $this->Contact->find('all',array("conditions"=>$condition2,'order'=>'Contact.id desc'));

            if($condata){
                if($displaytype){

                    $contactname = Set::combine($condata, '{n}.Contact.id', array('%s, %s%s','{n}.ContactType.contact_type_name','{n}.Contact.firstname', '{n}.Contact.lastname'), '{n}.Company.company_name'); 
                }else{
                    foreach ($condata as $eachcontact){
                        $contactname = $eachcontact['Contact']['firstname'].' '.$eachcontact['Contact']['lastname'].' ['.$eachcontact['Company']['company_name'].'] ('.$eachcontact['ContactType']['contact_type_name'].'),'.$contactname;
                    }
                    $contactname = substr($contactname,0,-1);
                }
            }
            return $contactname;
            exit;
        }
        function getcontactsbycompanyid($companyid,$displaytype=''){ 

            ##import Contacts  model for processing
            App::import("Model", "Contact");
            $this->Contact =   & new Contact();    
            $contactname="";
            //contact box
            ##relation with company
            $this->Contact->bindModel(array('belongsTo'=>array(
            'ContactType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Contact.contact_type_id = ContactType.id'
            ),'Company'=>array(
            'foreignKey'=>false,
            'conditions'=>'Contact.company_id = Company.id'
            )
            )));

            $condition2 = "Contact.company_id in (".$companyid.") AND  Contact.delete_status = '0'";    
            $condata = $this->Contact->find('all',array("conditions"=>$condition2,'order'=>'Contact.id desc'));
            if($condata){
                if($displaytype){

                    $contactname = Set::combine($condata, '{n}.Contact.id', array('%s, %s%s','{n}.ContactType.contact_type_name','{n}.Contact.firstname', '{n}.Contact.lastname'), '{n}.Company.company_name'); 
                }else{
                    foreach ($condata as $eachcontact){
                        $contactname = $eachcontact['Contact']['firstname'].' '.$eachcontact['Contact']['lastname'].' ['.$eachcontact['Company']['company_name'].'] ('.$eachcontact['ContactType']['contact_type_name'].'),'.$contactname;
                    }
                    $contactname = substr($contactname,0,-1);
                }
            }

            return $contactname;
            exit;
        }

		function getcontactsbycompanyid_ajax(){
			$displaytype = 'yes';
			Configure::write('debug', '0');
			//$this->layout = false;
			//print_r($this->data);
			//print_r($_REQUEST);	die;
			$status = 0;
			if(isset($_REQUEST['id'])) {
				$ids = $_REQUEST['id'];
				//print_r($_REQUEST);
				$ids = '';
				$ids = implode(',',$_REQUEST['id']);
				$selectionIds = $_REQUEST['selectedOption'];
				##import Contacts  model for processing
				App::import("Model", "Contact");
				$this->Contact =   & new Contact();    
				$contactname="";
				//contact box
				##relation with company
				$this->Contact->bindModel(array('belongsTo'=>array(
				'ContactType'=>array(
				'foreignKey'=>false,
				'conditions'=>'Contact.contact_type_id = ContactType.id'
				),'Company'=>array(
				'foreignKey'=>false,
				'conditions'=>'Contact.company_id = Company.id'
				)
				)));

				//$condition2 = "Contact.company_id in (".$ids.") AND  Contact.delete_status = '0' AND ContactType.project_lead = '1'";    
				$condition2 = "Contact.company_id in (".$ids.") AND  Contact.delete_status = '0'";    
				$condata = $this->Contact->find('all',array("conditions"=>$condition2,'order'=>'Contact.id desc'));

				if($condata){
					if($displaytype){

						$contactname = Set::combine($condata, '{n}.Contact.id', array('%s %s','{n}.Contact.firstname', '{n}.Contact.lastname'), '{n}.Company.company_name'); 
					}else{
						foreach ($condata as $eachcontact){
							$contactname = $eachcontact['Contact']['firstname'].' '.$eachcontact['Contact']['lastname'].' ['.$eachcontact['Company']['company_name'].'] ('.$eachcontact['ContactType']['contact_type_name'].'),'.$contactname;
						}
						$contactname = substr($contactname,0,-1);
					}
				}
				//print_r($condata);die;
				if(!empty($selectionIds))
				$selectionIds = explode(',',$selectionIds);
				
				$this->set('contects',$contactname);
				$this->set('selectionIds',$selectionIds);
				//print_r($contactname);die;
			}
            //exit(0);
        }
		
        function getcontactsbycompanyid_ajax_edit() {
		$displaytype = 'yes';
			Configure::write('debug', '0');
			//$this->layout = false;
			//print_r($this->data);
			//print_r($_REQUEST);	die;
			$status = 0;
			if(isset($_REQUEST['id'])) {
				$ids = $_REQUEST['id'];
				//print_r($_REQUEST);
				$ids = '';
				$ids = implode(',',$_REQUEST['id']);
				$selectionIds = $_REQUEST['selectedOption'];
				##import Contacts  model for processing
				App::import("Model", "Contact");
				$this->Contact =   & new Contact();    
				$contactname="";
				//contact box
				##relation with company
				$this->Contact->bindModel(array('belongsTo'=>array(
				'ContactType'=>array(
				'foreignKey'=>false,
				'conditions'=>'Contact.contact_type_id = ContactType.id'
				),'Company'=>array(
				'foreignKey'=>false,
				'conditions'=>'Contact.company_id = Company.id'
				)
				)));

				//$condition2 = "Contact.company_id in (".$ids.") AND  Contact.delete_status = '0' AND ContactType.project_lead != '1'";    
				$condition2 = "Contact.company_id in (".$ids.") AND  Contact.delete_status = '0'";    
				$condata = $this->Contact->find('all',array("conditions"=>$condition2,'order'=>'Contact.id desc'));

				if($condata){
					if($displaytype){

						$contactname = Set::combine($condata, '{n}.Contact.id', array('%s%s','{n}.Contact.firstname', '{n}.Contact.lastname'), '{n}.Company.company_name'); 
					}else{
						foreach ($condata as $eachcontact){
							$contactname = $eachcontact['Contact']['firstname'].' '.$eachcontact['Contact']['lastname'].' ['.$eachcontact['Company']['company_name'].'] ('.$eachcontact['ContactType']['contact_type_name'].'),'.$contactname;
						}
						$contactname = substr($contactname,0,-1);
					}
				}
				//print_r($condata);die;
				if(!empty($selectionIds))
				$selectionIds = explode(',',$selectionIds);
				
				$this->set('contects',$contactname);
				$this->set('selectionIds',$selectionIds);
				//print_r($contactname);die;
			}
		}
		
		function getcoinsetsbyprojectid($projectid,$displaytype=''){

            ##import coinset  model for processing
            App::import("Model", "Coinset");
            $this->Coinset =   & new Coinset();    
            $coinsetname="";
            $unitcount=0;
            //Coinset box

            $condition3 = "Coinset.project_id = '".$projectid."' AND  Coinset.delete_status = '0'";
            $coinsetdata = $this->Coinset->find('all',array("conditions"=>$condition3,'order'=>'Coinset.coinset_name asc'));

            if($coinsetdata){
                if($displaytype){
                    $coinsetname = Set::combine($coinsetdata, '{n}.Coinset.id', '{n}.Coinset.coinset_name');

                }else{
                    foreach ($coinsetdata as $eachcoinset){
                        $coinsetname = $eachcoinset['Coinset']['coinset_name'].', '.$coinsetname;
                        $unitcount = ($eachcoinset['Coinset']['numunits']+$unitcount);
                    }
                    $coinsetname = substr($coinsetname,0,-2);
                }
            }

            return $coinsetname;
            exit;
        }

        function getcoinsetsunitbyprojectid($projectid){

            ##import coinset  model for processing
            App::import("Model", "Coinset");
            $this->Coinset =   & new Coinset();    
            $coinsetname="";
            $unitcount=0;
            //Coinset box

            $condition3 = "Coinset.project_id = '".$projectid."' AND  Coinset.delete_status = '0'";
            $coinsetdata = $this->Coinset->find('all',array("conditions"=>$condition3,'order'=>'Coinset.id desc'));

            if($coinsetdata){
                foreach ($coinsetdata as $eachcoinset){
                    $coinsetname = $eachcoinset['Coinset']['coinset_name'].', '.$coinsetname;
                    $unitcount = ($eachcoinset['Coinset']['numunits']+$unitcount);
                }
                $coinsetname = substr($coinsetname,0,-2);
            }

            return $unitcount;
            exit;
        }

        function getsponsornamebyprojectid($projectid){

            ##import coinset  model for processing
            App::import("Model", "Sponsor");
            $this->Sponsor =   & new Sponsor();    
            $coinsetname="";
            $unitcount=0;
            //Coinset box

            $condition3 = "Sponsor.project_id = '".$projectid."' AND  Sponsor.delete_status = '0'";
            $sponsordata = $this->Sponsor->find('all',array("conditions"=>$condition3));
			$sponsorname = '';
            if($sponsordata){
                $sponsorname = $sponsordata[0]['Sponsor']['sponsor_name'];
            }

            return $sponsorname;
            exit;
        }

      

function editprojectdtl(){  
	##check user session live or not

	$this->session_check_admin();
	$projectid = $this->Session->read("sessionprojectid");
	
	$project_name=$this->Session->read("projectwebsite_name_admin");  
	$this->set('current_project_name',$project_name);
	$this->set('projectid',$projectid);

	$current_domain= $_SERVER['HTTP_HOST'];
	$this->set('current_domain',$current_domain);    
	//for active menu display

	$this->set('page_url','edit_project_detail');
	$project_name=$this->Session->read("projectwebsite_name_admin");

	App::import("Model", "Project");
	$this->Project =   & new Project();
	App::import("Model", "Sponsor");
	$sponsor =   & new Sponsor();
	App::import("Model", "User");
	$user =   & new User();


	# set help condition
	App::import("Model", "HelpContent");
	$this->HelpContent =  & new HelpContent();
	$condition = "HelpContent.id = '2'";  
	$hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
	$this->set("hlpdata",$hlpdata);
	# set help condition


	//if(empty($project_name)) $this->redirect('/admins/session_expired');

	//$this->set('project_name',$project_name);

	$projectDetails=$this->getprojectdetails($projectid);
	 /* Add code for show next billing date */

	if(!empty($projectDetails['Project']['billing_type_id'])) {
		$pdate = $projectDetails['Project']['start_billingdate'];
		if( $pdate != '0000-00-00') {
			//$period 	= $this->getBillingPeriod($projectDetails['Project']['billing_type_id']);

			$nextBdate 	= $this->calculatenextdate($projectDetails['Project']['billing_type_id'],$pdate);

			//$tmp_date 	= strtotime(date("Y-m-d", strtotime($pdate)) . " +$period month");
			//$nextBdate 	= date("Y-m-d",$tmp_date);
			//$this->data['Project']['start_billing_date'] = $nextBdate;
			$this->set('nextBdate',$nextBdate);
		} 
	}
	$sponserid=$projectDetails['Project']['sponsor_id'];  
	$user_name=$projectDetails['User']['username'];  
	$this->set('user_name',$user_name);
	$this->set('sponserid',$sponserid);
	$sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid));
	$this->set('project',$projectDetails);    
	$this->set('sponsor',$sponsordetails);
 
	##check empty data
	if(!empty($this->data)) {           	
		#set the posted data 
		$this->Project->set($this->data);
                #check server side validation
                $errormsg = $this->Project->invalidFields();
//pr($this->data);die;
if(!$errormsg){
	if(isset($this->data['Project']['relation_type'])=="3rd Party")
	{
		if($this->data['Project']['distributor'])
			$this->data['Project']['distributor']=$this->data['Project']['distributor'];

	}
	else
		$this->data['Project']['distributor']="";

	$ptname =$this->data['Project']['detail_project_name'];
	//$sername = $this->data['Project']['serialprefix'];

	$condition = "project_name = '".$ptname."'    AND  Project.delete_status = '0' AND Project.id !='".$projectid."'";
	$ptdata = $this->Project->find('all',array("conditions"=>$condition));
	if(!$ptdata){
		//$condition1 = "serialprefix = '".$sername."'    AND  Project.delete_status = '0' AND Project.id !='".$projectid."'";
		//$spdata = $this->Project->find('all',array("conditions"=>$condition1));
		//if(!$spdata){
		$this->data['Project']['id'] = $projectid;
		$this->data['Project']['system_name'] = $this->data['Project']['detail_project_name'];

		if(isset($this->data['price_type_options']))
		{
			$rel_type=$this->data['Project']['relation_type'];

			//delete prvious entries in price type options
			$this->ProductType->query("delete from price_type_options where project_id=$projectid");

			$get_ids=$this->ProductType->query("select distinct pricing_coin_quantities.pricing_id,pricing_coin_quantities.product_id from pricing_coin_quantities,pricing_types where pricing_types.id=pricing_coin_quantities.pricing_id 
			and pricing_types.product_id=pricing_coin_quantities.product_id and pricing_types.relation_type='$rel_type' and pricing_types.delete_status=0 and pricing_types.active_status=1");
			for($i=0;$i<count($get_ids);$i++)
			{
				if($this->data['price_type_options'][$i]==1)
				{
					$this->ProductType->query("insert into price_type_options values('',$projectid,".$get_ids[$i]['pricing_coin_quantities']['product_id'].",".$get_ids[$i]['pricing_coin_quantities']['pricing_id'].")");
				}
			}
		}
		//pr($this->data);die('dfdf');
		if($this->Project->Save($this->data)){

				//save data in sponsors table 
				//pr($this->data);die;
				$this->data['Sponsor']['project_id']=$this->Project->id;
				$this->data['Sponsor']['user_id']=$projectDetails['Sponsor']['user_id'];
				$this->data['Sponsor']['sponsor_name']=$projectDetails['Sponsor']['sponsor_name'];
				$this->Sponsor->Save($this->data);
				//pr($this->data);	  
				/*user login conditon*/
				if(!empty($this->data['User']['old_password'])){
					//echo md5($this->data['User']['old_password']);
					//echo "<br />";
					//echo $projectDetails['User']['password'];
					
					if($projectDetails['User']['password'] == md5($this->data['User']['old_password'])){  
						
						if($this->data['User']['new_password'] == $this->data['User']['con_password']){
									
						//pr($projectDetails);
						//die("assssummmmmmmmm 1111111");
							$this->data['User']['password'] = md5($this->data['User']['new_password']);
							 $this->data['User']['id'] = $projectDetails['User']['id'];
							//pr($this->data);die('M');
							 $this->User->Save($this->data);
						}else{						
								
							 $this->Session->setFlash('New password and confirm password are not matched','default',array('class' => 'successmsg'));
							 $this->redirect(array('controller'=>'admins','action'=>'editprojectdtl'));
						}		
					}else{
						  
						//unset($this->data);
						//die("in elseee");	
						$this->Session->setFlash('Old password is wrong','default',array('class' => 'successmsg'));
						$this->redirect(array('controller'=>'admins','action'=>'editprojectdtl'));
					}
				}
				/*--------------------------------end---------------------------------*/


				//pr($this->data);die('last');

			  ##import Shopping Cart model for processing
			  App::import("Model", "ProjectShoppingCart");
			  $this->ProjectShoppingCart =   & new ProjectShoppingCart();
			   
			if($this->data['Project']['is_shoppingcartenabled']=='1'){
				// GET SPONSOR LOGIN DETAILS 

			   $sponseruid=$sponsordetails['Sponsor']['user_id'];   
			   $sponsoruserdetails=$this->User->find('first',array("conditions"=>'id='.$sponseruid));
			   $installData=Configure::read('Cart'); 
				//STEP: IF 'Shopping Cart Enabled' id checked on , then create new shopping cart for project
				$cartData['project_id']=$projectid;
				$cartData['shop_dbname']=$installData['DB_PREFIX'].$this->data['Project']['detail_project_name'];
				$cartData['shop_name']=$installData['DIR_PREFIX'].$this->data['Project']['detail_project_name'];
				$cartData['shop_fronturl']='';
				$cartData['shop_adminurl']='';
				$cartData['shop_adminuser']=$sponsoruserdetails['User']['username'];
				$cartData['shop_adminpassword']=$sponsoruserdetails['User']['password'];    
				$cartData['shop_adminemail']=$sponsordetails['Sponsor']['email'];    
				
				$newCart=$this->ProjectShoppingCart->createShoppingCart($projectid, $cartData, $installData);
			}else{
				//STEP: IF 'Shopping Cart Enabled' id checked off , then disable new shopping cart for project
				$newCart=$this->ProjectShoppingCart->disableProjectShoppingCart($projectid);
			}

			$this->Session->setFlash('Project Details updated Successfully.','default', array('class' => 'successmsg'));

			if(isset($this->data['Action']['redirectpage'])){
				$this->redirect(array('controller'=>'admins','action'=>'editprojectdtl'));
			}else{
				$this->redirect(array('controller'=>'admins','action'=>'editprojectdtl'));
			}

		}
		//End upload images linke side A side B and logo

		/*
		}else{
		$this->Session->setFlash('Serial Prefix with same name already exists.','default',array('class' => 'successmsg'));
		}*/
	}else{
		$this->Session->setFlash('Project with same name already exists.','default',array('class' => 'successmsg'));
	}
}

}

            //for theme details

            $projectid = $this->Session->read("sessionprojectid");

            $this->Project->id = $projectid;
            $this->data = $this->Project->read();
			//echo '<pre>';print_r($this->data);
             
            $get_site_type_id=$this->Project->query("select site_type_id from project_types where id=".$this->data['Project']['project_type_id']);
            $site_type_id=$get_site_type_id[0]['project_types']['site_type_id'];

            //print_r($this->data); die("Hiiiii");
            $this->set("selectedprojecttype",$site_type_id);
            $this->set("project_type_id",$this->data['Project']['project_type_id']);
            
            $this->projecttypedropdown();          
            $rel_type=$this->data['Project']['relation_type'];

            if($rel_type=="")
                $rel_type="Direct";       

            $get_ids=$this->ProductType->query("select distinct pricing_coin_quantities.pricing_id,pricing_coin_quantities.product_id from pricing_coin_quantities,pricing_types where pricing_types.id=pricing_coin_quantities.pricing_id 
            and pricing_types.product_id=pricing_coin_quantities.product_id and pricing_types.relation_type='$rel_type' and pricing_types.delete_status=0 and pricing_types.active_status=1");

            $sel_opts=$this->ProductType->query("select * from price_type_options where project_id='$projectid'");



            $product_type_names=array();
            $pricing_type_names=array();
            $selected_options=array();
			$flag=0;
            for($i=0;$i<count($get_ids);$i++)
            {
                for($j=0;$j<count($sel_opts);$j++)
                {
                    $flag=0;
                    if($sel_opts[$j]['price_type_options']['product_id']==$get_ids[$i]['pricing_coin_quantities']['product_id'] && $sel_opts[$j]['price_type_options']['pricing_id']==$get_ids[$i]['pricing_coin_quantities']['pricing_id'])
                    {
                        $flag=1;
                        break;
                    }

                }

                array_push($selected_options,$flag);
                array_push($product_type_names,$this->getproductnamebyid($get_ids[$i]['pricing_coin_quantities']['product_id']));
                array_push($pricing_type_names,$this->getpricingnamebyid($get_ids[$i]['pricing_coin_quantities']['pricing_id']));

            }

            $this->set('selected_options',$selected_options);
            $this->set('product_type_names',$product_type_names);
            $this->set('pricing_type_names',$pricing_type_names);

            $companyname = $this->getcompaniesbyprojectid($projectid,'yes');
            //$this->data['Company']['companies'] = $companyname ;
            $this->set('companies',$companyname);

            $sponsorname = $this->getsponsornamebyprojectid($projectid);
            if(!$sponsorname){
                $sponsorname = "Sponsor not added yet.";
            }
            $this->data['Company']['sponsorname'] = $sponsorname ;

            $contactname = $this->getcontactsbyprojectid($projectid,'yes');

            //$this->data['Company']['contacts'] = $contactname ;
            $this->set('contacts',$contactname);
			 
            $coinsetname = $this->getcoinsetsbyprojectid($projectid,'yes');
			//echo '<pre>**********';print_r($coinsetname);die;
            $unitcount = $this->getcoinsetsunitbyprojectid($projectid);

            $this->set('totalnumunits',$unitcount);
            $this->set('coinsetsdisplay',$coinsetname);

            $this->data = array_merge($this->data);
            
            
             //get system pricing list
            $cont="SystemPricing.delete_status='0' and SystemPricing.active_status='1'";           
            $sys_pri_data=$this->SystemPricing->find('list',array('conditions'=>$cont,'fields'=>array('id','system_pricing_name')));        
            $this->set('sys_pri_data',$sys_pri_data);

            //get no of memebrs and non members
            $holders_id=$this->getMemberTypeIdByTypeName("Holder",$projectid);
			
            $holders_id=$holders_id['MemberType']['id'];
            $non_holders_id=$this->getMemberTypeIdByTypeName("Non Holder",$projectid);
            $non_holders_id=$non_holders_id['MemberType']['id'];
            $non_members_id=$this->getMemberTypeIdByTypeName("Non Member",$projectid);
            $non_members_id=$non_members_id['MemberType']['id'];
            
           /*$members_cnt=$this->Holder->query("select count(*) as cnt from holders where (member_type=$holders_id || member_type=$non_holders_id)");
            $members_cnt=$members_cnt[0][0]['cnt'];
            
            $non_members_cnt=$this->Holder->query("select count(*) as cnt from holders where member_type=$non_members_id ");
            $non_members_cnt=$non_members_cnt[0][0]['cnt'];
            
             $this->set('members_cnt',$members_cnt);
             $this->set('non_members_cnt',$non_members_cnt); */
			$members_cnt_res = $this->Holder->getMemberListByProject($projectid, '','');
			$member_type = MemberType::MEMBER_TYPE_NON_MEMBER;  
			$non_members_cnt_res = $this->Holder->getMemberListByProject($projectid, $member_type,'');
			$members_cnt = (!empty($members_cnt_res))?count($members_cnt_res):0;
			$non_members_cnt = (!empty($non_members_cnt_res))?count($non_members_cnt_res):0;
			$this->set('members_cnt',$members_cnt);
			$this->set('non_members_cnt',$non_members_cnt);
			$total_billing_cnt = $members_cnt;
			$total_billing_cnt=$members_cnt+$non_members_cnt;
			$this->set('total_billing_cnt',$total_billing_cnt);
			
			##country drop down
            $this->countrydroupdown();
            $this->statedroupdown();
             
            $this->getuseragreementlist($projectid);
			
			$billingType_list = $this->billing_type();
			$this->set('billingType_list',$billingType_list);

			/*Add by puneet for display next billing date*/

			/*if(isset($this->data['Project']['billing_type_id']) && !empty($this->data['Project']['billing_type_id'])) {
				    $pdate = $this->data['Project']['start_billingdate'];
					if( $pdate != '0000-00-00') {
					//echo "<br>";
					$period 	= $this->getBillingPeriod($this->data['Project']['billing_type_id']);
					//echo "<br>";
					$tmp_date 	= strtotime(date("Y-m-d", strtotime($pdate)) . " +$period month");
					$nextBdate 	= date("Y-m-d",$tmp_date);
					$this->data['Project']['start_billing_date'] = $nextBdate;
					} else {
					//echo "<br>";
					//echo $this->data['Project']['created'];
					//echo "<br>";
					$this->data['Project']['start_billing_date'] = date("Y-m-d",strtotime($this->data['Project']['created']));
					}
					//$nextBdate = $this->data[0]['Project']['billing_type_id'];
				}*/
        }

        /*******************************************************************
        * Function Name: projectimages
        * Function Arguments: None
        * Function Return: (array)
        * Purpose:

        * Created By      : SDN
        * Created: 4 Mar, 2011
        * Modified: 4 June, 2011
        ********************************************************************/


        function projectimages(){
            ##Configure::write('debug', 3);    
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            //for active menu display
            $this->set('page_url','edit_project_detail');

            //         $projectid=$this->Session->read("projectwebsite_id");    
            $project_name=$this->Session->read("projectwebsite_name_admin");

            App::import("Model", "Project");
            $this->Project =   & new Project();
            App::import("Model", "Sponsor");
            $sponsor =   & new Sponsor();
            App::import("Model", "User");
            $user =   & new User();


            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '2'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();

            //         if(empty($project_name)) $this->redirect('/admins/session_expired');
            //             
            $this->set('project_name',$project_name);

            $projectDetails=$this->getprojectdetails($projectid);

            $this->set('project',$projectDetails);    
            //$userid = $this->Session->read("User.User.id");
            ##check empty data
            if(!empty($this->data)) {

                #set the posted data
                $this->Project->set($this->data);
                #check server side validation
                $errormsg = $this->Project->invalidFields();

                if(!$errormsg){

                    $this->data['Project']['id'] = $projectid;
                    //first upload images linke side A side B and logo
                    $this->File = & new FileComponent;
                    $filePath =  'img' . DS . $project_name . DS.'uploads' ;
                    $this->File->setDestPath($filePath);

                    if($this->data['Project']['coinsidea']['name'] !=''){
                        $file_name1 = $this->File->setFileName($this->data['Project']['coinsidea']['name']); 
                        $tmp1 = $this->data['Project']['coinsidea']['tmp_name'];
                        $fileNamesidea = $this->File->uploadcoin($file_name1,$tmp1,true);
                        $this->data['Project']['sidea'] = $fileNamesidea;
                    }
                    if($this->data['Project']['coinsideb']['name'] !=''){
                        $file_name2 = $this->File->setFileName($this->data['Project']['coinsideb']['name']); 
                        $tmp2 = $this->data['Project']['coinsideb']['tmp_name'];
                        $file_namesideb = $this->File->uploadcoin($file_name2,$tmp2,true);
                        $this->data['Project']['sideb'] = $file_namesideb;
                    }
                    if($this->data['Project']['coinlogo']['name'] !=''){
                        ##upload image
                        $file_name3 = $this->File->setFileName($this->data['Project']['coinlogo']['name']); 
                        $tmp3 = $this->data['Project']['coinlogo']['tmp_name'];
                        $file_namelogo = $this->File->uploadlogo($file_name3,$tmp3,true);
                        $uploadedfilepath = 'img' . DS . $project_name . DS.'uploads/'. $file_namelogo ;

                        $setnewdiamentions = $this->checkmaxfilesize($uploadedfilepath);
                        unlink($uploadedfilepath);
                        $file_name3 = $this->File->setFileName($this->data['Project']['coinlogo']['name']); 
                        $tmp3 = $this->data['Project']['coinlogo']['tmp_name'];
                        $file_namelogo = $this->File->uploadlogo($file_name3,$tmp3,true,$setnewdiamentions);

                        $this->data['Project']['logo'] = $file_namelogo;
                    }
                    if($this->data['Project']['coinedge']['name'] !=''){
                        $file_name4 = $this->File->setFileName($this->data['Project']['coinedge']['name']); 
                        $tmp4 = $this->data['Project']['coinedge']['tmp_name'];
                        $file_nameedge = $this->File->uploadlogo($file_name4,$tmp4,true,'300x12');
                        $this->data['Project']['edge'] = $file_nameedge;
                    }
                    if($this->data['Sponsor']['sponlogo']['name'] !=''){

                        $filePath =  'img' . DS . $ptname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name5 = $this->File->setFileName($this->data['Sponsor']['sponlogo']['name']); 
                        $tmp5 = $this->data['Sponsor']['sponlogo']['tmp_name'];
                        $fileNamesidea5 = $this->File->uploadlogo($file_name5,$tmp5,true,'250x250');

                        $this->data['Sponsor']['logo'] = $fileNamesidea5;
                    }

                    $this->data['Sponsor']['user_id']=$userid;



                    // for Sponsor details
                    //Save Sponsor Data

                    if($sponsor->save($this->data)){}
                    if($this->Project->Save($this->data)){
                        $this->Session->setFlash('Project images information has been saved.','default', array('class' => 'successmsg'));

                        if(isset($this->data['Action']['redirectpage'])){
                            $this->redirect('/admins/editprojectdtl');
                        }else{
                            $this->redirect('/admins/projectimages');
                        }
                    }
                    //End upload images linke side A side B and logo
                }

            }


            $this->Project->id = $projectid;
            $this->data = $this->Project->read();
            $this->set("projectname",$this->data['Project']['project_name']);
            $this->set("serialdisplayside",$this->data['Project']['serialdisplayside']);
            $this->data = array_merge($this->data);
        }

        function projecttracking(){

            ##Configure::write('debug', 3);    

            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            //for active menu display

            $this->set('page_url','edit_project_detail');


            //         $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name_admin");


            App::import("Model", "Project");

            $this->Project =   & new Project();

            App::import("Model", "Sponsor");

            $sponsor =   & new Sponsor();

            App::import("Model", "User");

            $user =   & new User();




            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '2'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition




            App::import("Model", "ProjectType");

            $this->ProjectType =   & new ProjectType();


            //         if(empty($project_name)) $this->redirect('/admins/session_expired');



            //         $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($projectid);


            $this->set('project',$projectDetails);    

            //         $userid = $this->Session->read("User.User.id");

            ##check empty data

            if(!empty($this->data)) {


                //print_r($this->data);die;
                #set the posted data

                $this->Project->set($this->data);

                #check server side validation

                $errormsg = $this->Project->invalidFields();



                if(!$errormsg){



                    $this->data['Project']['id'] = $projectid;



                    $data = explode("-", $this->data['Project']['dateartrecieved']);

                    $time = explode(" ", $this->data['Project']['dateartrecieved']);

                    $time1[1] = explode(":", $time[1]);

                    $date = new DateTime();//print_r($time);

                    $date->setTime($time1[1][0],$time1[1][1]);

                    $date->setDate($data[2], $data[0], $data[1]);

                    $this->data['Project']['dateartrecieved']= $date->format("Y-m-d h:i:s");



                    $data = explode("-", $this->data['Project']['dateartapproval']);

                    $time = explode(" ", $this->data['Project']['dateartapproval']);

                    $time1[1] = explode(":", $time[1]);

                    $date = new DateTime();//print_r($time);

                    $date->setTime($time1[1][0],$time1[1][1]);

                    $date->setDate($data[2], $data[0], $data[1]);
                    $this->data['Project']['dateartapproval']= $date->format("Y-m-d h:i:s");

                    $data = explode("-", $this->data['Project']['datearttochipco']);
                    $time = explode(" ", $this->data['Project']['datearttochipco']);
                    $time1[1] = explode(":", $time[1]);
                    $date = new DateTime();//print_r($time);
                    $date->setTime($time1[1][0],$time1[1][1]);
                    $date->setDate($data[2], $data[0], $data[1]);
                    $this->data['Project']['datearttochipco']= $date->format("Y-m-d h:i:s");

                    $data = explode("-", $this->data['Project']['dateartproofsponsor']);
                    $time = explode(" ", $this->data['Project']['dateartproofsponsor']);
                    $time1[1] = explode(":", $time[1]);
                    $date = new DateTime();//print_r($time);
                    $date->setTime($time1[1][0],$time1[1][1]);
                    $date->setDate($data[2], $data[0], $data[1]);
                    $this->data['Project']['dateartproofsponsor']= $date->format("Y-m-d h:i:s");


                    if($this->Project->Save($this->data)){
                        $this->Session->setFlash('Tracking information has been saved.','default', array('class' => 'successmsg'));

                        if(isset($this->data['Action']['redirectpage'])){
                            $this->redirect('/admins/editprojectdtl');
                        }else{
                            $this->redirect('/admins/projecttracking');
                        }
                    }
                    //End upload images linke side A side B and logo
                }

            }


            $this->Project->id = $projectid;
            $this->data = $this->Project->read();

            $this->data = array_merge($this->data);

        }

        function projectcontrols(){
            ##Configure::write('debug', 3);    
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            //for active menu display
            $this->set('page_url','edit_project_detail');

            //         $projectid=$this->Session->read("projectwebsite_id");    
            $project_name=$this->Session->read("projectwebsite_name_admin");

            App::import("Model", "Project");
            $this->Project =   & new Project();


            $this->set("project_id",$projectid);

            App::import("Model", "Sponsor");
            $sponsor =   & new Sponsor();
            App::import("Model", "User");
            $user =   & new User();


            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '39'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition


            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();

            //         if(empty($project_name)) $this->redirect('/admins/session_expired');
            //             
            //         $this->set('project_name',$project_name);

            $projectDetails=$this->getprojectdetails($projectid);

            $this->set('project',$projectDetails);    
            //         $userid = $this->Session->read("User.User.id");
            ##check empty data
            if(!empty($this->data)) {
                //print_r($this->data);die;
                $this->data['Project']['id']=$projectid;
                if($this->Project->Save($this->data['Project']))
                {
                    $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));
                } 

                #set the posted data
                $this->Project->set($this->data);

                #check server side validation
                $errormsg = $this->Project->invalidFields();

                if(!$errormsg){

                    
                    if(!empty($this->data['ProjectType'])) {
                        #set the posted data
                        $this->ProjectType->set($this->data['ProjectType']);
                        #check server side validation

                        $this->ProjectType->invalidFields();
                        #save data in project type table
                        $recid  = $this->data['ProjectType']['id'];
                        $ptname  = $this->data['ProjectType']['project_type_name'];


                        if($recid !=''){

                            if($this->ProjectType->Save($this->data['ProjectType'])){

                                $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));

                                if($this->data['ProjectType']['maxnumbercomment']>1)
                                {

                                    App::import("Model", "ProjectCommentType");
                                    $this->ProjectCommentType =   & new ProjectCommentType();



                                    for($i=0;$i<=$this->data['ProjectType']['maxnumbercomment'];$i++){

                                        if($this->data['ProjectType']['commenttypeoption'.$i]>0){
                                            unset($this->data['ProjectCommentType']);
                                            $this->ProjectCommentType->create();

                                            $comment_type_id = $this->ProjectCommentType->find('first',array("conditions"=>"ProjectCommentType.project_type_id=$recid and ProjectCommentType.sequence_id=".$i." and ProjectCommentType.active_status='1' and ProjectCommentType.delete_status='0'", 'fields' =>"id"));
                                            if(is_array($comment_type_id) && !empty($comment_type_id))
                                            {
                                                $this->data['ProjectCommentType']['id']=$comment_type_id['ProjectCommentType']['id'];
                                            }
                                            $this->data['ProjectCommentType']['sequence_id']=$i;
                                            $this->data['ProjectCommentType']['comment_type_id']=$this->data['ProjectType']['commenttypeoption'.$i];
                                            $this->data['ProjectCommentType']['project_type_id']=$this->data['ProjectType']['id'];

                                            if($this->ProjectCommentType->Save($this->data['ProjectCommentType'])){    
                                                $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));
                                            }
                                        }
                                    }

                                }
                                //$this->Session->setFlash('Project Type updated Successfully.','default', array('class' => 'successmsg'));

                            }else{
                                $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                            }
                        }else{
                            $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));
                        }

                        //$this->redirect("/admins/editprojectdtl");
                    }
                    else{

                        $recid = $this->data['Project']['project_type_id'];
                        $this->ProjectType->id = $recid;
                        //$this->data = $this->ProjectType->read();
                        $this->set("ProjectTypeId", $recid);
                    }                

                    if(isset($this->data['Action']['redirectpage'])){
                        $this->redirect('/admins/projectcontrols');
                    }else{
                        $this->redirect('/admins/projectcontrols');
                    }

                    //End upload images linke side A side B and logo
                }

            }


            $this->Project->id = $projectid;
            $this->data = $this->Project->read();

            $project_type_id=$this->data['Project']['project_type_id'];
            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();
            $projecttypedetails=$this->ProjectType->find('first',array('conditions'=>"ProjectType.id=$project_type_id")); 

            $this->set('ProjectTypeId',$project_type_id);
            $this->data = array_merge($this->data,$projecttypedetails);
			//echo '<pre>';print_r($this->data);

        }

         function projectdashboard()
        {
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $this->Cookie->write("sessionprojectid",$projectid);
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            //for active menu display
            $this->set('page_url','projectdashboard');

            $project_name=$this->Session->read("projectwebsite_name_admin");
            $this->set('project_name',$project_name);


            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '55'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

        }

        function projectuser(){


            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            //for active menu display
            $this->set('page_url','projectuser');

            //         $projectid=$this->Session->read("projectwebsite_id");    
            $project_name=$this->Session->read("projectwebsite_name_admin");

            App::import("Model", "Project");
            $this->Project =   & new Project();
            App::import("Model", "Sponsor");
            $sponsor =   & new Sponsor();
            App::import("Model", "User");
            $user =   & new User();


            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '38'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition


            $this->set('project_name',$project_name);


            $projectDetails=$this->getprojectdetails($projectid);
            $this->set('project',$projectDetails);    

            $sponserid=$projectDetails['Project']['sponsor_id'];    
            $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid));
            $projuserid = $sponsordetails['Sponsor']['user_id'];
            $this->set('userid',$projuserid);
            //         $userid = $this->Session->read("User.User.id");
            $field='';

            ##check empty data
            if(!empty($this->data)) {

                $this->Project->set($this->data);
                #check server side validation
                $errormsg = $this->Project->invalidFields();



                $this->data['Project']['id'] = $projectid;

                //Save Sponsor Data
                $this->data['User']['project_id'] = $projectid;
                $this->data['User']['usertype'] = 'sponsor';

                if($this->data['User']['password'] != "password" || $this->data['User']['password'] != "Password")
                    $this->data['User']['password'] = md5($this->data['User']['password']);

                if($user->save($this->data)){
                    if($user->getLastInsertId())
                    {
                        $sponsordetails['Sponsor']['user_id'] = $user->getLastInsertId();
                        $sponsor->save($sponsordetails);
                    }


                    $this->Session->setFlash('User information has been saved.','default', array('class' => 'successmsg'));

                    if(isset($this->data['Action']['redirectpage'])){
                        $this->redirect('/admins/editprojectdtl');
                    }else{
                        $this->redirect('/admins/projectuser');
                    }
                }


            }



            $this->data=$user->find('first',array("conditions"=>'id='.$projuserid));



            $this->data = array_merge($this->data);


        }


        function projectsponsor(){

            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            //for active menu display
            $this->set('page_url','projectsponsor');

            //         $projectid=$this->Session->read("projectwebsite_id");    
            $project_name=$this->Session->read("projectwebsite_name_admin");

            App::import("Model", "Project");
            $this->Project =   & new Project();
            App::import("Model", "Sponsor");
            $sponsor =   & new Sponsor();
            App::import("Model", "User");
            $user =   & new User();
			 App::import("Model", "Company");
            $this->Company =   & new Company();
		


            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '42'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

            $this->countrydroupdown();

            //         if(empty($project_name)) $this->redirect('/admins/session_expired');
            //             
            $this->set('project_name',$project_name);

            $projectDetails=$this->getprojectdetails($projectid);

            $sponserid=$projectDetails['Project']['sponsor_id'];    

            $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid));
            $this->set('project',$projectDetails);    
            $this->set('spondtl',$sponsordetails);
            //$this->statedroupdown($sponsordetails['Sponsor']['country']);
            //         $userid = $this->Session->read("User.User.id");
            $field='';
          
            $sponsor_user_id=$sponsordetails['Sponsor']['user_id'];
            $condition = "User.id = '$sponsor_user_id' and usertype='sponsor'";  
            $user_data= $this->User->find('first',array("conditions"=>$condition));
            
            $sponsor_login_id=$user_data['User']['username'];
            $this->set('sponsor_login_id',$sponsor_login_id);

            ##check empty data
            if(!empty($this->data)) {
            
               //pr($this->data);die;
				if($this->data['Sponsor']['sponsor_login_id'])
                {
                    $user_arr['id']=$sponsor_user_id;
                    $user_arr['username']=$this->data['Sponsor']['sponsor_login_id'];
                    
                    $this->User->Save($user_arr);
                }  

              /*  if($this->data['Sponsor']['state'] == "")
                {
                    $this->Session->setFlash('Please select state.','default',array('class' => 'msgTXt'));
                    $this->redirect("/admins/projectsponsor");    
                }         */
                $this->Project->set($this->data);
                #check server side validation
                $errormsg = $this->Project->invalidFields();
                //print_r($this->data);die;
                if(!$errormsg){

                    $this->data['Project']['id'] = $projectid;
                    //first upload images linke side A side B and logo

                    if($this->data['Sponsor']['sponlogo']['name'] !=''){

                        $filePath =  'img' . DS . $project_name . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name5 = $this->File->setFileName($this->data['Sponsor']['sponlogo']['name']); 
                        $tmp5 = $this->data['Sponsor']['sponlogo']['tmp_name'];
                        $fileNamesidea5 = $this->File->uploadlogo($file_name5,$tmp5,true,'250x250');

                        $this->data['Sponsor']['logo'] = $fileNamesidea5;
                    }

                    if(!$this->data['Sponsor']['user_id'])
                        $this->data['Sponsor']['user_id']=0;
                    // for Sponsor details
                    //Save Sponsor Data
                    //print_r($this->data);die;
                    $this->data['Sponsor']['project_id'] = $projectid;
                    if($sponsor->save($this->data)){
                        if($sponsor->getLastInsertId())
                        {
                            $projectDetails['Project']['sponsor_id']=$sponsor->getLastInsertId();
                            $this->Project->save($projectDetails);
                        }

						/*Update data in company table*/
						 if(isset($this->data['Company']['id']) && !empty($this->data['Company']['id'])){
								 $this->Company->save($this->data);
						 }



                        $this->Session->setFlash('Owner information has been saved.','default', array('class' => 'successmsg'));

                        if(isset($this->data['Action']['redirectpage'])){
                            $this->redirect(array('controller'=>'admins','action'=>'projectsponsor'));
                        }else{
                            $this->redirect(array('controller'=>'admins','action'=>'projectsponsor'));
                        }
                    }
                }

            }
            //for theme details

            $projectid = $this->Session->read("sessionprojectid");
            $this->Project->id = $projectid;
            $this->data = $this->Project->read();

			$this->set('username',$this->data['User']['username']);

		    $this->set("projectname",$this->data['Project']['project_name']);

            //read the sponcer after project creation
            $spondetails=$sponsor->find('first',array("conditions"=>'project_id='.$projectid));
            $sponid=$spondetails['Sponsor']['id'];
            $this->set("sponid",$sponid);

            $this->Sponsor->id = $sponid;
            $this->data = $this->Sponsor->read();
          
			/*$companyname = $this->getcompaniesbyprojectid($projectid,'yes');
            //$this->data['Company']['companies'] = $companyname ;
            $this->set('companies',$companyname);*/


			// To get only project owner companies

			$companies = $this->getOwnerCompaniesbyprojectid($projectid,'yes');
			//echo '<pre>';print_r($companies);
			$this->set('cid',$companies['0']['Company']['id']);			
			$this->set('address1',$companies['0']['Company']['address1']);
			$this->set('address2',$companies['0']['Company']['address2']);
			$this->set('selectedcountry',$companies['0']['Company']['country']);
			$this->set('selectedstate',$companies['0']['Company']['state']);
			$this->set('city',$companies['0']['Company']['city']);
			$this->set('zipcode',$companies['0']['Company']['zipcode']);
			$this->set('email',$companies['0']['Company']['email']);
			$this->statedroupdown($companies['0']['Company']['country']);

			//$this->set('companydata',$companies);
			if($companies){
                    $companyname = Set::combine($companies, '{n}.Company.id', '{n}.Company.company_name');

                }else{
                    foreach ($cpdata as $eachcompany){
                        $companyname = $eachcompany['Company']['company_name'].','.$companyname;
                    }
                    $companyname = substr($companyname,0,-1);
                } 

			
		//	$this->set('companies',$companies);
			$this->set('companies',$companyname);

			$pcontacts = $this->contactsRealted_to_projects($projectid);

			//pr($pcontacts);
			$this->set('pcontacts',$pcontacts);
			




            $sponsorname = $this->getsponsornamebyprojectid($projectid);
            if(!$sponsorname){
                $sponsorname = "Sponsor not added yet.";
            }
            $this->data['Company']['sponsorname'] = $sponsorname ;

            $contactname = $this->getcontactsbyprojectid($projectid,'yes');
            $this->set('contacts',$contactname);


           $this->data = array_merge($this->data);
        }

        /*
        * Function name   : editprojectdesc()
        * Description : This function used to edit information related projects
        * Created On      : 18-02-11 (10:50pm)
        *
        */ 
        function editprojectdesc(){
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import Project  model for processing
            App::import("Model", "Project");
            $this->Project =   & new Project();    

            ##check empty data
            if(!empty($this->data)) {
                $this->data['Project']['id'] = $projectid;
                if($this->Project->Save($this->data)){
                    $this->Session->setFlash('Project Description updated Successfully.','default', array('class' => 'successmsg'));
                }else{
                    $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));
                }
            }


            $this->Project->id = $projectid;
            $this->data = $this->Project->read();
        } 


        /*
        * Function name   : projectlist()
        * Description : This function used to list projects
        * Created On      : 16-02-11 (02:45am)
        *
        */ 
        function projectlist_old(){
            $this->redirect("/admins/index");
            ##check admin session live or not
            $this->session_check_admin();
            $this->set("selectedprojectid","");



            if($this->data){

                if($this->data['Admins']['projectid'] !='' || $this->data['Admins']['projectid'] !='0'){
                    $this->Session->delete('sessionprojectid');
                    $this->set("selectedprojectid",$this->data['Admins']['projectid']);
                    $this->Session->write("sessionprojectid",$this->data['Admins']['projectid']);
                }else{
                    $this->Session->delete('sessionprojectid');
                }


            }else{
                ##read project id from session
                $projectid = $this->Session->Read('sessionprojectid');

                if($projectid){
                    $this->Session->write("sessionprojectid",$projectid);
                    $this->set("selectedprojectid",$projectid);
                }else{
                    $this->Session->delete('sessionprojectid');
                    $this->set("selectedprojectid",'0');
                }
            }


            $condition='';
            $searchkeyword='';

            ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];

                $condition .= "(ProjectType.project_type_name like '%".addslashes($searchkeyword)."%' OR ";

                $condition .= "Project.project_name like '%".addslashes($searchkeyword)."%' OR ";
                $condition .= "Project.created like '%".addslashes($searchkeyword)."%' ) AND ";

            }

            ##project listing in dashboard
            App::import("Model", "Project");
            $this->Project =   & new Project();    
            ##fetch data from Project table for listing
            $field='';
            $condition .= "Project.delete_status = '0'";

            if($_REQUEST['sortBy']=='sponsor_name'){
                $this->Pagination->sortByClass    = 'Sponsor'; ##initaite pagination
            }else if($_REQUEST['sortBy']=='project_type_name'){
                    $this->Pagination->sortByClass    = 'ProjectType'; ##initaite pagination
                }else{
                    $this->Pagination->sortByClass    = 'Project'; ##initaite pagination
            }


            $this->Project->bindModel(array('belongsTo'=>array(
            'ProjectType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.project_type_id = ProjectType.id'
            ),'Sponsor'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.sponsor_id = Sponsor.id'
            )
            )));

            $this->Pagination->total= count($this->Project->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->Project->bindModel(array('belongsTo'=>array(
            'ProjectType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.project_type_id = ProjectType.id'
            ),'Sponsor'=>array(
            'foreignKey'=>false,
            'conditions'=>'Project.sponsor_id = Sponsor.id'
            )
            )));

            $projectdataarr = $this->Project->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable

            $this->set("projectdata",$projectdataarr);

            ##project dropdownlist
            $this->projectdropdown();

        }            

        /*
        * Function name   : selectstate()
        * Description : This function used to display state name by ajax
        * Created On      : 18-02-11 (04:20am)
        *
        */     
        function selectstate($countryid='',$modelname=''){
            $this->layout = false;
            $this->set("selectedstate",'');
            $this->statedroupdown($countryid);
            $this->set("modelname",$modelname);
        }


        /*
        * Function name   : selectstate()
        * Description : This function used to display state name by ajax
        * Created On      : 18-02-11 (04:20am)
        *
        */     
        function selectstateoptions($countryid='',$modelname=''){        
            $this->layout = false;
            $this->set("selectedstate",'');
            $this->statedroupdown($countryid);
            $this->set("modelname",$modelname);
        }


        function projectstate($countryid='',$modelname=''){
            $this->layout = false;
            $this->set("selectedstate",'');
            $this->statedroupdown($countryid);
            $this->set("modelname",$modelname);
        }    

        function newselectstate($countryid='',$modelname=''){
            $this->layout = false;
            $this->set("selectedstate",'');
            $this->statedroupdown($countryid);
            $this->set("modelname",$modelname);
        }

        function findselectstate($countryid='',$modelname=''){
            $this->layout = false;
            $this->set("selectedstate",'');
            $this->statedroupdown($countryid);
            $this->set("modelname",$modelname);
        }

        /**
        * Function to get all custome email templates dorpdown bty ajax call 
        * 
        * @param mixed $project_id  - 
        * @param mixed $selectedid
        */
        function getemailtemplatesbyajax($project_id, $selectedid='',$is_event_temp=''){       
       
            $this->layout = false;
            $this->set("selectedid",$selectedid);
            // GET ALL CUSTOM EMAIL TEMPLATES
            $this->customtemplatelisting($project_id,$is_event_temp); 
           
        }
        
        function get_lastinsertedID($modelname){       
            $this->layout = false;
            
            App::import("Model", $modelname);
            $this->$modelname =  & new $modelname();
            
            //$lastid = $this->$modelname->getLastInsertId();
            $highest_id = $this->$modelname->field('id', null, 'id DESC'); 
            echo $highest_id;
            exit;
           
        }
        
        
        /**
        * Function to get all company types dorpdown bty ajax call 
        * 
        * @param mixed $project_id  - 
        * @param mixed $selectedid
        */
        function getcompanytypesbyajax($project_id, $selectedid=''){        
            $this->layout = false;    
            $this->set("selectedid",$selectedid);
            // GET ALL CUSTOM EMAIL TEMPLATES
            $this->companytypedropdown($project_id);  
           
        }
        
                /**
        * Function to get all contact type dorpdown bty ajax call 
        * 
        * @param mixed $project_id  - 
        * @param mixed $selectedid
        */
        function getcontacttypesbyajax($project_id, $selectedid=''){        
            $this->layout = false;    
            $this->set("selectedid",$selectedid);
            // GET ALL CUSTOM EMAIL TEMPLATES
            $this->contacttypedropdown($project_id);
           
        }		
        function export_xls() {

            ##import Comment  model for processing
            App::import("Model", "Comment");
            $this->Comment =   & new Comment();
            $this->Comment->recursive = 1;
            $data = $this->Comment->find('all');

            $this->set('rows',$data);
            $this->render('export_xls','export_xls');

        }
        /*
        * Function name   : export()
        * Description : This function used to export csv file
        * Created On      : 17-02-11 (08:15pm)
        *
        */ 

        function export()
        {
            ##import Comment  model for processing
            App::import("Model", "Comment");
            $this->Comment =   & new Comment();
            // Stop Cake from displaying action's execution time
            // Configure::write('debug',2);
            // Find fields needed without recursing through associated models
            $data = $this->Comment->find('all',array('fields' => array('id','comment','rsvp','created'),
            'order' => "Comment.id ASC",
            'contain' => false
            ));
            // Define column headers for CSV file, in same array format as the data itself
            $headers = array(
            'Comment'=>array(
            'id' => 'ID',
            'created' => 'Date',
            'comment' => 'Comment',
            'rsvp' => 'RSVP'
            )
            );

            // Add headers to start of data array
            array_unshift($data,$headers);
            // Make the data available to the view (and the resulting CSV file)
            $this->set(compact('data'));
        } 

        /*
        * Function name   : editprojectdtl()
        * Description : This function used to edit information related projects
        * Created On      : 17-02-11 (08:15pm)
        *
        */ 
        function editsponsordtl(){

            //Configure::write('debug', 2);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import Sponsor  model for processing
            App::import("Model", "Sponsor");
            $this->Sponsor =   & new Sponsor();    

            ##import Users  model for processing
            App::import("Model", "User");
            $this->User =   & new User();    

            ##import Users  model for processing
            App::import("Model", "Project");
            $this->Project =   & new Project();    

            ##check empty data
            if(!empty($this->data)) {    


                $updateflag = true;
                ##check server checking for user
                if(!$this->data['User']['id']){
                    $this->User->set($this->data);
                    $usererrormsg = $this->User->invalidFields();
                }
                #set the posted data
                $this->Sponsor->set($this->data);
                #check server side validation
                $errormsg = $this->Sponsor->invalidFields();

                if(!$errormsg){

                    $errormsg1 = "";
                    $ptname = $this->data['Admins']['projectname'];

                    ##uploading Sponsor logo
                    if($this->data['Sponsor']['sponlogo']['name'] !=''){


                        $filePath =  'img' . DS . $ptname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Sponsor']['sponlogo']['name']); 
                        $tmp1 = $this->data['Sponsor']['sponlogo']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'100x100');

                        $this->data['Sponsor']['logo'] = $fileNamesidea;
                    }

                    ##update for password
                    if($this->data['User']['password']!='' && $this->data['User']['id'] !=''){
                        $this->data['User']['password'] = md5($this->data['User']['password']);

                        if($this->User->Save($this->data['User'])){
                            $errormsg1 = "Password Updated successfully. <br>";
                        }
                    }else{
                        if($this->data['User']['password'] !="" && $this->data['User']['username'] !=""){
                            $this->data['User']['project_id'] = $projectid;
                            $this->data['User']['password'] = md5($this->data['User']['password']);
                            $checkret = $this->checkuniqueuserid($this->data['User']['username']);
                            if($checkret){
                                if($this->User->Save($this->data['User'])){
                                    $lastuserid = $this->User->getLastInsertId();
                                }
                            }else{
                                $errormsg1 = "Username with same name already exists.";
                                $updateflag=false;
                            }

                        }            
                    }

                    ##saving Sponsor detail
                    if($this->data['Sponsor']['id']){

                        if($this->Sponsor->Save($this->data['Sponsor'])){
                            $errormsg1 .= "Sponsor detail updated successfully. <br>";
                        }

                    }else{
                        if($updateflag==true){
                            $this->data['Sponsor']['project_id'] = $projectid;
                            $this->data['Sponsor']['user_id'] = $lastuserid;

                            ##import Users  model for processing
                            App::import("Model", "Company");
                            $this->Company =   & new Company();    

                            $cmp=$this->data['Sponsor']['companies'];
                            $i=0;

                            if(!empty($cmp)){
                                foreach($cmp as $cmps)
                                {                             
                                    $cmpdata = $this->Company->find('first',array("conditions"=>"Company.id='".trim($cmp[$i])."'"));

                                    unset($this->data['Company1']);
                                    $this->Company->create();    

                                    $this->data['Company1']['project_id']=$projectid;
                                    $this->data['Company1']['company_type_id']=$cmpdata['Company']['company_type_id'];
                                    $this->data['Company1']['company_name']=$cmpdata['Company']['company_name'];
                                    $this->data['Company1']['website']=$cmpdata['Company']['website'];
                                    $this->data['Company1']['address1']=$cmpdata['Company']['address1'];
                                    $this->data['Company1']['address2']=$cmpdata['Company']['address2'];
                                    $this->data['Company1']['city']=$cmpdata['Company']['city'];
                                    $this->data['Company1']['state']=$cmpdata['Company']['state'];
                                    $this->data['Company1']['country']=$cmpdata['Company']['country'];
                                    $this->data['Company1']['zipcode']=$cmpdata['Company']['zipcode'];
                                    $this->data['Company1']['notes']=$cmpdata['Company']['notes'];
                                    $this->data['Company1']['fax']=$cmpdata['Company']['fax'];
                                    $this->data['Company1']['email']=$cmpdata['Company']['email'];
                                    $this->data['Company1']['phone']=$cmpdata['Company']['phone'];
                                    $this->data['Company1']['logo']=$cmpdata['Company']['logo'];
                                    if($this->Company->Save($this->data['Company1'])){}

                                    if($cmpdata['Company']['logo']!=""){                           copy('img/uploads/'.$cmpdata['Company']['logo'],'img/'.$ptname.'/uploads/'.$cmpdata['Company']['logo']);
                                    }
                                    $i++;
                                } 
                            }
                            ##import Company  model for processing
                            App::import("Model", "Contact");
                            $this->Contact =   & new Contact();    

                            $cnt=$this->data['Sponsor']['contacts'];
                            $i=0;

                            if(!empty($cnt)){
                                foreach($cnt as $cnts)
                                {                                    
                                    $cntdata = $this->Contact->find('first',array("conditions"=>"Contact.id='".trim($cnts)."'"));                                

                                    unset($this->data['Contact1']);
                                    $this->Contact->create();

                                    $this->data['Contact1']['project_id']=$projectid;
                                    $this->data['Contact1']['contact_type_id']=$cntdata['Contact']['contact_type_id'];

                                    $cmpdata1 = $this->Company->find('first',array("conditions"=>"Company.company_name=(select company_name from companies where id='".$cntdata['Contact']['company_id']."') and Company.project_id='".$projectid."'"));    

                                    $this->data['Contact1']['company_id']=$cmpdata1['Company']['id'];
                                    $this->data['Contact1']['firstname']=$cntdata['Contact']['firstname'];
                                    $this->data['Contact1']['lastname']=$cntdata['Contact']['lastname'];
                                    $this->data['Contact1']['email']=$cntdata['Contact']['email'];
                                    $this->data['Contact1']['jobtitle']=$cntdata['Contact']['jobtitle'];
                                    $this->data['Contact1']['busphone']=$cntdata['Contact']['busphone'];
                                    $this->data['Contact1']['homephone']=$cntdata['Contact']['homephone'];
                                    $this->data['Contact1']['mobile']=$cntdata['Contact']['mobile'];
                                    $this->data['Contact1']['fax']=$cntdata['Contact']['fax'];
                                    $this->data['Contact1']['address1']=$cntdata['Contact']['address1'];
                                    $this->data['Contact1']['city']=$cntdata['Contact']['city'];
                                    $this->data['Contact1']['state']=$cntdata['Contact']['state'];
                                    $this->data['Contact1']['country']=$cntdata['Contact']['country'];
                                    $this->data['Contact1']['zipcode']=$cntdata['Contact']['zipcode'];

                                    if($this->Contact->Save($this->data['Contact1'])){}    

                                    $i++;        
                                }
                            }


                            if($this->Sponsor->Save($this->data['Sponsor'])){
                                $lastsponid = $this->Sponsor->getLastInsertId();
                                $this->data['Project']['id'] = $projectid;
                                $this->data['Project']['sponsor_id'] = $lastsponid;
                                $this->Project->Save($this->data['Project']);
                                $errormsg1 = "Sponsor added successfully.";
                            }
                        }

                    }

                    $this->Session->setFlash($errormsg1,'default', array('class' => 'successmsg'));                
                }    

            }

            ##check exist sponsor for particular project
            $condition = "id = '".$projectid."'";
            $ptdata = $this->Project->find('all',array("conditions"=>$condition));
            $this->set("username","");
            $this->set("userid","");
            if($ptdata){
                if($ptdata[0]['Project']['sponsor_id'] !='' && $ptdata[0]['Project']['sponsor_id'] !='0'){

                    $spid = $ptdata[0]['Project']['sponsor_id'];
                    $condition = "id = '".$spid."'";
                    $spondata = $this->Sponsor->find('all',array("conditions"=>$condition));

                    if($spondata){
                        $userid = $spondata[0]['Sponsor']['user_id'];
                        $condition = "id = '".$userid."'";
                        $udata = $this->User->find('all',array("conditions"=>$condition));

                        $username = $udata[0]['User']['username'];

                        $this->set("username",$username);
                        $userid = $udata[0]['User']['id'];
                        $this->set("userid",$userid);

                    }

                    $this->Sponsor->id = $spid;
                    $this->data = $this->Sponsor->read();

                }

                $proname = $ptdata[0]['Project']['project_name'];
                $this->set("projectname",$proname);
            }


            $this->set("selectedcountry","");
            $this->set("selectedstate","");
            ##country drop down
            $this->countrydroupdown();
            $this->statedroupdown();

            ##check default dropdowns

            if($this->data['Sponsor']['country']){
                $conid = $this->data['Sponsor']['country'];
                $this->set("selectedcountry",$conid);
                ##state drop down
                $this->statedroupdown($conid);
                if($this->data['Sponsor']['state']){
                    $statid = $this->data['Sponsor']['state'];
                    $this->set("selectedstate",$statid);

                }
            }

            $companyname="";

            ##display companys in a company box
            ##import Company  model for processing
            $companyname = $this->getcompaniesbyprojectid($projectid,'yes');
            $companyname1 = $this->getcompaniesbyprojectid('0','yes');
            //$this->data['Admins']['companies'] = $companyname ;
            $this->set('companies',$companyname);
            $this->set('companies1',$companyname1);
            $contactname = $this->getcontactsbyprojectid($projectid,'yes');
            //$this->data['Admins']['contacts'] = $contactname ;
            $this->set('contacts',$contactname);
            $this->set('sid',$spid);

        }    


        function savesponsordtl()
        {
            App::import('Model','Sponsor');
            $sponsor = new Sponsor();

            $usr_id = $this->Session->read("UserIDz");
            //Save Sponsor Data
            if(isset($this->data['Sponsor']))
            {

                $sponsor->save($this->data);
                if($sponsor->getLastInsertId())
                {
                    $sponsor_idz = $sponsor->getLastInsertId();
                    $this->data['Project']['sponsor_id'] = $sponsor_idz;
                    $this->Session->write("SponsorIDz",$sponsor_idz);
                    $this->Session->setFlash('Sponsor added Successfully.','default', array('class' => 'successmsg'));
                }
                else
                    $this->Session->setFlash('Sponsor updated Successfully.','default', array('class' => 'successmsg'));
            }
            $this->autoRender=false;
            $this->redirect("/admins/editprojectdtl");

        }

        function saveuserdtl()
        {
            App::import('Model','User');
            $user = new User();
            // Save User Data
            if(isset($this->data['User']['password']) && $this->data['User']['password'] !='password' && $this->data['User']['password'] !=''){
                $user->save($this->data);
                if($user->getLastInsertId()) {
                    $user_idz = $user->getLastInsertId();
                    $this->Session->setFlash('User added Successfully.','default', array('class' => 'successmsg'));
                    $this->Session->write("UserIDz",$user_idz);
                }
                else
                    $this->Session->setFlash('User details updated Successfully.','default', array('class' => 'successmsg'));


            }
            $this->autoRender=false;
            $this->redirect("/admins/editprojectdtl");
        }


        /*
        * Function name   : editsponsordesc()
        * Description : This function used to edit information related sponsor
        * Created On      : 22-02-11 (03:20am)
        *
        */ 
        function editsponsordesc($sponsid){
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import Sponsor  model for processing
            App::import("Model", "Sponsor");
            $this->Sponsor =   & new Sponsor();    

            ##import Project  model for processing
            App::import("Model", "Project");
            $this->Project =   & new Project();    


            ##check empty data
            if(!empty($this->data)) {

                if($this->Sponsor->Save($this->data)){
                    $this->Session->setFlash('Sponsor Description updated Successfully.','default', array('class' => 'successmsg'));
                    $this->redirect('/admins/editsponsordesc');
                }else{
                    $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));
                }
            }

            if($sponsid){
                ##sponsor comming by id

                $this->Sponsor->id = $sponsid;
                $this->data = $this->Sponsor->read();    

            }else{
                ##sponsor comming by project id

                ##check exist sponsor for particular project
                $condition = "id = '".$projectid."'";
                $ptdata = $this->Project->find('all',array("conditions"=>$condition));

                if($ptdata){
                    if($ptdata[0]['Project']['sponsor_id'] !='' && $ptdata[0]['Project']['sponsor_id'] !='0'){

                        $spid = $ptdata[0]['Project']['sponsor_id'];

                        $this->Sponsor->id = $spid;
                        $this->data = $this->Sponsor->read();

                    }else{
                        $this->Session->setFlash('First you need to add sponsor before adding description.','default',array('class' => 'msgTXt'));
                        $this->redirect('/admins/editsponsordtl');
                    }
                }


            }
        }     

        function showcontentwindow($contentid,$modelname=''){
            $this->layout = "";
            ##import Content  model for processing
            App::import("Model", $modelname);
            $this->$modelname =   & new $modelname();    
            $condition= "$modelname.id = $contentid";
            $contentdtlarr = $this->$modelname->find('all',array("conditions"=>$condition));
            $this->set('contentdata',$contentdtlarr[0][$modelname]['content']);

        }     

        /*
        * Function name   : addcontentpage()
        * Description : This function used to add new content pages of related projects
        * Created On      : 05-03-11 (06:22am)
        *
        */ 
        function addcontentpage($returnurl="",$extra='',$event_title=''){
            ##check admin session live or not
            $this->session_check_admin();
           
            if($extra!="")
            {
                $this->layout= 'admin_popup';  
                $this->set("event_title",$event_title);             
            }
           
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            ##import Content  model for processing
            App::import("Model", "Content");
            $this->Content =   & new Content(); 
               
            // if $returnurl is popup then its need to close else no need to close
            $this->set("closeit","no");
            
            ##check empty data
            if(!empty($this->data)) {
                 $returnurl=$this->data['Admins']['returnurl'];
                 $extra=$this->data['Admins']['extra'];
                 $event_title=$this->data['Admins']['event_title'];
                 
                 if($extra!="")
                 {
                    $this->data['Content']['parent_id'] = 0;
                    $this->data['Content']['alias']=$event_title;
                    $this->data['Content']['title']=$event_title;
                    $this->data['Content']['metatitle']=$event_title;
                    $this->data['Content']['is_sytem']=2;
                }
                
               // if($extra ='popup_company'){
               //	$this->data['Content']['company_id']=$this->Session->read('current_comapny');
               // }
               
                 
                #set the posted data
                App::import('Sanitize');
                Sanitize::clean($this->data);
                $this->Content->set($this->data);
                #check server side validation
                $errormsg = $this->Content->invalidFields();


                $prodtl = $this->projectdetailbyid($projectid);
                $projectname = $prodtl[0]['Project']['project_name'];

                /* upload_header image */

                $cont=$_FILES['data'];

                if($cont["tmp_name"]["Admins"]["header_image"]!="")
                {

                    if ((($cont["type"]["Admins"]["header_image"] == "image/gif") || ($cont["type"]["Admins"]["header_image"] == "image/jpeg") || ($cont["type"]["Admins"]["header_image"] == "image/png") || ($cont["type"]["Admins"]["header_image"] == "image/jpg") || ($cont["type"]["Admins"]["header_image"] == "image/pjpeg")) && ($cont["size"]["Admins"]["header_image"] < 200000) )
                    {
                        $ext=explode("/",$cont["type"]["Admins"]["header_image"]);
                        $ext=$ext[1];

                        $up_dir="img/".$projectname."/header_image/".$projectid."/";
                        $filename=$this->data['Content']['title'].".".$ext;
                        $filename=str_replace(" ","",$filename);

                        if ($cont["error"]["Admins"]["header_image"] > 0)
                        {
                            $errormsg .="Error Uploading file.Try again.";
                            $this->Session->setFlash('Error Uploading file.Try again.','default',array('class' => 'msgTXt'));
                        }
                        else
                        {
                            if (file_exists($up_dir.$filename))
                            {

                                // foreach(glob($up_dir.'*.*') as $v)        //delete existing files from directory then upload
                                // {
                                unlink($up_dir.$filename);
                                // }
                                move_uploaded_file($cont["tmp_name"]["Admins"]["header_image"],$up_dir.$filename);
                            }
                            else
                            {

                                //$up_dir="uploads/avatar/".$userid."/";
                                mkdir($up_dir, 0777);
                                //$filename=$userid.".".$_FILES["avatar"]["type"];

                                move_uploaded_file($cont["tmp_name"]["Admins"]["header_image"],$up_dir.$filename);

                            }
                        }
                        $header_image_url=$up_dir.$filename;
                        $this->data['Content']['header_image']=$header_image_url; //upload image url 

                        $width = 960;
                        $height = 50;

                        list($width_orig, $height_orig) = getimagesize($header_image_url);

                        // Resample
                        $image_p = imagecreatetruecolor($width, $height);
                        $image = imagecreatefromjpeg($header_image_url);
                        imagecopyresampled($image_p, $image, 0, 0, 0, 0, $width, $height, $width_orig, $height_orig);

                        // Move file to image folder
                        imagejpeg($image_p, $header_image_url, 100);
                        imagedestroy($image_p);
                        imagedestroy($image);
                    }
                    else
                    {
                        $errormsg .="Invalid File Type or Size";
                        $this->Session->setFlash('Invalid File Type or Size.','default',array('class' => 'msgTXt'));
                        $header_image_url="";
                    }           
                }


                if(!$errormsg){   
                    if($this->data['Content']['parent_id'] == "")
                    {
                        $this->data['Content']['parent_id'] = 0;
                    }        
                    if($this->data['Content']['is_global'] == 1)
                    {
                        $this->data['Content']['is_global'] = 0;
                    }
                    else if($this->data['Content']['is_global'] == 0)
                        {
                            $this->data['Content']['is_global'] = 1;
                        }
                        $this->data['Content']['project_id'] = $projectid;

                    if(empty($this->data['Content']['alias'])){
                        $this->data['Content']['alias'] = rand(100, 999);
                    }
                    $this->data['Content']['is_sytem'] = 1;
                    
                    if($returnurl=="detail" || $extra=="detail")
                        $this->data['Content']['type']="event_detail";
                    if($returnurl=="sponsor" || $extra=="sponsor")
                        $this->data['Content']['type']="event_sponsor";
                    if($returnurl=="inquiry" || $extra=="inquiry")
                        $this->data['Content']['type']="event_inquiry";

                    if($this->Content->Save($this->data['Content'])){ 
                        
                        if($returnurl=="detail" || $returnurl=="sponsor" || $returnurl=="inquiry" || $extra=="detail" || $extra=="sponsor" || $extra=="inquiry")
                        {                           
                            
                            $this->Session->setFlash('Content Page Added Successfully.','default', array('class' => 'successmsg'));
                            
                            if($returnurl=="popup")
                            {
                               // $gotourl=explode("_id_",$this->data['Admins']['returnurl']);
                               
                                $gotourl=str_replace("_id_", "/", $returnurl);
                                  
                                  $this->set("closeit","yes");
                                //$this->redirect('/admins/'.$gotourl); 
                            }
                            else
                            {
                            
                            if($extra!="")
                                $returnurl=$extra;
                            
                            if(isset($this->data['Action']['redirectpage'])){

                                        //$sessdata=$this->Session->read('newsortingby');
                                        $this->redirect('/admins/event_pages/'.$returnurl);

                                    }else{

                                        $this->redirect('/admins/addcontentpage/'.$returnurl);

                                    }
                                    
                            }
                        }
                    
                         if($returnurl!=""){
                               // $gotourl=explode("_id_",$this->data['Admins']['returnurl']);
                               
                                $gotourl=str_replace("_id_", "/", $returnurl);
                                  
                                  $this->set("closeit","yes");
                                //$this->redirect('/admins/'.$gotourl); 
                            }else{  
                                    $this->Session->setFlash('Content Page Added Successfully.','default', array('class' => 'successmsg'));
                                    //$this->redirect('/admins/contentlist');
                                    if(isset($this->data['Action']['redirectpage'])){

                                        $sessdata=$this->Session->read('newsortingby');
                                        $this->redirect('/'.$sessdata);

                                    }else{

                                        $this->redirect('/admins/addcontentpage');

                                    }
                            }


                    }else{
                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));
                    }
                }
            }

            #for parentmenu - Only takes Webpages (is_system=1) as parent and Child page can't assigne to -  Event, blog , chat and comments parents    - alias!='events' AND
            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments')";
            $submenus = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));
            $menulist[0]="Parent menu";

            foreach($submenus as $submenu)
            {
                $menulist[$submenu['Content']['id']]=$submenu['Content']['title'];
            }

            $this->set('submenu',$menulist);


            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '16'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition  
             $this->set("returnurl",$returnurl); 
             $this->set("extra",$extra); 

        }

        /*
        * Function name   : editcontent()
        * Description : This function used to edit content pages of related projects
        * Created On      : 22-02-11 (04:40am)
        *
        */ 
        function editcontent($contentid,$returnurl="",$extra='',$event_title=''){
            //Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            if(isset($extra)!="")
            {
                $this->layout= 'admin_popup';  
                $this->set("event_title",$event_title);    
                $this->set("extra",$extra);          
            }
             $this->set("returnurl",$returnurl);
            
            // if $returnurl is popup then its need to close else no need to close
            $this->set("closeit","no");
                        
            $projectid = $this->Session->read("sessionprojectid");
            $prodtl = $this->projectdetailbyid($projectid);
            $projectname = $prodtl[0]['Project']['project_name'];
            $this->set('projectname',$projectname);
            $this->set('current_project_name',$projectname);
			
			$projectname = $prodtl[0]['Project']['system_name'];

            $this->set("contentid",$contentid);
            ##import Content  model for processing
            App::import("Model", "Content");
            $this->Content =   & new Content();    

            ##import ProjectGraphic  model for processing
            App::import("Model", "ProjectGraphic");
            $this->ProjectGraphic =   & new ProjectGraphic();    
            #set the posted data
            $this->Content->set($this->data);
            #check server side validation
            $errormsg = $this->Content->invalidFields();
            
			##check empty data
            if(!empty($this->data)) {

				$contentid = $this->data['Content']['id'];
                 //$returnurl=$this->data['Admins']['returnurl'];
              //  $extra=$this->data['Admins']['extra'];
              //  $event_title=$this->data['Admins']['event_title'];
                 
                 if(!empty($extra)!="")
                 {

                    $this->data['Content']['parent_id'] = 0;
                    if($event_title!="")
                    {
                        $this->data['Content']['alias']=$event_title;
                        $this->data['Content']['title']=$event_title;
                        $this->data['Content']['metatitle']=$event_title;
                    }
                    
                    $this->data['Content']['is_sytem']=2;
                }
                
                
                if(!$errormsg){
                    
                                                
            /* upload_header image */
            $cont=$_FILES['data'];

            if($cont["tmp_name"]["Admins"]["header_image"]!="")
            {

                if ((($cont["type"]["Admins"]["header_image"] == "image/gif") || ($cont["type"]["Admins"]["header_image"] == "image/jpeg") || ($cont["type"]["Admins"]["header_image"] == "image/png") || ($cont["type"]["Admins"]["header_image"] == "image/jpg") || ($cont["type"]["Admins"]["header_image"] == "image/pjpeg")) && ($cont["size"]["Admins"]["header_image"] < 200000) )
                {
                    $ext=explode("/",$cont["type"]["Admins"]["header_image"]);
                    $ext=$ext[1];

                    $up_dir="img/".$projectname."/uploads/";
                    $filename=$this->data['Content']['title'].".".$ext;
                    $filename=str_replace(" ","",$filename); 

                    if ($cont["error"]["Admins"]["header_image"] > 0)
                    {
                        $errormsg .="Error Uploading file.Try again.";
                        $this->Session->setFlash('Error Uploading file.Try again.','default',array('class' => 'msgTXt'));
                    }
                    else
                    {
                        if (file_exists($up_dir.$filename))
                        {

                            //  foreach(glob($up_dir.'*.*') as $v)        //delete existing files from directory then upload
                            //  {
                            unlink($up_dir.$filename);
                            //  }
                            move_uploaded_file($cont["tmp_name"]["Admins"]["header_image"],$up_dir.$filename);
                        }
                        else
                        {

                            //$up_dir="uploads/avatar/".$userid."/";
                            mkdir($up_dir, 0777);
                            //$filename=$userid.".".$_FILES["avatar"]["type"];

                            move_uploaded_file($cont["tmp_name"]["Admins"]["header_image"],$up_dir.$filename);

                        }
                    }
                    $header_image_url=$up_dir.$filename;
                    $this->data['Content']['header_image']=$header_image_url; //upload image url 

                    $width = 960;
                    $height = 50;

                    list($width_orig, $height_orig) = getimagesize($header_image_url);

                    // Resample
                    $image_p = imagecreatetruecolor($width, $height);
                    $image = imagecreatefromjpeg($header_image_url);
                    imagecopyresampled($image_p, $image, 0, 0, 0, 0, $width, $height, $width_orig, $height_orig);

                    // Move file to image folder
                    imagejpeg($image_p, $header_image_url, 100);
                    imagedestroy($image_p);
                    imagedestroy($image);
                }
                else
                {
                    $errormsg .="Invalid File Type or Size";
                    $this->Session->setFlash('Invalid File Type or Size.','default',array('class' => 'msgTXt'));
                    $header_image_url="";
                }           
            }
                    
                    if($this->data['Content']['parent_id'] == "")
                    {
                        $this->data['Content']['parent_id'] = 0;
                    }        
                    if(isset($this->data['Content']['is_global']) == 1)
                    {
                        $this->data['Content']['is_global'] = 0;
                    }
                    else if(isset($this->data['Content']['is_global']) == 0)
                        {
                            $this->data['Content']['is_global'] = 1;
                        }

                    if($returnurl=="detail" || $extra=="detail")
                        $this->data['Content']['type']="event_detail";
                    if($returnurl=="sponsor" || $extra=="sponsor")
                        $this->data['Content']['type']="event_sponsor";
                    if($returnurl=="inquiry" || $extra=="inquiry")
                        $this->data['Content']['type']="event_inquiry";
                        
                        if($this->Content->Save($this->data['Content'])){

                        $this->Session->setFlash('Content Page updated Successfully.','default', array('class' => 'successmsg'));
                        if(isset($this->data['Action']['redirectpage'])){

                            if($this->data['Content']['title']=="Register" || $this->data['Content']['title']=="Login" || $this->data['Content']['title']=="Logout") // if success then redirect to new system tab page
                            {
                                $this->redirect(array('controller'=>'admins','action' =>'systemlist'));
                            }
                            else
                            { 
                                
                                if($returnurl=="popup")
                                {
                                   // $gotourl=explode("_id_",$this->data['Admins']['returnurl']);
                                   
                                    $gotourl=str_replace("_id_", "/", $returnurl);
                                      
                                      $this->set("closeit","yes");
                                    //$this->redirect('/admins/'.$gotourl); 
                                }
                                else
                                if($returnurl=="detail" || $returnurl=="sponsor" || $returnurl=="inquiry")
                                    $this->redirect(array('controller'=>'admins','action'=>'event_pages',$returnurl));    
                                else

								  $this->redirect(array('controller'=>'admins','action'=>'contentlist'));  
                            }


                        }else{

                            if($returnurl=="detail" || $returnurl=="sponsor" || $returnurl=="inquiry")
                               // $this->redirect('/admins/editcontent/'.$contentid.'/'.$returnurl);  
								    $this->redirect(array('controller'=>'admins','action'=>'event_pages',$contentid,$returnurl)); 
                            else
                            //    $this->redirect('/admins/editcontent'/$contentid);
							   $this->redirect(array('controller'=>'admins','action'=>'event_pages',$contentid)); 

                        }

                    }else{
                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));
                    }
                }
            }else{

                $this->Content->id = $contentid;
                $this->data = $this->Content->read();
				
                if($this->data['Content']['is_global'] == 1)
                {
                    $this->data['Content']['is_global'] = 0;
                }
                else if($this->data['Content']['is_global'] == 0)
                    {
                        $this->data['Content']['is_global'] = 1;
                    }
            }

            // ProjectGraphic.project_id='$projectid' AND 
            $conditiongra = "ProjectGraphic.project_id='$projectid' AND  ProjectGraphic.delete_status='0'";
            #for parentmenu

              #for parentmenu - Only takes Webpages (is_system=1) as parent and Child page can't assigne to -  Event, blog , chat and comments parents    - alias!='events' AND
            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments')";
            $submenus = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));
            $menulist[0]="Parent menu";
            
           /* $conditionsubmenu= "id != $contentid and project_id = $projectid and delete_status='0' and parent_id='0'";
            $submenus = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));
            $menulist[0]="Parent menu";  */
            foreach($submenus as $submenu)
            {
                $menulist[$submenu['Content']['id']]=$submenu['Content']['title'];
            }

            $this->set('submenu',$menulist);

            $graphicarr = $this->ProjectGraphic->find('all',array("conditions"=>$conditiongra,'order'=>'ProjectGraphic.id ASC'));
            $this->set('graphiclist',$graphicarr);
            //echo "<pre>";
            //print_r($this->data);


            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '24'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   
        }
		
        /*
        * Function name   : contentlist()
        * Description : This function used to list content of related project
        * Created On      : 22-02-11 (04:20pm)
        *
        */ 
        function contentlist(){
            //Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            
			// Set Back URL 
			$this->Session->delete("newsortingby");
			$this->Session->write("newsortingby",'contentlist');  	
			
            ##import content  model for processing
            App::import("Model", "Content");
            $this->Content =   & new Content();    
            ##fetch data from content table for listing
            if(!empty($this->data)) {
                /*echo "<pre>";
                print_r($this->data);die;
                */    if($this->data['Admins']){
                             
                    foreach($this->data['Admins'] as $key=>$value){
                        if($key !='' && $value !='' && is_numeric($key)){
                            $this->data['Content']['id'] = $key;
                            $this->data['Content']['file_sequence'] = $value;
                            $this->data['Content']['modified'] = $this->data['Admins']['mdate_'.$key]; 
                            $this->Content->Save($this->data['Content']);
                        }
                    }
                }
            }

            if(!empty($this->data['Admins']['searchkey']))
            {
                $val=$this->data['Admins']['searchkey']; 
               // $condition = "Content.title like '%$val%' OR Content.alias  like '%$val%'";
               $condition1 = "Content.project_id = '$projectid' AND Content.delete_status='0' AND (Content.title LIKE '%".$val."%' OR Content.alias LIKE '%".$val."%') AND (Content.is_sytem != '2') and (Content.type='web' or Content.type='' or Content.type is NULL)";
            }
            else
            {
                $condition1 = "Content.project_id = '$projectid' AND Content.delete_status='0' AND (Content.is_sytem != '2') and (Content.type='web' or Content.type='' or Content.type is NULL)";    
            }
			
            $field='';
            /******/
            $contentArr = $this->Content->find('all', array("conditions"=>$condition1));
	        $Idar = Set::extract('/Content/id', $contentArr);
			$IdarStr = implode(',',array_unique($Idar));
			if(!empty($IdarStr)){			
	            $contentParentArr = $this->Content->find('all', array("conditions"=> "(Content.delete_status='0' AND Content.project_id = '$projectid') AND (Content.is_sytem != '2') and (Content.type='web' or Content.type='' or Content.type is NULL) AND (Content.parent_id = 0 OR Content.parent_id IN($IdarStr))"));
		        $parentfilter = Set::extract('/Content/id', $contentParentArr);
			}
			
			if(!empty($parentfilter)){
		       $condition = "Content.id IN (".implode(',', array_unique($parentfilter)).")";
		       $this->Pagination->sortByClass    = 'Content'; ##initaite pagination 
			   $this->Pagination->total= count($this->Content->find('all',array("conditions"=>$condition)));
			   list($order,$limit,$page) = $this->Pagination->init($condition,$field);
			   $limit = 100;
		       $contentdtlarr = $this->Content->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
			   ##set content data in variable        
			  $this->set("contentdata",$contentdtlarr);
			}

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '15'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition           
        }
        /*
        * Function name   : systemlist()
        * Description : This function used to list system pages(login,register,logout) of project
        * Created On      : 21-07-11 (12:15pm)
        *
        */ 
        function systemlist(){

            //Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import content  model for processing
            App::import("Model", "Content");
            $this->Content =   & new Content();    
            ##fetch data from content table for listing

			// Set Back URL 
			$this->Session->delete("newsortingby");
			$this->Session->write("newsortingby",'systemlist');  

            if(!empty($this->data)) {
                /*echo "<pre>";
                print_r($this->data);die;
                */    if($this->data['Admins']){

                    foreach($this->data['Admins'] as $key=>$value){
                        if($key !='' && $value !='' && is_numeric($key)){
                            $this->data['Content']['id'] = $key;
                            $this->data['Content']['file_sequence'] = $value;
                            $this->Content->Save($this->data['Content']);
                        }
                    }
                }
            }

            $condition = "Content.project_id = '$projectid' AND Content.delete_status='0' and is_sytem='2' and  (Content.type='web' or Content.type='' or Content.type is NULL) ";

            if(!empty($this->data['Admins']['searchkey']))
            {
                $val=$this->data['Admins']['searchkey']; 
                $condition .= " AND (Content.title like '%$val%' OR Content.alias  like '%$val%' )";
            }




            $field='';
            //$condition = "Content.project_id = '$projectid' AND Content.delete_status='0'";
            $this->Pagination->sortByClass    = 'Content'; ##initaite pagination 
            $this->Pagination->total= count($this->Content->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $contentdtlarr = $this->Content->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set content data in variable        
            $this->set("contentdata",$contentdtlarr);        
        }


        /*
        * Function name   : rsvplist()
        * Description : This function used to list content of related project
        * Created On      : 22-02-11 (04:20pm)
        *
        */ 
        function rsvplist(){


            //Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            ##import Comment  model for processing
            App::import("Model", "Comment");
            $this->Comment =   & new Comment();    



            $condition="";
            ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $varsearch='%'.$searchkeyword.'%';
                $condition .= "CoinsHolder.serialnum like '".$varsearch."' AND ";
            }


            ##fetch data from Comment table for listing

            $this->Comment->bindModel(array('belongsTo'=>array(
            'CoinsHolder'=>array(
            'foreignKey'=>false,
            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'
            ),'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = Comment.holder_id'
            ),'Coinset'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.id = Comment.coinset_id'
            )
            )));

            $field='';
            $condition .= "Comment.project_id = '$projectid' AND Comment.delete_status='0'";

            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='serialnum'){
                $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination
            }else{
                $this->Pagination->sortByClass    = 'Comment'; ##initaite pagination 
            }



            $this->Pagination->total= count($this->Comment->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->Comment->bindModel(array('belongsTo'=>array(
            'CoinsHolder'=>array(
            'foreignKey'=>false,
            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'
            ),'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = Comment.holder_id'
            ),'Coinset'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.id = Comment.coinset_id'
            )
            )));
            //if($order == "Comment.id ASC"){
            //$order = "Comment.id DESC";
            //}

            $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            //    echo "<pre>";
            //print_r($commentdtlarr);

            $this->set("commentlist",$commentdtlarr);



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '9'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   


        } 



        function downloadrsvplist(){

            $this->layout = null;
            $this->autoLayout = false; 
            Configure::write('debug', '0');

            //Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            ##import Comment  model for processing
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            App::import("Model", "Comment");
            $this->Comment =   & new Comment();    



            $condition="";
            ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "CoinsHolder.serialnum = '".$searchkeyword."' AND ";
            }


            ##fetch data from Comment table for listing

            $this->Comment->bindModel(array('belongsTo'=>array(
            'CoinsHolder'=>array(
            'foreignKey'=>false,
            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'
            ),'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = Comment.holder_id'
            ),'Coinset'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.id = Comment.coinset_id'
            )
            )));

            $field='';
            $condition .= "Comment.project_id = '$projectid' AND Comment.delete_status='0'";

            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='serialnum'){
                $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination
            }else{
                $this->Pagination->sortByClass    = 'Comment'; ##initaite pagination 
            }



            $this->Pagination->total= count($this->Comment->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->Comment->bindModel(array('belongsTo'=>array(
            'CoinsHolder'=>array(
            'foreignKey'=>false,
            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'
            ),'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = Comment.holder_id'
            ),'Coinset'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.id = Comment.coinset_id'
            )
            )));
            //if($order == "Comment.id ASC"){
            //$order = "Comment.id DESC";
            //}

            $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            //    echo "<pre>";
            //print_r($commentdtlarr);

            $this->set("commentlist",$commentdtlarr);



        }


        function download()
        {
            //Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import Comment  model for processing
            App::import("Model", "Comment");
            $this->Comment =   & new Comment();    
            $this->layout = null;
            $this->autoLayout = false; 



            $condition="";
            ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "CoinsHolder.serialnum = '".$searchkeyword."' AND ";
            }


            ##fetch data from Comment table 

            $this->Comment->bindModel(array('belongsTo'=>array(
            'CoinsHolder'=>array(
            'foreignKey'=>false,
            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'
            ),'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = Comment.holder_id'
            ),'Coinset'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.id = Comment.coinset_id'
            )
            )));

            $field='';
            $condition .= "Comment.project_id = '$projectid' AND Comment.delete_status='0'";
            $this->set('values',$this->Comment->find('all',array("conditions"=>$condition, 'order' =>$order)));
        }



        /*
        * Function name   : mailtemplatelist()
        * Description : This function used to list Email Templates of related project
        * Created On      : 22-02-11 (04:20pm)
        *
        */ 
        function adminmailtemplatelist(){

            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import EmailTemplate  model for processing
            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    
            ##fetch data from EmailTemplate table for listing
            $field='';

            if(!empty($this->data))
            {
                //print_r($this->data);
                $searchkey=$this->data['Admins']['searchkey'];
                $varsearch='%'.$searchkey.'%';
                $condition = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.email_template_name like '$varsearch' AND EmailTemplate.delete_status='0'";
                //echo $condition;
            }
            else
            {
                $condition = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0'";
            }
            $this->Pagination->sortByClass    = 'EmailTemplate'; ##initaite pagination 

            $this->Pagination->total= count($this->EmailTemplate->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);


            $emailtempdtlarr = $this->EmailTemplate->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set EmailTemplate data in variable

            $this->set("emailtemplates",$emailtempdtlarr);

        }    






        /*
        * Function name   : mailtemplatelist()
        * Description : This function used to list Email Templates of related project
        * Created On      : 22-02-11 (04:20pm)
        *
        */ 
        function mailtemplatelist(){
            ##Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }

            ##import EmailTemplate  model for processing
            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    
            ##fetch data from EmailTemplate table for listing
            $field='';

            if(!empty($this->data))
            {
                //print_r($this->data);
                $searchkey=$this->data['Admins']['searchkey'];
                $varsearch='%'.$searchkey.'%';
                $condition = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.email_template_name like '$varsearch' AND EmailTemplate.delete_status='0' AND EmailTemplate.is_sytem='1'";
                //echo $condition;
            }
            else
            {
                $condition = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND EmailTemplate.is_sytem='1'";
            }
            $this->Pagination->sortByClass    = 'EmailTemplate'; ##initaite pagination 

            $this->Pagination->total= count($this->EmailTemplate->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);


            $emailtempdtlarr = $this->EmailTemplate->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set EmailTemplate data in variable

            $this->set("emailtemplates",$emailtempdtlarr);


            # set help condition

            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '10'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   


        }    
        
        /*
        * Function name   : mailautoresponderlist()
        * Description : This function used to list all system auto reposnder Email Templates of related project
        * Created On      : 4th Jan 2011 (04:20pm)
        *
        */ 
        function mailautoresponderlist(){
            ##Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    
            }

            ##import EmailTemplate  model for processing
            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    
            ##fetch data from EmailTemplate table for listing
            $field='';

            if(!empty($this->data))
            {
                //print_r($this->data);
                $searchkey=$this->data['Admins']['searchkey'];
                $varsearch='%'.$searchkey.'%';
                $condition = "EmailTemplate.project_id IN(0, '$projectid') AND EmailTemplate.email_template_name like '$varsearch' AND EmailTemplate.delete_status='0' AND EmailTemplate.is_sytem='0'  and (EmailTemplate.is_event_temp='0' or is_event_temp='' or is_event_temp is NULL)";
                //echo $condition;
            }
            else
            {
			 $condition = "EmailTemplate.project_id IN (0,'$projectid') AND EmailTemplate.delete_status='0' AND EmailTemplate.is_sytem='0' and (EmailTemplate.is_event_temp='0' or is_event_temp='' or is_event_temp is NULL)";
            }
            $this->Pagination->sortByClass    = 'EmailTemplate'; ##initaite pagination 

            $this->Pagination->total= count($this->EmailTemplate->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);


            $emailtempdtlarr = $this->EmailTemplate->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set EmailTemplate data in variable
//echo '<pre>';print_r($emailtempdtlarr);
            $this->set("emailtemplates",$emailtempdtlarr);


            # set help condition

            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '10'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);
            # set help condition   


        }    

        
        
        function eventautoresponders(){
            ##Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    
            }

            ##import EmailTemplate  model for processing
            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    
            ##fetch data from EmailTemplate table for listing
            
            App::import("Model", "EventMasterTemplate");
            $this->EventMasterTemplate =   & new EventMasterTemplate();    
            
            $field='';

            if(!empty($this->data))
            {
                //print_r($this->data);
                $searchkey=$this->data['Admins']['searchkey'];
                $varsearch='%'.$searchkey.'%';
                
				$condition = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.email_template_name like '$varsearch' AND EmailTemplate.delete_status='0' and ( EmailTemplate.is_event_temp='1' or EmailTemplate.is_event_temp='2' or EmailTemplate.is_event_temp='3')";  
                //echo $condition;
            }
            else
            {
           
				$condition = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND ( EmailTemplate.is_event_temp='1' or EmailTemplate.is_event_temp='2' or EmailTemplate.is_event_temp='3' )";  
		   }
            
            $this->EmailTemplate->bindModel(array('belongsTo'=>array(
            'EventMasterTemplate'=>array(
            'foreignKey'=>false,
            'conditions'=>'EmailTemplate.is_event_temp = EventMasterTemplate.id'
            )
            )));
            
            $this->Pagination->sortByClass    = 'EmailTemplate'; ##initaite pagination 

            $this->Pagination->total= count($this->EmailTemplate->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            
            $this->EmailTemplate->bindModel(array('belongsTo'=>array(
            'EventMasterTemplate'=>array(
            'foreignKey'=>false,
            'conditions'=>'EmailTemplate.is_event_temp = EventMasterTemplate.id'
            )
            )));
            
            if($order=="EmailTemplate.is_event_temp ASC")
            {
               $order="EventMasterTemplate.event_temp_name ASC";
            }
            if($order=="EmailTemplate.is_event_temp DESC")
            {
               $order="EventMasterTemplate.event_temp_name DESC";
            }

            $emailtempdtlarr = $this->EmailTemplate->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set EmailTemplate data in variable
            $this->set("emailtemplates",$emailtempdtlarr);
            # set help condition

            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '10'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   


        }   
        
        
        /*
        * Function name   : editmailcontent()
        * Description : This function used to edit mail template contents of related projects
        * Created On      : 22-02-11 (09:27pm)
        *
        */ 
        function editmailcontent($por=null,$templateid='',$extra=''){
			##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            
            $projectdetails= $this->getprojectdetails($projectid);
            $this->set('project',$projectdetails);
            
            ##import EmailTemplate  model for processing
            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    
            $this->set("templateid",$templateid);
            
            $current_domain= $_SERVER['HTTP_HOST'];
            
            ##check empty data
            if(!empty($this->data)) {   
                //$extra=$this->data['Company']['extra'];     
                #set the posted data
                $this->EmailTemplate->set($this->data);
                #check server side validation
                $errormsg = $this->EmailTemplate->invalidFields();
                $templname = $this->data['EmailTemplate']['email_template_name'];
                $templateid = $this->data['EmailTemplate']['id'];
                if(!$errormsg){
                    
                    $condition = "email_template_name = '".$templname."' AND project_id = '".$projectid."' AND  delete_status = '0' AND id !='".$templateid."'";

                    ##check already exists company name
                    $ctdata = $this->EmailTemplate->find('all',array("conditions"=>$condition));
                    
                    $this->data['EmailTemplate']['content']=str_replace("../img","http://".$current_domain."/img",$this->data['EmailTemplate']['content']);
                    
                    if(!$ctdata){   
                        if($this->EmailTemplate->Save($this->data['EmailTemplate'])){
                            $this->Session->setFlash('Template updated Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){
                                $sessdata=$this->Session->read('newsortingby');
                                $this->redirect('/'.$sessdata);
                            }else{
                                $this->redirect('/admins/editmailcontent'/$tttid);
                            }

                            //$this->redirect('/admins/mailtemplatelist');

                        }else{
                            $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));
                        }
                    }else{
                        $this->Session->setFlash('Template with same name already exists.','default',array('class' => 'msgTXt'));
                    }                
                }else{
                    $this->Session->setFlash('Please provide email content.','default',array('class' => 'msgTXt'));
                }
            }

            $this->EmailTemplate->id = $templateid;
            $this->data = $this->EmailTemplate->read();
			$this->set("isreadonly",'1');
            if($this->data['EmailTemplate']['is_sytem']=='0'){
                $this->set("isreadonly",'0');
            }
            if(isset($errormsg)){
                $this->data['EmailTemplate']['content']="";
            }

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '22'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);
            
            $this->set("extra",$extra);

            # set help condition   


        }    


        /*
        * Function name   : addmailtemplate()
        * Description : This function used to add new mail templateof related projects
        * Created On      : 22-02-11 (09:50pm)
        *
        */ 
        function addmailtemplate($returnurl="",$extra=""){
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            
            $projectdetails= $this->getprojectdetails($projectid);
            $this->set('project',$projectdetails);  
            
            ##import EmailTemplate  model for processing
            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    
             
            // if $returnurl is popup then its need to close else no need to close
            $this->set("closeit","no");
            
            $current_domain= $_SERVER['HTTP_HOST'];
           
            ##check empty data
            if(!empty($this->data)){
			//print_r($this->data);die;
                //$returnurl=$this->data['Action']['returnurl'];
				if(isset($this->data['Admins']['extra'])){
					$extra=$this->data['Admins']['extra'];
				}
                #set the posted data
                $this->EmailTemplate->set($this->data);
                #check server side validation
                $errormsg = $this->EmailTemplate->invalidFields();

                $this->data['EmailTemplate']['project_id'] = $projectid;
                $this->data['EmailTemplate']['is_sytem'] = '1';
                if(!$errormsg){
                    $templname = $this->data['EmailTemplate']['email_template_name'];

                    $condition = "email_template_name = '".$templname."' AND project_id = '".$projectid."' AND  delete_status = '0'";
                    ##check already exists EmailTemplate name
                    $ctdata = $this->EmailTemplate->find('all',array("conditions"=>$condition));
                    
                     $this->data['EmailTemplate']['content']=str_replace("../img","http://".$current_domain."/img",$this->data['EmailTemplate']['content']);
                    
                    if(!$ctdata){
                        
                        if($returnurl=="event" || $extra=="event")
                        {
                            //$this->data['EmailTemplate']['is_event_temp']=1;
                            $this->data['EmailTemplate']['is_sytem']=0;
                        }
                        
                        if($this->EmailTemplate->Save($this->data['EmailTemplate'])){      

                            $mailtempid = $this->EmailTemplate->getLastInsertId();
                            
                            if($returnurl=="event" || $extra=="event")
                            {
                                $this->Session->setFlash('Template added Successfully.','default', array('class' => 'successmsg'));
                               
                                if($returnurl!="" && $returnurl!="event"){
                               // $gotourl=explode("_id_",$this->data['Admins']['returnurl']);
                               
                                $gotourl=str_replace("_id_", "/", $returnurl);
                                  
                                  $this->set("closeit","yes");
                                //$this->redirect('/admins/'.$gotourl); 
                            }else{ 
                                
                                
                                if(isset($this->data['Action']['redirectpage'])){                                   
                                    $this->redirect('/admins/eventautoresponders');
                                }else{
                                    $this->redirect('/admins/addmailtemplate/event');
                                }
                                }
                            }

                            if($returnurl!=""){
                               // $gotourl=explode("_id_",$this->data['Admins']['returnurl']);
                               
                                $gotourl=str_replace("_id_", "/", $returnurl);
                                  
                                  $this->set("closeit","yes");
                                //$this->redirect('/admins/'.$gotourl); 
                            }else{
                                 $this->Session->setFlash('Template added Successfully.','default', array('class' => 'successmsg'));
                                if(isset($this->data['Action']['redirectpage'])){
                                    $sessdata=$this->Session->read('newsortingby');
                                    $this->redirect('/'.$sessdata);
                                }else{
                                    $this->redirect('/admins/editmailcontent/'.$mailtempid);
                                }
                            }
                            //$this->redirect('/admins/mailtemplatelist');
                        }else{
                            $this->Session->setFlash('Error in processing. Please try again.','default',array('class' => 'msgTXt'));
                        }
                    }else{
                        $this->Session->setFlash('Template with same name already exists.','default',array('class' => 'msgTXt'));
                    }

                }else{
                    $this->Session->setFlash('Please provide email content.','default',array('class' => 'msgTXt'));
                }                
            }



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '11'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);
            
            $this->set("returnurl",$returnurl);
            $this->set("extra",$extra);

            # set help condition   

        }


        function projectdetailbyid($projectid=''){

            App::import("Model", "Project");
            $this->Project =   & new Project();    

            $this->Project->bindModel(array('belongsTo'=>array(
            'Sponsor'=>array(
            'foreignKey'=>false,
            'conditions'=>'Sponsor.id = Project.sponsor_id'
            ))));

            $condition = "Project.id = '".$projectid."'";
            $ptdata = $this->Project->find('all',array("conditions"=>$condition));

            if($ptdata){
                return $ptdata;
            }else{
                return false;
            }

        }     


        /*
        * Function name   : sendtempmail()
        * Description : This function used to send mail for related projects
        * Created On      : 23-02-11 (01:35am)
        */ 
        
        function sendtempmail($tempid=null){

        	//Configure::write('debug',0);
            ##check admin session live or not
            $this->session_check_admin();
			if(isset($this->params['pass']['0'])){
				$holderId = $this->params['pass']['0'];
				$this->set("recordid",$this->params['pass']['0']);
			}	
			
            $projectid = '1';          
			$this->set('projectid',$projectid) ;
			$projectDetails=$this->getprojectdetails($projectid);
			
            $current_domain= $_SERVER['HTTP_HOST']; 
			$this->set('current_domain',$current_domain);
            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    
            $tomail = "";
            $checkempty =true;
			$this->set('adminmail', Admin::ADMIN_EMAIL);
            if(!empty($this->data)){   
				
                if($this->data['EmailTemplate']['subject']=="" || $this->data['EmailTemplate']['content']=="" || $this->data['EmailTemplate']['toid']=="" || $this->data['EmailTemplate']['fromid']==""){
                    $this->Session->setFlash("All the fields are mandatory.",'default',array('class' => 'msgTXt'));
                    $checkempty = false;
                }    
                 
                if($checkempty== true){
                    $sendflag = true;
                    $errorwith="";
                    $mailtempid = $this->data['EmailTemplate']['id'];    
                    $mailsubject = $this->data['EmailTemplate']['subject'];    
                    $mailcontent = $this->data['EmailTemplate']['content'];
                    $frommail = $this->data['EmailTemplate']['fromid'];
                   
					/*
					//STEP: INIT EMAIL TEMPLATES DATA ELEMENTS 
					$dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectarr, 'suman@test.com',"");
					$dataEleValuesArray[TO_MEMBER_NAME]= 'membername';
					$dataEleValuesArray[USER_NAME]= 'suman test';
					$dataEleValuesArray[PROJECT_NAME]= $projectDetails['Project']['project_name'];
					$dataEleValuesArray[PROJECT_HOMEPAGE_URL]= $projectDetails['Project']['website'];
					$this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);
					

					$mailcontent1 = $this->EmailTemplates->insertDataElementValuesToContent($mailcontent);
					 
					print_r($mailcontent1);die;
					*/
				   /**
                    * STEP : Email Sent By Send mail , save it as Executed Task with 'Sedn Mail' as task name in task history table
                    */
                    App::import("Model", "CommunicationTask");
                    $this->CommunicationTask =   & new CommunicationTask();
                  //  $this->pl($this->data['EmailTemplate']);
                    $taskHistoryId = $this->CommunicationTask->saveSendMailTask($this->data['EmailTemplate'], $projectid,$holderId);
                    
                    if($taskHistoryId > 0){
                                              
                         /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/   
                        ///////////////////////////////// append mail footer set by super admin -U /////////////////////////
                            $condition = "id='1'";
                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));
                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];    						           
                            $mailcontent.=$mailfooter;
                        ///////////////////////////////// append mail footer set by super admin /////////////////////////
                        
                        
                        //STEP : GET EMAIL TEMP DETAILS
                         $conditiontemp = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND EmailTemplate.id = '$mailtempid'";
                         $templatearr = $this->EmailTemplate->find('first',array("conditions"=>$conditiontemp));
                        
                     
                    
                        // Set path to inserted image      
						
                        $mailcontent = $this->replaceImgPathInEmailContent($mailcontent); 
                      		
                        $task_email_sent_count=0;
                        $task_email_senterror_count=0;
                        $fromname = Admin::ADMIN_EMAIL;
                        $tomail = $this->data['EmailTemplate']['toid'];
                        $toids = explode(",",$tomail);
                         
                        App::import("Model", "CommunicationTaskExecutionReport");    
                        $this->CommunicationTaskExecutionReport =   & new CommunicationTaskExecutionReport();
                        foreach($toids as $eachid){                            
                               //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    
                               $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectDetails, $eachid);
                               //STEP : SET VALUES TO REQUIRED DATA ELEMENTS
                               //$this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);
                               //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE
                               $mailsubject1=$this->EmailTemplates->insertDataElementValuesToContent($mailsubject);
                               $mailcontent1 = $this->EmailTemplates->insertDataElementValuesToContent($mailcontent);
								//suman
							//	$this->pl($mailcontent1);
                            
                           //STEP : toemail holder details 
                         $conditionhold = " Holder.delete_status='0' AND Holder.email = '$eachid'";
                         $hldarr = $this->Holder->find('first',array("conditions"=>$conditionhold));
                           // STEP :  ADD TASK SENT EMAIL DETAILS TO COMMUNICATION_TASK_SENT_REPORT TABLE  
					
                           $taskReport['CommunicationTaskExecutionReport']['id']='';
                           $taskReport['CommunicationTaskExecutionReport']['task_id']='0';
                           $taskReport['CommunicationTaskExecutionReport']['task_execution_id']=$taskHistoryId;
                           $taskReport['CommunicationTaskExecutionReport']['project_id']=$projectid;
                           $taskReport['CommunicationTaskExecutionReport']['email_template_id']=$mailtempid;
                           $taskReport['CommunicationTaskExecutionReport']['sent_to_holderid']=$hldarr['Holder']['id'];
                           $taskReport['CommunicationTaskExecutionReport']['sent_to_email']=$eachid;
                           $taskReport['CommunicationTaskExecutionReport']['sent_to_firstname']=$hldarr['Holder']['firstname'];
                           $taskReport['CommunicationTaskExecutionReport']['sent_to_lastname']=$hldarr['Holder']['lastnameshow'];
                           $taskReport['CommunicationTaskExecutionReport']['sent_to_company']='';
                           $taskReport['CommunicationTaskExecutionReport']['sent_to_matching']=$sent_to_matching;
                           $taskReport['CommunicationTaskExecutionReport']['email_subject']=$mailsubject1;
                         //  $taskReport['CommunicationTaskExecutionReport']['email_content']=$mailcontent1;
                           $taskReport['CommunicationTaskExecutionReport']['email_from']=$frommail;
                           $taskReport['CommunicationTaskExecutionReport']['email_status']=$email_status;
						   $taskReport['CommunicationTaskExecutionReport']['memberid'] = $holderId;
						  // $this->pl($taskReport['CommunicationTaskExecutionReport']);
						  //echo '<pre>';print_r($taskReport['CommunicationTaskExecutionReport']);
                           $this->CommunicationTaskExecutionReport->save($taskReport['CommunicationTaskExecutionReport']);					
						    $executionrepordID = $this->CommunicationTaskExecutionReport->getLastInsertId();    
							
							$base_url_admin = Configure::read('App.base_url_admin');
                        $mailcontent1.= '<img src = '.$base_url_admin.'mail_open/'.$executionrepordID.'>';
								
								if(!$this->Sendemail->sendMailContentWithCC($eachid,$frommail,$mailsubject1,$mailcontent1,$fromname, $eachid)){
                                $sendflag = false;
                                $errorwith = $eachid.','.$errorwith;
                                $task_email_senterror_count++;
                                $email_status="not sent";
                            }else{
                                 $task_email_sent_count++;
                                 $email_status="sent"; 
                            }
                            $errorwith = substr($errorwith,0,-1);
							if($executionrepordID > 0){
								$taskReportupdate['CommunicationTaskExecutionReport']['id']=$executionrepordID;
								$this->CommunicationTaskExecutionReport->id =$executionrepordID;
								$taskReportupdate['CommunicationTaskExecutionReport']['email_content']=$mailcontent1;
								//$this->pl($taskReportupdate['CommunicationTaskExecutionReport']);
								$this->CommunicationTaskExecutionReport->save($taskReportupdate['CommunicationTaskExecutionReport']);						
								//die;
							}
                        }
						
					
						
						
                         // STEP : UPDATE TASK History ARRAY
                        App::import("Model", "CommunicationTaskHistory");
                        $this->CommunicationTaskHistory =   & new CommunicationTaskHistory();   
                        $taskHistoryArray['id']=$taskHistoryId;
                        $taskHistoryArray['task_sent_count']=$task_email_sent_count;
                        $taskHistoryArray['task_not_sent_count']=$task_email_senterror_count;
                        $this->CommunicationTaskHistory->save($taskHistoryArray);
                        
                        if($sendflag==true){
                            $this->Session->setFlash('Mail sent successfully.','default', array('class' => 'successmsg'));
                        }else{
                            $this->Session->setFlash("Error in Mail sending with email id $errorwith. Please try again",'default',array('class' => 'msgTXt'));
                        }

                        ##setting action for save & apply        
                        if(isset($this->data['Action']['redirectpage'])){
                            $this->redirect(array('controller'=>'admins','action'=>'sendtempmail',$holderId));
                        }else{
                            $this->redirect(array('controller'=>'admins','action'=>'sendtempmail',$holderId));
                        }
                        
                    }else{
                        $this->Session->setFlash("Error in Send Mail processing. Please try again",'default',array('class' => 'msgTXt'));
                    }
                }
            }

            if($tempid || isset($this->data['EmailTemplate']['id'])){
                if($this->data['EmailTemplate']['id']){
                    $tempid = $this->data['EmailTemplate']['id'];
                }
                $this->EmailTemplate->id = $tempid;
                $this->data = $this->EmailTemplate->read();

            }

            
            $this->set('toid',$tomail);

            $this->set('projectid',$projectid);
            $this->customtemplatelisting($projectid);
            // Set Current project id
			$site_type_id = '0';
            $this->set('currentprojectid',$site_type_id); 
            // Get Project Types
            $this->projecttypedropdown(); 
            //Get Company Type Drop Down
            $companytypedropdown=$this->companytypedropdown($projectid); 
			 $this->set('companytypedropdown',$companytypedropdown);

            //Get Company Type Drop Down   
			$contacttypedropdown= $this->contacttypedropdown($projectid);    
			$this->set('contacttypedropdown',$contacttypedropdown);
			$this->getMemberLebel();
            # set help condition
            $this->set("hlpdata",$this->getHelpContent(12));           
            // Set memeber types
            $this->set('member_type', $this->getMemberTypes($projectid, true));
        
            

        }     

     
        /*
        * Function name   : get_company_contacts_by_ajax()
        * Description : This function used to comapny contact details by projecttype id , company type id and contact type id
        * Created On      : 25-8-2011 - QUAD
        *
        */     


        function get_company_contacts_by_ajax($companytypeid=0, $contacttypeid=0){
            #get record from global funtion for ajax calling
            $this->layout="ajax";
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid"); 
            
            $companytype_condition="";
            $contacttype_condition="";

               if($companytypeid  > 0 || $contacttypeid > 0)  {
                    if($companytypeid>0){
                        $companytype_condition= " AND Contact.company_id IN(Select id from companies where company_type_id='".$companytypeid."' and project_id = '".$projectid."')";   
                    }

                    if($contacttypeid>0){
                        $contacttype_condition= " AND Contact.contact_type_id='".$contacttypeid."'";   
                    }

                    $condition ="  Contact.project_id = '".$projectid."' " .$companytype_condition." ".$contacttype_condition;
                    App::import("Model", "Project");
                    $this->Project =   & new Project();
                    $query= "   Select Contact.id, Contact.firstname, Contact.lastname, Contact.email, 
                    Project.project_name as projectname, Company.company_name as companyname 
                    FROM contacts Contact
                    LEFT JOIN companies Company on Company.id=Contact.company_id
                    LEFT JOIN projects Project on Project.id=Contact.project_id
                    WHERE ".$condition;

                    $contactdetails=$this->Project->query($query);
                    
                    $this->set('contactdetails',$contactdetails);   
               }else{
                    $this->set('contactdetails',false); 
               } 

        }    





        
        function get_members_details_by_ajax($member_type=0){

            #get record from global funtion for ajax calling
            $this->layout="ajax";
            ##check admin session live or not
            $this->session_check_admin(); 
	        $projectid = '0';      
             if($member_type > 0){
                    $conditions = array("Holder.member_type" => $member_type,   "Holder.delete_status"=>"0"); 
                    $userdetails=$this->Holder->find("all",array('conditions'=>$conditions));
                    $this->set('userdetails',$userdetails); 
                }
                else // $member_type==all     - Holder.active_status"=>"1",
                {               
                    $conditions = array( "Holder.delete_status"=>"0"); 
                    $userdetails=$this->Holder->find("all",array('conditions'=>$conditions));
                    $this->set('userdetails',$userdetails); 
                }
            }
        function update_content_page_list()  
        {
           #get record from global funtion for ajax calling
            $this->layout="ajax";
            ##check admin session live or not
            $this->session_check_admin();
            

            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin"); 
            
            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments')";
            App::import("Model", 'Content');
            $this->Content =   & new Content();    
            $submenus = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));
            //$menulist[0]="Parent menu";

            foreach($submenus as $submenu)
            {
                $menulist[$submenu['Content']['id']]=$submenu['Content']['title'];
            }

            $this->set('submenu',$menulist); 
        }
        
        function update_email_page_list()  
        {
            
           #get record from global funtion for ajax calling
            $this->layout="ajax";
            ##check admin session live or not
            $this->session_check_admin();
            

            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin"); 
            
            $conditions= "project_id = $projectid and delete_status='0' and is_sytem='1'";
            App::import("Model", 'EmailTemplate');
            $this->EmailTemplate =   & new EmailTemplate();    
            $email_templates = $this->EmailTemplate->find('all',array('fields' => array('EmailTemplate.id','EmailTemplate.email_template_name'),"conditions"=>$conditions));
            //$menulist[0]="Parent menu";



            foreach($email_templates as $email_template)
            {
                $templatedropdown[$email_template['EmailTemplate']['id']]=$email_template['EmailTemplate']['email_template_name'];
            }

            $this->set('templatedropdown',$templatedropdown);
        }
        
        
        function set_recur_flow($set=null,$eventid=null)
        {
            $this->layout="ajax";
            ##check admin session live or not
            $this->session_check_admin();
            
            $this->set('set',$set);
            
            
            //set recurrence details
            if($set=="Daily")
            {
                $condition="DailyCronJob.event_id=".$eventid;
                $daily_data=$this->DailyCronJob->find("first",array("conditions"=>$condition));
                $this->set('daily_data', $daily_data['DailyCronJob']); 
            }
        }



         /**
         * Funtion to get email templates details by ajax- used at sendtempmail view
         * 
         * @param mixed $template_id
         */
        function get_email_template_details_by_ajax($template_id)  {
            #get record from global funtion for ajax calling
            $this->layout="ajax";
            ##check admin session live or not
            $this->session_check_admin();
            
                   
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin"); 
            if($template_id > 0){
                 ##import EmailTemplate  model for processing
                 App::import("Model", "EmailTemplate");
                 $this->EmailTemplate =   & new EmailTemplate();
                 $this->EmailTemplate->id = $template_id;
                 $this->data = $this->EmailTemplate->read();
                
                 echo json_encode($this->data['EmailTemplate']);
            }else{
                echo json_encode(false);
            }
            exit;
            
        }

        /*
        * Function name   : getshipdays()
        * Description : This function used to get shipping days
        * Created On      : 23-02-11 (02:10am)
        *
        */     


        function getproducttypedays($pricetypeoptionsid){
            #get record from global funtion for ajax calling
            $this->layout="";

            // STEP :  Get product id by pricetypeoptionid
			 $getpriceoptionsdetails = $this->ProductType->query("select * from price_type_options where id=$pricetypeoptionsid");
            $producttypeid=$getpriceoptionsdetails['0']['price_type_options']['product_id'];
            // STEP : Get product type default delivery days by products 
            App::import("Model", "ProductType");
            $this->ProductType   = & new ProductType();

            $conditions = array("ProductType.id" => $producttypeid,"ProductType.active_status"=>"1","ProductType.delete_status"=>"0");
            $producttypedata=$this->ProductType->find('all', array('conditions' => $conditions));
	        $producttypedays =$producttypedata['0']['ProductType']['delivery_days'];
            echo $producttypedays;
			//$this->getprojecttypedaysapp($projecttypeid);

            exit;
        }    
        /*
        * Function name   : getshipdays()
        * Description : This function used to get shipping days
        * Created On      : 23-02-11 (02:10am)
        *
        */     


        function getprojecttypedays($projecttypeid){
            #get record from global funtion for ajax calling
            $this->layout="";

            echo $this->getprojecttypedaysapp($projecttypeid);

            exit;
        }    

        /*
        * Function name   : getshipdays()
        * Description : This function used to get shipping days
        * Created On      : 23-02-11 (02:10am)
        *
        */     


        function getshipdays($shippingid){
            #get record from global funtion for ajax calling
            $this->layout=false;    
			 echo $this->getshippingdays($shippingid);    
            exit;
        }



        function get_pricing_details(){
            $this->session_check_admin();

            $units=$_POST['unit'];
            $op_id=$_POST['option'];
            if($units && $op_id)
            {
                $get_details=$this->PricingType->query("select * from price_type_options where id=$op_id");
                $product_id=$get_details[0][price_type_options][product_id];
                $pricing_id=$get_details[0][price_type_options][pricing_id];
                // "select * from pricing_coin_quantities where product_id=$product_id and pricing_id=$pricing_id and coin_quantity=$units"
                $queryCoinPricing="SELECT id, pricing_id, product_id, coin_quantity, price_per_unit, additional_options, 
                qr_per_unit, serial_per_unit, barcode_per_unit, uv_per_unit, photo_per_unit,rfid_per_unit 
                FROM pricing_coin_quantities 
                WHERE product_id='$product_id' and pricing_id='$pricing_id' and coin_quantity <= '$units'
                Order by coin_quantity desc limit 0,1";
                $get_pricing=$this->PricingType->query($queryCoinPricing); 
                if($get_pricing ==false) {
                    // if enterd untis are less than 1st qty set, 
                    //i.e. if pricing for QTY's are '50, 100, 200 etc 
                    //and enterd units are 20 then following query gets pricing of 5oqty
                    $queryCoinPricing="SELECT id, pricing_id, product_id, coin_quantity, price_per_unit, additional_options, 
                    qr_per_unit, serial_per_unit, barcode_per_unit, uv_per_unit, photo_per_unit,rfid_per_unit 
                    FROM pricing_coin_quantities 
                    WHERE product_id='$product_id' and pricing_id='$pricing_id' and coin_quantity >= '$units' limit 0,1";
                    $get_pricing=$this->PricingType->query($queryCoinPricing);
                }
                if($get_pricing){
                    // $get_pricing[0][pricing_coin_quantities]['coin_quantity']=$get_pricing[0][0]['coin_quantity'];
                    $pricing_details[pricing_per_unit]=$get_pricing[0][pricing_coin_quantities];

                    $get_pricing_setup=$this->PricingType->query("select * from pricing_setups where product_id=$product_id and pricing_id=$pricing_id");  
                    $pricing_details[pricing_setup]=$get_pricing_setup[0][pricing_setups];
                    echo json_encode($pricing_details);
                }else{
                    echo json_encode(0);
                }
            }
            exit;             
        }

        function get_pricing_quantities(){
            $this->session_check_admin();

            $pricingid=$_POST['id'];
            if($pricingid)
            {
                $get_quantities=$this->PricingType->query("select * from pricing_coin_quantities where pricing_id=$pricingid");
                //$get_quantities=$get_quantities[0]['pricing_coin_quantities'];

                $get_setups=$this->PricingType->query("select * from pricing_setups where pricing_id=$pricingid");
				$get_setups=$get_setups[0]['pricing_setups'];
                if($get_quantities || $get_setups){

                    $pricing_details['quantities']=$get_quantities;
                    $pricing_details['setups']=$get_setups;

                    echo json_encode($pricing_details);
                }else{
                    echo json_encode(0);
                }

            }

            exit;             
        }
        
        function get_sys_pricing(){
            
			
			$this->session_check_admin();
			Configure::write('debug',0);
			$this->autoRender=false; 
            $this->layout = ''; 
            $syspricingid=22; // $_POST['id'];
			
            if($syspricingid)
            {
                $get_entries=$this->SystemPricing->query("select * from system_monthly_pricings where system_pricing_id=$syspricingid order by id asc");
                $get_setup_fees=$this->SystemPricing->query("select setup_fee from system_pricings where id=$syspricingid");
                
                if($get_entries || $get_setup_fees){

                    $pricing_details['entries']=$get_entries;
                    $pricing_details['setup_fee']=$get_setup_fees;

                    echo json_encode($pricing_details);
                }else{
                    echo json_encode(0);
                }
            }
            exit(0);             
        }
        
        
        function get_sys_pricing_charge() {
            
            $this->session_check_admin();

            $syspricingid=$_POST['id'];
            //$syspricingid= 24;
            $mem=$_POST['mem'];
            $non_mem=$_POST['non_mem'];
            $check=$_POST['check'];
           
            if($syspricingid)
            {
                $sys_pri_info=$this->SystemPricing->query("select * from system_pricings where id=$syspricingid");
                
                $inc_non_members=$sys_pri_info[0]['system_pricings']['inc_non_members'];
                $shopping_cart=$sys_pri_info[0]['system_pricings']['shopping_cart'];
                $super_footer=$sys_pri_info[0]['system_pricings']['super_footer'];
                
                if($check!=NULL)
                {
                    if($check==1)
                    {
                        $total_billing=$mem+$non_mem;    
                    }
                    else
                        $total_billing=$mem;
                        
                    $pricing_details['sys_pri_info']="";
                    $pricing_details['shopping_cart']=$shopping_cart;
                    $pricing_details['super_footer']=$super_footer;
                }
                else
                {
                    if($inc_non_members==1)
                    {
                        $total_billing=$mem+$non_mem;
                    }
                    else
                        $total_billing=$mem;
                        
                    $pricing_details['sys_pri_info']=$inc_non_members;
                    $pricing_details['shopping_cart']=$shopping_cart;
					$pricing_details['super_footer']=$super_footer;
                }
               
                //$monthly_charge=$this->SystemPricing->query("SELECT monthly_price FROM system_monthly_pricings where system_pricing_id=$syspricingid ORDER BY ABS( no_of_members - $total_billing )LIMIT 1");
                
                $monthly_charge=$this->SystemPricing->query("SELECT monthly_price FROM system_monthly_pricings where system_pricing_id=$syspricingid and no_of_members>='$total_billing' order by monthly_price asc LIMIT 1");
                
                $monthly_charge=$monthly_charge[0]['system_monthly_pricings']['monthly_price'];
                
                if($monthly_charge=="" || $monthly_charge==NULL)
                {
                    $monthly_charge=$this->SystemPricing->query("select max(monthly_price) as monthly_price from system_monthly_pricings where system_pricing_id=$syspricingid");
                    $monthly_charge=$monthly_charge[0]['system_monthly_pricings']['monthly_price'];
                }
                
                if($sys_pri_info){

                    $pricing_details['monthly_charge']=$monthly_charge;
                    $pricing_details['total_billing']=$total_billing;
                    //print_r($pricing_details);
                    echo json_encode($pricing_details);
                }else{
                    echo json_encode(0);
                }
            }
            exit;             
        }

        function editcoinset_order($recid){ 

            $current_url= $_SERVER['HTTP_HOST'];
            $this->set('current_url',$current_url);

            $this->session_check_admin();
            //$projectid = $this->Session->read("projectwebsite_id");
            //$project_name=$this->Session->read("projectwebsite_name_admin");  

            //get project id
            $p_id = $this->Coinset->query("select project_id,ship_type_id,price_type_options_id,checked_pricing from coinsets where id=$recid");
 
			$projectid=$p_id['0']['coinsets']['project_id'];
            
			$this->set('projectid',$projectid); 

            $this->set('recid',$recid);   

            //get project name
            $p_name = $this->Project->query("select project_name from projects where id=$projectid");
			
            $project_name=$p_name['0']['projects']['project_name']; 

            $this->set('current_project_name',$project_name);



            ##import EmailTemplate  model for processing
            App::import("Model", "Coinset");
            $this->Coinset =   & new Coinset();    


            //for active menu display

            $this->set('page_url',"coinsetlist");



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   


            $cont="ProductType.delete_status=0 and ProductType.active_status=1";

            $product_types=$this->ProductType->find('list',array('fields'=>array('id','product_type_name')));

            $this->set('product_types',$product_types);


            $projectDetails=$this->getprojectdetails($projectid);    

            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $consetdata = $this->Coinset->find('first',array('fields' => array('MAX(Coinset.id) as max_id'),'conditions'=>array("delete_status = '0' AND  project_id  ='".$projectid."'")));

            $sid=$consetdata[0]['max_id'];
            $singlearr = array("0","1","2","3","4","5","6","7","8","9");
            $condition1 = "project_id = '".$projectid."'  AND id=$sid";

            ##check already exists company name
            $consetdata1 = $this->Coinset->find('all',array("conditions"=>$condition1));
            $totcount = $consetdata1[0]['Coinset']['coinset_name'];

            if(preg_match('/[A-Z]{3}/', $totcount)==1){
                $coinsname= preg_split('/[A-Z]{3}/', $totcount);
                $totcount=$coinsname[1];
            }
            $nexval = ($totcount+1);
            if(in_array($nexval,$singlearr)){
                $newcoinsetname ='0'.$nexval;
            }else{
                $newcoinsetname = $nexval;
            }

            $this->set('coinsetname',$newcoinsetname);


            //get project type id
            $condition2 = "project_id = '".$projectid."'";
            $project_type = $this->Project->find('first',array("conditions"=>$condition2));
            $selectedprojecttype=$project_type['Project']['project_type_id'];
            $this->set('selectedprojecttype',$selectedprojecttype);



            if(!empty($this->data)){


                $condition3 = "id = '".$this->data['Coinset']['id']."'";
                $existing_coinset = $this->Coinset->find('first',array("conditions"=>$condition3));


                $this->Coinset->set($this->data);

                #check server side validation

                $errormsg = $this->Coinset->invalidFields();

                if(!is_numeric(trim($this->data['Coinset']['verifycode']))&& ($this->data['Coinset']['verifycode'] != ''))
                {
                    $errormsg="Verification Code should be numeric.";                
                    $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));
                }

                if($this->data['Coinset']['verifycode'] != '')
                {    
                    $verifycode = $this->Coinset->find('first',array("conditions"=>"Coinset.verifycode='".$this->data['Coinset']['verifycode']."' and Coinset.project_id='".$projectid."' and Coinset.delete_status='0'"));



                    if(is_array($verifycode) and !empty($verifycode))

                    {
                        if($verifycode[Coinset][id]!=$this->data['Coinset']['id'])
                        {

                            $errormsg="Verification Code is already used.";                

                            $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));
                        }

                    }


                }


                if(!$errormsg){


                    $this->File = & new FileComponent;
                    $filePath =  'img' . DS . $project_name . DS.'uploads' ;
                    $this->File->setDestPath($filePath);


                    $ch=$this->data['Coinset'];


                    $checked_pricing=array();

                    if($ch['check_qr']==1)
                    {
                        array_push($checked_pricing,"qr");  
                    }

                    if($ch['check_serial']==1)
                    {
                        array_push($checked_pricing,"serial");  
                    }
                    if($ch['check_barcode']==1)
                    {
                        array_push($checked_pricing,"barcode");  
                    }
                    if($ch['check_uv']==1)
                    {
                        array_push($checked_pricing,"uv");  
                    }
                    if($ch['check_photo']==1)
                    {
                        array_push($checked_pricing,"photo");  
                    }
                    if($ch['check_rfid']==1)
                    {
                        array_push($checked_pricing,"rfid");  
                    }

                    $checked_pricing=implode(",",$checked_pricing);

                    $this->data['Coinset']['checked_pricing']=$checked_pricing;

                    //for datesubmitchipco
                    //print_r($this->data);die;

                    if($this->data['Coinset']['use_pre_artwork']==1)        //if previous artwork selected
                    {
                        $this->data['Coinset']['sidea'] =$sidea_image;
                        $this->data['Coinset']['sideb'] =$sideb_image;
                        $this->data['Coinset']['edge'] =$edge_image;
                    }
                    else    //if no previous artwork selected
                    {
                        if($this->data['Coinset']['coinsidea']['name'] !=''){
                            $file_name1 = $this->File->setFileName($this->data['Coinset']['coinsidea']['name']); 
                            $tmp1 = $this->data['Coinset']['coinsidea']['tmp_name'];
                            $fileNamesidea = $this->File->uploadcoin($file_name1,$tmp1,true);
                            $this->data['Coinset']['sidea'] =$fileNamesidea;
                        }
                        if($this->data['Coinset']['coinsideb']['name'] !=''){
                            $file_name2 = $this->File->setFileName($this->data['Coinset']['coinsideb']['name']); 
                            $tmp2 = $this->data['Coinset']['coinsideb']['tmp_name'];
                            $file_namesideb = $this->File->uploadcoin($file_name2,$tmp2,true);
                            $this->data['Coinset']['sideb'] =$file_namesideb;
                        }
                        if($this->data['Coinset']['coinedge']['name'] !=''){
                            $file_name4 = $this->File->setFileName($this->data['Coinset']['coinedge']['name']); 
                            $tmp4 = $this->data['Coinset']['coinedge']['tmp_name'];
                            $file_nameedge = $this->File->uploadlogo($file_name4,$tmp4,true,'300x12');
                            $this->data['Coinset']['edge'] =$file_nameedge;
                        }
                    }
                    //check if the order details has been changed
                    /*     
                    if($existing_coinset['Coinset']['total_per_unit']!=$this->data['Coinset']['total_per_unit'])
                    $is_changed=1;

                    if($existing_coinset['Coinset']['setup_total']!=$this->data['Coinset']['setup_total'])
                    $is_changed=1;

                    if($existing_coinset['Coinset']['grand_total']!=$this->data['Coinset']['grand_total'])
                    $is_changed=1;

                    if($existing_coinset['Coinset']['ship_type_id']!=$this->data['Coinset']['ship_type_id'])
                    $is_changed=1;

                    if($existing_coinset['Coinset']['verifycode']!=$this->data['Coinset']['verifycode'])
                    $is_changed=1;

                    if($existing_coinset['Coinset']['serialprefix']!=$this->data['Coinset']['serialprefix'])
                    $is_changed=1;

                    if($existing_coinset['Coinset']['startserialnum']!=$this->data['Coinset']['startserialnum'])
                    $is_changed=1;


                    if($existing_coinset['Coinset']['endserialnum']!=$this->data['Coinset']['endserialnum'])
                    $is_changed=1;

                    if($existing_coinset['Coinset']['datesubmitchipco']!=$this->data['Coinset']['datesubmitchipco'])
                    $is_changed=1;

                    if($existing_coinset['Coinset']['dateestship']!=$this->data['Coinset']['dateestship'])
                    $is_changed=1;

                    //if($existing_coinset['Coinset']['dateship']!=$this->data['Coinset']['dateship'])
                    //    $is_changed=1;

                    if($existing_coinset['Coinset']['dateestdelivery']!=$this->data['Coinset']['dateestdelivery'])
                    $is_changed=1;

                    if($is_changed==1)
                    $this->data['Coinset']['is_changed']=1;
                    */

                    if($this->data['Coinset']['pricing_status']==2)
                        $this->data['Coinset']['is_changed']=1;



                    if($this->Coinset->Save($this->data['Coinset'])){

                        $this->Session->setFlash('Coinset added successfully.','default', array('class' => 'successmsg'));


                        if(isset($this->data['Action']['redirectpage'])){

                            //$sessdata=$this->Session->read('newsortingby');
                            $this->redirect('/admins/coinset_orders');

                        }else{

                            $this->redirect('/admins/editcoinset_order/'.$this->data['Coinset']['id']);

                        }



                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                    }





                }




            }

            $this->shippingtypedropdown();

            if($p_id['0']['coinsets']['ship_type_id']){
                $selectedshippingtype=$p_id['0']['coinsets']['ship_type_id'];
                $this->set("selectedshippingtype",$selectedshippingtype);

            }else{

                $this->set("selectedshippingtype","");

            }


            //get selected price type options
            $selectedpricetypeoptions =  $p_id['0']['coinsets']['price_type_options_id']; 

            if($selectedpricetypeoptions){
                $this->set("selectedpricetypeoptions",$selectedpricetypeoptions);

            }else{

                $this->set("selectedpricetypeoptions","");

            }

            //get checked pricing options
            $checkedpricing =  $p_id['0']['coinsets']['checked_pricing']; 
            if($checkedpricing){

                $this->set("checkedpricing",$checkedpricing);

            }else{

                $this->set("checkedpricing","");

            }

            $pricing_status[0]="Unapproved";
            $pricing_status[1]="Approved";
            $pricing_status[2]="Approved with Changes"; 


            $this->set("pricing_status",$pricing_status);


            $this->projecttypedropdown();

            //get product andd pricing details
            $getdetails = $this->ProductType->query("select * from price_type_options where project_id=$projectid");

            $product_pricing=array();
            for($i=0;$i<count($getdetails);$i++)
            {
                $rec_id=$getdetails[$i]['price_type_options']['id'];
                $product_name=$this->getproductnamebyid($getdetails[$i]['price_type_options']['product_id']);
                $pricing_name=$this->getpricingnamebyid($getdetails[$i]['price_type_options']['pricing_id']);

                $name=$product_name;//." ----- ".$pricing_name;
                $product_pricing[$rec_id]=$name;

            }

            $this->set("product_pricing",$product_pricing);


            //get previous artwork details
            $pre_artwork= $this->Coinset->query("select * from coinsets where project_id=$projectid order by id desc limit 1");

            $sidea_image=$pre_artwork['0']['coinsets']['sidea'];
            $sideb_image=$pre_artwork['0']['coinsets']['sideb'];
            $edge_image=$pre_artwork['0']['coinsets']['edge'];

            $this->set("sidea_image",$sidea_image);
            $this->set("sideb_image",$sideb_image);
            $this->set("edge_image",$edge_image);

            //======================================================//

            //======================================================//
            $condition = "project_id = '".$projectid."' AND  delete_status = '0' ";

            ##check already exists company name
            //$consetdata = $this->Coinset->find('all',array("conditions"=>$condition));


            $this->set('coinsetname',$newcoinsetname);
           // $this->set('serialpre',$serialprefix);                        
          //  $this->set('lastserno',$lastserial);
            $this->set('totalreccount',$totcount);

            $this->Coinset->id = $recid;
            $this->data = $this->Coinset->read();
            $this->set("Coinset", $recid);


            if($this->data['Coinset']['pricing_status']){
                $selectedpricingstatus=$this->data['Coinset']['pricing_status'];    

                $this->set("selectedpricingstatus",$selectedpricingstatus);

            }else{
                $selectedpricingstatus=0;

                $this->set("selectedpricingstatus",$selectedpricingstatus);

            }

        }


        function coinset_orders()
        {

            ##check admin session live or not
            $this->session_check_admin();
            if(isset($_SERVER['QUERY_STRING']))
            {
                if(isset($_GET['sortBy'])) $sortby=$_GET['sortBy'];
                if(isset($_GET['direction'])) $sorttype=$_GET['direction'];

            }

            $current_url= $_SERVER['HTTP_HOST'];
            $this->set("current_url",$current_url);     

            ##import project type model for processing
            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();    
            ##fetch data from project type table for listing
            $field='';
            $condition = "Coinset.delete_status = '0' and Coinset.pricing_status=0";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (Project.project_type_name LIKE '%".$searchkeyword."%' OR notes  LIKE '%".$searchkeyword."%' )";
            }

            $this->Pagination->sortByClass    = 'Coinset'; ##initaite pagination 

            $this->Pagination->total= count($this->Coinset->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            // if sort by company type name
            if(isset($sortby) && $sortby=="project_name"){
                $order="Project.project_name ";
                if(isset($sorttype)){
                    $order.=" ".$sorttype;
                }else{
                    $order.=" ASC";  
                }
            }
            $this->Coinset->bindModel(array('belongsTo'=>array(
            'Project'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.project_id = Project.id'
            )
            )));   
            $coinset_orders = $this->Coinset->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable

            /* for($i=0;$i<count($coinset_orders);$i++)
            {
            $coinset_orders[$i][Coinset][project_name]=$this->getprojectnamebyid($coinset_orders[$i][Coinset][project_id]);
            } */ 

            $this->set("coinset_orders",$coinset_orders);    
        }

        function coinset_orders_approved()
        {

            ##check admin session live or not
            $this->session_check_admin();

            $current_url= $_SERVER['HTTP_HOST'];
            $this->set("current_url",$current_url);     

            ##import project type model for processing
            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();    
            ##fetch data from project type table for listing
            $field='';
            $condition = "Coinset.delete_status = '0' and Coinset.pricing_status=1 and Coinset.is_changed=0";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (project_type_name LIKE '%".$searchkeyword."%' OR notes  LIKE '%".$searchkeyword."%' )";
            }

            $this->Pagination->sortByClass    = 'Coinset'; ##initaite pagination 

            $this->Pagination->total= count($this->Coinset->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $coinset_orders = $this->Coinset->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable

            for($i=0;$i<count($coinset_orders);$i++)
            {
                $coinset_orders[$i]['Coinset']['project_name']=$this->getprojectnamebyid($coinset_orders[$i]['Coinset']['project_id']);
            }

            $this->set("coinset_orders",$coinset_orders);    
        }


        function coinset_orders_approved_changes()
        {

            ##check admin session live or not
            $this->session_check_admin();

            $current_url= $_SERVER['HTTP_HOST'];
            $this->set("current_url",$current_url);     

            ##import project type model for processing
            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();    
            ##fetch data from project type table for listing
            $field='';
            $condition = "Coinset.delete_status = '0' and Coinset.pricing_status=2 and Coinset.is_changed=1";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (project_type_name LIKE '%".$searchkeyword."%' OR notes  LIKE '%".$searchkeyword."%' )";
            }

            $this->Pagination->sortByClass    = 'Coinset'; ##initaite pagination 

            $this->Pagination->total= count($this->Coinset->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $coinset_orders = $this->Coinset->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable

            for($i=0;$i<count($coinset_orders);$i++)
            {
                $coinset_orders[$i][Coinset][project_name]=$this->getprojectnamebyid($coinset_orders[$i][Coinset][project_id]);
            }

            $this->set("coinset_orders",$coinset_orders);    
        }
    
        /*
        * Function name   : editcoinset()
        * Description : This function used to edit coinset for related projects
        * Created On      : 24-02-11 (05:45am)
        *
        */ 
			
		function editcoinset($recid){
            $current_url= $_SERVER['HTTP_HOST'];
            $this->set('current_url',$current_url);
            $this->session_check_admin();
            //$projectid = $this->Session->read("projectwebsite_id");
            //$project_name=$this->Session->read("projectwebsite_name_admin");  

            //get project id
            $p_id = $this->Coinset->query("select project_id,ship_type_id,price_type_options_id,checked_pricing,serialdisplayside from coinsets where id=$recid");
            $projectid=$p_id['0']['coinsets']['project_id'];
            $this->set('projectid',$projectid); 
            $this->set('recid',$recid);   
            //get project name
            $p_name = $this->Project->query("select project_name from projects where id=$projectid");
		
            $project_name=$p_name['0']['projects']['project_name']; 
            $this->set('current_project_name',$project_name);
            ##import EmailTemplate  model for processing
            App::import("Model", "Coinset");
            $this->Coinset =   & new Coinset();
			//for active menu display
            $this->set('page_url',"coinsetlist");
            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '20'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition   

            $cont="ProductType.delete_status=0 and ProductType.active_status=1";
            $product_types=$this->ProductType->find('list',array('fields'=>array('id','product_type_name')));
            $this->set('product_types',$product_types);
            $projectDetails=$this->getprojectdetails($projectid); 
            $project_name=$projectDetails['Project']['project_name'];
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $consetdata = $this->Coinset->find('first',array('fields' => array('MAX(Coinset.id) as max_id'),'conditions'=>array("delete_status = '0' AND  project_id  ='".$projectid."'")));
            $sid=$consetdata[0]['max_id'];
            $singlearr = array("0","1","2","3","4","5","6","7","8","9");
            $condition1 = "project_id = '".$projectid."'  AND id=$sid";
            ##check already exists company name
            $consetdata1 = $this->Coinset->find('all',array("conditions"=>$condition1));
            $totcount = $consetdata1[0]['Coinset']['coinset_name'];

            if(preg_match('/[A-Z]{3}/', $totcount)==1){
                $coinsname= preg_split('/[A-Z]{3}/', $totcount);
                $totcount=$coinsname[1];
            }
            $nexval = ($totcount+1);
            if(in_array($nexval,$singlearr)){
                $newcoinsetname ='0'.$nexval;
            }else{
                $newcoinsetname = $nexval;
            }

            $this->set('coinsetname',$newcoinsetname);


            //get project type id
            $condition2 = "project_id = '".$projectid."'";
            $project_type = $this->Project->find('first',array("conditions"=>$condition2));
            $selectedprojecttype=$project_type['Project']['project_type_id'];
            $this->set('selectedprojecttype',$selectedprojecttype);

            //get previous artwork details
            $pre_artwork= $this->Coinset->query("select * from coinsets where project_id=$projectid order by id desc limit 1");
            $sidea_image=$pre_artwork['0']['coinsets']['sidea'];
            $sideb_image=$pre_artwork['0']['coinsets']['sideb'];
            $edge_image=$pre_artwork['0']['coinsets']['edge'];

            $this->set("sidea_image",$sidea_image);
            $this->set("sideb_image",$sideb_image);
            $this->set("edge_image",$edge_image);



            if(!empty($this->data)){

//				pr($this->data);die;
                $condition3 = "id = '".$this->data['Coinset']['id']."'";
                $existing_coinset = $this->Coinset->find('first',array("conditions"=>$condition3));


                $this->Coinset->set($this->data);

                #check server side validation

                $errormsg = $this->Coinset->invalidFields();

                if(!is_numeric(trim($this->data['Coinset']['verifycode']))&& ($this->data['Coinset']['verifycode'] != ''))
                {
                    $errormsg="Verification Code should be numeric.";                
                    $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));
                }

                if($this->data['Coinset']['verifycode'] != '')
                {    
                    $verifycode = $this->Coinset->find('first',array("conditions"=>"Coinset.verifycode='".$this->data['Coinset']['verifycode']."' and Coinset.project_id='".$projectid."' and Coinset.delete_status='0'"));



                    if(is_array($verifycode) and !empty($verifycode))

                    {
                        if($verifycode['Coinset']['id']!=$this->data['Coinset']['id'])
                        {
							$errormsg="Verification Code is already used.";                
                            $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));
                        }
                    }
                }


                if(!$errormsg){
                    $this->File = & new FileComponent;
                    $filePath =  'img' . DS . $project_name . DS.'uploads' ;
                    $this->File->setDestPath($filePath);
                    $ch=$this->data['Coinset'];
					$checked_pricing=array();
                    if(isset($ch['check_qr'])==1)
                    {
                        array_push($checked_pricing,"qr");  
                    }

                    if(isset($ch['check_serial'])==1)
                    {
                        array_push($checked_pricing,"serial");  
                    }
                    if(isset($ch['check_barcode'])==1)
                    {
                        array_push($checked_pricing,"barcode");  
                    }
                    if(isset($ch['check_uv'])==1)
                    {
                        array_push($checked_pricing,"uv");  
                    }
                    if(isset($ch['check_photo'])==1)
                    {
                        array_push($checked_pricing,"photo");  
                    }
                    if(isset($ch['check_rfid'])==1)
                    {
                        array_push($checked_pricing,"rfid");  
                    }
                    $checked_pricing=implode(",",$checked_pricing);
                    $this->data['Coinset']['checked_pricing']=$checked_pricing;
                    if(isset($this->data['Coinset']['use_pre_artwork'])==1)        //if previous artwork selected
                    {
                        $this->data['Coinset']['sidea'] =$sidea_image;
                        $this->data['Coinset']['sideb'] =$sideb_image;
                        $this->data['Coinset']['edge'] =$edge_image;
                    }
                    else    //if no previous artwork selected
                    {
                        if($this->data['Coinset']['coinsidea']['name'] !=''){
                            $file_name1 = $this->File->setFileName($this->data['Coinset']['coinsidea']['name']); 
                            $tmp1 = $this->data['Coinset']['coinsidea']['tmp_name'];
                            $fileNamesidea = $this->File->uploadcoin($file_name1,$tmp1,true);
                            $this->data['Coinset']['sidea'] =$fileNamesidea;
                        }
                        if($this->data['Coinset']['coinsideb']['name'] !=''){
                            $file_name2 = $this->File->setFileName($this->data['Coinset']['coinsideb']['name']); 
                            $tmp2 = $this->data['Coinset']['coinsideb']['tmp_name'];
                            $file_namesideb = $this->File->uploadcoin($file_name2,$tmp2,true);
                            $this->data['Coinset']['sideb'] =$file_namesideb;
                        }
                        if($this->data['Coinset']['coinedge']['name'] !=''){
                            $file_name4 = $this->File->setFileName($this->data['Coinset']['coinedge']['name']); 
                            $tmp4 = $this->data['Coinset']['coinedge']['tmp_name'];
                            $file_nameedge = $this->File->uploadlogo($file_name4,$tmp4,true,'300x12');
                            $this->data['Coinset']['edge'] =$file_nameedge;
							}
                    }     

                    if($this->Coinset->Save($this->data['Coinset'])){

                        $this->Session->setFlash('Coinset added successfully.','default', array('class' => 'successmsg'));


                        if(isset($this->data['Action']['redirectpage'])){

                            //$sessdata=$this->Session->read('newsortingby');
                            $this->redirect(array('controller'=>'admins','action'=>'coinsetlist'));

                        }else{
                            $this->redirect(array('controller'=>'admins','action'=>'editcoinset',$this->data['Coinset']['id']));
                        }
                    }else{
                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));
                    }
                }
            }

            $this->shippingtypedropdown();

            if($p_id['0']['coinsets']['ship_type_id']){
                $selectedshippingtype=$p_id['0']['coinsets']['ship_type_id'];
                $this->set("selectedshippingtype",$selectedshippingtype);

            }else{

                $this->set("selectedshippingtype","");

            }


            //get selected price type options
            $selectedpricetypeoptions =  $p_id['0']['coinsets']['price_type_options_id']; 

            if($selectedpricetypeoptions){
                $this->set("selectedpricetypeoptions",$selectedpricetypeoptions);

            }else{

                $this->set("selectedpricetypeoptions","");

            }

            //get checked pricing options
            $checkedpricing =  $p_id['0']['coinsets']['checked_pricing']; 
            if($checkedpricing){
                $this->set("checkedpricing",$checkedpricing);
            }else{
                $this->set("checkedpricing","");
				}
            $pricing_status[0]="Unapproved";
            $pricing_status[1]="Approved";
            $this->set("pricing_status",$pricing_status);
            $this->projecttypedropdown();
            //get product andd pricing details
            $getdetails = $this->ProductType->query("select * from price_type_options where project_id=$projectid");
            $product_pricing=array();
            for($i=0;$i<count($getdetails);$i++)
            {
                $rec_id=$getdetails[$i]['price_type_options']['id'];
                $product_name=$this->getproductnamebyid($getdetails[$i]['price_type_options']['product_id']);
                $pricing_name=$this->getpricingnamebyid($getdetails[$i]['price_type_options']['pricing_id']);
                $name=$product_name;//." ----- ".$pricing_name;
                $product_pricing[$rec_id]=$name;
            }
            $this->set("product_pricing",$product_pricing);
            //======================================================//
            //======================================================//
            $condition = "project_id = '".$projectid."' AND  delete_status = '0' ";

            ##check already exists company name
            //$consetdata = $this->Coinset->find('all',array("conditions"=>$condition));
            $this->set('coinsetname',$newcoinsetname);
            //$this->set('serialpre',$serialprefix);                        
            //$this->set('lastserno',$lastserial);
            $this->set('totalreccount',$totcount);

            $this->Coinset->id = $recid;
            $this->data = $this->Coinset->read();
			 $this->set("Coinset", $recid);
            if($this->data['Coinset']['pricing_status']){
                $selectedpricingstatus=$this->data['Coinset']['pricing_status'];    

                $this->set("selectedpricingstatus",$selectedpricingstatus);

            }else{
                $selectedpricingstatus=0;

                $this->set("selectedpricingstatus",$selectedpricingstatus);

            }

            $sides=array();
            $sides['A']="A";
            $sides['B']="B";
            $this->set("sides",$sides);     

            //get  pricing serial on side
            $serialdisplayside =  $p_id['0']['coinsets']['serialdisplayside']; 
            if($serialdisplayside){
                $this->set("serialdisplayside",$serialdisplayside);
            }else{
                $this->set("serialdisplayside","");
            }
        }
        /*
        * Function name   : coinsetlist()
        * Description : This function used to list coinsets of related project
        * Created On      : 23-02-11 (11:50pm)
        *
        */ 

        function coinsetlist(){


            ##check user session live or not

            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }

            //for active menu display

            $this->set('page_url',"coinsetlist");


            $projectDetails=$this->getprojectdetails($project_id);

            //         $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$projectDetails['Project']['project_name'];    

            // 
            //         if(empty($project_name)) $this->redirect('/companies/session_expired');




            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '43'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   


            $this->set('project_name',$project_name);


            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            


            ##fetch data from Coinset table for listing

            App::import("Model", "Coinset");
            $this->Coinset =   & new Coinset();
            ##checking search key

            if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey']){
                $searchkeyword = $this->data['Admin']['searchkey'];
                $condition = "Coinset.project_id = '$project_id' AND Coinset.delete_status='0' and Coinset.coinset_name LIKE '%".$searchkeyword."%' OR Coinset.verifycode LIKE '%".$searchkeyword."%' OR Coinset.numunits LIKE '%".$searchkeyword."%' OR Coinset.startserialnum LIKE '%".$searchkeyword."%' OR Coinset.endserialnum LIKE '%".$searchkeyword."%'";

            }else{
               $condition = "Coinset.project_id = '$project_id' AND Coinset.delete_status='0'";
            }        

            $field='';

            $this->Pagination->sortByClass    = 'Coinset'; ##initaite pagination 

            $this->Pagination->total= count($this->Coinset->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            $coinsetdtlarr = $this->Coinset->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
	          ##set Coinset data in variable
           $this->set("coinsetdetail",$coinsetdtlarr);

        }
       /*
        * Function name   : registercoinlist()
        * Description : This function used to list registered coins of related project
        * Created On      : 24-02-11 (10:08pm)
        *
        */ 

        function registercoinlist(){

			##Configure::write('debug',3);	 
            ##check user session live or not		  
            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }    

            //for active menu display   

            $this->set('page_url',"coinsetlist");


            App::import("Model", "CoinsHolder");
            $this->CoinsHolder =   & new CoinsHolder();


            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '6'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid =$project_id; 
            if(!empty($this->data))

            {        //print_r($this->data);

                $val=$this->data['Companies']['searchkey'];

                $condition = "CoinsHolder.serialnum like '%$val%' OR Coinset.coinset_name  like '%$val%' OR Holder.screenname like '%$val%' ";

                //$condition = "CoinsHolder.serialnum like '%$val%'";    



            } 

            else

            {

                $condition = "CoinsHolder.project_id = '$projectid' AND CoinsHolder.delete_status='0'";

            }


            ##fetch data from CoinsHolder table for listing



            $this->CoinsHolder->bindModel(array('belongsTo'=>array(

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = CoinsHolder.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'

            )

            )));



            $field='';



            $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination 



            $this->Pagination->total= count($this->CoinsHolder->find('all',array("conditions"=>$condition)));    

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);            

            $this->CoinsHolder->bindModel(array('belongsTo'=>array(

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = CoinsHolder.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'

            )

            )));





            if($order == "CoinsHolder.id ASC"){

                $order = "CoinsHolder.id DESC";

            }

            $coinscoinlistdtlarr = $this->CoinsHolder->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));



            ##set Coinset data in variable            

            $this->set("coinlist",$coinscoinlistdtlarr);



        }

        function registercoinlist_old201106141(){
            ##Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import Coins Holder  model for processing
            App::import("Model", "CoinsHolder");
            $this->CoinsHolder =   & new CoinsHolder();    


            ##fetch data from CoinsHolder table for listing

            $this->CoinsHolder->bindModel(array('belongsTo'=>array(
            'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = CoinsHolder.holder_id'
            ),'Coinset'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'
            )
            )));
            $field='';
            $condition = "CoinsHolder.project_id = '$projectid' AND CoinsHolder.delete_status='0'";
            $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination 

            $this->Pagination->total= count($this->CoinsHolder->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->CoinsHolder->bindModel(array('belongsTo'=>array(
            'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = CoinsHolder.holder_id'
            ),'Coinset'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'
            )
            )));
            if($order == "CoinsHolder.id ASC"){
                $order = "CoinsHolder.id DESC";
            }
            $coinscoinlistdtlarr = $this->CoinsHolder->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            ##set Coinset data in variable

            $this->set("coinlist",$coinscoinlistdtlarr);

        }


        /*
        * Function name   : hascomment()
        * Description : This function used to check comment available for coin or not
        * Created On      : 02-03-11 (05:20am)
        *
        */ 
        function hascomment($coin_holid){

            if($coin_holid){

                ##Configure::write('debug',3);
                ##check admin session live or not
                $this->session_check_admin();
                $projectid = $this->Session->read("sessionprojectid");
                $project_name=$this->Session->read("projectwebsite_name_admin");  
                $this->set('current_project_name',$project_name);
                ##import Comment  model for processing
                App::import("Model", "Comment");
                $this->Comment =   & new Comment();    


                ##fetch data from Comment table for listing

                $this->Comment->bindModel(array('belongsTo'=>array(
                'CoinsHolder'=>array(
                'foreignKey'=>false,
                'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'
                ),'Holder'=>array(
                'foreignKey'=>false,
                'conditions'=>'Holder.id = Comment.holder_id'
                ),'Coinset'=>array(
                'foreignKey'=>false,
                'conditions'=>'Coinset.id = Comment.coinset_id'
                )
                )));

                $field='';
                $condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.coin_holder_id = '$coin_holid'";
                $this->Pagination->sortByClass    = 'Comment'; ##initaite pagination 

                $this->Pagination->total= count($this->Comment->find('all',array("conditions"=>$condition)));

                list($order,$limit,$page) = $this->Pagination->init($condition,$field);

                $this->Comment->bindModel(array('belongsTo'=>array(
                'CoinsHolder'=>array(
                'foreignKey'=>false,
                'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'
                ),'Holder'=>array(
                'foreignKey'=>false,
                'conditions'=>'Holder.id = Comment.holder_id'
                ),'Coinset'=>array(
                'foreignKey'=>false,
                'conditions'=>'Coinset.id = Comment.coinset_id'
                )
                )));
                if($order == "Comment.id ASC"){
                    $order = "Comment.id DESC";
                }

                $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
                if(!$commentdtlarr){
                    return false;
                }else{
                    return true;
                }

            }else{
                return false;
            }    
            exit;
        }    

        /*
        * Function name   : viewcomments()
        * Description : This function used to list comments on registerd coin of related project
        * Created On      : 24-02-11 (11:08pm)
        *
        */ 

        function viewcomments($coin_holid){

            if($coin_holid){    

                $this->set("coin_holder_id",$coin_holid);

                ##check user session live or not
                $this->session_check_admin();
                ## Get project details
                $project_id = $this->Session->read("sessionprojectid");
                $project_name=$this->Session->read("projectwebsite_name_admin");  
                $this->set('current_project_name',$project_name);
                $this->set('page_url',"coinsetlist");
                $projectDetails=$this->getprojectdetails($project_id);    
                $this->set('project_name',$projectDetails['Project']['project_name']);   
                $this->set('project',$projectDetails);   
                $projectid =$project_id;

                ##import Comment  model for processing
                App::import("Model", "Comment");
                $this->Comment =   & new Comment();    

                ##fetch data from Comment table for listing
                $this->Comment->bindModel(array('belongsTo'=>array(

                'CoinsHolder'=>array(

                'foreignKey'=>false,

                'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

                ),'Holder'=>array(

                'foreignKey'=>false,

                'conditions'=>'Holder.id = Comment.holder_id'

                ),'Coinset'=>array(

                'foreignKey'=>false,

                'conditions'=>'Coinset.id = Comment.coinset_id'

                )

                )));

                if(isset($this->data['Companies']['searchkey']) && $this->data['Companies']['searchkey']){

                    $searchkeyword = $this->data['Companies']['searchkey'];

                    $condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.coin_holder_id = '$coin_holid' AND (Holder.firstname LIKE '%$searchkeyword%' OR Holder.lastnameshow LIKE '%$searchkeyword%' OR Comment.comment LIKE '%$searchkeyword%')";

                }else{

                    $condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.coin_holder_id = '$coin_holid'";

                }

                $field='';

                //$condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.coin_holder_id = '$coin_holid'";

                $this->Pagination->sortByClass    = 'Comment'; ##initaite pagination 

                $this->Pagination->total= count($this->Comment->find('all',array("conditions"=>$condition)));

                list($order,$limit,$page) = $this->Pagination->init($condition,$field);

                $this->Comment->bindModel(array('belongsTo'=>array(

                'CoinsHolder'=>array(

                'foreignKey'=>false,

                'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

                ),'Holder'=>array(

                'foreignKey'=>false,

                'conditions'=>'Holder.id = Comment.holder_id'

                ),'Coinset'=>array(

                'foreignKey'=>false,

                'conditions'=>'Coinset.id = Comment.coinset_id'

                )

                )));

                $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

                if(!$commentdtlarr){
                    /** No comments for selected coin **/
                }

                ##set Coimment data in variable

                $this->set("coinserial",$commentdtlarr[0]['CoinsHolder']['serialnum']);

                $this->set("coinset",$commentdtlarr[0]['Coinset']['coinset_name']);

                $this->set("commentlist",$commentdtlarr);

            }else{
                /** No coin holder id **/

            }


            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '33'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   


        }

        function viewcomments_old20110614($coin_holid){

            if($coin_holid){

                ##Configure::write('debug',3);
                ##check admin session live or not
                $this->session_check_admin();
                $projectid = $this->Session->read("sessionprojectid");
                $project_name=$this->Session->read("projectwebsite_name_admin");  
                $this->set('current_project_name',$project_name);

                ##import Comment  model for processing
                App::import("Model", "Comment");
                $this->Comment =   & new Comment();    


                ##fetch data from Comment table for listing

                $this->Comment->bindModel(array('belongsTo'=>array(
                'CoinsHolder'=>array(
                'foreignKey'=>false,
                'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'
                ),'Holder'=>array(
                'foreignKey'=>false,
                'conditions'=>'Holder.id = Comment.holder_id'
                ),'Coinset'=>array(
                'foreignKey'=>false,
                'conditions'=>'Coinset.id = Comment.coinset_id'
                )
                )));

                $field='';
                $condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.coin_holder_id = '$coin_holid'";
                $this->Pagination->sortByClass    = 'Comment'; ##initaite pagination 

                $this->Pagination->total= count($this->Comment->find('all',array("conditions"=>$condition)));

                list($order,$limit,$page) = $this->Pagination->init($condition,$field);

                $this->Comment->bindModel(array('belongsTo'=>array(
                'CoinsHolder'=>array(
                'foreignKey'=>false,
                'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'
                ),'Holder'=>array(
                'foreignKey'=>false,
                'conditions'=>'Holder.id = Comment.holder_id'
                ),'Coinset'=>array(
                'foreignKey'=>false,
                'conditions'=>'Coinset.id = Comment.coinset_id'
                )
                )));
                //if($order == "Comment.id ASC"){
                //$order = "Comment.id DESC";
                //}

                $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
                if(!$commentdtlarr){
                    $this->Session->setFlash('No comment found for this coin.','default',array('class' => 'errormsg'));
                    $this->redirect('/admins/registercoinlist');
                }
                ##set Coimment data in variable
                //echo "<pre>";
                //print_r($commentdtlarr);
                //exit;

                $this->set("coinserial",$commentdtlarr[0]['CoinsHolder']['serialnum']);
                $this->set("coinset",$commentdtlarr[0]['Coinset']['coinset_name']);
                $this->set("commentlist",$commentdtlarr);
            }else{
                $this->Session->setFlash('Invalid attempt to view comment.','default',array('class' => 'errormsg'));
                $this->redirect('/admins/registercoinlist');
            }
        }        




        /*
        * Function name   : actioncomment()
        * Description : This function used to do action on relative comment
        * Created On      : 24-02-11 (11:08pm)
        *
        */ 

        function actioncomment($commentid,$holderid){        



            //Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import Comment  model for processing
            App::import("Model", "Comment");
            $this->Comment =   & new Comment();    

            ##import EmailTemplate  model for processing
            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    

            $this->set("coin_holder_id",$holderid);

            $this->set("recordid",$commentid);

            //for active menu display

            $this->set('page_url',"coinsetlist");
            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid =$project_id;    


            if(!empty($this->data)){

                $commentid = $this->data['Comment']['id'];

                #set the posted data 

                $this->Comment->set($this->data);

                #check server side validation

                $errormsg = $this->Comment->invalidFields();



                if(!$errormsg){

                    $offensmsg = "";

                    if($this->data['Comment']['offensive']=='1'){

                       ##get offencive mail template

                        $tomailid = $this->data['Company']['emailid'];

                        $toname = $this->data['Company']['nameemailid'];

                        $mailserial = $this->data['Company']['serial'];

                        ##project related information

                        $projectarr = $this->projectdetailbyid($projectid);

                        $projectname = $projectarr[0]['Project']['project_name'];

                        $sponsor_name = $projectarr[0]['Sponsor']['sponsor_name'];
                        $homepagepath = "http://".HTTP_PATH.'/'.$projectarr[0]['Project']['project_name'];
                      
                        $offtit = "OFFENSIVE COMMENT POSTED";
                        $conditiontemp = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND EmailTemplate.email_template_name = '$offtit'";
                        $templatearr = $this->EmailTemplate->find('all',array("conditions"=>$conditiontemp));
                        
                        $subjectoff = $templatearr[0]['EmailTemplate']['subject'];
                        $contentoff= $templatearr[0]['EmailTemplate']['content'];
                        /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/  
                        ///////////////////////////////// append mail footer set by super admin -U /////////////////////////
                            $condition = "id='1'";
                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));
                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            
                            $contentoff.=$mailfooter;
                        ///////////////////////////////// append mail footer set by super admin /////////////////////////
                       
                         // Set path to inserted image 
                        $contentoff = $this->replaceImgPathInEmailContent($contentoff); 
                        
                        $fromemail = $templatearr[0]['EmailTemplate']['sender'];
                        
                       /**
                       * OLD CODE 
                       *  $findarr = array("[[TO_FIRSTNAME]]","[[COIN_SERIAL]]","[[FROM_FIRSTNAME]]","[[PROJECT_NAME]]","[[PROJECT_HOMEPAGE_URL]]");
                        $replacearr = array($toname,$mailserial,$sponsor_name,$projectname,$homepagepath);
                        ## replace content dynamically for path to image
                        $message = str_replace($findarr, $replacearr, $contentoff);
                       *  
                       * @var mixed
                       */
                           

                         /**
                         * New Email Temp replacement code for data Elements 
                         */
                        //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    
                            $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectarr, $tomailid);
                       //STEP : SET VALUES TO REQUIRED DATA ELEMENTS
                            $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $mailserial;
                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);
                        //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE
                            $subjectoff=$this->EmailTemplates->insertDataElementValuesToContent($subjectoff);
                            $message=$this->EmailTemplates->insertDataElementValuesToContent($contentoff);
                            
                        if($this->Sendemail->sendMailContentWithCC($tomailid,$fromemail,$subjectoff,$message, $fromemail, $templatearr[0]['EmailTemplate']['send_cc_email_to'])){ 
                            $offensmsg ="Also mail has been sent to Holder name $toname";

                        }    

                    }





                    if($this->Comment->Save($this->data['Comment'])){

                        $this->Session->setFlash("Comment updated successfully. $offensmsg",'default',array('class' => 'successmsg'));


                        if(isset($this->data['Action']['redirectpage'])){

                            $this->redirect("/admins/viewcomments/$holderid");

                        }else{

                            $this->redirect("/admins/actioncomment/$commentid/$holderid");

                        }

                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'errormsg'));

                    }



                }



            }


            if($commentid || $this->data['Comment']['id']){

                if($this->data['Comment']['id']){

                    $commentid = $this->data['Comment']['id'];

                }

            }

            if(!$commentid){

                $this->Session->setFlash('Invalid attempt to modify comment.','default',array('class' => 'errormsg'));

                $this->redirect("/admins/viewcomments/$holderid");

            }



            $condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.id = '$commentid'";


            $this->Comment->bindModel(array('belongsTo'=>array(

            'CoinsHolder'=>array(

            'foreignKey'=>false,

            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

            ),'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = Comment.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = Comment.coinset_id'

            )

            )));



            $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition));

            if(!$commentdtlarr){

                $this->Session->setFlash('No data available for this comment.','default',array('class' => 'errormsg'));

                //$this->redirect('/companies/registercoinlist');

                $this->redirect("/admins/viewcomments/$holderid");

            }

            ##set Comment data in variable        



            $this->Comment->id = $commentid;

            $this->data = $this->Comment->read();



            $this->data['Company']['serial'] = $commentdtlarr[0]['CoinsHolder']['serialnum'].' Cointset : '.$commentdtlarr[0]['Coinset']['coinset_name'];

            $this->data['Company']['emailid'] = $commentdtlarr[0]['Holder']['email'];

            $this->data['Company']['nameemailid'] = $commentdtlarr[0]['Holder']['firstname'].' '.$commentdtlarr[0]['Holder']['lastnameshow'];

            $comment_type_name=$this->getcommenttypename($this->data['Comment']['comment_type_id']);

            $comment_type_purpose=$this->getcommenttypepurpose($this->data['Comment']['comment_type_id']);

            $this->set('commenttypename',$comment_type_name);

            $this->set('commenttypepurpose',$comment_type_purpose);    
            $this->set('coinserialnumber',$commentdtlarr[0]['CoinsHolder']['serialnum']);    

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '34'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   



        }

      

        /*
        * Function name   : actionreply()
        * Description : This function used to do action on relative comment
        * Created On      : 24-02-11 (11:08pm)
        *
        */ 
        function actionreply($commentid){    
            ##Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            $this->set('commentid', $commentid);
            ##import Comment  model for processing
            App::import("Model", "Subcomment");
            $this->Subcomment =   & new Subcomment();    
            if(!empty($this->data)){

                #set the posted data 
                $this->Subcomment->set($this->data['Subcomment']);
                #check server side validation
                $errormsg = $this->Subcomment->invalidFields();

                if(!$errormsg){

                    if($this->Subcomment->Save($this->data['Subcomment'])){
                        $this->Session->setFlash("Data updated successfully.",'default',array('class' => 'successmsg'));

                        if(isset($this->data['Action']['redirectpage'])){
                            $sessdata=$this->Session->read('newsortingby');
                            $this->redirect('/'.$sessdata);
                        }else
                        {
                            $this->redirect("/admins/actionreply/$commentid");
                        }

                    }else{
                        $this->Session->setFlash('Error in processing.','default',array('class' => 'errormsg'));
                    }    


                }                      
            }

            if($commentid || $this->data['Subcomment']['id']){
                if($this->data['Subcomment']['id']){
                    $commentid = $this->data['Subcomment']['id'];
                }
            }
            if(!$commentid){
                $this->Session->setFlash('Invalid attempt to modify reply.','default',array('class' => 'msgTXt'));
                $this->redirect('/admins/commentreplylist');
            }

            $condition = "Subcomment.project_id = '$projectid' AND Subcomment.delete_status='0' AND Subcomment.id = '$commentid'";

            $this->Subcomment->bindModel(array('belongsTo'=>array(
            'CoinsHolder'=>array(
            'foreignKey'=>false,
            'conditions'=>'CoinsHolder.id = Subcomment.coin_holder_id'
            ),'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = Subcomment.holder_id'
            ),'Comment'=>array('foreignKey'=>false,
            'conditions'=>'Comment.id = Subcomment.comment_id'
            )
            )));

            $commentdtlarr = $this->Subcomment->find('all',array("conditions"=>$condition));
            if(!$commentdtlarr){
                $this->Session->setFlash('No data available for this reply.','default',array('class' => 'msgTXt'));
                $this->redirect('/admins/commentreplylist');
            }
            ##set Coimment data in variable        
            $this->Subcomment->id = $commentid;
            $this->data = $this->Subcomment->read();

            $this->data['Admins']['serial'] = $commentdtlarr[0]['CoinsHolder']['serialnum'];
            $this->data['Comment']['comment']=$commentdtlarr[0]['Comment']['comment'];



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '35'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   



        }


        /*
        * Function name   : verifycommentlist()
        * Description : This function used to do action on relative comment
        * Created On      : 08-03-11 (03:05am)
        *
        */ 
        function verifycommentlist($commentid){



            ##Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import Comment  model for processing
            App::import("Model", "Comment");
            $this->Comment =   & new Comment();    

            ##import EmailTemplate  model for processing
            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    



            if(!empty($this->data)){

                #set the posted data 
                $this->Comment->set($this->data);
                #check server side validation
                $errormsg = $this->Comment->invalidFields();

                if(!$errormsg){
                    $offensmsg = "";
                    if($this->data['Comment']['offensive']=='1'){

                        ##get offencive mail template
                        $tomailid = $this->data['Admins']['emailid'];
                        $toname = $this->data['Admins']['nameemailid'];
                        $mailserial = $this->data['Admins']['serial'];
                        ##project related information
                        $projectarr = $this->getprojectdetails($projectid);    //$this->projectdetailbyid($projectid);
                        $projectname = $projectarr['Project']['project_name'];
                        $sponsor_name = $projectarr['Sponsor']['sponsor_name'];

                        $homepagepath = "http://".HTTP_PATH.'/'.$projectarr['Project']['project_name'];


                        $offtit = "OFFENSIVE COMMENT POSTED";
                        $conditiontemp = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND EmailTemplate.email_template_name = '$offtit'";
                        $templatearr = $this->EmailTemplate->find('all',array("conditions"=>$conditiontemp));

                        $subjectoff = $templatearr[0]['EmailTemplate']['subject'];
                        $contentoff= $templatearr[0]['EmailTemplate']['content'];
                        /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/
                        ///////////////////////////////// append mail footer set by super admin -U /////////////////////////
                            $condition = "id='1'";
                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));
                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            
                            $contentoff.=$mailfooter;
                        ///////////////////////////////// append mail footer set by super admin /////////////////////////
                        
                        // Set path to inserted image 
                         $contentoff = $this->replaceImgPathInEmailContent($contentoff); 
                         
                         
                        $fromemail = $templatearr[0]['EmailTemplate']['sender'];
                         if(!empty($projectarr['Project']['url'])) {
                             $pos = strpos($projectarr['Project']['url'],"http://");
                             if ($pos === false) {
                                 $show_comment_link="http://".$projectarr['Project']['url']."?show_comment_link=1";
                             }else{
                                 $show_comment_link=$projectarr['Project']['url']."?show_comment_link=1"; 
                             }
                              
                        }else {
                             $show_comment_link='http://'.HTTP_PATH.'/'.$projectarr['Project']['project_name'];
                        }
                        
                        /**
                        * OLD CODE
                        * $findarr = array("[[TO_FIRSTNAME]]","[[COIN_SERIAL]]","[[FROM_FIRSTNAME]]","[[PROJECT_NAME]]","[[PROJECT_HOMEPAGE_URL]]");

                        $replacearr = array($toname,$mailserial,$sponsor_name,$projectname,$homepagepath);
                        ## replace content dynamically for path to image
                        
                        $message = str_replace($findarr, $replacearr, $contentoff);    
                        * @var mixed
                        */
                        
                        
                         /**
                         * New Email Temp replacement code for data Elements 
                         */
                        //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    
                            $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectarr, $tomailid);
                       //STEP : SET VALUES TO REQUIRED DATA ELEMENTS
                            $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $mailserial;
                            $dataEleValuesArray[DATA_ELEMENT_COMMENT]=  $this->data['Comment']['comment'];
                            $dataEleValuesArray[DATA_ELEMENT_COMMENT_LINK]=  $show_comment_link;   
                            $dataEleValuesArray[DATA_ELEMENT_MESSAGE]=  $this->data['Comment']['comment'];
                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);
                        //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE
                            $subjectoff=$this->EmailTemplates->insertDataElementValuesToContent($subjectoff);
                            $message=$this->EmailTemplates->insertDataElementValuesToContent($contentoff);
                            
                        if($this->Sendemail->sendMailContentWithCC($tomailid,$fromemail,$subjectoff,$message,$fromemail, $templatearr[0]['EmailTemplate']['send_cc_email_to'])){ 
                                $offensmsg ="Mail has been sent to Holder name $toname.";
                        }   
                       
                        /**
                        * Send OFFENSIVE COMMENT REPORTED - Send to Project manager  
                        */
                        $offreported = "OFFENSIVE COMMENT REPORTED";
                        $condoffreported = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND EmailTemplate.email_template_name = '$offreported'";
                        $offreportedarr = $this->EmailTemplate->find('first',array("conditions"=>$condoffreported));
                        if($offreportedarr){
                                $suboffreported = $offreportedarr['EmailTemplate']['subject'];
                                $contentoffreported= $offreportedarr['EmailTemplate']['content'];
                                /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/ 
                                ///////////////////////////////// append mail footer set by super admin -U /////////////////////////
                                    $condition = "id='1'";
                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));
                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            
                                    $contentoffreported.=$mailfooter;
                                ///////////////////////////////// append mail footer set by super admin /////////////////////////
                                
                                // Set path to inserted image 
                                $contentoffreported = $this->replaceImgPathInEmailContent($contentoffreported); 
                                
                                $fromemail1 =$offreportedarr['EmailTemplate']['sender'];  
                                
                                App::import("Model","Sponsor");
                                $this->Sponsor = new Sponsor();
                                $condition1 = " project_id = '".$projectid."' AND delete_status = '0'";
                                $spArr = $this->Sponsor->find('first',array("conditions"=>$condition1));
                                $sponsoremail= $spArr["Sponsor"]['email'];
                                 /**
                                  * New Email Temp replacement code for data Elements 
                                  */
                                //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    
                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectarr, $sponsoremail,"Sponsor");
                               //STEP : SET VALUES TO REQUIRED DATA ELEMENTS
                                    $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $mailserial;
                                    $dataEleValuesArray[DATA_ELEMENT_COMMENT]=  $this->data['Comment']['comment'];
                                    $dataEleValuesArray[DATA_ELEMENT_MESSAGE]=  $this->data['Comment']['comment'];
                                    $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);
                                //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE
                                    $suboffreported=$this->EmailTemplates->insertDataElementValuesToContent($suboffreported);   
                                    $contentoffreported=$this->EmailTemplates->insertDataElementValuesToContent($contentoffreported); 
                                    
                                     if($this->Sendemail->sendMailContentWithCC($sponsoremail,$fromemail,$suboffreported,$contentoffreported,$fromemail, $offreportedarr['EmailTemplate']['send_cc_email_to'])){ 
                                             $offensmsg.="Also mail has been sent to Project owner ".$spArr["Sponsor"]['sponsor_name'];
                                     }    
                         } 
                    }


                    if($this->Comment->Save($this->data['Comment'])){
                        $this->Session->setFlash("Comment updated successfully. $offensmsg",'default',array('class' => 'successmsg'));
                        if(isset($this->data['Action']['redirectpage'])){

                            $sessdata=$this->Session->read('newsortingby');
                            $this->redirect('/'.$sessdata);
                        }else
                        {
                            $this->redirect('/admins/commentlist');
                        }



                    }else{
                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));
                    }

                }

            }

            if($commentid || $this->data['Comment']['id']){
                if($this->data['Comment']['id']){
                    $commentid = $this->data['Comment']['id'];
                }
            }
            if(!$commentid){
                $this->Session->setFlash('Invalid attempt to modify comment.','default',array('class' => 'msgTXt'));
                $this->redirect('/admins/commentlist');
            }

            $condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.id = '$commentid'";

            $this->Comment->bindModel(array('belongsTo'=>array(
            'CoinsHolder'=>array(
            'foreignKey'=>false,
            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'
            ),'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = Comment.holder_id'
            ),'Coinset'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.id = Comment.coinset_id'
            )
            )));

            $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition));
            if(!$commentdtlarr){
                $this->Session->setFlash('No data available for this comment.','default',array('class' => 'msgTXt'));
                $this->redirect('/admins/commentlist');
            }
            ##set Coimment data in variable


            $this->Comment->id = $commentid;
            $this->data = $this->Comment->read();

            $this->data['Admins']['serial'] = $commentdtlarr[0]['CoinsHolder']['serialnum'].' Cointset : '.$commentdtlarr[0]['Coinset']['coinset_name'];
            $this->data['Admins']['emailid'] = $commentdtlarr[0]['Holder']['email'];
            $this->data['Admins']['nameemailid'] = $commentdtlarr[0]['Holder']['firstname'].' '.$commentdtlarr[0]['Holder']['lastnameshow'];

            $comment_type_name=$this->getcommenttypename($this->data['Comment']['comment_type_id']);
            $comment_type_purpose=$this->getcommenttypepurpose($this->data['Comment']['comment_type_id']);
            $this->set('commenttypename',$comment_type_name);
            $this->set('commenttypepurpose',$comment_type_purpose);    



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '48'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   


        }    

        /*
        * Function name   : commentlist()
        * Description : This function used to list comments & holders information project
        * Created On      : 25-02-11 (02:18am)
        *
        */ 


        function commentlist(){


            ##Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }        


            ##import Comment  model for processing
            App::import("Model", "Comment");
            $this->Comment =   & new Comment();    



            $condition="";
            ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $varsearch='%'.$searchkeyword.'%';    
                $condition .= "CoinsHolder.serialnum like '".$varsearch."' AND ";
            }


            ##fetch data from Comment table for listing

            $this->Comment->bindModel(array('belongsTo'=>array(
            'CoinsHolder'=>array(
            'foreignKey'=>false,
            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'
            ),'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = Comment.holder_id'
            ),'Coinset'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.id = Comment.coinset_id'
            )
            )));

            $field='';
            $condition .= "Comment.project_id = '$projectid' AND Comment.delete_status='0'";

            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='serialnum'){
                $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination
            }else{
                $this->Pagination->sortByClass    = 'Comment'; ##initaite pagination 
            }



            $this->Pagination->total= count($this->Comment->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->Comment->bindModel(array('belongsTo'=>array(
            'CoinsHolder'=>array(
            'foreignKey'=>false,
            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'
            ),'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = Comment.holder_id'
            ),'Coinset'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.id = Comment.coinset_id'
            )
            )));
            //if($order == "Comment.id ASC"){
            //$order = "Comment.id DESC";
            //}

            $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            //print_r($commentdtlarr);
            //echo "<pre>";
            //print_r($commentdtlarr);

            $this->set("commentlist",$commentdtlarr);



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '7'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   


        }    
        /*
        * Function name   : commentreplylist()
        * Description : This function used to list comments & holders information project
        * Created On      : 25-02-11 (02:18am)
        *
        */ 


        function commentreplylist(){



            ##Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }        


            ##import Comment  model for processing
            App::import("Model", "Subcomment");
            $this->Subcomment =   & new Subcomment();    



            $condition="";
            ##checking search key
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "CoinsHolder.serialnum = '".$searchkeyword."' AND ";
            }


            ##fetch data from Comment table for listing

            $this->Subcomment->bindModel(array('belongsTo'=>array(
            'CoinsHolder'=>array(
            'foreignKey'=>false,
            'conditions'=>'CoinsHolder.id = Subcomment.coin_holder_id'
            ),'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = Subcomment.holder_id'
            ),'Comment'=>array('foreignKey'=>false,
            'conditions'=>'Comment.id = Subcomment.comment_id'
            )
            )));

            $field='';
            $condition .= "Subcomment.project_id = '$projectid' AND Subcomment.delete_status='0'";

            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='serialnum'){
                $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination
            }else{
                $this->Pagination->sortByClass    = 'Subcomment'; ##initaite pagination 
            }



            $this->Pagination->total= count($this->Subcomment->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->Subcomment->bindModel(array('belongsTo'=>array(
            'CoinsHolder'=>array(
            'foreignKey'=>false,
            'conditions'=>'CoinsHolder.id = Subcomment.coin_holder_id'
            ),'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = Subcomment.holder_id'
            ),'Comment'=>array('foreignKey'=>false,
            'conditions'=>'Comment.id = Subcomment.comment_id'
            )
            )));
            //if($order == "Comment.id ASC"){
            //$order = "Comment.id DESC";
            //}

            $commentdtlarr = $this->Subcomment->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));



            $this->set("commentlist",$commentdtlarr);



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '8'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   


        }    


        /***************non member list (members that are registered by admin in advance and later activated by user/member**************/

        function nonmemberslist()
        {

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            ##import  Holder  model for processing
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();    

            //for active menu display
            $this->set('page_url',"nonmemberslist");
            
            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '3'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition  


            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    

              // STEP : GET ALL Non Members OF RELATED PROJECT
           
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();
            $field='';
            $searchkey=""; 
            if(!empty($this->data))
            {        
               $searchkey=$this->data['Admin']['searchkey'];
            }
            $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 
            App::import("Model", "MemberType");  
            $this->MemberType =  & new MemberType();
            $member_type=MemberType::MEMBER_TYPE_NON_MEMBER;  // get all members
            $this->Pagination->total= count($this->Holder->getMemberListByProject($project_id, $member_type,$searchkey));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            if($order == "Holder.id ASC"){
                $order = "Holder.created DESC,Holder.lastnameshow ASC, Holder.firstname ASC";
            }
            $holderlist = $this->Holder->getMemberListByProject($project_id, $member_type,$searchkey,$order, $limit, $page);
            $this->set("holderlist",$holderlist); 
        }



        /***************
        * Function : addnonmember 
        * purpose : add non member in system
        */

        function addnonmember()
        {
            //$this->set("redirectcancel","nonmemberslist");
			//Configure::write('debug',3);
            ##check user session live or not
			$this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            App::import("Model", "User");
            $this->User =   & new User();

            App::import("Model", "Holder");
            $this->Holder =   & new Holder();    

            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    

            //for active menu display

            $this->set('page_url',"coinsetlist");


            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '5'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      

            $projectDetails=$this->getprojectdetails($project_id);
			
            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    


            $all_clear=0;

            if($this->data['Holder']['csv'])
            {

                if($this->data['Holder']['csv']=="")
                {
                    $this->Session->setFlash('Please upload a csv file','default',array('class' => 'msgTXt')); 

                    if(isset($this->data['Action']['redirectpage'])){

                        $this->redirect('/admins/nonmemberslist');

                    }else{

                        $this->redirect('/admins/addnonmember');

                    }       
                }
                else if($this->data['Holder']['csv']['name']) {

					$ext=explode(".",$this->data['Holder']['csv']['name']);

					if($ext[1]!="csv")
					{
						$this->Session->setFlash('Please upload file with csv extension','default',array('class' => 'msgTXt')); 

						if(isset($this->data['Action']['redirectpage'])){

							$this->redirect('/admins/nonmemberslist');

						}else{

							$this->redirect('/admins/addnonmember');
						}       
					}
					else
						$all_clear=1;
                }

                if($all_clear==1)    // else upload csv file and import it into db
                {

					//upload csv file to disk temporary 

                    $fieldseparator = ",";
                    $lineseparator = "\n";
                    $csvfile = $this->data['Holder']['csv']['tmp_name'];


                    if(!file_exists($csvfile)) {
                        //echo "File not found. Make sure you specified the correct path.\n";
                        // exit;
                        $this->Session->setFlash('File not found. Make sure you specified the correct path','default',array('class' => 'msgTXt'));
                    }

                    $file = fopen($csvfile,"r");

                    if(!$file) {
                        // echo "Error opening data file.\n";
                        //exit;
                        $this->Session->setFlash('Error opening data file','default',array('class' => 'msgTXt'));
                    }

                    $size = filesize($csvfile);

                    if(!$size) {
                        // echo "File is empty.\n";
                        //exit;
                        $this->Session->setFlash('File is empty','default',array('class' => 'msgTXt'));
                    }

                    if($this->Session->setFlash()) {
                        if(isset($this->data['Action']['redirectpage'])){

                            $this->redirect('/admins/nonmemberslist');

                        }else{

                            $this->redirect('/admins/addnonmember');

                        }       
                    }

                    // SET "NON Member" as a MEMBER TYPE TO MEMBER 
                    App::import("Model", "MemberType");  
                    $this->MemberType =  & new MemberType();
                    $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_NON_MEMBER, $projectid);
                    

					$csvContent = $this->cssvToarray($file,$size); 
					
					
					fclose($file);

                    $lines = 0;
                    $queries = "";
                    $linearray = array();

                    $success=0;
					
					// Remove header row
					array_shift($csvContent);
					$holdererrormsg = array();
					
                    foreach($csvContent as $line) {

                        $linearray = $line;

						
                        $email			=	$linearray['0'];
						$lastname		=	$linearray['1'];
						$screenname		=	$linearray['2'];  // first name
                        $active_status	=	(isset($linearray['3']) ) ? $linearray['3'] : 0 ;
						
                        $incorrent_email=0;
						
						$condition = "email = '".$email."' and  project_id='".$project_id."' and delete_status='0'";
						$usersession = $this->Holder->find('first', array('conditions' => $condition));

						if(is_array($usersession) && !empty($usersession)) {
							$holdererrormsg[] = $email." Email id already exists.";
							$incorrent_email=1;    
						}
						$arr = array();
						$arr1 = array();
						
						if($incorrent_email==0)
                        {   
							$arr['User']['project_id']=$project_id;
                            $arr['User']['username']=$email;
                            $arr['User']['usertype']="holder";
                            $arr['User']['active_status']=$active_status;
                            $arr['User']['delete_status']="0";
                            $arr['User']['created']=date("Y-m-d H:m:s");
                            $arr['User']['modified']=date("Y-m-d H:m:s");
							pr( $arr['User']);
                            $this->User->create();
							$this->User->Save($arr['User']);
                            $user_id = $this->User->getLastInsertId();
							
							$arr1['Holder']['project_id']=$project_id;
                            $arr1['Holder']['user_id']=$user_id;
                            $arr1['Holder']['firstname']=$screenname;
                            $arr1['Holder']['lastnameshow']=$lastname;
                            $arr1['Holder']['screenname']=$screenname;
                            $arr1['Holder']['email']=$email;
                            $arr1['Holder']['country']=254;
                            //$arr1['Holder']['zipcode']=32065;
                            $arr1['Holder']['active_status']=$active_status;
                            $arr1['Holder']['delete_status']='0';
                            $arr1['Holder']['created']=date("Y-m-d H:m:s");
                            $arr1['Holder']['modified']=date("Y-m-d H:m:s");
                            $arr1['Holder']['is_direct_email']='1';   
                            if($member_type){
                                $arr1['Holder']['member_type'] = $member_type['MemberType']['id']; 
                            } 
							pr( $arr1['Holder']);
                            $this->Holder->create();
							$this->Holder->Save($arr1['Holder']);
							
							
							
							##sending registration mail

                            $retmsg="";
                            $tomailid = $email;
                            $toname = $screenname;
                            $holusername = $email;                           
                            $projectname = $projectDetails['Project']['project_name'];
							
							$homepagepath = "http://".HTTP_PATH;
                            $regpath=$homepagepath."?register_redirect=1&t_id=".$user_id;

                            $holreg = "CSV REGISTRATION";
                            $conditiontemp = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND EmailTemplate.email_template_name = '$holreg'";
                            $templatearr = $this->EmailTemplate->find('all',array("conditions"=>$conditiontemp));
							
							$subjectreg = $templatearr['0']['EmailTemplate']['subject'];
                            $contentreg= $templatearr['0']['EmailTemplate']['content'];
							
							// As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button           
                            ///////////////////////////////// append mail footer set by super admin -U /////////////////////////
                                $condition = "id='1'";
                                $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));
                                $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            
                                $contentreg.=$mailfooter;
                            ///////////////////////////////// append mail footer set by super admin /////////////////////////
                            
                            // Set path to inserted image 
                                $contentreg = $this->replaceImgPathInEmailContent($contentreg); 
                                
                            $fromemail =$templatearr['0']['EmailTemplate']['sender'];
							
                            $findarr = array("[[TO_NAME]]","[[PROJECT_HOMEPAGE_URL]]","[[ADMIN_NAME]]");
                            $replacearr = array($toname,$regpath,$fromemail);

                            ## replace content dynamically for path to image
							$message = str_replace($findarr, $replacearr, $contentreg);    

                            if($this->Sendemail->sendMailContentWithCC($tomailid,$fromemail,$subjectreg,$message,$fromemail, $templatearr['0']['EmailTemplate']['send_cc_email_to'])){ 
                                      //STEP : CC EMAIL TO : Check cc email to of selected email template, and send cc email to that email ids
                                         if($templatearr['0']['EmailTemplate']['send_cc_email_to']!=""){
                                            $sendCCEmail=true;
                                            $ccemails= $templatearr['0']['EmailTemplate']['send_cc_email_to'];
                                            $ccemailtoids = explode(",",$ccemails); 
                                            foreach($ccemailtoids as $eachccid){  
                                                     $this->Sendemail->sendMailContent($eachccid,$fromemail,$subjectreg,$message,$fromemail);
                                            } 

                                         }
                                         
                                $retmsg ="Also mail has been sent to Holder name $toname";
                                $success++;

                            } else {
                               $retmsg="";
							}
						}
					}

                    $err=implode("<br>",$holdererrormsg);
					//pr($holdererrormsg);
					
                    if(empty($err))
                    {
                        $this->Session->setFlash("Non-Members added Successfully.",'default', array('class' => 'successmsg'));
                    }
                    else
                    {                                    
                        if($success>0)
                        {
                            $suc_msg="<br>Rest of Non-Members added Successfully.";
                            $err=$err.$suc_msg;
                            $this->Session->setFlash($err,'default',array('class' => 'msgTXt')); 
                        }
                        else
                            $this->Session->setFlash($err,'default',array('class' => 'msgTXt')); 
                    }

                    /*
						@Auther			Suman Singh
						@Type			Created
						@Date			May 10, 2012
						@Use			Save csv files for Emial upload section
					*/
					
					$noRecords 	= count($csvContent);
					$loginID 	= $this->Session->read('Admin.Admin.id');
					$this->File = & new FileComponent;
                    $filePath =  'files' . DS . 'email_uploads'; 
                    $this->File->setDestPath($filePath);
					$uploadData = array();
                    if($this->data['Holder']['csv']['name'] !=''){
                        $file_name1 = $this->File->setFileName($this->data['Holder']['csv']['name']); 
                        $tmp1 = $this->data['Holder']['csv']['tmp_name'];
                        $fileNamefavicon = $this->File->uploadEmailUploads($file_name1,$tmp1,true);
                        if(!empty($fileNamefavicon)){
                            //echo $fileNamefavicon;
							$uploadData['EmailUpload']['upload_filename'] = $fileNamefavicon;
                        }
                        else{    
                            //echo "nooo";
							unset($uploadData['EmailUpload']['upload_filename']);    
                        }
                    }
					//$uploadData['EmailUpload']['project_name'] = $projectname;
					$uploadData['EmailUpload']['project_name'] = $projectDetails['Project']['project_name'];
					$uploadData['EmailUpload']['project_id'] = $project_id;
					$uploadData['EmailUpload']['user_id'] = $loginID;
					$uploadData['EmailUpload']['records'] = $noRecords;
					$uploadData['EmailUpload']['active_status'] = 1;
					
					App::import("Model", "EmailUpload");
					$this->EmailUpload =   & new EmailUpload();
					$this->EmailUpload->create();
					$this->EmailUpload->Save($uploadData['EmailUpload']);
					
					
					
					if(isset($this->data['Action']['redirectpage'])){

                        $this->redirect('/admins/nonmemberslist');

                    }else{

                        $this->redirect('/admins/addnonmember');

                    }
                }
            }
        }

         /*
        * Function name   : memberlist()
        * Description : This function used to list all types of members of related project
        * Created On      : 24th Feb 2012 (QUAD-UA)     - Member Type and Memebrs Enhancement
        *
        */ 

        function memberlist(){
            ##Configure::write('debug',3);
            ##check user session live or not
            $this->session_check_admin();
            //$project_id = $this->Session->read("sessionprojectid");
            //$project_name=$this->Session->read("projectwebsite_name_admin");  
            //$this->set('current_project_name',$project_name);
            
			$base_url = Configure::read('App.base_url');
			
			if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                //$this->Session->write("newsortingby",$strdata);    
                $this->Session->write("newsortingby",$base_url.$strdata);    
            }

            ##import  Holder  model for processing
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();    

            //for active menu display
            $this->set('page_url',"memberlist");
            # set help condition           	
            
			$this->set("hlpdata",$this->getHelpContent(3));     
            # set help condition  
             
            //$projectDetails=$this->getprojectdetails($project_id);    
            //$this->set('project',$projectDetails);    
            //$this->set('project_name',$projectDetails['Project']['project_name']);
            //$projectid=$project_id;    

            // STEP : GET ALL TYPES OF MEMBERS OF RELATED PROJECT
            $field='';
            $searchkey=""; 
            if(!empty($this->data))
            {        
              $searchkey=$this->data['Admin']['searchkey'];
            }
            $condition ='';
            $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 
            $member_type="";  // get all members
            $this->Pagination->total= count($this->Holder->getMemberListByProject($member_type,$searchkey));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            if($order == "Holder.id ASC"){
                $order = "Holder.created DESC,Holder.lastnameshow ASC, Holder.firstname ASC";
            }
            $memberlist = $this->Holder->getMemberListByProject("",$searchkey,$order, $limit, $page);
            $this->set("memberlist",$memberlist);
			
			//$this->pl($memberlist);

        }
		
		function membersbylevel(){
            ##Configure::write('debug',3);
            ##check user session live or not
            $this->session_check_admin();
           
			$base_url = Configure::read('App.base_url');
			if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                //$this->Session->write("newsortingby",$strdata);    
                $this->Session->write("newsortingby",$base_url.$strdata);    
            }

            ##import  Holder  model for processing
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();    

            //for active menu display
            $this->set('page_url',"membersbylevel");

            # set help condition           	
			$this->set("hlpdata",$this->getHelpContent(3));     
            # set help condition  
             
            // STEP : GET ALL TYPES OF MEMBERS OF RELATED PROJECT
            $field='';
            $searchkey=""; 
            if(!empty($this->data))
            {        
              $searchkey=$this->data['Admin']['searchkey'];
            }
            $condition ='';
			
			
			$sortby = isset($this->params['url']['sortBy'])?$this->params['url']['sortBy']:'';

			if($sortby == 'level_name'){
			$this->Pagination->sortByClass    = 'MemberLevel'; 
			} else {
			$this->Pagination->sortByClass    = 'Holder';
			}
			
            $member_type="";  // get all members
            $this->Pagination->total= count($this->Holder->getMemberListBylevels($member_type,$searchkey));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            if($order == "Holder.id ASC"){
                $order = " MemberLevel.level_name ASC,MemberLevel.id ASC ";
            }
			
			if($order == "Holder.points ASC"){
                $order = " totalpoints ASC ";
            }
			if($order == "Holder.points DESC"){
                $order = " totalpoints DESC ";
            }
			
            $memberlist = $this->Holder->getMemberListBylevels("",$searchkey,$order, $limit, $page);
            $this->set("memberlist",$memberlist);
			
			//$this->pl($memberlist);	die;

        }
		
        
        
        
        function download_memberbylevel(){
        	
        	//Configure::write('debug',2);
        	##check user session live or not
        	
        	$this->layout = null;
            $this->autoLayout = false;
        	$base_url = Configure::read('App.base_url');
        	
        	##import  Holder  model for processing
        	App::import("Model", "Holder");
        	$this->Holder =   & new Holder();
         
        	// STEP : GET ALL TYPES OF MEMBERS OF RELATED PROJECT
        	$field		=	"";
        	$searchkey	=	"";
        	$condition 	=	"";
        	if(!empty($this->data)) 
        	{
        		$searchkey=$this->data['Admin']['searchkey'];
        	}
        	// get all members
	        $memberlist = $this->Holder->getMemberListBylevels($condition,$searchkey);
	       // $this->pl($memberlist);
        	$this->set("memberlist",$memberlist);
        }
        
        /*
        * Function name   : holderslist()
        * Description : This function used to list registered holders of related project
        * Created On      : 25-02-11 (02:18am)
        *
        */ 

        function holderslist(){
            $this->session_check_admin();
            $project_id = '1';
           $base_url = Configure::read('App.base_url');
			if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                //$this->Session->write("newsortingby",$strdata);    
				$this->Session->write("newsortingby",$base_url.$strdata);
            }        
            //for active menu display
           	$this->set('page_url',"holderslist");
		   	$this->set("hlpdata",$this->getHelpContent('3'));
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    
           
           // STEP : GET ALL Holders OF RELATED PROJECT
            
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();
            $field='';
            $searchkey=""; 
            if(!empty($this->data))
            {        
               $searchkey=$this->data['Admin']['searchkey'];
            }
            $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 
             App::import("Model", "MemberType");  
            $this->MemberType =  & new MemberType();
            $member_type = MemberType::MEMBER_TYPE_HOLDER;  // get all members
			
            $this->Pagination->total= count($this->Holder->getMemberListByHolder($project_id, $member_type,$searchkey));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
             if($order == "Holder.id ASC"){
                $order = "Holder.created DESC,Holder.lastnameshow ASC, Holder.firstname ASC";
            }
            $holderlist = $this->Holder->getMemberListByProject($project_id, $member_type,$searchkey,$order,$limit, $page);
            $this->set("holderlist",$holderlist); 
        }


        function downloadholder(){

            ##Configure::write('debug',3);
            ##check admin session live or not
            $this->layout = null;
            $this->autoLayout = false; 
            Configure::write('debug', '0');
            $this->session_check_admin();
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();    
            $condition = "Holder.delete_status='0' ";
            //$condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and Holder.id  IN (SELECT DISTINCT holder_id FROM coins_holders)";
			
			//$holderarr = $this->Holder->find('all',array("conditions"=>$condition));
			
			$order			=	"Holder.firstname ASC";
			//$member_type	=	'Non Member';
			$holderarr = $this->Holder->getMemberListByProject("",'','', '', '');
			//$holderarr = $this->Holder->getMemberListByProject($order, '', '');
			
            ##set Coinset data in variable
            $this->set("dholderlists",$holderarr);    
        }    
        
        
        function downloadrsvp($event_id=null){
            
            ##Configure::write('debug',3);
            ##check admin session live or not
            $this->layout = null;
            $this->autoLayout = false; 
            //Configure::write('debug', '0');
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            
            App::import("Model", "Event");
            $this->Event =   & new Event();

            App::import("Model", "EventInvitation");
            $this->EventInvitation =   & new EventInvitation();
           
            $condition = "EventInvitation.delete_status = '0' AND EventInvitation.project_id = '".$projectid."' and EventInvitation.event_id='".$event_id."' and EventInvitation.in_waitlist='0'";
                      
                       
            $this->Event->bindModel(array('belongsTo'=>array(
            'EventInvitation'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.event_id = Event.id'
            )
            )));

            $eventArray = $this->Event->find('all',array("conditions"=>$condition));          
            $this->set("eventdata",$eventArray);
            
        }    
        
        function download_project_product_list()
        {

            ##check admin session live or not
            $this->session_check_admin();
            if(isset($_SERVER['QUERY_STRING']))
            {
                if(isset($_GET['sortBy'])) $sortby=$_GET['sortBy'];
                if(isset($_GET['direction'])) $sorttype=$_GET['direction'];
            }

            $current_url= $_SERVER['HTTP_HOST'];
            ##import project type model for processing
            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();    
            ##fetch data from project type table for listing
            $field='';
            $condition = "Coinset.delete_status = '0' ";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (Project.project_name LIKE '%".$searchkeyword."%' OR Project.system_name  LIKE '%".$searchkeyword."%' ) or ProductType.product_type_name LIKE '%".$searchkeyword."%'";
            }

            $this->Coinset->bindModel(array('belongsTo'=>array(
            'Project'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.project_id = Project.id'
            ),
            'PriceTypeOption'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.price_type_options_id = PriceTypeOption.id'
            ),
            'ProductType'=>array(
            'foreignKey'=>false,
            'conditions'=>'PriceTypeOption.product_id = ProductType.id'
            )
            )));   

            $this->Pagination->sortByClass    = 'Coinset'; ##initaite pagination 

            $this->Pagination->total= count($this->Coinset->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            // if sort by company type name
            if(isset($sortby) && $sortby=="project_name"){
                $order="Project.project_name ";
                if(isset($sorttype)){
                    $order.=" ".$sorttype;
                }else{
                    $order.=" ASC";  
                }
            }
           
            if($_GET['sortBy']=="price_type_options_id"){
                  $order=" ProductType.product_type_name ".$_GET['direction'];
             }
            
            $this->Coinset->bindModel(array('belongsTo'=>array(
            'Project'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.project_id = Project.id'
            ),
            'PriceTypeOption'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.price_type_options_id = PriceTypeOption.id'
            ),
            'ProductType'=>array(
            'foreignKey'=>false,
            'conditions'=>'PriceTypeOption.product_id = ProductType.id'
            )
            )));               
            $coinset_orders = $this->Coinset->find('all',array("conditions"=>$condition, 'order' =>$order,'page' => $page));
            $this->set("coinset_orders",$coinset_orders);            
        }
        
        
        function download_project_sys_price_list()
        {

            ##check admin session live or not
            $this->session_check_admin();
            if(isset($_SERVER['QUERY_STRING']))
            {
                if(isset($_GET['sortBy'])) $sortby=$_GET['sortBy'];
                if(isset($_GET['direction'])) $sorttype=$_GET['direction'];

            }

            $current_url= $_SERVER['HTTP_HOST'];
            $this->set("current_url",$current_url);     

            ##import project type model for processing
            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();    
            ##fetch data from project type table for listing
            $field='';

            $condition = "Project.delete_status = '0'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (Project.project_name LIKE '%".$searchkeyword."%' OR Project.system_name  LIKE '%".$searchkeyword."%' ) or SystemPricing.system_pricing_name LIKE '%".$searchkeyword."%' or SystemVersion.system_version_name LIKE '%".$searchkeyword."%'";
            }

            $this->Project->bindModel(array('belongsTo'=>array(
            'SystemPricing'=>array(
            'foreignKey'=>false,
            'conditions'=>'SystemPricing.id = Project.system_pricing_id'
            ),
            'SystemVersion'=>array(
            'foreignKey'=>false,
            'conditions'=>'SystemVersion.id = SystemPricing.system_version_id'
            )
            )));   

            $this->Pagination->sortByClass    = 'Project'; ##initaite pagination 

            $this->Pagination->total= count($this->Project->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            // if sort by company type name
            if(isset($sortby) && $sortby=="project_name"){
                $order="Project.project_name ";
                if(isset($sorttype)){
                    $order.=" ".$sorttype;
                }else{
                    $order.=" ASC";  
                }
            }
           
            if($_GET['sortBy']=="system_pricing_id"){
                  $order=" SystemPricing.system_pricing_name ".$_GET['direction'];
             }
             
             if($_GET['sortBy']=="version_id"){
                  $order=" SystemVersion.system_version_name ".$_GET['direction'];
             }
            
            $this->Project->bindModel(array('belongsTo'=>array(
            'SystemPricing'=>array(
            'foreignKey'=>false,
            'conditions'=>'SystemPricing.id = Project.system_pricing_id'
            ),
            'SystemVersion'=>array(
            'foreignKey'=>false,
            'conditions'=>'SystemVersion.id = SystemPricing.system_version_id'
            )
            )));   
            
            $project_list = $this->Project->find('all',array("conditions"=>$condition, 'order' =>$order,'page' => $page));
            ##set project type data in variable

            /* for($i=0;$i<count($coinset_orders);$i++)
            {
            $coinset_orders[$i][Coinset][project_name]=$this->getprojectnamebyid($coinset_orders[$i][Coinset][project_id]);
            } */ 

            $this->set("project_list",$project_list);    
        }



        /*
        * Function name   : nonholderslist()
        * Description : This function used to list registered holders of related project
        * Created On      : 25-02-11 (02:18am)
        *
        */ 

        function nonholderslist(){

            ##Configure::write('debug',3);

            ##check admin session live or not
            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            $base_url = Configure::read('App.base_url');
			if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                //$this->Session->write("newsortingby",$strdata);    
                $this->Session->write("newsortingby",$base_url.$strdata);    
            }

            //for active menu display
            $this->set('page_url',"nonholderslist");
               

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '4'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition
          

            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    
          
          // STEP : GET ALL Non Holders OF RELATED PROJECT
           
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();
            $field='';
            $searchkey=""; 
            if(!empty($this->data))
            {        
               $searchkey=$this->data['Admin']['searchkey'];
            }
            $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 
             App::import("Model", "MemberType");  
            $this->MemberType =  & new MemberType();
            $member_type=MemberType::MEMBER_TYPE_NON_HOLDER;  // get all non holders
            $this->Pagination->total= count($this->Holder->getMemberListByProject($member_type,$searchkey));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
              if($order == "Holder.id ASC"){
                $order = "Holder.created DESC,Holder.lastnameshow ASC, Holder.firstname ASC";
            }
            $holderlist = $this->Holder->getMemberListByProject($member_type,$searchkey,$order, $limit, $page);
            
            $this->set("holderlist",$holderlist); 

        }


          /*
        * Function name   : topdonatorslist()
        * Description : This function used to list all types of top donators memebrs of related project
        * Created On      : 24th Feb 2012 (QUAD-UA)     - Member Type and Memebrs Enhancement
        *
        */ 

        function topdonatorslist(){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }        


            ##import  Holder  model for processing
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();    

            //for active menu display
            $this->set('page_url',"memberlist");

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '3'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition  
             
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    


            // STEP : GET ALL TYPES OF MEMBERS OF RELATED PROJECT
            $field='';
            $searchkey=""; 
            if(!empty($this->data))
            {        
               $searchkey=$this->data['Admin']['searchkey'];
            }
            $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 
            $member_type="";  // get all members
            $this->Pagination->total= count($this->Holder->getMemberListByProject($project_id, $member_type,$searchkey));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            if($order == "Holder.id ASC"){
                $order = "Holder.donation_level DESC,Holder.lastnameshow ASC, Holder.firstname ASC";
            }
            $memberlist = $this->Holder->getMemberListByProject($project_id, "",$searchkey,$order, $limit, $page);
            $this->set("memberlist",$memberlist);

        }

        function downloadnonholderlist(){

            $this->layout = null;
            $this->autoLayout = false; 
            Configure::write('debug', '0');

            ##Configure::write('debug',3);
            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            ##import  Holder  model for processing
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();


            $field='';
            $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and Holder.id NOT IN (SELECT DISTINCT holder_id FROM coins_holders)";
            ##initaite pagination 
            $this->Pagination->sortByClass    = 'Holder'; 
            ##initaite pagination 
            $this->Pagination->total= count($this->Holder->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            if($order == "Holder.id ASC"){
                $order = "Holder.id DESC";
            }    
            $holderarr = $this->Holder->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set Coinset data in variable        
            $this->set("dholderlists",$holderarr);        
        }
        
        function downloadcoinslist(){


            $this->layout = null;
            $this->autoLayout = false; 
            Configure::write('debug', '0');
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid"); 
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);

            ##import Coins Holder  model for processing
            App::import("Model", "CoinsHolder");
            $this->CoinsHolder =   & new CoinsHolder();    


            ##fetch data from CoinsHolder table for listing

            $this->CoinsHolder->bindModel(array('belongsTo'=>array(
            'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = CoinsHolder.holder_id'
            ),'Coinset'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'
            )
            )));

            $field='';
            $condition = "CoinsHolder.project_id = '$projectid' AND CoinsHolder.delete_status='0'";
            $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination 

            $this->Pagination->total= count($this->CoinsHolder->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->CoinsHolder->bindModel(array('belongsTo'=>array(
            'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'Holder.id = CoinsHolder.holder_id'
            ),'Coinset'=>array(
            'foreignKey'=>false,
            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'
            )
            )));
            if($order == "CoinsHolder.id ASC"){
                $order = "CoinsHolder.id DESC";
            }
            $coinscoinlistdtlarr = $this->CoinsHolder->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            ##set Coinset data in variable

            $this->set("coinlist",$coinscoinlistdtlarr);
        }    




        /*
        * Function name   : getallcontactbyprojectid()
        * Description : This function used to collect all emailid from holders & company contacts
        * Created On      : 25-02-11 (02:18am)
        *
        */     
        function getallcontactbyprojectid($projectid){ 
			//echo "fgfgf";exit;
            ##import Contacts  model for processing
          //  App::import("Model", "Contact");
           // $this->Contact =   & new Contact();    

            App::import("Model", "Holder");
            $this->Holder =   & new Holder();    
            
            $contactname="";
			
			
           /* $conditions = "Contact.project_id = '".$projectid."' AND  Contact.delete_status = '0'";
            $emailDropDown =  $this->Contact->find("all",array('conditions'=>$conditions,'order'=>'Contact.email ASC'),array('fields'=>array("DISTINCT Contact.email")));
            $emailaddresses = Set::combine($emailDropDown, '{n}.Contact.email', '{n}.Contact.email');
			
			*/

            $conditions1 = " Holder.delete_status = '0'";
            $emailDropDownholder =  $this->Holder->find("all",array('conditions'=>$conditions1,'order'=>'Holder.email ASC'),array('fields'=>array("DISTINCT Holder.email")));
			//$this->pl($emailDropDownholder);
            $emailaddresses = Set::combine($emailDropDownholder, '{n}.Holder.email', '{n}.Holder.email');
			//$this->pl($emailaddresses1);
            //return Set::merge($emailaddresses, $emailaddresses1);
			
			return $emailaddresses;
            exit;
        }    



        /*
        * Function name   : getcompanyaddressbyid()
        * Description : This function used to collect company address
        * Created On      : 01-03-11 (03:22am)
        *
        */      
        function getcompanyaddressbyid($companyid){
            $this->layout='';
            ##import Contacts  model for processing
            App::import("Model", "Company");
            $this->Company =   & new Company();    
            $conditions = "Company.id = '".$companyid."' AND  Company.delete_status = '0'";
            $companyarr =  $this->Company->find("all",array('conditions'=>$conditions));
            if($companyarr){
                $address1 = $companyarr[0]['Company']['address1'];
                $this->set('varaddress1',$address1);
                $address2 = $companyarr[0]['Company']['address2'];
                $this->set('varaddress2',$address2);
                $city = $companyarr[0]['Company']['city'];
                $this->set('varcity',$city);
                $state = $companyarr[0]['Company']['state'];
                $this->set('varstate',$state);
                $country = $companyarr[0]['Company']['country'];
                $this->set('varcountry',$country);
                $zipcode = $companyarr[0]['Company']['zipcode'];
                $this->set('varzipcode',$zipcode);
            }else{
                return false;
            }
        } 
        /*
        * Function name   : loginterms()
        * Description : This function used to edit terms & conditions and privacy policy
        * Created On      : 01-03-11 (03:22am)
        *
        */ 
        function loginterms(){

            ##check admin session live or not
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name = $this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            $this->set('project_name',$project_name);
            $projectDetails=$this->getprojectdetails($projectid);
            $this->set('project',$projectDetails); 

            ##import Sponsor  model for processing
            App::import("Model", "Term");
            $this->Term =   & new Term();
            if(empty($projectid) || $projectid == "")
            {
                $projectid = 0;
                $condition = "Term.project_id = '".$projectid."'";
                $data_id = $this->Term->find('all',array("conditions"=>$condition));


            }

            $checkempty = true;
            ##check empty data
            if(!empty($this->data)) {

                if(empty($projectid) || $projectid == "")
                {
                    $this->data['Term']['id'] = $data_id[0]['Term']['id'];

                }
                $_SESSION['sessionprojectid'] = $projectid;
                if($this->data['Term']['id']=="" || $this->data['Term']['termstitle']=="" || $this->data['Term']['termscontent']=="" || $this->data['Term']['privacytitle']==""|| $this->data['Term']['privacycontent']==""){
                    $this->Session->setFlash("All the fields are mandatory.",'default',array('class' => 'msgTXt'));
                    $checkempty = false;
                }
                if($checkempty==true){
                    if($this->Term->Save($this->data)){
                        $this->Session->setFlash('Database updated Successfully.','default', array('class' => 'successmsg'));

                    }else{
                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));
                    }
                }

            }


            ##check exist sponsor for particular project
            $condition = "Term.project_id = '".$projectid."'";
            $ttdata = $this->Term->find('all',array("conditions"=>$condition));

            if($ttdata){
                if($ttdata[0]['Term']['id'] !=''){

                    $termid = $ttdata[0]['Term']['id'];

                    $this->Term->id = $termid;
                    $this->data = $this->Term->read();

                }
            }

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '17'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   


        }
        /**********************************************
        Points Function
        Admin panel

        **********************************************/

        function points(){

            ##check admin session live or not
            $this->session_check_admin();
            //$projectid = $this->Session->read("sessionprojectid");
			$projectid = '0';
            //get project related points information
             
            $points_info = $this->Point->query("select * , (select point from points where master_points.point_id=points.point_id and project_id='$projectid')as point , 
(select level_value from points where master_points.point_id=points.point_id and project_id='$projectid')as level_value,
(select is_active from points where master_points.point_id=points.point_id and project_id='$projectid')as is_active
from master_points order by master_points.display_order asc");

            for($i=0;$i<count($points_info);$i++) 
            {
               $points_info[$i]['points']['point']=$points_info[$i][0]['point']; 
               $points_info[$i]['points']['level_value']=$points_info[$i][0]['level_value'];
               $points_info[$i]['points']['is_active']=$points_info[$i][0]['is_active'];
            }
             
            $this->set("points_info",$points_info);


            $points_awards_info = $this->Point->query("select * from points_awards where project_id=$projectid order by id asc");
            $this->set("points_awards_info",$points_awards_info);
			
            $checkempty = true;
            ##check empty data
            if(!empty($this->data)) {
                $data_arr=$this->data['admins'];
                for($i=1;$i<=count($points_info);$i++)                
                {
					
                    $check = $data_arr['check_'.$i];
                    $point = $data_arr['point_'.$i];
                    $level = $data_arr['level_'.$i];
					//$this->pl($data_arr);
                    if($check!=0)
                    {
                        $is_active=1;

                        if($point=="")
                        {
                          $this->Session->setFlash('Please fill value in checked checkbox','default',array('class' => 'msgTXt'));                           $this->redirect(array('controller'=>'admins','action'=>'points'));
                        }
                    }
                    else{
                        $is_active = 0;
					}
                    if($level!=0)
                    {
                        $level_value=$level;

                    }else{
                        $level_value=0;
					}	

                    $check_exists=$this->Point->query("select * from points where project_id=$projectid and point_id=$i");
                    if(!empty($check_exists))
                    {
                        $check_exists=$this->Point->query("update points set is_active=$is_active,point= $point,level_value=$level_value where project_id=$projectid and point_id=$i");
                    }
                    else{
                        $check_exists=$this->Point->query("insert into points value('',$point,$projectid,$i,$is_active,$level_value) ");
					}
                }//for loop end
				
                for($i=1;$i<=10;$i++)
                {
                    $check_award=$data_arr['check_award_'.$i];
                    $point_award=$data_arr['point_award_'.$i];
                    $image=$data_arr['award_image_'.$i];
                    $level="level_".$i;

                    if($check_award!=0)
                    {
                        $is_active=1;
                        if($point_award=="")
                        {
                          $this->Session->setFlash('Please fill value in checked checkbox','default',array('class' => 'msgTXt'));
                           $this->redirect(array('controller'=>'admins','action'=>'points'));
                        }
                    }
                    else
                        $is_active=0;
                        $pass_arr=array(); 
						//---------------------------------image upload----------------------------------
                    if($image["tmp_name"]!="")
                    {

                        if ((($image["type"] == "image/gif") || ($image["type"] == "image/jpeg") || ($image["type"] == "image/png") || ($image["type"] == "image/jpg") || ($image["type"] == "image/pjpeg")) && ($image["size"] < 200000) )
                        {
                            $ext=explode("/",$image["type"]);
                            $ext=$ext[1];

                            $up_dir="img/points_images/";
                            $filename=$level.".".$ext;

                            if ($image["error"] > 0)
                            {
                                $errorString .="Error Uploading file.Try again.";
                            }
                            else
                            {
                                if (file_exists($up_dir))
                                {

                                    foreach(glob($up_dir.$level.'.*') as $v)        //delete existing files from directory then upload
                                    {
                                        unlink($v);
                                    }
                                    move_uploaded_file($image["tmp_name"],$up_dir.$filename);
                                }
                                else
                                {


                                    mkdir($up_dir, 0777);
                                    move_uploaded_file($image["tmp_name"],$up_dir.$filename);

                                }
                            }
                            $image_url=$up_dir.$filename;
                            $pass_arr['image_url']=$image_url; //upload image url 
                        }
                        else
                        {
                            $errorString .="Invalid File Type or Size";
                            $image_url="";
                        }           
                    }
                    else
                    {
                        $j=$i-1;
                        if($points_awards_info[$j]['points_awards']['related_image']=="")
                        {
                            $image_url="";
                        }
                        else
                        {                          
                            $image_url =$points_awards_info[$j]['points_awards']['related_image'];
                        }
                    }
                    //---------------------------------image upload    
                                                                               
                     
                    $check_exists=$this->Point->query("select * from points_awards where project_id=$projectid and level='$level'");

                    if(!empty($check_exists))
                    {
                        $q=$this->Point->query("update points_awards set is_active=$is_active,points_required='$point_award',related_image='$image_url' where project_id=$projectid and level='$level'");
                    }
                    else
                        $q=$this->Point->query("insert into points_awards value('',$projectid,'$level','$point_award','$image_url',$is_active) ");

                }

                $this->Session->setFlash('Database updated Successfully.','default', array('class' => 'successmsg'));

                if(isset($this->data['Action']['redirectpage'])){
                    $this->redirect(array('controller'=>'admins','action'=>'points'));
                }else{
                    $this->redirect(array('controller'=>'admins','action'=>'points'));
                }
            }
        }
        function top_points(){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_admin();
            $project_id = '0';          
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    
            }        
            ##import  Holder  model for processing
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();    
            //for active menu display
            $this->set('page_url',"coinsetlist");
           	$this->set("hlpdata",$this->getHelpContent(3));             
            $projectid=$project_id;  
            // STEP : GET ALL TYPES OF MEMBERS OF RELATED PROJECT
            $field='';
            $searchkey=""; 
            if(!empty($this->data))
            {        
               $searchkey=$this->data['Admin']['searchkey'];
            }
            $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 
            $member_type="";  // get all members
            $this->Pagination->total= count($this->Holder->getMemberListByProject($member_type,$searchkey));
            list($order,$limit,$page) = $this->Pagination->init($field);
    
			if($order == "Holder.id ASC"){
                $order = " Holder.lastnameshow ASC, Holder.firstname ASC";
            }
			
			if($order == "Holder.points ASC"){
                $order = " totalpoints ASC";
            }
			
			if($order == "Holder.points DESC"){
                $order = " totalpoints DESC";
            }
			
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();   
            $memberlist = $this->Holder->getMemberListByProject($member_type,$searchkey,$order, $limit, $page);
			//$this->pl($memberlist);
            $this->set("memberlist",$memberlist);

        }
        
        
           function points_detail(){

           // Configure::write('debug',2);

            ##check user session live or not

            $this->session_check_admin();
            $project_id = '1';
             $this->set('project_id',$project_id);

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    
            }        
            ##import  Holder  model for processing
            App::import("Model", "PointArchiveUser");
            $this->PointArchiveUser =   & new PointArchiveUser();    
            $this->set('page_url',"coinsetlist");
            $this->set("hlpdata",$this->getHelpContent(3));
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;
            $field='';
            if(!empty($this->data))
            {        
                $val=$this->data['Admin']['searchkey']; 
                $condition = " PointArchiveUser.project_id = '".$projectid."' AND (Holder.firstname like '%$val%' OR Holder.lastnameshow like '%$val%' OR Holder.screenname like '%$val%') ";   
            } 
            else
            {
               $condition = "PointArchiveUser.project_id = '$projectid'";
            }
            
			$this->PointArchiveUser->bindModel(array('hasOne'=>array(
            		'Holder'=>array(
            				'foreignKey'=>false,
            				'condition' => array('PointArchiveUser.member_id' => 'Holder.user_id')
            )))); 
            
            $condition .= " AND PointArchiveUser.member_id = Holder.user_id";
            
            $this->Pagination->sortByClass    = 'PointArchiveUser'; ##initaite pagination             
            $this->Pagination->total= count($this->PointArchiveUser->find('all',array("conditions"=>$condition,)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            
         	$this->PointArchiveUser->bindModel(array('hasOne'=>array(
            		'Holder'=>array(
            				'foreignKey'=>false,
            				'condition' => array('PointArchiveUser.member_id' => 'Holder.user_id')
            ))));
            
            $points_arr = $this->PointArchiveUser->find('all',array("conditions"=>$condition,'order' =>$order,'limit' => $limit, 'page' => $page));
		//	$this->pl($points_arr);
				
            ##set points data in variable
            $this->set("points_arr",$points_arr);

        }


        /*
        * Function name   : addholder()
        * Description : This function used to add new holder
        * Created On      : 01-03-11 (09:08pm)
        *
        */

        function addmember($fromwhere=null){
            if($fromwhere){
                $this->set("redirectcancel","nonholderslist");
            }else{

                $this->set("redirectcancel","holderslist");
            }
			##check user session live or not
            $this->session_check_admin();
			//var_dump($fromwhere);
			if($fromwhere == 'non')
			$titlTxtHeading = 'Non Holder Registration';
			else
			$titlTxtHeading = 'Member Registration';
			$this->set('titlTxtHeading',$titlTxtHeading);
            App::import("Model", "User");
            $this->User =   & new User();

            App::import("Model", "Holder");
            $this->Holder =   & new Holder();    

            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    

            //for active menu display

            $this->set('page_url',"coinsetlist");
            $this->set("hlpdata",$this->getHelpContent(5));
			 ##check empty data
            if(!empty($this->data)) {
				//echo '<pre>';print_r($this->data);die;
				$this->User->set($this->data);
                $usererrormsg = $this->User->invalidFields();
                $uniqueHolder = $this->Holder->isUniqueScreenName($this->data['Holder']['screenname']);
                $this->Holder->set($this->data);
                $holdererrormsg = $this->Holder->invalidFields();
                if ($uniqueHolder == false) {
                    $holdererrormsg['screenname'] = 'Screen name already exists. Please provide another screen name.';
                    $this->Holder->validationErrors['screenname'] = 'Screen name already exists. Please provide another screen name.';
                }
                //print_r($this->Holder->validationErrors);die;

                ##checking server validation
                if(!$usererrormsg && !$holdererrormsg){                              
                    $orgpassword="";
                    ##putting mandatory data
                    $this->data['User']['username'] = $this->data['Holder']['email'];
                   // $this->data['User']['project_id'] = $projectid;
                    $orgpassword = $this->data['User']['password'];
                    $this->data['User']['password'] = md5($this->data['User']['password']);
                    $this->data['User']['usertype'] = 'Non Holder';
                    $checkret = $this->checkuniqueuserid($this->data['User']['username']);
                    if($checkret){
                        $condition = "email = '".$this->data['Holder']['email']."'  and delete_status='0'";
                        $usersession = $this->Holder->find('first', array('conditions' => $condition));
                        if(is_array($usersession) && !empty($usersession)) {
                            $this->Session->setFlash('Email id with same name already exists.','default',array('class' => 'msgTXt'));    

                        }else{  
                            ##insert login details for spacific holder
							//$this->pl($this->data);
                            if($this->User->Save($this->data['User'])){
                                $lastuserid = $this->User->getLastInsertId();
                                $this->data['Holder']['user_id'] = $lastuserid;
								if(!empty($this->data['Holder']['birthday'])){
	                                $dateFormat = explode('-',$this->data['Holder']['birthday']);
		                            $birthDate = $dateFormat['2'].'-'.$dateFormat['0'].'-'.$dateFormat['1'];
			                        $this->data['Holder']['birthday'] = $birthDate;                                
								}
								$subscriptiontypes_checks=$this->getDefaultSubscriptionTypesChecks();
                                $this->data['Holder']['subscription_type_id']= $subscriptiontypes_checks;

                                // SET "NON HOLDER" as a MEMBER TYPE TO MEMBER 
                                 App::import("Model", "MemberType");  
                                $this->MemberType =  & new MemberType();
                                $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_NON_HOLDER, $projectid);
                                if($member_type){
                                       $this->data['Holder']['member_type'] = $member_type['MemberType']['id']; 
                                }    
								//Get latitude and longititude from zipcode wise
								
								if(isset($this->data['Holder']['zipcode'])){
									$zip = $this->data['Holder']['zipcode'];
									$address = $this->data['Holder']['address1'];
									$countryID = $this->data['Holder']['country'];
									$countryName = $this->getcountryname($countryID);									
									$stateID = $this->data['Holder']['state'];
									$stateName = $this->getstatename($stateID);
									$city = $this->data['Holder']['city'];
									$arrayaddress = array($address, $countryName, $stateName, $city, $zip);
									$addressStr = str_replace(' ' ,'+',implode('+',$arrayaddress));									
									$LatiLongi = file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?address='.$addressStr.'&sensor=false');		
			  		$jsondata = json_decode($LatiLongi,true);		
					$this->data['Holder']['latitude'] = $jsondata['results'][0]['geometry']['location']['lat'];
					$this->data['Holder']['lognitude'] = $jsondata['results'][0]['geometry']['location']['lng'];
			}
				
								$this->data['Holder']['member_type']  = '2';
                        	   
                                if($this->Holder->Save($this->data['Holder'])){
                                    ##sending registration mail
                                    $retmsg="";
                                    $tomailid = $this->data['Holder']['email'];
                                    $toname = $this->data['Holder']['firstname'];
                                    $holusername = $this->data['User']['username'];
                                    $homepagepath = "http://".HTTP_PATH.'/cckiller/index';
                                    $holreg = "REGISTRATION CONFIRMATION";
                                    $conditiontemp = "EmailTemplate.delete_status='0' AND EmailTemplate.email_template_name = '$holreg'";
                                    $templatearr = $this->EmailTemplate->find('all',array("conditions"=>$conditiontemp));
                                    $subjectreg = $templatearr[0]['EmailTemplate']['subject'];
                                    $contentreg= $templatearr[0]['EmailTemplate']['content'];
                                    /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/                              // append mail footer set by super admin -U /////////////////////////
                                        $condition = "id='1'";
                                        $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));
                                        $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            
                                        $contentreg.=$mailfooter;
                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////
                                    
                                     // Set path to inserted image 

                                     $contentreg = $this->replaceImgPathInEmailContent($contentreg); 
                            
                                    $fromemail =$templatearr[0]['EmailTemplate']['sender'];
                                    $ccemail =$templatearr[0]['EmailTemplate']['send_cc_email']; 
                                    /**
                                    * OLD CODE
                                    * $findarr = array("[[TO_FIRSTNAME]]","[[PROJECT_HOMEPAGE_URL]]","[[USER_NAME]]","[[PASSWORD]]","[[PROJECT_NAME]]");
                                       $replacearr = array($toname,$homepagepath,$holusername,$orgpassword,$projectname);

                                    ## replace content dynamically for path to image

                                    $message = str_replace($findarr, $replacearr, $contentreg);    
                                    * 
                                    * @var mixed
                                    */
                                    
                                     /**
                                      * New Email Temp replacement code for data Elements 
                                      */
                                    //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    
                                    $dataEleValuesArray = $this->EmailTemplates->initEmailTemplDataElemntsArray($tomailid);
									
									//STEP : SET VALUES TO REQUIRED DATA ELEMENTS
                                        $dataEleValuesArray[DATA_ELEMENT_USER_NAME]= $holusername;
                                        $dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= $orgpassword;
                                        $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);
                            
                                    //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 
                                    $subjectreg=$this->EmailTemplates->insertDataElementValuesToContent($subjectreg);
                                    $message=$this->EmailTemplates->insertDataElementValuesToContent($contentreg);
 
                                    if($this->Sendemail->sendMailContentWithCC($tomailid,$fromemail,$subjectreg,$message, $fromemail,$templatearr[0]['EmailTemplate']['send_cc_email_to'])){ 
                                           $retmsg ="Also mail has been sent to Holder name $toname";
                                    }    
                                     
                                  /*  if($ccemail==1)
                                    {
                                        $to_cc_email=$fromemail;
                                        
                                        $this->Sendemail->sendMailContent($to_cc_email,$fromemail,$subjectreg,$message, $fromemail);
                                    }    */

                                   $this->Session->setFlash("Registration Successfully. $retmsg",'default', array('class' => 'successmsg'));


                                    if(isset($this->data['Action']['redirectpage'])){
                                        $sessdata=$this->Session->read('newsortingby');										
                                        $this->redirect(array('controller'=>'admins','action'=>'memberlist'));
                                    }else{
                                        $this->redirect(array('controller'=>'admins','action'=>'addholder'));
                                    }
                                }else{
                                    $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));
                                }    
                            }else{
                                $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));            }
							}
                    }else{

                        $this->Session->setFlash('Email id with same name already exists.','default',array('class' => 'msgTXt')); 
                    }

                }

            }


            ##country state default selection

            $this->set("selectedcountry","");

            $this->set("selectedstate","");

            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();

            ##check default dropdowns

            if($this->data['Holder']['country']){

                $conid = $this->data['Holder']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if($this->data['Holder']['state']){

                    $statid = $this->data['Holder']['state'];

                    $this->set("selectedstate",$statid);

                }

            }

            ##end country state default selection


        }

######Sangeeta added this function ##########

 function addholder($fromwhere=null){
            if($fromwhere){
                $this->set("redirectcancel","nonholderslist");
            }else{

                $this->set("redirectcancel","holderslist");
            }
			
            ##check user session live or not

            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
			
			/*
				@Auther			Suman Singh
				@Type			Modified 
				@Date			April 5, 2012
				@Link		
				@Prams	
				@Return
				@Description	
			*/

			//var_dump($fromwhere);
			if($fromwhere == 'non')
			$titlTxtHeading = 'Non Holder Registration';
			else
			$titlTxtHeading = 'Holder Registration';
			$this->set('titlTxtHeading',$titlTxtHeading);

            App::import("Model", "User");
            $this->User =   & new User();

            App::import("Model", "Holder");
            $this->Holder =   & new Holder();    

            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    

            //for active menu display

            $this->set('page_url',"coinsetlist");
            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '5'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    

            ##check empty data

            if(!empty($this->data)) {
				//echo '<pre>';print_r($this->data);die;
				$this->User->set($this->data);
                $usererrormsg = $this->User->invalidFields();
                $uniqueHolder = $this->Holder->isUniqueScreenName($this->data['Holder']['screenname'], $project_id);
                $this->Holder->set($this->data);
                $holdererrormsg = $this->Holder->invalidFields();
                if ($uniqueHolder == false) {
                    $holdererrormsg['screenname'] = 'Screen name already exists. Please provide another screen name.';
                    $this->Holder->validationErrors['screenname'] = 'Screen name already exists. Please provide another screen name.';
                }
                //print_r($this->Holder->validationErrors);die;

                ##checking server validation
                if(!$usererrormsg && !$holdererrormsg){                              
                    $orgpassword="";
                    ##putting mandatory data
                    $this->data['User']['username'] = $this->data['Holder']['email'];
                    $this->data['User']['project_id'] = $projectid;
                    $orgpassword = $this->data['User']['password'];
                    $this->data['User']['password'] = md5($this->data['User']['password']);
                    $this->data['User']['usertype'] = 'holder';
                    $checkret = $this->checkuniqueuserid($this->data['User']['username'], $projectid);
                    if($checkret){
                        $condition = "email = '".$this->data['Holder']['email']."' and  project_id='".$project_id."' and delete_status='0'";
                        $usersession = $this->Holder->find('first', array('conditions' => $condition));
                        if(is_array($usersession) && !empty($usersession)) {
                            $this->Session->setFlash('Email id with same name already exists.','default',array('class' => 'msgTXt'));    

                        }else{  
						
                            ##insert login details for spacific holder
                            $data = $this->data['User'];
                            if( $data['project_id'] <= 0 ){
                                $data['project_id'] = 1;
                            }
                            if($this->User->Save($data)){
                                $lastuserid = $this->User->getLastInsertId();
                                $this->data['Holder']['project_id'] = $projectid;
                                $this->data['Holder']['user_id'] = $lastuserid;
								if(!empty($this->data['Holder']['birthday'])){
	                                $dateFormat = explode('-',$this->data['Holder']['birthday']);
		                            $birthDate = $dateFormat['2'].'-'.$dateFormat['0'].'-'.$dateFormat['1'];
			                        $this->data['Holder']['birthday'] = $birthDate;                                
								}
								

                                   // Set default all subscription types check on for user  - Ref. 2-9-12 Critical Review Doc -Item # 232
                                $subscriptiontypes_checks=$this->getDefaultSubscriptionTypesChecks();
                                $this->data['Holder']['subscription_type_id']= $subscriptiontypes_checks;

                                // SET "NON HOLDER" as a MEMBER TYPE TO MEMBER 
                                 App::import("Model", "MemberType");  
                                $this->MemberType =  & new MemberType();
                                $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_NON_HOLDER, $projectid);
                                if($member_type){
                                       $this->data['Holder']['member_type'] = $member_type['MemberType']['id']; 
                                }    
								//Get latitude and longititude from zipcode wise
								
								if(isset($this->data['Holder']['zipcode'])){
									$zip = $this->data['Holder']['zipcode'];
									$address = $this->data['Holder']['address1'];
									$countryID = $this->data['Holder']['country'];
									$countryName = $this->getcountryname($countryID);									
									$stateID = $this->data['Holder']['state'];
									$stateName = $this->getstatename($stateID);
									$city = $this->data['Holder']['city'];
									$arrayaddress = array($address, $countryName, $stateName, $city, $zip);
									$addressStr = str_replace(' ' ,'+',implode('+',$arrayaddress));
                    									
                    		        $LatiLongi = file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?address='.$addressStr.'&sensor=false');		
                    			  		$jsondata = json_decode($LatiLongi,true);		
                    					$this->data['Holder']['latitude'] = $jsondata['results'][0]['geometry']['location']['lat'];
                    					$this->data['Holder']['lognitude'] = $jsondata['results'][0]['geometry']['location']['lng'];
                    			}
								$data_holder = $this->data['Holder'];
                                if( $data_holder['project_id'] <= 0 ){
                                    $data_holder['project_id'] = 1;
                                }                         
                                if($this->Holder->Save($data_holder)){
                                    ##sending registration mail
                                    $retmsg="";
                                    $tomailid = $this->data['Holder']['email'];
                                    $toname = $this->data['Holder']['firstname'];
                                    $holusername = $this->data['User']['username'];
                                    //$toname = $this->data['Holder']['lastnameshow'];
                                    ##project related information
                                    $projectarr = $this->projectdetailbyid($projectid);
                                    $projectname = $projectarr[0]['Project']['project_name'];
                                    //$sponsor_name = $projectarr[0]['Sponsor']['sponsor_name'];
                                   $homepagepath = "http://".HTTP_PATH.'/'.$projectarr[0]['Project']['project_name'];
                                   $holreg = "REGISTRATION CONFIRMATION";
                                    $conditiontemp = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND EmailTemplate.email_template_name = '$holreg'";
                                    $templatearr = $this->EmailTemplate->find('all',array("conditions"=>$conditiontemp));
                                    $subjectreg = $templatearr[0]['EmailTemplate']['subject'];
                                    $contentreg= $templatearr[0]['EmailTemplate']['content'];
                                    /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/     
                                    ///////////////////////////////// append mail footer set by super admin -U /////////////////////////
                                        $condition = "id='1'";
                                        $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));
                                        $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            
                                        $contentreg.=$mailfooter;
                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////
                                    
                                     // Set path to inserted image 
                                     $contentreg = $this->replaceImgPathInEmailContent($contentreg); 
                            
                                    $fromemail =$templatearr[0]['EmailTemplate']['sender'];
                                    $ccemail =$templatearr[0]['EmailTemplate']['send_cc_email']; 
                                    /**
                                    * OLD CODE
                                    * $findarr = array("[[TO_FIRSTNAME]]","[[PROJECT_HOMEPAGE_URL]]","[[USER_NAME]]","[[PASSWORD]]","[[PROJECT_NAME]]");
                                       $replacearr = array($toname,$homepagepath,$holusername,$orgpassword,$projectname);

                                    ## replace content dynamically for path to image

                                    $message = str_replace($findarr, $replacearr, $contentreg);    
                                    * 
                                    * @var mixed
                                    */
                                    
                                     /**
                                      * New Email Temp replacement code for data Elements 
                                      */
                                    //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    
                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectarr, $tomailid);
                                    //STEP : SET VALUES TO REQUIRED DATA ELEMENTS
                                        $dataEleValuesArray[DATA_ELEMENT_USER_NAME]= $holusername;
                                        $dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= $orgpassword;
                                        $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);
                            
                                    //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 
                                    $subjectreg=$this->EmailTemplates->insertDataElementValuesToContent($subjectreg);
                                    $message=$this->EmailTemplates->insertDataElementValuesToContent($contentreg);
 
                                    if($this->Sendemail->sendMailContentWithCC($tomailid,$fromemail,$subjectreg,$message, $fromemail,  $templatearr[0]['EmailTemplate']['send_cc_email_to'])){ 
                                           $retmsg ="Also mail has been sent to Holder name $toname";
                                    }    

                                     
                                  /*  if($ccemail==1)
                                    {
                                        $to_cc_email=$fromemail;
                                        
                                        $this->Sendemail->sendMailContent($to_cc_email,$fromemail,$subjectreg,$message, $fromemail);
                                    }    */

                                   $this->Session->setFlash("Registration Successfully. $retmsg",'default', array('class' => 'successmsg'));


                                    if(isset($this->data['Action']['redirectpage'])){
                                        $sessdata=$this->Session->read('newsortingby');										
                                        $this->redirect(array('controller'=>'admins','action'=>'memberlist'));
                                    }else{
                                        $this->redirect(array('controller'=>'admins','action'=>'addholder'));
                                    }
                                }else{
                                    $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));
                                }    
                            }else{

                                $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));            }
							}
                    }else{

                        $this->Session->setFlash('Email id with same name already exists.','default',array('class' => 'msgTXt')); 
                    }

                }

            }


            ##country state default selection

            $this->set("selectedcountry","");

            $this->set("selectedstate","");

            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();

            ##check default dropdowns

            if($this->data['Holder']['country']){

                $conid = $this->data['Holder']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if($this->data['Holder']['state']){

                    $statid = $this->data['Holder']['state'];

                    $this->set("selectedstate",$statid);

                }

            }

            ##end country state default selection


        }

                    /*
        * Function name   : editholder()
        * Description : This function used to edit holder information
        * Created On      : 01-03-11 (09:08pm)
        *
        */

        function editholder($holderid){
            ##check user session live or not


            $this->session_check_admin();
           $this->set("recordid",$holderid);
            //for active menu display
            $this->set('page_url',"editholder");
			App::import("Model", "User");
            $this->User =   & new User();

            App::import("Model", "Holder");
            $this->Holder =   & new Holder();  

            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate(); 
			  
			App::import("Model", "Coinset");
            $this->Coinset =   & new Coinset(); 
			
			App::import("Model", "CoinsHolder");
			$this->CoinsHolder =   & new CoinsHolder();                
            $this->set("hlpdata",$this->getHelpContent(20));
            if(!empty($this->data)) {    
                $uniqueHolder = $this->Holder->isUniqueScreenName($this->data['Holder']['screenname'], $holderid);

                $this->Holder->set($this->data);

                $holdererrormsg = $this->Holder->invalidFields();
                if ($uniqueHolder == false) {
                    $holdererrormsg['screenname'] = 'Screen name already exists. Please provide another screen name.';
                }

                ##checking server validation
                if(!$holdererrormsg){

                    $errormsg1='';

                    if($this->data['Holder']['id'] !=''){
                    	
                        if($this->data['User']['password']!='' && $this->data['User']['id'] !=''){
                        								
                        	$holder_id =$this->data['User']['id'];
                              //$this->data['User']['password'] = md5($this->data['User']['password']);
                            
                            if($this->User->Save($this->data['User'])){
                              //$errormsg1 = "and Password";
                            }
                            
							if(isset($this->data['Coins']['id'])){
								$coinsdata = array();
								$this->CoinsHolder->deleteAll( array('CoinsHolder.holder_id'=>$holder_id));
								$arrCnt = 0;
								foreach($this->data['Coins']['id'] as $key=>$val ){
									$coinsdata[$arrCnt]['CoinsHolder']['coinset_id'] = $val;
									$coinsdata[$arrCnt]['CoinsHolder']['holder_id'] = $holderid;
									$conditions = 'id="'.$val.'"';
									$serialData = $this->Coinset->find('all',array('condtions'=>$conditions));								
									$coinsdata[$arrCnt]['CoinsHolder']['serialnum'] = $serialData[$arrCnt]['Coinset']['startserialnum'];
									$arrCnt++;
								}						
								$flag = $this->CoinsHolder->saveAll($coinsdata);
							}
                        }
                        
                        $dateFormat = explode('-',$this->data['Holder']['birthday']);
                        $birthDate = $dateFormat[2].'-'.$dateFormat[0].'-'.$dateFormat[1];
                        $this->data['Holder']['birthday'] = $birthDate;
                        if(isset($this->data['Holder']['subscription_type_id'])){
                            //echo "<pre>"; print_r($this->data['Holder']['subscription_type_id']);  echo "</pre>";
                            $subscription_types=implode(",",$this->data['Holder']['subscription_type_id']);
                            $this->data['Holder']['subscription_type_id']=$subscription_types;
                        }else{
                            $this->data['Holder']['subscription_type_id']="";
                        }
                     
                        if($this->Holder->Save($this->data['Holder'])){
                             //STEP : Validate avtar image and upload          
							  $errorString=''; 
                            if($_FILES["avatar"]["tmp_name"]!="")
                            {
                                if ((($_FILES["avatar"]["type"] == "image/gif") || ($_FILES["avatar"]["type"] == "image/jpeg") || ($_FILES["avatar"]["type"] == "image/png") || ($_FILES["avatar"]["type"] == "image/jpg") || ($_FILES["avatar"]["type"] == "image/pjpeg")) && ($_FILES["avatar"]["size"] < 2097152) )
                                {
                                    $ext=explode("/",$_FILES["avatar"]["type"]);
                                    if ($_FILES["avatar"]["error"] > 0)
                                    {
                                        $errorString .="Error in uploading avatar image file.Try again.";
                                    }
                                    else
                                    {   
										$user_avatar_folder="img/avatar/member/";
										 //$filePath =  $user_avatar_folder. DS . $project_id . DS;
										 $filePath =  $user_avatar_folder;
										 
                                        // $filePath =  $user_avatar_folder. DS . $project_id . DS;
                                         $this->File->setDestPath($filePath);
                                         $ext = explode(".",$_FILES["avatar"]["name"]);
                                         $ext=$ext[1];
                                         $tmp1 = $_FILES["avatar"]['tmp_name'];
                                         $width = 100;
                                         $height = 100;
                                         // Get new dimensions
                                         list($width_orig, $height_orig) = getimagesize($tmp1);
                                         $ratio_orig = $width_orig/$height_orig;

                                        if ($width/$height > $ratio_orig) {
                                            $width = $height*$ratio_orig;
                                        } else {
                                            $height = $width/$ratio_orig;
                                        }                                  
                                      
                                        $filename=$userid.".".$ext;
                                        if (file_exists($filePath))
                                        {
                                           chmod($filePath,0777);
                                           $fileNamesidea = $this->File->uploadlogo($filename,$tmp1,true,$width."x".$height);  
                                         //   move_uploaded_file($_FILES["avatar"]["tmp_name"],$up_dir.$filename);
                                        }
                                        else
                                        {
                                            mkdir($filePath, 0777);
                                            $fileNamesidea = $this->File->uploadlogo($filename,$tmp1,true,$width."x".$height);  
                                         //   move_uploaded_file($_FILES["avatar"]["tmp_name"],$up_dir.$filename);

                                        }  
                                        $avatar_url=$user_avatar_folder.$project_id."/".$fileNamesidea;
                                        $this->Holder->id = $holderid;
                                        $this->data = $this->Holder->read();
                                        $userid = $this->data['Holder']['user_id'];
                                        if($userid){
                                            $user_arr['avatar_url']=$avatar_url; //upload image url 
                                            $user_arr['id']=$userid;
                                            $this->User->save($user_arr);
                                            $errorString=""; 
                                        }else{
                                             $errorString .="Error in uploading avatar image file.Try again."; 
                                        }
                                       
                                    }
                                   
                                }
                                else
                                {
                                    $errorString .="But Upload avatar images with jpg,jpeg,gif,png extensions and file size should be less than 2 MB";
                                    $avatar_url="";
                                }           
                            }

                            $this->Session->setFlash("Holder Information $errormsg1 updated successfully.$errorString",'default', array('class' => 'successmsg'));



                            if(isset($this->data['Action']['redirectpage'])){

                                $sessdata=$this->Session->read('newsortingby');
								
                                $this->redirect(array('controller'=>'admins','action'=>'memberlist'));

                            }else{

                                $this->redirect(array('controller'=>'admins','action'=>'editholder',$holderid));

                            }

                        }else{

                            $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                        }        

                    }else{

                        $this->Session->setFlash('Invalid attempt to update holder information.','default',array('class' => 'msgTXt'));

                        $this->redirect(array('controller'=>'admin','action'=>'holderslist'));
                    }

                }else{    
                    $errmsg = (isset($holdererrormsg['screenname']) && count($holdererrormsg) == 1) ?$holdererrormsg['screenname'] : "Please Fills compulsory fields";
                    $this->Session->setFlash($errmsg,'default',array('class' => 'msgTXt'));
                }
            }
			$MemberTypeList = $this->getMemberTypes();
			$this->set('MemberTypeList',$MemberTypeList);
			$this->getCoinsDrp('1');
			$this->getMemberLebel();
			$this->Holder->bindModel(array('hasMany'=>array(
					'CoinsHolder'=>array(
							'foreignKey'=>'holder_id'
					))));
            $this->Holder->id = $holderid;
            $this->data = $this->Holder->read();
			$coinsdata =  $this->data['CoinsHolder'];
			for($j=0; $j< count($coinsdata); $j++){
				$coinsids[$j]=$coinsdata[$j]['coinset_id'];
			}
			if(!empty($coinsids)){
			$this->set("selectedcoins",$coinsids);
		}
		//	$this->pl($this->data);

            $userid = $this->data['Holder']['user_id'];
            $condition = "id = '".$userid."'";
            $udata = $this->User->find('first',array("conditions"=>$condition));
			$this->set('avatarArray',$udata);  
            $username = $udata['User']['username'];
            $this->set("username",$username);
            $userid = $udata['User']['id'];
			$userpwd = $udata['User']['password'];
			$this->set("userpwd",$userpwd);
            $this->set("userid",$userid);
			         
            
            // STEP SUBSCRIPTION TYPE ARRAY
            $userSubscriptionTypes= $this->getSubscriptionTypesArray();
            $this->set("userSubscriptionTypes",$userSubscriptionTypes);
            
            ##country state default selection

            $this->set("selectedcountry","");

            $this->set("selectedstate","");

            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();
                 
             // STEP : GET Memebr TYpe DROP DOWN LIST 
           
            if(isset($this->data['Holder']['member_type'])){
				$sel_member_type = $this->data['Holder']['member_type'];
				$this->set('sel_member_type',$sel_member_type);
			}
			
             // STEP : GET Donation Level DROP DOWN LIST 
            //$projectdonationlevel=$this->getDonationLevelsListByProject($projectid);
//			echo '<pre>**************';print_r($projectdonationlevel);die;

            //$this->set("projectdonationlevel",$projectdonationlevel);           


            if($this->data['Holder']['country']){

                $conid = $this->data['Holder']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if($this->data['Holder']['state']){

                    $statid = $this->data['Holder']['state'];

                    $this->set("selectedstate",$statid);

                }

            }

            ##end country state default selection


        }


        /*
        * Function name   : editnonholder()
        * Description : This function used to edit holder information
        * Created On      : 01-03-11 (09:08pm)
        *
        */

           function editnonholder($holderid){

            ##check user session live or not

            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");    
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            $this->set("recordid",$holderid);



            //for active menu display

            $this->set('page_url',"editnonholder");

            /**
            * Add member is holder or non holder at session for its other tabs 
            */
            $this->Session->delete('projecteditmember');
            $this->Session->write("projecteditmember","editnonholder");  
            $projecteditmember = $this->Session->read("projecteditmember");        
            $this->set('projecteditmember',$projecteditmember);
            
            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '21'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      



            App::import("Model", "User");
            $this->User =   & new User();

            App::import("Model", "Holder");
            $this->Holder =   & new Holder();    

            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    


            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    			
			$this->getPlayerNonProfit($projectid);
			//$this->getPlayerCoins($projectid);
            ##check empty data
            if(!empty($this->data)) {
				//$this->pl($this->data);
                $uniqueHolder = $this->Holder->isUniqueScreenName($this->data['Holder']['screenname'], $project_id, $holderid);
                $this->Holder->set($this->data);
                $holdererrormsg = $this->Holder->invalidFields();
                if ($uniqueHolder == false) {
                    $holdererrormsg['screenname'] = 'Screen name already exists. Please provide another screen name.';
                }
                ##checking server validation
                if(!$holdererrormsg){
				
                    $errormsg1='';
                    if($this->data['Holder']['id'] !=''){
                        if($this->data['User']['password']!='' && $this->data['User']['id'] !=''){

                            $this->data['User']['password'] = md5($this->data['User']['password']);
                            if($this->User->Save($this->data['User'])){
                                $errormsg1 = "and Password";
                            }
                        }
                        
                          if(!empty($this->data['Holder']['subscription_type_id'])){
                            //echo "<pre>"; print_r($this->data['Holder']['subscription_type_id']);  echo "</pre>";
                            $subscription_types=implode(",",$this->data['Holder']['subscription_type_id']);
                            $this->data['Holder']['subscription_type_id']=$subscription_types;
                        }else{
                            $this->data['Holder']['subscription_type_id']="";
                        }
                        
                        $dateFormat = explode('-',$this->data['Holder']['birthday']);
                        $birthDate = $dateFormat[2].'-'.$dateFormat[0].'-'.$dateFormat[1];
                        $this->data['Holder']['birthday'] = $birthDate;
						if(isset($this->data['Holder']['zipcode'])){
									$zip = $this->data['Holder']['zipcode'];
									$address = $this->data['Holder']['address1'];
									$countryID = $this->data['Holder']['country'];
									$countryName = $this->getcountryname($countryID);									
									$stateID = $this->data['Holder']['state'];
									$stateName = $this->getstatename($stateID);
									$city = $this->data['Holder']['city'];
									 $arrayaddress = array($address, $countryName, $stateName, $city, $zip);
									 $addressStr = str_replace(' ' ,'+',implode('+',$arrayaddress));
									
		$LatiLongi = file_get_contents('http://maps.googleapis.com/maps/api/geocode/json?address='.$addressStr.'&sensor=false');		
			  		$jsondata = json_decode($LatiLongi,true);		
					$this->data['Holder']['latitude'] = $jsondata['results'][0]['geometry']['location']['lat'];
					$this->data['Holder']['lognitude'] = $jsondata['results'][0]['geometry']['location']['lng'];
			}

                        if($this->Holder->Save($this->data['Holder'])){
						//insert or update data in member_nonprofits table						
						$holder_id = $this->Holder->getLastInsertID();
						if($holder_id ==''){
							$holder_id = $this->data['Holder']['id'];
						}
						//$this->pl($this->data);
						if($holder_id){
							$this->MemberNonProfit->deleteAll( array('MemberNonProfit.member_id'=>$holder_id));
							foreach($this->data['NonProfit']['id'] as $key=>$val ){
								
								$nonprofitdata[] = array('member_id' =>$holder_id,'non_profit_id' => $val);
							}
							$flag = $this->MemberNonProfit->saveAll($nonprofitdata);
						}
						
						if(!empty($this->data['Coins']['id'])){
							$this->MemberCoin->deleteAll( array('MemberCoin.member_id'=>$holder_id));
							foreach($this->data['Coins']['id'] as $key=>$val ){
								$coinsdata[] = array('member_id' =>$holder_id,'coins_id' => $val);
							}
							
							$flag = $this->MemberCoin->saveAll($coinsdata);
						}
							$errorString="";
                             //STEP : Validate avtar image and upload             
                            if($_FILES["avatar"]["tmp_name"]!="")
                            {
                                if ((($_FILES["avatar"]["type"] == "image/gif") || ($_FILES["avatar"]["type"] == "image/jpeg") || ($_FILES["avatar"]["type"] == "image/png") || ($_FILES["avatar"]["type"] == "image/jpg") || ($_FILES["avatar"]["type"] == "image/pjpeg")) && ($_FILES["avatar"]["size"] < 2097152) )
                                {
                                    $ext=explode("/",$_FILES["avatar"]["type"]);
                                    if ($_FILES["avatar"]["error"] > 0)
                                    {
                                        $errorString .="Error in uploading avatar image file.Try again.";
                                    }
                                    else
                                    {   
                                         $user_avatar_folder="img/avatar/";
                                         $filePath =  $user_avatar_folder. DS . $project_id . DS;
                                         $this->File->setDestPath($filePath);
                                        // $file_name1 = $this->File->setFileName($_FILES["avatar"]["name"]); 
                                         $ext = explode(".",$_FILES["avatar"]["name"]);
                                          $ext=$ext[1];
                                         $tmp1 = $_FILES["avatar"]['tmp_name'];
                                         $width = 100;
                                         $height = 100;
                                         // Get new dimensions
                                         list($width_orig, $height_orig) = getimagesize($tmp1);
                                         $ratio_orig = $width_orig/$height_orig;

                                        if ($width/$height > $ratio_orig) {
                                            $width = $height*$ratio_orig;
                                        } else {
                                            $height = $width/$ratio_orig;
                                        }

                                        
                                      /*  $ext=explode(".",$_FILES["avatar"]["name"]);
                                        $ext=$ext[1];
                                        $up_dir="img/avatar/".$project_id."/"; */ 
                                        $filename=$userid.".".$ext;
                                        if (file_exists($filePath))
                                        {
                                           chmod($filePath,0777);
                                           $fileNamesidea = $this->File->uploadlogo($filename,$tmp1,true,$width."x".$height);  
                                         //   move_uploaded_file($_FILES["avatar"]["tmp_name"],$up_dir.$filename);
                                        }
                                        else
                                        {
                                            mkdir($filePath, 0777);
                                            $fileNamesidea = $this->File->uploadlogo($filename,$tmp1,true,$width."x".$height);  
                                         //   move_uploaded_file($_FILES["avatar"]["tmp_name"],$up_dir.$filename);

                                        }  
                                        $avatar_url=$user_avatar_folder.$project_id."/".$fileNamesidea;
                                        $this->Holder->id = $holderid;
                                        $this->data = $this->Holder->read();
                                        $userid = $this->data['Holder']['user_id'];
                                        if($userid){
                                            $user_arr['avatar_url']=$avatar_url; //upload image url 
                                            $user_arr['id']=$userid;
                                            $this->User->save($user_arr);
                                            $errorString=""; 
                                        }else{
                                             $errorString.="Error in uploading avatar image file.Try again."; 
                                        }                                       
                                    }                                   
                                }
                                else
                                {
                                    $errorString.="But Upload avatar images with jpg,jpeg,gif,png extensions and file size should be less than 2 MB";
                                    $avatar_url="";
                                }           
                            }

                            $this->Session->setFlash("Holder Information $errormsg1 updated successfully.$errorString",'default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect(array('controller'=>'admins','action'=>'nonholderslist'));

                            }else{

                                $this->redirect(array('controller'=>'admins','action'=>'editnonholder',$holderid));

                            }

                        }else{

                            $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                             $this->redirect(array('controller'=>'admins','action'=>'nonholderslist'));


                        }        

                    }else{

                        $this->Session->setFlash('Invalid attempt to update holder information.','default',array('class' => 'msgTXt'));

                       $this->redirect(array('controller'=>'admins','action'=>'nonholderslist'));

                    }
                }else{
                    $errmsg = (isset($holdererrormsg['screenname']) && count($holdererrormsg) == 1) ?$holdererrormsg['screenname'] : "Please Fills compulsory fields";
                    $this->Session->setFlash($errmsg,'default',array('class' => 'msgTXt'));
                }
            }
			
			$this->Holder->bindModel(array('hasMany'=>array(
					'MemberNonProfit'=>array(
							'foreignKey'=>'member_id'
					))));
			
			$this->Holder->bindModel(array('hasMany'=>array(
					'MemberCoin'=>array(
							'foreignKey'=>'member_id'
					))));		
            $this->Holder->id = $holderid;

            $this->data = $this->Holder->read();
			
			//$this->pl($this->data);
            $userid = $this->data['Holder']['user_id'];
            $condition = "id = '".$userid."'";
            $udata = $this->User->find('first',array("conditions"=>$condition));
			$this->set('avatarArray',$udata);
            $username = $udata['User']['username'];
            $this->set("username",$username);
            $userid = $udata['User']['id'];
			$userpwd = $udata['User']['password'];
            $this->set("userpwd",$userpwd);
			$this->set("userid",$userid);
           // STEP SUBSCRIPTION TYPE ARRAY
            $userSubscriptionTypes= $this->getSubscriptionTypesArray();
            $this->set("userSubscriptionTypes",$userSubscriptionTypes);
            ##country state default selection
            $this->set("selectedcountry","");
            $this->set("selectedstate","");
            ##country drop down
            $this->countrydroupdown();
            $this->statedroupdown();
                // STEP : GET Memebr TYpe DROP DOWN LIST 
            //$projectmembertypes=$this->getMemberTypesListByProject($projectid);
            $this->set("projectmembertypes",$projectmembertypes);
             App::import("Model", "MemberType");  
            $this->MemberType =  & new MemberType();
            $membertypeforholder=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_NON_HOLDER, $projectid);
            $sel_member_type= $this->MemberType->find('list', array('fields' => array('id', 'member_type')));
			//$membertypeforholder['MemberType']['id'];
			//echo "<pre>";
			//print_r($sel_member_type);
			$this->set("sel_member_type",$sel_member_type);
			 // STEP : GET Memebr TYpe DROP DOWN LIST 
           
            
             // STEP : GET Donation Level DROP DOWN LIST 
            $projectdonationlevel=$this->getDonationLevelsListByProject($projectid);
            $this->set("projectdonationlevel",$projectdonationlevel);
			$sel_donation_level='';
			$this->set('sel_donation_level',$sel_donation_level);
            ##check default dropdowns
			
			$membernonprofit =  $this->data['MemberNonProfit'];
			$membernonprofitids = array();
			for($j=0; $j< count($membernonprofit); $j++){
				$membernonprofitids[$j]=$membernonprofit[$j]['non_profit_id'];
			}
			
			$membercoins =  $this->data['MemberCoin'];
			$membercoinids = array();
			for($j=0; $j< count($membercoins); $j++){
				$membercoinids[$j]=$membercoins[$j]['coins_id'];
			}
			//$this->pl($membercoinids);
			$this->set("membernonprofitids",$membernonprofitids);
			$this->set("membercoinids",$membercoinids);


            if($this->data['Holder']['country']){

                $conid = $this->data['Holder']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if($this->data['Holder']['state']){

                    $statid = $this->data['Holder']['state'];

                    $this->set("selectedstate",$statid);

                }

            }

            ##end country state default selection


        }


        /*
        * Function name   : membercomments()
        * Description : This function is used to show given holder comments list
        * Created On      : 8th Feb 2012
        *
        */

        function membercomments($holderid){
            ##check user session live or not
            $this->session_check_admin();
            
            //for active menu display
            $this->set('page_url',"membercomments");
            
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            $this->set("recordid",$holderid);

            /* Project Details */
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    
            
             /* Get Member profile edit */
             $projecteditmember = $this->Session->read("projecteditmember");        
             $this->set('projecteditmember',$projecteditmember);
             
             # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      
            
              /**
           * Fetch Holder Comments Listing 
           */
            App::import("Model", "Comment");
            $this->Comment =  & new Comment();
             if(!empty($this->data))
            {      
                $searchkey=$this->data['Admins']['searchkey'];
            }else{
                $searchkey="";
            }
            $condHolderComments=''; //$this->Comment->getCommentsByHolderCondition($holderid, $project_id,$searchkey);
            $field='';
            $this->Pagination->sortByClass    = 'Comments'; ##initaite pagination 
          /*  if($_GET['sortBy']=="comment_type_name" || $_GET['sortBy']=="is_additional_allowed"){
               $this->Pagination->sortByClass    = 'CommentType';  
            }   */
            $this->Pagination->total= count($this->Comment->getCommentAndRepliesByHolder($holderid,$project_id, $searchkey));    
            list($order,$limit,$page) = $this->Pagination->init($condHolderComments,$field);            
            $holderCommentList = $this->Comment->getCommentAndRepliesByHolder($holderid, $project_id, $searchkey,$order, $limit, $page);

            ##set Coinset data in variable            
            $this->set("holdercommentlist",$holderCommentList);
      



        }
        
        /*
        * Function name   : memberemails()
        * Description : This function is used to show given holder comments list
        * Created On      : 8th Feb 2012
        *
        */

        function memberemails($holderid){
            ##check user session live or not
            $this->session_check_admin();
			$this->set("recordid",$holderid);
            
            //for active menu display
            $this->set('page_url',"memberemails");           
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    
            }           
            $this->set("recordid",$holderid);
            $this->set("hlpdata",$this->getHelpContent(20));
       
        
           /**
           * Fetch Holder Email Listing 
           */
            App::import("Model", "CommunicationTaskExecutionReport");
            $this->CommunicationTaskExecutionReport =  & new CommunicationTaskExecutionReport();
             if(!empty($this->data))
            {      
                 $searchkey=$this->data['Admins']['searchkey'];
            }else{
                $searchkey="";
            }
            $condHolderEmails  = $this->CommunicationTaskExecutionReport->getEmailsListByHolderCondition($holderid, "", $searchkey);			
           $field='';
            $this->Pagination->sortByClass    = 'CommunicationTaskExecutionReport'; ##initaite pagination 
            $this->Pagination->total= count($this->CommunicationTaskExecutionReport->getEmailsListByHolder($condHolderEmails));    
            list($order,$limit,$page) = $this->Pagination->init($condHolderEmails,$field);            
            $holderEmailList = $this->CommunicationTaskExecutionReport->getEmailsListByHolder($condHolderEmails,$order, $limit, $page);
			//$this->pl($holderEmailList);

            ##set Coinset data in variable           
            $this->set("holderemaillist",$holderEmailList);  

         }
         
                 /*
        * Function name   : membermessages()
        * Description : This function is used to show given holder comments list
        * Created On      : 8th Feb 2012
        *
        */

        function membermessages($holderid){
            ##check user session live or not
            $this->session_check_admin();
            
            //for active menu display
            $this->set('page_url',"membermessages");
            
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            $this->set("recordid",$holderid);

            /* Project Details */
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    
            
             /* Get Member profile edit */
             $projecteditmember = $this->Session->read("projecteditmember");        
             $this->set('projecteditmember',$projecteditmember);
             
             # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition 
            
 
           /**
           * Fetch Holder Messages Listing 
           */
            App::import("Model", "MessageHolder");
            $this->MessageHolder =  & new MessageHolder();
             if(!empty($this->data))
            {      
                $searchkey=$this->data['Admins']['searchkey'];
            }else{
                $searchkey="";
            }
            $condHolderMessages=$this->MessageHolder->getMessagesByHolderCondition($holderid, $project_id,$searchkey);
            $field='';
            $this->Pagination->sortByClass    = 'Message'; ##initaite pagination 
            $this->Pagination->total= count($this->MessageHolder->getMessagesByHolder($condHolderMessages));    
            list($order,$limit,$page) = $this->Pagination->init($condHolderMessages,$field);            
            $holderMessageList = $this->MessageHolder->getMessagesByHolder($condHolderMessages,$order, $limit, $page);

            ##set Coinset data in variable            
            $this->set("holdermessagelist",$holderMessageList);
                

         }
         
                       /*
        * Function name   : memberevents()
        * Description : This function is used to show given holder comments list
        * Created On      : 8th Feb 2012
        *
        */

        function memberevents($holderid){
            ##check user session live or not
            $this->session_check_admin();            
            //for active menu display
            $this->set('page_url',"memberevents");
            
            $project_id = '1';
            $this->set("recordid",$holderid);           
            $projectid=$project_id;   
			$this->set("hlpdata",$this->getHelpContent(20));
            # set help condition                  
           /**
           * Fetch Holder Events  Listing 
           */
            App::import("Model", "EventInvitation");
            $this->EventInvitation =  & new EventInvitation();
             if(!empty($this->data))
            {      
                $searchkey=$this->data['Admins']['searchkey'];
            }else{
                $searchkey="";
            }
            $condHolderEvents = $this->EventInvitation->getEventsByHolderCondition($holderid, $project_id,$searchkey);
			//$this->pl($condHolderEvents);
            $field='';
            $this->Pagination->sortByClass    = 'RecurringEvent'; ##initaite pagination 
            
            $this->Pagination->total= count($this->EventInvitation->getEventsByHolder($condHolderEvents));    
            list($order,$limit,$page) = $this->Pagination->init($condHolderEvents,$field);            
            $holderEventList = $this->EventInvitation->getEventsByHolder($condHolderEvents,$order, $limit, $page);
            ##set Coinset data in variable            
            $this->set("holdereventlist",$holderEventList);
         }        
         /*
        * Function name   : memeberpoints()
        * Description : This function is used to show given holder comments list
        * Created On      : 8th Feb 2012
        *
        */

        function memberpoints($holderid){
            
			##check user session live or not
            $this->session_check_admin();
            $this->set('page_url',"memberpoints");
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    
			}
            $project_id = '1';
            $this->set("recordid",$holderid);
            $projectid=$project_id;    
			 //Get User Id
			 $UserData = $this->Holder->findById($holderid);
			$user_id = $UserData['user_id'] ;
			 $this->set("hlpdata",$this->getHelpContent(20));            
           /**
           * Fetch Holder Points and level  Listing 
           */
            App::import("Model", "PointArchiveUser");
            $this->PointArchiveUser =  & new PointArchiveUser();
             if(!empty($this->data))
            {      
                $searchkey=$this->data['Admins']['searchkey'];
            }else{
                $searchkey="";
            }
            $condHolderPoints=''; //$this->PointArchiveUser->getPointsByHolderCondition($holderid, $project_id,$searchkey);
            $field='';
            $this->Pagination->sortByClass    = 'PointArchiveUser'; ##initaite pagination 
            if(isset($_GET['sortBy'])=="point_name" || isset($_GET['sortBy'])=="is_level"){
               $this->Pagination->sortByClass    = 'MasterPoint';  
            }

            $this->Pagination->total= count($this->PointArchiveUser->getPointsByHolder($holderid, $project_id,$searchkey));    
            list($order,$limit,$page) = $this->Pagination->init($condHolderPoints,$field); 
            if(isset($_GET['sortBy'])=="point_level"){
                  $order=" point_level ".$_GET['direction'];
				  
             }             
	      $holderPointList = $this->PointArchiveUser->getPointsByHolder($holderid, $project_id,$searchkey,$order, $limit,$page);

            ##set Coinset data in variable            
            $this->set("holderpointlist",$holderPointList);   

         }        
         
                  /*
        * Function name   : memberpurchases()
        * Description : This function is used to show given holder comments list
        * Created On      : 8th Feb 2012
        *
        */

        function memberpurchases($holderid){
            ##check user session live or not
            $this->session_check_admin();
            
            //for active menu display
            $this->set('page_url',"memberpurchases");
            
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            $this->set("recordid",$holderid);

            /* Project Details */
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    
            

            /* Get Member profile edit */
             $projecteditmember = $this->Session->read("projecteditmember");        
             $this->set('projecteditmember',$projecteditmember);
             
             # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition    

            /**
           * Fetch Holder Points and level  Listing 
           */
            App::import("Model", "CoinsHolder");
            $this->CoinsHolder =  & new CoinsHolder();
             if(!empty($this->data))
            {      
                $searchkey=$this->data['Admins']['searchkey'];
            }else{
                $searchkey="";
            }
            $condCoins=''; //$this->PointArchiveUser->getPointsByHolderCondition($holderid, $project_id,$searchkey);
            $field='';
            $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination 
            if(isset($_GET['sortBy'])=="coinset_name" ){
               $this->Pagination->sortByClass    = 'Coinset';  
            } 
               $this->Pagination->total= count($this->CoinsHolder->getAllRegisteredCoinsOfProject($project_id,$holderid, $searchkey));    
            list($order,$limit,$page) = $this->Pagination->init($condCoins,$field); 
             if($order == "CoinsHolder.id ASC"){
                $order = "CoinsHolder.id DESC";
            }
            if(isset($_GET['sortBy'])=="point_level"){
                  $order=" point_level ".$_GET['direction'];
             }    
            $holderCoinstList = $this->CoinsHolder->getAllRegisteredCoinsOfProject($project_id, $holderid, $searchkey,$order, $limit, $page);

            ##set Coinset data in variable            
            $this->set("holdercoinlist",$holderCoinstList);     

         }   
         
         
         
         /*
        * Function name   : memberhistory()
        * Description : This function is used to show given holder 
        * Created On      : 8th Feb 2012
        *
        */

        function memberhistory($holderid){
	       
		    $this->session_check_admin();            
			if(isset($this->params['pass']['0'])){
				$holderId = $this->params['pass']['0'];
				$this->set("recordid",$this->params['pass']['0']);
			}	
	        $project_id = '1';
            $projectid=$project_id;    
			$this->set("hlpdata",$this->getHelpContent(20));
			App::import("Model", "CommunicationTaskHistory");
            $this->CommunicationTaskHistory =  & new CommunicationTaskHistory();
			if(isset($this->data['Admins']['searchkey'])){
			$searchkeyword = $this->data['Admins']['searchkey'];
			$condition = "CommunicationTaskHistory.delete_status = '0' and CommunicationTaskHistory.project_id='".$projectid."' AND (CommunicationTaskHistory.task_name LIKE '%".$searchkeyword."%' OR CommunicationTaskHistory.notes LIKE '%".$searchkeyword."%')";
		}else{
			$condition = "CommunicationTaskHistory.delete_status = '0' and CommunicationTaskHistory.project_id='".$projectid."'";
		}
		$condition.= " AND CommunicationTaskHistory.memberid=$holderid " ;
		$this->Pagination->sortByClass ="CommunicationTaskHistory"; 			
		$this->Pagination->total= count($this->CommunicationTaskHistory->find('all',array("conditions"=>$condition)));
		list($order,$limit,$page) = $this->Pagination->init($condition);
			
		$historyData = $this->CommunicationTaskHistory->find('all',array("conditions"=>$condition, 'page' => $page));
		//print_r($notedtlarr); exit;
		##set project type data in variable
	//$this->pl($historyData);
		$this->set("historyData",$historyData);
	
        }
        
        
        
		
		function membercoupon($holderid='0'){
	       
		    $this->session_check_admin();            
			if(isset($this->params['pass']['0'])){
				$holderId = $this->params['pass']['0'];
				$this->set("recordid",$this->params['pass']['0']);
			}	
	        $project_id = '0';
            $projectid=$project_id;    
			$this->set("hlpdata",$this->getHelpContent(20));
			App::import("Model", "CommunicationTaskHistory");
            $this->CommunicationTaskHistory =  & new CommunicationTaskHistory();
			if(isset($this->data['Admins']['searchkey'])){
			$searchkeyword = $this->data['Admins']['searchkey'];
			$condition = "CommunicationTaskHistory.delete_status = '0' and CommunicationTaskHistory.project_id='".$projectid."' AND (CommunicationTaskHistory.task_name LIKE '%".$searchkeyword."%' OR CommunicationTaskHistory.notes LIKE '%".$searchkeyword."%')";
		}else{
			$condition = "CommunicationTaskHistory.delete_status = '0' and CommunicationTaskHistory.project_id='".$projectid."'";
		}
		$condition.= " AND CommunicationTaskHistory.memberid=$holderid " ;
		$this->Pagination->sortByClass ="CommunicationTaskHistory"; 			
		$this->Pagination->total= count($this->CommunicationTaskHistory->find('all',array("conditions"=>$condition)));
		list($order,$limit,$page) = $this->Pagination->init($condition);
			
		$historyData = $this->CommunicationTaskHistory->find('all',array("conditions"=>$condition, 'page' => $page));
		//print_r($notedtlarr); exit;
		##set project type data in variable
		//$this->pl($historyData);
		$this->set("historyData",$historyData);
         }    
        
        
        //====================================End Project Section===============================================//    

        /*
        * Function name   : logout()
        * Description     : This function is used to logout admin
        * Created On      : 14-12-09 (10:10am)
        *
        */

        function logout()
        {             
            $this->Session->delete('Admin');
			 $this->Session->delete('UserLoginDetails');
            $this->Session->delete('sessionprojectid');
            $this->Session->delete('projectwebsite_name_admin');
            $this->Cookie->destroy("AdminId");
            $this->Cookie->destroy('sessionprojectid');
            $this->redirect('/admins/login');
        }

        /*******************************************************************
        * Function Name: change_password
        * Function Arguments: None
        * Function Return: (array)
        * Purpose:This function is used to change password.
        * Created By      : SDN
        * Created: 19 Feb, 2011
        ********************************************************************
        function  change_password(){

        ##check user session live or not
        $this->session_check_admin();

        $this->layout= 'new_admin_layout';            

        //for active menu display
        $this->set('page_url','forgot_password');
        $project_id = $this->Session->read("sessionprojectid");
        $project_name = $this->Session->read("projectwebsite_name_admin");
        $this->set('current_project_name',$project_name); // used in project_name element file
        $this->set("project_name",$project_name);  


        # set help condition
        App::import("Model", "HelpContent");
        $this->HelpContent =  & new HelpContent();
        $condition = "HelpContent.id = '18'";  
        $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
        $this->set("hlpdata",$hlpdata);

        # set help condition

        App::import("Model", "HelpContent");

        $this->HelpContent =  & new HelpContent();

        $condition = "HelpContent.id = '18'";  

        $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

        $this->set("hlpdata",$hlpdata);

        # set help condition   
        # set help condition





        App::import("Model", "Admin");
        $this->Admin =   & new Admin();
        //............

        $condition = "Admin.id=2";
        $userArray = $this->Admin->find('first',array('conditions' => $condition ));
        $this->set('userArray',$userArray);

        if(!empty($this->data)) {
        $errorString ='';

        if(trim($this->data['Admins']['oldpassword']) == ''){                     
        $errorString .="Please insert old password.<br/>";      
        }
        if(md5(trim($this->data['Admins']['oldpassword'])) != $userArray['Admin']['password']){                    
        $errorString .="Please insert correct old password.<br/>";      
        }

        if(trim($this->data['Admins']['password']) == ''){                        
        $errorString .="Password must have atleast 6 character.<br/>";  
        }


        if(trim($this->data['Admins']['password']) != '' || trim($this->data['Admins']['confirm_password']) != ''){
        if(trim($this->data['Admins']['password']) != trim($this->data['Admins']['confirm_password'])){
        $errorString .="Password & confirm password must be same<br/>";                         
        }else{
        if(strlen($this->data['Admins']['password']) < 3 ){
        $errorString .="Password must have atleast 6 character.";       
        }else{
        $password =$this->data['Admins']['password'];
        $this->data['Admin']['password'] = md5($password);
        }
        }       
        }else{
        $this->data['Admins']['password'] = $userArray['Admins']['password'] ;
        }

        if(trim($errorString) !=''){                                                    
        $this->Session->setFlash($errorString,'default',array('class' => 'msgTXt'));
        }else{

        $this->data['Admin']['id']=2;

        $this->Admin->save($this->data);
        $this->data['Admins']['oldpassword']="";
        $this->data['Admins']['password']="";
        $this->data['Admins']['confirm_password']="";                             
        $this->Session->setFlash("Password has been changed.",'default',array('class' => 'successmsg'));
        if(isset($this->data['Action']['redirectpage'])){
        $this->redirect('/admins/dashboard');
        }else{
        $this->redirect('/admins/change_password');
        }

        }

        }else{
        $this->data = $userArray;
        }
        }

        *********/

 function admin_changepassword()
        {
           
            
            ##check admin session live or not
            $this->session_check_admin();
            ##import admin model for processing
            App::import("Model", "Admin");
            $this->Admin =   & new Admin();
			$passwd=md5($this->data['Admin']['password']);
            $adminSess = $this->Session->read("Admin");
			$this->Admin->id = $adminSess['Admin']['id']; //$_SESSION['Admin']['id'];          
            //print_r($adminSess['Admin']['id']);
			$condition = " Admin.active_status='1' and Admin.delete_status='0' and Admin.id=".$adminSess['Admin']['id']." ";
			$selectedcompany = $this->Admin->find('all', array ('conditions' => array('id' =>$adminSess['Admin']['id'])));
			

			 foreach($selectedcompany as $adminuser)
			 { 
				$opass=md5(trim($this->data['Admin']['Opassword']));
				$oldp=$adminuser['Admin']['password'];
			 
		if($oldp===$opass)
		{
			 if(!empty($this->data)) 
            { 
			
                if($this->Admin->saveField('password',$passwd))
                {
                    $this->Session->setFlash('Password changed Successfully. Please login with new password.','default', array('class' => 'successmsg'));
                    //$this->logout();
					$this->redirect(array("controller"=>"admins" , "action"=>"logout"));
					//$this->redirect("/admins/logout/");

                }
                else
                {
                    $this->Session->setFlash('There is problem while changing password.','default');
                } 
            }
		}
		else{
				$this->Session->setFlash('Your Old Password Does Not Matched,Please Try Again.','default');
				$this->redirect(array("controller"=>"admins" , "action"=>"change_password"));
			 }	
			
			}
			
		
			
            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '65'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

        }




        function  change_password(){

            ##check user session live or not
            $this->session_check_admin();

            $this->layout= 'new_admin_layout';            

            //for active menu display
            $this->set('page_url','forgot_password');
            $project_id = $this->Session->read("sessionprojectid");
            $project_name = $this->Session->read("projectwebsite_name_admin");
            $this->set('current_project_name',$project_name); // used in project_name element file
            $this->set("project_name",$project_name);  
            $projectDetails=$this->getprojectdetails($project_id);
            $this->set('project',$projectDetails); 

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '18'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);

            if(!empty($this->data)) {
                
                App::import("Model", "User");
                $this->User =   & new User();

                $old_pass=md5(trim($this->data['Admins']['oldpassword']));
                $condition = "project_id=$project_id and password='$old_pass' and usertype='sponsor'";
                $userArray = $this->User->find('first',array('conditions' => $condition ));
                $this->set('userArray',$userArray);
				
                if($this->data['Admins']['reset_password'])             //if reset password is checked
                {
                    
                    
                    $condition = "project_id=$project_id and usertype='sponsor'";
                    $userArray = $this->User->find('first',array('conditions' => $condition ));
                    
                    $condition = "project_id=$project_id and user_id='".$userArray['User']['id']."'";
                    $sponsorArray = $this->Sponsor->find('first',array('conditions' => $condition ));
                    
                    $new_password = rand(10000, 99999);
                    $this->data['User']['id']=$userArray['User']['id'];
                    $this->data['User']['password']=md5($new_password);
                    
                     ##import EmailTemplate  model for processing
                    App::import("Model", "EmailTemplate");
                    $this->EmailTemplate =   & new EmailTemplate();
                    
                    if(!empty($projectDetails['Project']['url']))
                        $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);
                    else
                        $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];
                    
                    $condition = " EmailTemplate.email_template_name= 'RESET PASSWORD' and  EmailTemplate.is_sytem='1' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";
                    $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));
                    //print_r($mailMessage);exit;
                    if(is_array($mailMessage) && !empty($mailMessage))
                    {
                        /**
                        * OLD CODE
                        * if(!empty($projectDetails['Project']['system_name']))
                            $pt_new_name=$projectDetails['Project']['system_name'];
                        else
                            $pt_new_name=$projectDetails['Project']['project_name']; 
                          $keyStringArray = array('[[EMAIL_ADDRESS]]'=>$sponsorArray['Sponsor']['sponsor_name'],
                        '[[USER_NAME]]'=>$userArray['User']['username'],
                        '[[USER_PASSWORD]]'=>$new_password,
                        '[[PROJECT_NAME]]'=>$pt_new_name,
                        '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);  
                        *  if(!empty($keyStringArray)){
                            foreach($keyStringArray as $key=>$val){
                                $mailBody = str_replace($key,$val,$mailBody);
                            }
                        }
                        */
                        $subject  = $mailMessage['EmailTemplate']['subject'];
                        $from = $mailMessage['EmailTemplate']['sender'];      //$projectDetails['Project']['fromemail'];
                        $fromname = $mailMessage['EmailTemplate']['sender'];      //$projectDetails['Project']['fromname'];
                        $to = $sponsorArray['Sponsor']['email']; 
                        $mailBody=$mailMessage['EmailTemplate']['content'];
                        /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/  
                        ///////////////////////////////// append mail footer set by super admin /////////////////////////
                        $condition = "id='1'";
                        $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));
                        $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            
                        $mailBody.=$mailfooter;
                        ///////////////////////////////// append mail footer set by super admin /////////////////////////
                       
                         // Set path to inserted image 
                                $mailBody = $this->replaceImgPathInEmailContent($mailBody); 
                            
                         
                         /**
                          * New Email Temp replacement code for data Elements 
                          */
                        //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    
                        $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);
                        //STEP : SET VALUES TO REQUIRED DATA ELEMENTS
                            $dataEleValuesArray[DATA_ELEMENT_USER_NAME]= $userArray['User']['username'];
                            $dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= $new_password;
                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);
                
                        //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 
                        $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);
                        $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);
                                    
                        $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);
                        
                      
                    }
                    if($result)
                    {
                        $this->User->save($this->data);                    
                        $this->Session->setFlash("Password has been send to email id.",'default',array('class' => 'successmsg'));
                    }
                    else
                    {
                        $this->Session->setFlash("Error in Processing",'default',array('class' => 'msgTXt'));
                    }
                    
                    if(isset($this->data['Action']['redirectpage'])){
                        $this->redirect('/admins/change_password');
                    }else{
                        $this->redirect('/admins/change_password');
                    }
                }

                $errorString ='';

                if(trim($this->data['Admins']['oldpassword']) == ''){                     
                    $errorString .="Please insert old password.<br/>";      
                }
                if(md5(trim($this->data['Admins']['oldpassword'])) != $userArray['User']['password']){                   
                    $errorString .="Please insert correct old password.<br/>";      
                }

                if(trim($this->data['Admins']['password']) == ''){                        
                    $errorString .="Password must have atleast 6 character.<br/>";  
                }


                if(trim($this->data['Admins']['password']) != '' || trim($this->data['Admins']['confirm_password']) != ''){
                    if(trim($this->data['Admins']['password']) != trim($this->data['Admins']['confirm_password'])){
                        $errorString .="Password & confirm password must be same<br/>";                         
                    }else{
                        if(strlen($this->data['Admins']['password']) < 3 ){
                            $errorString .="Password must have atleast 6 character.";       
                        }else{
                            $password =$this->data['Admins']['password'];
                            $this->data['Admin']['password'] = md5($password);
                        }
                    }       
                }else{
                    $this->data['Admins']['password'] = $userArray['User']['password'] ;
                }

                if(trim($errorString) !=''){                                                    
                    $this->Session->setFlash($errorString,'default',array('class' => 'msgTXt'));
                }else{

                    $this->data['User']['id']=$userArray['User']['id'];
                    $this->data['User']['password']=md5($this->data['Admins']['password']);

                    $this->User->save($this->data);

                    $this->data['Admins']['oldpassword']="";
                    $this->data['Admins']['password']="";
                    $this->data['Admins']['confirm_password']="";  

                    $this->Session->setFlash("Password has been changed.",'default',array('class' => 'successmsg'));
                    if(isset($this->data['Action']['redirectpage'])){
                        $this->redirect('/admins/change_password');
                    }else{
                        $this->redirect('/admins/change_password');
                    }
                }
            }else{
                $this->data = $userArray;
            }
        }



        /*******************************************************************
        * Function Name: settingthemes
        * Function Arguments: None
        * Function Return: (array)
        * Purpose:
        * Created By      : SDN
        * Created: 09 June, 2011
        ********************************************************************/

        function settingthemes(){ 
		
		    //Configure::write('debug',2);
			//pr($this->data); exit;
            ##check user session live or not
            $this->session_check_admin();

            $this->layout= 'new_admin_layout';   
            //for active menu display
            $this->set('page_url','settingthemes');
			
			# set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '31'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   
			//print_r($this->data);
			//die("tetst 111");
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file  
            $this->set("project_name",$project_name);   
            $projectDetails=$this->getprojectdetails($project_id);
            $this->set('project',$projectDetails);    
			$this->set("projectid",$project_id);   
            
			
			App::import("Model", "Project");
            $this->Project =  & new Project();
            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '31'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition
            //$project_name=$this->Session->read("projectwebsite_name_admin");
            $project_name = $this->Session->read("projectwebsite_name");
			$project_name = strtolower($project_name);
            $this->set("project_name",$project_name);

            App::import("Model","Theme");
            $this->Theme =   & new Theme();
			
			$this->getFontDropDown();
			$selectedfontmenu  = 0;
   		    $selectedfontpage  = 0;
			$selectedfontsize = 0;

			$parentDirPath =  'img' . DS . $project_name . DS.'uploads' .DS;
			
			$filePath =  $parentDirPath.'siteHeader_images' ;
			$existingHeaderImages = $this->directoryFiles_dropdown($filePath);
            if(!empty($this->data['Project']) && $this->data['Admins']['reset'] != 1) {
				//pr($this->data['Project']['coinlogo']);
				
                $this->File = & new FileComponent;
                 
				if (!file_exists($filePath)) {
					mkdir($parentDirPath . "siteHeader_images", 0777);
				}
				
                $this->File->setDestPath($filePath);
                $this->data['Project']['id']=$project_id; 

                 if(isset($this->data['Project']['coinlogo']['name']) && $this->data['Project']['coinlogo']['name'] !=''){
                    ##upload image
                    $file_name3 = $this->File->setFileName($this->data['Project']['coinlogo']['name']); 
                    $tmp3 = $this->data['Project']['coinlogo']['tmp_name'];
                    $file_namelogo = $this->File->uploadlogo($file_name3,$tmp3,true);
                    //$uploadedfilepath = 'img' . DS . $project_name . DS.'uploads/'. $file_namelogo ;

                    //$setnewdiamentions = $this->checkmaxfilesize($uploadedfilepath);
                    //unlink($uploadedfilepath);
                    // $file_name3 = $this->File->setFileName($this->data['Project']['coinlogo']['name']); 
                    //$tmp3 = $this->data['Project']['coinlogo']['tmp_name'];
                    //$file_namelogo = $this->File->uploadlogo($file_name3,$tmp3,true,$setnewdiamentions);

                    if(!empty($file_namelogo)){
						$this->data['Project']['logo'] = $file_namelogo;
					}
					else{   
						unset($this->data['Project']['logo']); 
					}
                }
				
				if($this->data['Admins']['clearHeaderimage'] == 1 && !empty($this->data['Project']['logo']) )
                {
                    // unlink image here
					$logo_unlink_path = 'img' . DS . $project_name . DS.'uploads'.DS. 'siteHeader_images'.DS.$this->data['Project']['logo'] ;

                    //$setnewdiamentions = $this->checkmaxfilesize($uploadedfilepath);
                    unlink($logo_unlink_path);
					$this->data['Project']['logo']="";
                }
				
                if($this->Project->Save($this->data['Project'])) {

                    $this->Session->setFlash('Changes to the Themes added Sucessfully.','default', array('class' => 'successmsg'));

                }else{
                    $this->Session->setFlash('Error in processing.','default',array('class' => 'errormsg'));
                }

            }
            
			$filePath =  $parentDirPath.'siteBackground_images' ;
			$existingBgImages = $this->directoryFiles_dropdown($filePath);
			
			
			$filePathPage =  $parentDirPath.'pageBackground_images' ;
			$existingPageBgImages = $this->directoryFiles_dropdown($filePathPage);

			if(!empty($this->data['Theme'])) {

                $themeid=$this->data['Theme']['themeid'];

                $this->File = & new FileComponent;
				                
				if (!file_exists($filePath)) {
					mkdir($parentDirPath . "siteBackground_images", 0777);
				}
				
				$this->File->setDestPath($filePath);
				if(isset($this->data['Theme']['sitebackgroundimage']['name']) && $this->data['Theme']['sitebackgroundimage']['name'] !=''){
					$file_name12 = $this->File->setFileName($this->data['Theme']['sitebackgroundimage']['name']); 
					$tmp12 = $this->data['Theme']['sitebackgroundimage']['tmp_name'];
					$fileNameback = $this->File->uploadbackgroundimage($file_name12,$tmp12,true);
					if(!empty($fileNameback)){
						$this->data['Theme']['backgroundimage'] = $fileNameback;
						unset($this->data['Theme']['sitebackgroundimage']);
					}
					else{   
						unset($this->data['Theme']['backgroundimage']); 
					}
				}
				
				if($this->data['Admins']['clearbackimage'] == 1 && !empty($this->data['Theme']['backgroundimage']) )
                {
                    // unlink image here
					$bg_unlink_path = 'img' . DS . $project_name . DS.'uploads'.DS. 'siteBackground_images'.DS.$this->data['Theme']['backgroundimage'] ;

                    //$setnewdiamentions = $this->checkmaxfilesize($uploadedfilepath);
                    unlink($bg_unlink_path);
					$this->data['Theme']['backgroundimage']="";
                }
				
				/* -------- Page BackgroundImage --------------------- */
				
				
				if (!file_exists($filePathPage)) {
					mkdir($parentDirPath . "pageBackground_images", 0777);
				}
				
				$this->File->setDestPath($filePathPage);
				if(isset($this->data['Theme']['pagebackgroundimage']['name']) && $this->data['Theme']['pagebackgroundimage']['name'] !=''){
					$file_name_page = $this->File->setFileName($this->data['Theme']['pagebackgroundimage']['name']); 
					$tmp_page = $this->data['Theme']['pagebackgroundimage']['tmp_name'];
					$fileNamepageback = $this->File->uploadbackgroundimage($file_name_page,$tmp_page,true);
					if(!empty($fileNamepageback)){
						$this->data['Theme']['pagebgimage'] = $fileNamepageback;
						unset($this->data['Theme']['pagebackgroundimage']);
					}
					else{   
						unset($this->data['Theme']['pagebgimage']); 
					}
				}
				
				if($this->data['Admins']['clearpagebackimage'] == 1 &&  !empty($this->data['Theme']['pagebgimage']))
                {
                    // unlink image here
					$page_bg_unlink_path = 'img' . DS . $project_name . DS.'uploads'.DS. 'pageBackground_images'.DS.$this->data['Theme']['pagebgimage'] ;
                    unlink($page_bg_unlink_path);
					$this->data['Theme']['pagebgimage']="";
                }
				
				/* ----------------------------- */
				
                $this->data['Theme']['project_id']=$project_id;
                $this->data['Theme']['id']=$themeid;

                if($this->Theme->Save($this->data['Theme'])) {

                    $this->Session->setFlash('Changes to the Themes added Sucessfully.','default', array('class' => 'successmsg'));

                    if(isset($this->data['Action']['redirectpage'])){
                        $this->redirect('settingthemes');
                    }else{
                        $this->redirect("settingthemes/");
                    }
                }else{
                    $this->Session->setFlash('Error in processing.','default',array('class' => 'errormsg'));
                }

            }
            $this->data1=$this->Project->find('first',array('conditions'=>array('id'=>$project_id)));
            $this->data = $this->Theme->find('first',array('conditions'=>array('project_id'=>$project_id)));
			
			$this->set('existingBgImages',$existingBgImages);
			$this->set('existingHeaderImages',$existingHeaderImages);
			$this->set('existingPageBgImages',$existingPageBgImages);
            $this->data = array_merge($this->data,$this->data1);
			
			// BY suman to clean up layouts
			if(!empty($this->data))
         	   $this->data = array_merge($this->data,$this->data1);
            else
			$this->data = $this->data;
        }


        function suggestedcomments(){

            ##check admin session live or not
            $this->session_check_admin();    
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('project_name',$project_name);
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }
            ##import company type model for processing
            App::import("Model", "CommentType");
            $this->CommentType =   & new CommentType();    
            ##fetch data from project type table for listing
            $field='';
            $condition = "delete_status = '0' AND CommentType.project_id IN(0,'".$project_id."')";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (comment_type_name LIKE '%".$searchkeyword."%'  )";
            }
            $this->Pagination->sortByClass    = 'CommentType'; ##initaite pagination 
            $this->Pagination->total= count($this->CommentType->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            $commenttypedata = $this->CommentType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
            $this->set("commenttypedata",$commenttypedata);  
						
            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '32'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   

        }

        function socialnetwork(){

            ##import ProjectGraphic  model for processing
            $projectid = $this->Session->read("sessionprojectid");
            $this->set("projectid",$projectid);
            $prodtl = $this->projectdetailbyid($projectid);
            $projectname = $prodtl[0]['Project']['project_name'];
            $this->set("projectname",$projectname); 
            $this->set('current_project_name',$projectname);     // used in project_name element file 
            App::import("Model", "ProjectGraphic");
            $this->ProjectGraphic =   & new ProjectGraphic();    
            #set the posted data
            ##check empty data
            if(!empty($this->data)) {
                //print_r($this->data);die;
                ##Show Option Page Graphic:
                $conditions = "ProjectGraphic.project_id = '".$projectid."' AND  ProjectGraphic.delete_status = '0'";
                $proj_grap_arr =  $this->ProjectGraphic->find("all",array('conditions'=>$conditions));
                if(count($proj_grap_arr) > 0)
                {
                    $this->ProjectGraphic->deleteAll($conditions, $cascade = true);
                }

                // For linkedin
                if((isset($this->data['Admins']['imagenameold_link']['name']) && $this->data['Admins']['imagenameold_link']['name'] !='') || (isset($this->data['ProjectGraphic']['image_link']) && $this->data['ProjectGraphic']['image_link'] !='' )){
                    if(isset($this->data['Admins']['imagenameold_link']['name']) && $this->data['Admins']['imagenameold_link']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_link']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_link']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33');
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_link'];
                    }

                    $this->data1['ProjectGraphic']['project_id'] = $projectid;
                    $this->data1['ProjectGraphic']['title'] = $this->data['Admins']['title_link'];
                    $this->data1['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data1['ProjectGraphic']['address'] = $this->data['Admins']['address_link'];

                    if(isset($this->data['Admins']['activestatus_link']) && $this->data['Admins']['activestatus_link']==1)
                        $this->data1['ProjectGraphic']['iframe_icon'] = 1;
                    else
                        $this->data1['ProjectGraphic']['iframe_icon'] = 0;

                    if(isset($this->data['Admins']['activestatus_link1']) && $this->data['Admins']['activestatus_link1']==1)
                        $this->data1['ProjectGraphic']['home_icon'] = 1;
                    else
                        $this->data1['ProjectGraphic']['home_icon'] = 0;
                    
                    $this->data1['ProjectGraphic']['active_status'] = 1;
                    $this->ProjectGraphic->Save($this->data1['ProjectGraphic']);
                    $this->Session->setFlash('Social network added successfully.','default', array('class' => 'successmsg'));
				}
                // For Facebook
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();
                if((isset($this->data['Admins']['imagenameold_face']['name']) && $this->data['Admins']['imagenameold_face']['name'] !='') || (isset($this->data['ProjectGraphic']['image_face']) && $this->data['ProjectGraphic']['image_face'] !='')){
                    if(isset($this->data['Admins']['imagenameold_face']['name']) && $this->data['Admins']['imagenameold_face']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_face']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_face']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_face'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_face'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_face'];

                    if(isset($this->data['Admins']['activestatus_face']) && $this->data['Admins']['activestatus_face']==1)
                        $this->data['ProjectGraphic']['iframe_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['iframe_icon'] = 0;

                    if(isset($this->data['Admins']['activestatus_link2']) && $this->data['Admins']['activestatus_link2']==1)
                        $this->data['ProjectGraphic']['home_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['home_icon'] = 0;    
                        
                    $this->data['ProjectGraphic']['active_status'] = 1;
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }
              
                // For Twitter
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();
                if((isset($this->data['Admins']['imagenameold_twit']['name']) && $this->data['Admins']['imagenameold_twit']['name'] !='') || (isset($this->data['ProjectGraphic']['image_twit']) && $this->data['ProjectGraphic']['image_twit'] !='' )){
                    if(isset($this->data['Admins']['imagenameold_twit']['name']) && $this->data['Admins']['imagenameold_twit']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_twit']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_twit']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_twit'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_twit'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_twit'];

                    if(isset($this->data['Admins']['activestatus_twit']) && $this->data['Admins']['activestatus_twit']==1)
                        $this->data['ProjectGraphic']['iframe_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['iframe_icon'] = 0;

                    if(isset($this->data['Admins']['activestatus_link3']) && $this->data['Admins']['activestatus_link3']==1)
                        $this->data['ProjectGraphic']['home_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['home_icon'] = 0;    
                        
                    $this->data['ProjectGraphic']['active_status'] = 1;
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }
                //For Donation
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don']['name']) && $this->data['Admins']['imagenameold_don']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don']) && $this->data['ProjectGraphic']['image_don'] !='' )){
                    if(isset($this->data['Admins']['imagenameold_don']['name']) && $this->data['Admins']['imagenameold_don']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don'];

                    if(isset($this->data['Admins']['activestatus_don']) && $this->data['Admins']['activestatus_don']==1)
                        $this->data['ProjectGraphic']['iframe_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['iframe_icon'] = 0;

                    if(isset($this->data['Admins']['activestatus_link4']) && $this->data['Admins']['activestatus_link4']==1)
                        $this->data['ProjectGraphic']['home_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['home_icon'] = 0;

                     $this->data['ProjectGraphic']['active_status'] = 1;    
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }

                //For Donation1
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don1']['name']) && $this->data['Admins']['imagenameold_don1']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don1']) && $this->data['ProjectGraphic']['image_don1'] !='' )){
                    if(isset($this->data['Admins']['imagenameold_don1']['name']) && $this->data['Admins']['imagenameold_don1']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don1']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don1']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don1'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don1'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don1'];

                    if(isset($this->data['Admins']['activestatus_don1']) && $this->data['Admins']['activestatus_don1']==1)
                        $this->data['ProjectGraphic']['iframe_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['iframe_icon'] = 0;

                    if(isset($this->data['Admins']['activestatus_link5']) && $this->data['Admins']['activestatus_link5']==1)
                        $this->data['ProjectGraphic']['home_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['home_icon'] = 0;
                    
                    $this->data['ProjectGraphic']['active_status'] = 1;    
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }
                
                //For Donation2
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don2']['name']) && $this->data['Admins']['imagenameold_don2']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don2']) && $this->data['ProjectGraphic']['image_don2'] !='' )){
                    if(isset($this->data['Admins']['imagenameold_don2']['name']) && $this->data['Admins']['imagenameold_don2']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don2']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don2']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don2'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don2'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don2'];

                    if(isset($this->data['Admins']['activestatus_link6']) && $this->data['Admins']['activestatus_link6']==1)
                        $this->data['ProjectGraphic']['iframe_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['iframe_icon'] = 0;

                    if(isset($this->data['Admins']['activestatus_link6']) && $this->data['Admins']['activestatus_link6']==1)
                        $this->data['ProjectGraphic']['home_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['home_icon'] = 0;

                    $this->data['ProjectGraphic']['active_status'] = 1;    
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }
                //For Donation3
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don3']['name']) && $this->data['Admins']['imagenameold_don3']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don3']) && $this->data['ProjectGraphic']['image_don3'] !='' )){
                    if(isset($this->data['Admins']['imagenameold_don3']['name']) && $this->data['Admins']['imagenameold_don3']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don3']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don3']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don3'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don3'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don3'];

                    if(isset($this->data['Admins']['activestatus_don3']) && $this->data['Admins']['activestatus_don3']==1)
                        $this->data['ProjectGraphic']['iframe_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['iframe_icon'] = 0;

                    if(isset($this->data['Admins']['activestatus_link7']) && $this->data['Admins']['activestatus_link7']==1)
                        $this->data['ProjectGraphic']['home_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['home_icon'] = 0;


                    $this->data['ProjectGraphic']['active_status'] = 1;    
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }

                //For Donation3
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don4']['name']) && $this->data['Admins']['imagenameold_don4']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don4']) && $this->data['ProjectGraphic']['image_don4'] !='' )){
                    if(isset($this->data['Admins']['imagenameold_don4']['name']) && $this->data['Admins']['imagenameold_don4']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don4']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don4']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don4'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don4'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don4'];

                    if(isset($this->data['Admins']['activestatus_don4']) && $this->data['Admins']['activestatus_don4']==1)
                        $this->data['ProjectGraphic']['iframe_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['iframe_icon'] = 0;


                    if(isset($this->data['Admins']['activestatus_link8']) && $this->data['Admins']['activestatus_link8']==1)
                        $this->data['ProjectGraphic']['home_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['home_icon'] = 0;

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }

                //For Donation4
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don5']['name']) && $this->data['Admins']['imagenameold_don5']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don5']) && $this->data['ProjectGraphic']['image_don5'] !='' )){
                    if(isset($this->data['Admins']['imagenameold_don5']['name']) && $this->data['Admins']['imagenameold_don5']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don5']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don5']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don5'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don5'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don5'];

                    if(isset($this->data['Admins']['activestatus_don5']) && $this->data['Admins']['activestatus_don5']==1)
                        $this->data['ProjectGraphic']['iframe_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['iframe_icon'] = 0;


                    if(isset($this->data['Admins']['activestatus_link9']) && $this->data['Admins']['activestatus_link9']==1)
                        $this->data['ProjectGraphic']['home_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['home_icon'] = 0;

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }

                //For Donation5
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don6']['name']) && $this->data['Admins']['imagenameold_don6']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don6']) && $this->data['ProjectGraphic']['image_don6'] !='' )){
                    if(isset($this->data['Admins']['imagenameold_don6']['name']) && $this->data['Admins']['imagenameold_don6']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don6']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don6']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don6'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don6'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don6'];

                    if(isset($this->data['Admins']['activestatus_don6']) && $this->data['Admins']['activestatus_don6']==1)
                        $this->data['ProjectGraphic']['iframe_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['iframe_icon'] = 0;

                    if(isset($this->data['Admins']['activestatus_link10']) && $this->data['Admins']['activestatus_link10']==1)
                        $this->data['ProjectGraphic']['home_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['home_icon'] = 0;
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }  
                //For Donation6
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don7']['name']) && $this->data['Admins']['imagenameold_don7']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don7']) && $this->data['ProjectGraphic']['image_don7'] !='' )){
                    if(isset($this->data['Admins']['imagenameold_don7']['name']) && $this->data['Admins']['imagenameold_don7']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don7']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don7']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don7'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don7'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don7'];

                    if(isset($this->data['Admins']['activestatus_don7']) && $this->data['Admins']['activestatus_don7']==1)
                        $this->data['ProjectGraphic']['iframe_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['iframe_icon'] = 0;

                    if(isset($this->data['Admins']['activestatus_link11']) && $this->data['Admins']['activestatus_link11']==1)
                        $this->data['ProjectGraphic']['home_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['home_icon'] = 0;
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }
                //For Donation7
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don8']['name']) && $this->data['Admins']['imagenameold_don8']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don8']) && $this->data['ProjectGraphic']['image_don8'] !='')){
                    if(isset($this->data['Admins']['imagenameold_don8']['name']) && $this->data['Admins']['imagenameold_don8']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don8']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don8']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don8'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don8'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don8'];

                    if(isset($this->data['Admins']['activestatus_don8']) && $this->data['Admins']['activestatus_don8']==1)
                        $this->data['ProjectGraphic']['iframe_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['iframe_icon'] = 0;

                    if(isset($this->data['Admins']['activestatus_link12']) && $this->data['Admins']['activestatus_link12']==1)
                        $this->data['ProjectGraphic']['home_icon'] = 1;
                    else
                        $this->data['ProjectGraphic']['home_icon'] = 0;
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }

            }
            $conditiongra = "ProjectGraphic.project_id='$projectid' AND  ProjectGraphic.delete_status='0'";
            //$conditiongra = "ProjectGrap$socialiconshic.project_id='$projectid' AND  ProjectGraphic.delete_status='0'";    
            $graphicarr = $this->ProjectGraphic->find('all',array("conditions"=>$conditiongra,'order'=>'ProjectGraphic.id ASC'));
            $this->set('graphiclist',$graphicarr);

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '51'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   
        }    


        function iframes(){

            ##import ProjectGraphic  model for processing
            $projectid = $this->Session->read("sessionprojectid");
            $this->set("projectid",$projectid);
            $prodtl = $this->projectdetailbyid($projectid);
            $projectname = $prodtl[0]['Project']['project_name'];
            $this->set("projectname",$projectname);
            $this->set('current_project_name',$projectname);     // used in project_name element file 
            App::import("Model", "ProjectGraphic");
            $this->ProjectGraphic =   & new ProjectGraphic();    
            #set the posted data
            ##check empty data
            if(!empty($this->data)) {
                ##Show Option Page Graphic:
                $conditions = "ProjectGraphic.project_id = '".$projectid."' AND  ProjectGraphic.delete_status = '0'";
                $proj_grap_arr =  $this->ProjectGraphic->find("all",array('conditions'=>$conditions));
                if(count($proj_grap_arr) > 0)
                {
                    $this->ProjectGraphic->deleteAll($conditions, $cascade = true);
                }

                // For linkedin
                if((isset($this->data['Admins']['imagenameold_link']['name']) && $this->data['Admins']['imagenameold_link']['name'] !='') || (isset($this->data['ProjectGraphic']['image_link']) && $this->data['ProjectGraphic']['image_link'] !='' && $this->data['Admins']['activestatus_link']==1)){
                    if(isset($this->data['Admins']['imagenameold_link']['name']) && $this->data['Admins']['imagenameold_link']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_link']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_link']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33');
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_link'];
                    }

                    $this->data1['ProjectGraphic']['project_id'] = $projectid;
                    $this->data1['ProjectGraphic']['title'] = $this->data['Admins']['title_link'];
                    $this->data1['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data1['ProjectGraphic']['address'] = $this->data['Admins']['address_link'];

                    if(isset($this->data['Admins']['activestatus_link']) && $this->data['Admins']['activestatus_link']==1)
                        $this->data1['ProjectGraphic']['active_status'] = 1;
                    else
                        $this->data1['ProjectGraphic']['active_status'] = 0;

                    $this->ProjectGraphic->Save($this->data1['ProjectGraphic']);
                    $this->Session->setFlash('Social network added successfully.','default', array('class' => 'successmsg'));




                }
                // For Facebook
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();
                if((isset($this->data['Admins']['imagenameold_face']['name']) && $this->data['Admins']['imagenameold_face']['name'] !='') || (isset($this->data['ProjectGraphic']['image_face']) && $this->data['ProjectGraphic']['image_face'] !='' && $this->data['Admins']['activestatus_face']==1)){
                    if(isset($this->data['Admins']['imagenameold_face']['name']) && $this->data['Admins']['imagenameold_face']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_face']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_face']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_face'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_face'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_face'];

                    if(isset($this->data['Admins']['activestatus_face']) && $this->data['Admins']['activestatus_face']==1)
                        $this->data1['ProjectGraphic']['active_status'] = 1;
                    else
                        $this->data1['ProjectGraphic']['active_status'] = 0;

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }
                // For Twitter
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();
                if((isset($this->data['Admins']['imagenameold_twit']['name']) && $this->data['Admins']['imagenameold_twit']['name'] !='') || (isset($this->data['ProjectGraphic']['image_twit']) && $this->data['ProjectGraphic']['image_twit'] !='' && $this->data['Admins']['activestatus_twit']==1)){
                    if(isset($this->data['Admins']['imagenameold_twit']['name']) && $this->data['Admins']['imagenameold_twit']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_twit']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_twit']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_twit'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_twit'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_twit'];

                    if(isset($this->data['Admins']['activestatus_twit']) && $this->data['Admins']['activestatus_twit']==1)
                        $this->data1['ProjectGraphic']['active_status'] = 1;
                    else
                        $this->data1['ProjectGraphic']['active_status'] = 0;

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }
                //For Donation
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don']['name']) && $this->data['Admins']['imagenameold_don']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don']) && $this->data['ProjectGraphic']['image_don'] !='' && $this->data['Admins']['activestatus_don']==1)){
                    if(isset($this->data['Admins']['imagenameold_don']['name']) && $this->data['Admins']['imagenameold_don']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don'];

                    if(isset($this->data['Admins']['activestatus_don']) && $this->data['Admins']['activestatus_don']==1)
                        $this->data1['ProjectGraphic']['active_status'] = 1;
                    else
                        $this->data1['ProjectGraphic']['active_status'] = 0;


                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }

                //For Donation1
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don1']['name']) && $this->data['Admins']['imagenameold_don1']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don1']) && $this->data['ProjectGraphic']['image_don1'] !='' && $this->data['Admins']['activestatus_don1']==1)){
                    if(isset($this->data['Admins']['imagenameold_don1']['name']) && $this->data['Admins']['imagenameold_don1']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don1']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don1']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don1'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don1'];

                    if(isset($this->data['Admins']['activestatus_don1']) && $this->data['Admins']['activestatus_don1']==1)
                        $this->data1['ProjectGraphic']['active_status'] = 1;
                    else
                        $this->data1['ProjectGraphic']['active_status'] = 0;


                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }
                //For Donation2
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don2']['name']) && $this->data['Admins']['imagenameold_don2']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don2']) && $this->data['ProjectGraphic']['image_don2'] !='' && $this->data['Admins']['activestatus_don2']==1)){
                    if(isset($this->data['Admins']['imagenameold_don2']['name']) && $this->data['Admins']['imagenameold_don2']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don2']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don2']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don2'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don2'];

                    if(isset($this->data['Admins']['activestatus_don2']) && $this->data['Admins']['activestatus_don2']==1)
                        $this->data1['ProjectGraphic']['active_status'] = 1;
                    else
                        $this->data1['ProjectGraphic']['active_status'] = 0;


                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }
                //For Donation3
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don3']['name']) && $this->data['Admins']['imagenameold_don3']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don3']) && $this->data['ProjectGraphic']['image_don3'] !='' && $this->data['Admins']['activestatus_don3']==1)){
                    if(isset($this->data['Admins']['imagenameold_don3']['name']) && $this->data['Admins']['imagenameold_don3']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don3']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don3']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don3'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don3'];

                    if(isset($this->data['Admins']['activestatus_don3']) && $this->data['Admins']['activestatus_don3']==1)
                        $this->data1['ProjectGraphic']['active_status'] = 1;
                    else
                        $this->data1['ProjectGraphic']['active_status'] = 0;
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }

                //For Donation3
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don4']['name']) && $this->data['Admins']['imagenameold_don4']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don4']) && $this->data['ProjectGraphic']['image_don4'] !='' && $this->data['Admins']['activestatus_don4']==1)){
                    if(isset($this->data['Admins']['imagenameold_don4']['name']) && $this->data['Admins']['imagenameold_don4']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don4']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don4']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don4'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don4'];

                    if(isset($this->data['Admins']['activestatus_don4']) && $this->data['Admins']['activestatus_don4']==1)
                        $this->data1['ProjectGraphic']['active_status'] = 1;
                    else
                        $this->data1['ProjectGraphic']['active_status'] = 0;
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }

                //For Donation4
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don5']['name']) && $this->data['Admins']['imagenameold_don5']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don5']) && $this->data['ProjectGraphic']['image_don5'] !='' && $this->data['Admins']['activestatus_don4']==1)){
                    if(isset($this->data['Admins']['imagenameold_don5']['name']) && $this->data['Admins']['imagenameold_don5']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don5']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don5']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don5'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don5'];

                    if(isset($this->data['Admins']['activestatus_don5']) && $this->data['Admins']['activestatus_don5']==1)
                        $this->data1['ProjectGraphic']['active_status'] = 1;
                    else
                        $this->data1['ProjectGraphic']['active_status'] = 0;
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }

                //For Donation5
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don6']['name']) && $this->data['Admins']['imagenameold_don6']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don6']) && $this->data['ProjectGraphic']['image_don6'] !='' && $this->data['Admins']['activestatus_don4']==1)){
                    if(isset($this->data['Admins']['imagenameold_don6']['name']) && $this->data['Admins']['imagenameold_don6']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don6']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don6']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don6'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don6'];

                    if(isset($this->data['Admins']['activestatus_don6']) && $this->data['Admins']['activestatus_don6']==1)
                        $this->data1['ProjectGraphic']['active_status'] = 1;
                    else
                        $this->data1['ProjectGraphic']['active_status'] = 0;
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }  
                //For Donation6
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don7']['name']) && $this->data['Admins']['imagenameold_don7']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don7']) && $this->data['ProjectGraphic']['image_don7'] !='' && $this->data['Admins']['activestatus_don4']==1)){
                    if(isset($this->data['Admins']['imagenameold_don7']['name']) && $this->data['Admins']['imagenameold_don7']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don7']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don7']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don7'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don7'];

                    if(isset($this->data['Admins']['activestatus_don7']) && $this->data['Admins']['activestatus_don7']==1)
                        $this->data1['ProjectGraphic']['active_status'] = 1;
                    else
                        $this->data1['ProjectGraphic']['active_status'] = 0;
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }
                //For Donation7
                unset($this->ProjectGraphic);
                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Admins']['imagenameold_don8']['name']) && $this->data['Admins']['imagenameold_don8']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don8']) && $this->data['ProjectGraphic']['image_don8'] !='' && $this->data['Admins']['activestatus_don4']==1)){
                    if(isset($this->data['Admins']['imagenameold_don8']['name']) && $this->data['Admins']['imagenameold_don8']['name'] !='') {
                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;
                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don8']['name']); 
                        $tmp1 = $this->data['Admins']['imagenameold_don8']['tmp_name'];
                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 
                    } else {
                        $fileNamesidea = $this->data['ProjectGraphic']['image_don'];
                    }

                    $this->data['ProjectGraphic']['project_id'] = $projectid;
                    $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don8'];
                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;
                    $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don8'];

                    if(isset($this->data['Admins']['activestatus_don8']) && $this->data['Admins']['activestatus_don8']==1)
                        $this->data1['ProjectGraphic']['active_status'] = 1;
                    else
                        $this->data1['ProjectGraphic']['active_status'] = 0;
                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);
                }

            }
            $conditiongra = "ProjectGraphic.project_id='$projectid' AND  ProjectGraphic.delete_status='0'";
            //$conditiongra = "ProjectGrap$socialiconshic.project_id='$projectid' AND  ProjectGraphic.delete_status='0'";    
            $graphicarr = $this->ProjectGraphic->find('all',array("conditions"=>$conditiongra,'order'=>'ProjectGraphic.id ASC'));
            $this->set('graphiclist',$graphicarr);


            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '52'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   
            
            
            App::import("Model", "Event");
            $this->Event =   & new Event();  
            
            $condition = "Event.project_id = '$projectid' and Event.active_status='1' and Event.delete_status='0'";  

            $event_data= $this->Event->find('all',array("conditions"=>$condition,'fields'=>array('Event.id','Event.title')));
            
            foreach($event_data as $eachrow)
            {
                $event_titles[$eachrow['Event']['id']]=$eachrow['Event']['title'];
            }

            $this->set("event_titles",$event_titles);  
        }



        function socialicon($project_id=null){
            $this->layout = "";
            $project_id = $this->Session->read("sessionprojectid");
            App::import('Model','Project');
            $this->Project = new Project();
            $prname = $this->Project->find('all',array('conditions'=>array('Project.id'=>$project_id),'fields'=>array('Project.project_name')));
            $this->set('project_na',$prname);
            App::import('Model','ProjectGraphic');
            $this->ProjectGraphic = new ProjectGraphic();
            $socialiconsArr = $this->ProjectGraphic->find('all',array('conditions'=>array('ProjectGraphic.project_id'=>$project_id,'ProjectGraphic.active_status'=>1, 'ProjectGraphic.delete_status'=>0)));
            $this->set('socialicons',$socialiconsArr);
        }
        function page_footer(){
          
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            
            App::import('Model','PageFooter');
            $this->PageFooter = new PageFooter();
            $cond="project_id='$project_id'";
            $dt=$this->PageFooter->find("first",array('conditions'=>$cond));
            
            $page_footer_id=$dt['PageFooter']['id'];
            $page_footer_content=$dt['PageFooter']['page_footer_content'];
            $this->set("page_footer_content",$page_footer_content);
            
             $this->set("page_footer_id",$page_footer_id);
            
            if(!empty($this->data))
            {    
                
                $errormsg = $this->PageFooter->invalidFields();
                //$errormsg="Please provide Get Started Name";
                $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));
                //print_r($errormsg);die;
                if(!$errormsg){
                    $this->data['PageFooter']['project_id']=$project_id;
                    
                    if($this->PageFooter->save($this->data))
                    {
                        $this->Session->setFlash('Page Footer Updated successfully.','default', array('class' => 'successmsg'));
                        if(isset($this->data['Action']['redirectpage'])){
                            $this->redirect('/admins/page_footer');
                        }else
                        {
                            $this->redirect('/admins/page_footer');
                        }
                    } 
                    else
                    {
                        $this->Session->setFlash("Please provide Page Footer",'default',array('class' => 'msgTXt'));
                    }
                }    
            } 

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '67'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition


        }
		
		/*
			@Auther			Suman Singh
			@Type			Created
			@Date			April 18, 2012
		*/
			
		function project_border_footer(){
          
            $project_id = $this->Session->read("sessionprojectid");
            //var_dump($project_id);
			$project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            
            App::import('Model','ProjectBorderFooter');
            $this->ProjectBorderFooter = new ProjectBorderFooter();
            $cond="project_id='$project_id'";
            $dt=$this->ProjectBorderFooter->find("first",array('conditions'=>$cond));
            
            $page_footer_id=$dt['ProjectBorderFooter']['id'];
			//echo "dfhfdh";
			//pr($dt);
            $page_footer_content=$dt['ProjectBorderFooter']['page_footer_content'];
            $this->set("page_footer_content",$page_footer_content);
            
             $this->set("page_footer_id",$page_footer_id);
            
            if(!empty($this->data))
            {    
                $errormsg = $this->ProjectBorderFooter->invalidFields();
                //$errormsg="Please provide Get Started Name";
                $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));
                //print_r($errormsg);die;
                if(!$errormsg){
                    $this->data['ProjectBorderFooter']['project_id']=$project_id;
                    
                    if($this->ProjectBorderFooter->save($this->data))
                    {
                        $this->Session->setFlash('Page Footer Updated successfully.','default', array('class' => 'successmsg'));
                        if(isset($this->data['Action']['redirectpage'])){
                            $this->redirect('/admins/project_border_footer');
                        }else
                        {
                            $this->redirect('/admins/project_border_footer');
                        }
                    } 
                    else
                    {
                        $this->Session->setFlash("Please provide Page Footer",'default',array('class' => 'msgTXt'));
                    }
                }    
            } 

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '67'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition
        }
        function getstart(){

            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 

            App::import('Model','GetStart');
            $this->GetStart = new GetStart();
            $dt=$this->GetStart->find("all");
            $this->set("value",$dt);


            App::import('Model','Project');
            $this->Project = new Project();
            $prname = $this->Project->find('first',array('conditions'=>array('Project.id'=>$project_id),'fields'=>array('Project.project_name')));
            $this->set('project_na',$prname);


            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '37'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);






        }

        function settings(){
            ##check user session live or not
            $this->session_check_admin();

            $this->layout= 'new_admin_layout';   
            //for active menu display
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file    
            //for active menu display
            $this->set('page_url','edit_project_detail');

            $projectid=$this->Session->read("sessionprojectid");   
            $project_name=$this->Session->read("projectwebsite_name_admin");

            App::import("Model", "Project");
            $this->Project =   & new Project();
            App::import("Model", "Sponsor");
            $sponsor =   & new Sponsor();
            App::import("Model", "User");
            $user =   & new User();

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '53'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

            $projectDetails=$this->getprojectdetails($project_id);

            $sponserid=$projectDetails['Project']['sponsor_id'];    

            $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid));
			//pr($projectDetails);
            $this->set('project',$projectDetails);  
            $this->set('sponsor',$sponsordetails);
            $userid = $this->Session->read("User.User.id");

            ##check empty data
            if(!empty($this->data)) {

                #set the posted data

                $this->Project->set($this->data);
                #check server side validation
                $errormsg = $this->Project->invalidFields();

                if(!$errormsg){
                    $this->File = & new FileComponent;
                    $filePath =  'img' . DS . $project_name . DS.'uploads' ;
                    $this->File->setDestPath($filePath);

                    if($this->data['Project']['favoriteicon']['name'] !=''){
                        $file_name1 = $this->File->setFileName($this->data['Project']['favoriteicon']['name']); 
                        $tmp1 = $this->data['Project']['favoriteicon']['tmp_name'];
                        $fileNamefavicon = $this->File->uploadfavicon($file_name1,$tmp1,true);
                        if(!empty($fileNamefavicon)){
                            $this->data['Project']['favicon'] = $fileNamefavicon;
                        }
                        else{    
                            unset($this->data['Project']['favicon']);    
                        }
                    }

                    /*if(!isset($this->data['Project']['logoutredirect']))
                    {

                    }*/

                    $this->data['Project']['id'] = $projectid;

                    if($this->Project->Save($this->data)){

                        $this->Session->setFlash('Setting has been modified.','default', array('class' => 'successmsg'));

                        if(isset($this->data['Action']['redirectpage'])){
                            $this->redirect('settings');
                        }else{
                            $this->redirect('settings');
                        }
                    }
                    //End upload images linke side A side B and logo

                }

            }

            //for theme details

            App::import("Model", "Content");
            $this->Content =   & new Content();
            $valofdd = $this->Content->find('all',array('conditions'=>array('project_id'=>$projectid,'active_status'=>'1','delete_status'=>'0'),'fields'=>array('Content.title,Content.id')));
            $this->set("valofdd",$valofdd);

            $this->Project->id = $projectid;
            $this->data = $this->Project->read();

            $this->data = array_merge($this->data);

        }
        function suggestedlist(){

            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");			
			$project_name=$this->Session->read("projectwebsite_name_admin");  
			$this->set('project_name',$project_name);
			$this->set('current_project_name',$project_name);     // used in project_name element file 
			
			//for active menu display
            $this->set('page_url','edit_project_detail');


            App::import("Model", "Project");
            $this->Project =   & new Project();
            $this->set("project_id",$projectid);

            App::import("Model", "Sponsor");
            $sponsor =   & new Sponsor();
            App::import("Model", "User");
            $user =   & new User();

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '36'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();

            //if(empty($project_name)) $this->redirect('/admins/session_expired');
            //             
            //$this->set('project_name',$project_name);

            $projectDetails=$this->getprojectdetails($projectid);

            $this->set('project',$projectDetails);    

            App::import("Model", "CommentType");
            $this->CommentType =   & new CommentType();
            ##check empty data
            if(!empty($this->data)) {
                if(!empty($this->data['ProjectType'])) {
                  // echo '<pre>';print_r($this->data);exit;
                    #set the posted data
                    $this->ProjectType->set($this->data['ProjectType']);
                    #check server side validation
					
                    $this->ProjectType->invalidFields();
                    #save data in project type table
					$recid  = $this->data['ProjectType']['id'];
                    $ptname  = $this->data['ProjectType']['project_type_name'];
                    
                    $condition = "ProjectType.id !=$recid AND  ProjectType.delete_status = '0'";
                    
                    $ptdata = $this->ProjectType->find('all',array("conditions"=>$condition));
                    
                    if(!empty($ptdata)){
                        if($recid !=''){
                            $saveflag=true;

                            if($this->ProjectType->Save($this->data['ProjectType'])){
                                $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));

								if($this->data['ProjectType']['maxnumbercomment']>0)
                                {
                                    App::import("Model", "ProjectCommentType");
                                    $this->ProjectCommentType =   & new ProjectCommentType();

                                    // unset sequence first

                                    $this->CommentType->query("UPDATE comment_types SET sequence_id = 0 WHERE project_id = '".$projectid."'");

                                    for($i=0;$i<=$this->data['ProjectType']['maxnumbercomment'];$i++){
										//echo '<pre>';print_r($this->data['ProjectType']);die;
                                        if($this->data['ProjectType']['commenttypeoption'.$i]>0){

                                            // set sequence at comment type
                                            unset($this->data['CommentType']);
                                            $this->data['CommentType']['id']=$this->data['ProjectType']['commenttypeoption'.$i];
                                            $this->data['CommentType']['sequence_id']=$i;
											//echo '<pre>';print_r($this->data['CommentType']);
											$savedata =  $this->CommentType->save($this->data['CommentType']);
											//print_r($savedata);die;
                                            if($savedata){    
                                                $this->Session->setFlash('Control information has been saved.ssssss','default', array('class' => 'successmsg'));
                                            }else{
                                                $saveflag=false;
                                            }


                                            unset($this->data['ProjectCommentType']);
                                            $this->ProjectCommentType->create();
                                            $comment_type_id = $this->ProjectCommentType->find('first',array("conditions"=>"ProjectCommentType.project_type_id=$recid and ProjectCommentType.sequence_id=".$i." and ProjectCommentType.active_status='1' and ProjectCommentType.delete_status='0'", 'fields' =>"id"));
                                            if(is_array($comment_type_id) && !empty($comment_type_id))
                                            {
                                                $this->data['ProjectCommentType']['id']=$comment_type_id['ProjectCommentType']['id'];
                                            }
                                            $this->data['ProjectCommentType']['sequence_id']=$i;
                                            $this->data['ProjectCommentType']['comment_type_id']=$this->data['ProjectType']['commenttypeoption'.$i];
                                            $this->data['ProjectCommentType']['project_type_id']=$this->data['ProjectType']['id'];
                                            if($this->ProjectCommentType->Save($this->data['ProjectCommentType'])){    
                                                $this->Session->setFlash('Control information has been saved22222.','default', array('class' => 'successmsg'));
                                            }else{
                                                $saveflag=false;
                                            }
                                        }
                                    }

                                }
                                unset($this->data['CommentType']);
								 $this->data['ProjectType']['additional_comment'];
								 
                                if($this->data['ProjectType']['additional_comment']==1)
                                {
									

                                     $allowed_additional_comment_id=$this->data['ProjectType']['additionalcomment'];

                                    // Select previously set additional comment id
                                    $condition = "CommentType.project_id IN (0,'$projectid') AND  CommentType.is_additional_allowed = '1'";
                                    $commenttypedata = $this->CommentType->find('first',array("conditions"=>$condition));
									//echo '<pre>';print_r($commenttypedata);
                                    $setnewid=false;
                                    if($commenttypedata){
                                        if($commenttypedata['CommentType']['id']!=$allowed_additional_comment_id){  

                                            // Unset previously set additional comment id
                                            $this->CommentType->id =$commenttypedata['CommentType']['id'];
                                            $this->data = $this->CommentType->read();
                                            $this->data['CommentType']['is_additional_allowed']='0';  
                                            //$this->data['CommentType']['sequence_id']='1000'; 
                                            if($this->CommentType->Save($this->data['CommentType'])){
                                                // Set new addtional comment flag true
                                                $setnewid=true;
                                            }


                                        }else{


											$setnewid=false; 
                                             $this->data['CommentType']['id']=$commenttypedata['CommentType']['id']  ; 
                                            $this->data['CommentType']['sequence_id']='1000';  
                                            $this->CommentType->Save($this->data['CommentType']);
                                        }

                                    }else{
                                        // Set new addtional comment flag true
                                        $setnewid=true;
                                    }

                                    if($setnewid){

                                        // Set new addtional comment type id

                                        $this->CommentType->id =$allowed_additional_comment_id;
                                        $this->data = $this->CommentType->read();
                                        $this->data['CommentType']['is_additional_allowed']='1'; 
                                        $this->data['CommentType']['sequence_id']='1000'; 

                                        if($this->CommentType->Save($this->data['CommentType'])){
                                            $this->Session->setFlash('Allow additional comment has beed saved.','default', array('class' => 'successmsg'));
                                        }else{
                                            $saveflag=false;
                                        } 

                                    }


                                }else{
                                    App::import("Model", "CommentType");
                                    $this->CommentType =   & new CommentType();
                                    $condition = "CommentType.project_id ='$projectid' AND  CommentType.is_additional_allowed = '1'";
                                    $commenttypedata = $this->CommentType->find('first',array("conditions"=>$condition));
								
                                    $this->CommentType->id =$commenttypedata['CommentType']['id'];
                                    $this->data = $this->CommentType->read();
//echo '<pre>';print_r($this->data);exit;
                                    $this->data['CommentType']['is_additional_allowed']='0';
									
	                                   // if($this->CommentType->Save($this->data['CommentType'])){
                                        // Set new addtional comment flag true
                                        // $saveflag=true;
                                    	
									//}else{
                                       // $saveflag=false;
                                  //  }
                                }

                                if($saveflag==true){
                                    $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));
                                }else{
                                    $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));
                                }
                                //$this->Session->setFlash('Project Type updated Successfully.','default', array('class' => 'successmsg'));

                            }else{
                                $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));
                            }
                        }else{
                            $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));
                        }
                    }else{

                        $this->Session->setFlash('Project Type with same name already exists.','default',array('class' => 'msgTXt'));
                    }
                    //$this->redirect("/admins/editprojectdtl");
                }
                else{
                    $recid = $this->data['Project']['project_type_id'];
                    $this->ProjectType->id = $recid;
                    //$this->data = $this->ProjectType->read();
                    $this->set("ProjectTypeId", $recid);
                }                
                if(isset($this->data['Action']['redirectpage'])){
                    $this->redirect('/admins/suggestedlist');
                }else{
                    $this->redirect('/admins/suggestedlist');
                }            
                //End upload images linke side A side B and logo
                //             }
            }
            $this->Project->id = $projectid;
            $this->data = $this->Project->read();



            $project_type_id=$this->data['Project']['project_type_id'];
            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();
            $projecttypedetails=$this->ProjectType->find('first',array('conditions'=>"ProjectType.id=$project_type_id")); 


            $this->set('ProjectTypeId',$project_type_id);
            $this->data = array_merge($this->data,$projecttypedetails);

            // STEP: Get Maximum number comment types for project
             $condition = "CommentType.project_id IN(0,'".$projectid."') and CommentType.sequence_id > 0 and CommentType.sequence_id < 1000 and CommentType.active_status='1' and CommentType.delete_status='0' ";
			
            $maxnumbercomment = $this->CommentType->find('count',array("conditions"=>$condition));
			
            if($maxnumbercomment){

            }else{
                $maxnumbercomment=0;
            }
            $this->set('maxnumber_comment',$maxnumbercomment);
        }

        function downloadregcoinlist(){
            $this->layout = null;
            $this->autoLayout = false; 
            Configure::write('debug', '0');
            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            //for active menu display

            $this->set('page_url',"coinsetlist");


            App::import("Model", "CoinsHolder");
            $this->CoinsHolder =   & new CoinsHolder();



            # set help condition

            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid =$project_id;    


            if(!empty($this->data))

            {        //print_r($this->data);

                $val=$this->data['Companies']['searchkey'];
                $condition = "CoinsHolder.serialnum like '%$val%' OR Coinset.coinset_name  like '%$val%' OR Holder.screenname like '%$val%' ";

                //$condition = "CoinsHolder.serialnum like '%$val%'";    



            } 

            else

            {

                $condition = "CoinsHolder.project_id = '$projectid' AND CoinsHolder.delete_status='0'";

            }


            ##fetch data from CoinsHolder table for listing



            $this->CoinsHolder->bindModel(array('belongsTo'=>array(

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = CoinsHolder.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'

            )

            )));



            $field='';



            $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination 



            $this->Pagination->total= count($this->CoinsHolder->find('all',array("conditions"=>$condition)));    

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);            

            $this->CoinsHolder->bindModel(array('belongsTo'=>array(

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = CoinsHolder.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'

            )

            )));





            if($order == "CoinsHolder.id ASC"){

                $order = "CoinsHolder.id DESC";

            }

            $coinscoinlistdtlarr = $this->CoinsHolder->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));



            ##set Coinset data in variable            

            $this->set("coinlist",$coinscoinlistdtlarr);



        }


        /*
        * Function name   : regcoinset()
        * Description        : The action gettrigured by clicking on "add" button of "editholder" page to                         add coinset
        * Created On      : 22-08-11 (09:35pm)
        *
        */ 

        function regcoinset($holder_id){
            //Configure::write('debug',2);
            $this->session_check_user();

            $this->layout= 'new_admin_layout';

            // collect project name and project id
            $project_id=$this->Session->read("projectwebsite_id");    
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            //    collect user id
            $userid = $this->Session->read("User.User.id");

            //    get project details    
            $projectDetails = $this->getprojectdetails($project_id);

            App::import("Model", "Coinset");
            $this->Coinset =   & new Coinset();

            $condition = " Coinset.project_id='".$project_id."' AND Coinset.startserialnum >= '". $this->data['CoinsHolder']['coinserial'] ."' OR Coinset.endserialnum <= '". $this->data['CoinsHolder']['coinserial'] ."' and Coinset.active_status='1' and Coinset.delete_status='0'";
            $coinsets = $this->Coinset->find('first', array('conditions' => $condition));

            if (is_array($coinsets) and !empty($coinsets)) {
                $coinset_id = $coinsets['Coinset']['id'];
            }
            //print_r($coinsets);exit;
            if(!empty($this->data)){

                //$this->CoinsHolder->invalidFields();

                $serz = $this->data['CoinsHolder']['coinserial'];
                $serz=str_pad($serz,7,"0",STR_PAD_LEFT);

                $errorString ='';

                if (trim($this->data['CoinsHolder']['coinserial']) == '') {

                    $errorString .= "Please insert Coin Serial.<br/>";

                } else 
                    if ($projectDetails['Project']['coins_verificationshow'] == 1) {
                        if (trim($this->data['CoinsHolder']['code']) == '') {
                            $errorString .="Please insert code.<br/>";
                        }
                }
                //  Stop Duplicate entry of the coin

                //  Flag for duplicate entry
                $duplicateEntry = false;

                $getCoins = '';
                $coinExits = '';

                App::import("Model", "CoinsHolder");
                $this->CoinsHolder =   & new CoinsHolder();
                $getCoin = $this->CoinsHolder->find('all', array('conditions'=>array('CoinsHolder.holder_id'=>$holder_id)));

                if(!empty($getCoin)){
                    foreach($getCoin as $checkCoin){
                        if($this->data['CoinsHolder']['coinserial'] == $checkCoin['CoinsHolder']['serialnum']){

                            $errorString ="Sorry! Coin already taken.<br/>";

                        } 
                    }
                }

                if (trim($errorString) !='') {
                    $this->Session->setFlash($errorString,'default',array('class' => 'msgTXt'));

                } else 
                {

                    $this->data['CoinsHolder']['project_id'] = $project_id;
                    $this->data['CoinsHolder']['coinset_id'] = $coinset_id;
                    $this->data['CoinsHolder']['is_current_holder'] = '1';

                    $this->data['CoinsHolder']['holder_id']=$holder_id;
                    $this->data['CoinsHolder']['serialnum']=$serz;

                    App::import("Model", "CoinsHolder");
                    $this->CoinsHolder =   & new CoinsHolder();
                    // print_r($this->data['CoinsHolder']);exit;
                    if($this->CoinsHolder->save($this->data['CoinsHolder'])){
                        
                        // Update Holder member type as 'Holder' after registing coin       
                             App::import("Model", "MemberType");  
                            $this->MemberType =  & new MemberType();           
                            $holderarr['Holder']['id']=$holder_id;
                            $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_HOLDER, $project_id);
                            $holderarr['Holder']['member_type']= $member_type['MemberType']['id']; 
                            $this->Holder->save($holderarr);
                            
                        $this->Session->setFlash('The coin registered successfully.','default',array('class' => 'successmsg'));
                        if(isset($this->data['Action']['redirectpage'])){
                            // print_r($this->data['Action']['redirectpage']);exit;

                            $sessdata=$this->Session->read('newsortingby');
                            $this->redirect('/admins/editholder/'.$holder_id);


                        } else {
                            $this->redirect('/admins/editholder'.$holder_id);
                        }

                    }else{
                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));
                    }
                }
            }
        }    

        /* 
        * Function name   : getprojectlist()
        * Description : This function used to list project  related to project type
        * Created On      : 16-02-11 (05:45am)
        */


        function getprojectlist($project_site_Type_ids){
            $this->layout= 'new_admin_layout';
            ##check admin session live or not
            $this->session_check_admin();

            ##Used for default Pagination.
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    
            }

            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();    
            ##fetch data from Project table for listing
            $field='';

            $condition = array("Project.delete_status" => '0', "ProjectType.site_type_id" => "$project_site_Type_ids");
            $this->ProjectType->bindModel(array('hasOne'=>array('Project')));
            $projectdata = $this->ProjectType->find('all',array("conditions"=>$condition));
            //print_r($projectdata);die;
            // and ProjectType.site_type_id='$project_site_Type_ids'

            $this->Pagination->sortByClass    = 'Project'; ##initaite pagination
            $this->ProjectType->bindModel(array('hasOne'=>array('Project')));
            $this->Pagination->total= count($this->ProjectType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            $order="Project.id";

            /*if($this->data['Admins']['admincontrol']=='all'){
            $limit = $this->Pagination->total;
            }*/    

            $this->ProjectType->bindModel(array('hasOne'=>array('Project')));
            $projectdataarr = $this->ProjectType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable


            $this->set("projectdata",$projectdataarr);

            # set help condition
            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '39'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition
        }

        function getcompanylist($company_type_id=null){
            $this->session_check_admin();
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }

            ##import Company  model for processing
            App::import("Model", "Company");
            $this->Company =   & new Company();    
            ##fetch data from Company table for listing
            $field='';
            //$condition = "Company.delete_status = '0' AND Company.project_id = '0'";
            $condition = "Company.delete_status = '0' AND Company.company_type_id='$company_type_id'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (Company.company_name LIKE '%".$searchkeyword."%'   )";
            }
            $this->Pagination->sortByClass    = 'Company'; ##initaite pagination 

            $this->Company->bindModel(array('belongsTo'=>array(
            'CompanyType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Company.company_type_id = CompanyType.id'
            )
            )));

            $this->Pagination->total= count($this->Company->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->Company->bindModel(array('belongsTo'=>array(
            'CompanyType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Company.company_type_id = CompanyType.id'
            )
            )));

            $companydtlarr = $this->Company->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
            if($companydtlarr==false){  
                // if no compay associated with cpmay type 

                $company_type_name= $this->getCompanyTypeName($company_type_id);
                $this->set("company_type_name",$company_type_name);
            }
            $this->set("companydata",$companydtlarr);
            $this->set("company_type_id",$company_type_id);

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '62'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);




        }

        function getcontactslist($contact_type_id=null){



            $this->session_check_admin();
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }


            ##import Company  model for processing
            App::import("Model", "Contact");
            $this->Contact =   & new Contact();    
            ##fetch data from Contact table for listing
            $field='';
            //$condition = "Contact.delete_status = '0' AND Contact.project_id = '0'";
            $condition = "Contact.delete_status = '0'  AND Contact.contact_type_id='$contact_type_id'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (Contact.firstname LIKE '%".$searchkeyword."%' OR Contact.lastname LIKE '%".$searchkeyword."%' OR Contact.email LIKE '%".$searchkeyword."%' OR ContactType.contact_type_name LIKE '%".$searchkeyword."%' OR Contact.mobile LIKE '%".$searchkeyword."%'  )";
            }

            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='company_name'){
                $this->Pagination->sortByClass    = 'Company'; ##initaite pagination
            }else if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='contact_type_name'){
                    $this->Pagination->sortByClass    = 'ContactType'; ##initaite pagination
                }else{
                    $this->Pagination->sortByClass    = 'Contact'; ##initaite pagination 
            }


            ##relation ship with contact type and company table with contacts
            $this->Contact->bindModel(array('belongsTo'=>array(
            'ContactType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Contact.contact_type_id = ContactType.id'
            ),'Company'=>array(
            'foreignKey'=>false,
            'conditions'=>'Contact.company_id = Company.id'
            )
            )));

            $this->Pagination->total= count($this->Contact->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $this->Contact->bindModel(array('belongsTo'=>array(
            'ContactType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Contact.contact_type_id = ContactType.id'
            ),'Company'=>array(
            'foreignKey'=>false,
            'conditions'=>'Contact.company_id = Company.id'
            )
            )));

            $contactdtlarr = $this->Contact->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable

            $this->set("contactdata",$contactdtlarr);


            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '63'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition
        }  
            
        function eventlist(){
            
            $this->session_check_admin();
            $project_id = '1';
	        $this->set('page_url','eventlist');
            $this->set("hlpdata",$this->getHelpContent(20));               
            $projectid = $project_id;
			App::import("Model", "Event");
            $this->Event =   & new Event();
			$this->Event->bindModel(array('belongsTo'=>array(
            'MemberType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Event.member_type = MemberType.id'   
            )
			)));
            //$current_date=date('Y-m-d');
			$date = date('Y-m-d h:i:s ', time());
            if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey']){
                $searchkeyword = $this->data['Admin']['searchkey'];
                $condition = "CommunicationTask.project_id = '".$project_id."' and CommunicationTask.task_startdate>='".$current_date."' and CommunicationTask.delete_status ='0' and (CommunicationTask.event_title LIKE '%".$searchkeyword."%' OR CommunicationTask.event_type  LIKE '%".$searchkeyword."%' )";
            }else{
                $condition = "Event.project_id = '".$project_id."' and Event.delete_status ='0' and Event.starttime >='".$date."'";
            }	

            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){
                  $_GET["sortBy"]="starttime ";
                  $_GET["direction"]="ASC";
            }
            
            $this->Pagination->sortByClass    = 'Event'; ##initaite pagination 
            $this->Pagination->total= count($this->Event->find('all',array("conditions"=>$condition)));
			$this->Event->bindModel(array('belongsTo'=>array(
            'MemberType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Event.member_type = MemberType.id'   
            )
			)));
            list($order,$limit,$page) = $this->Pagination->init($condition);
            $group="event_id";
			
			//echo $condition;exit;
            $eventArray = $this->Event->find('all',array("conditions"=>$condition,'order'=>$order,'limit' => $limit, 'page' => $page));
            $this->set("eventdata",$eventArray);

        }   

        

        /**
        * Event Module Fucntions start here
        **********************************************************************************************************************************/

        /*
        * Function name   : eventlist()
        * Description : This function used to list evnets of related project
        * Created On      : 11-08-11 
        *
        */ 
        
        
        
        function pasteventlist(){
            
            $this->session_check_admin();
            $project_id = '1';
            $this->set('page_url','eventlist');
			$this->set("hlpdata",$this->getHelpContent(20)); 
             $projectid = $project_id;
			##fetch data from Company table for listing
            $field='';

            App::import("Model", "Event");
            $this->Event =   & new Event();
			$this->Event->bindModel(array('belongsTo'=>array(
            'MemberType'=>array(
            'foreignKey'=>'member_type'            
            )
			)));
            //$current_date=date('Y-m-d');
			$date = date('Y-m-d h:i:s ', time());
            if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey']){
                $searchkeyword = $this->data['Admin']['searchkey'];
                $condition = "CommunicationTask.project_id = '".$project_id."' and CommunicationTask.task_startdate>='".$current_date."' and CommunicationTask.delete_status ='0' and (CommunicationTask.event_title LIKE '%".$searchkeyword."%' OR CommunicationTask.event_type  LIKE '%".$searchkeyword."%' )";
            }else{
                $condition = "Event.project_id = '".$project_id."' and Event.delete_status ='0' and Event.starttime <='".$date."'";
            }	

            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){
                  $_GET["sortBy"]="starttime ";
                  $_GET["direction"]="ASC";
            }
            
            $this->Pagination->sortByClass    = 'Event'; ##initaite pagination 
            $this->Pagination->total= count($this->Event->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition);
            $group="event_id";
			$this->Event->bindModel(array('belongsTo'=>array(
            'MemberType'=>array(
            'foreignKey'=>'member_type'            
            )
			)));
			//echo $condition;exit;
            $eventArray = $this->Event->find('all',array("conditions"=>$condition,'order'=>$order,'limit' => $limit, 'page' => $page));
				//$this->pl($eventArray);
				
            $this->set("eventdata",$eventArray);

        }
        
        
        
        function calendar($year = null, $month = null)
        {
            
            $this->session_check_admin();
            $project_id ='0';
            $current_domain =$_SERVER['HTTP_HOST'];
			if($current_domain == "192.168.1.21"){
			      $current_domain=$current_domain."/cckiller";
			}	  
			$current_domain = $current_domain;
			$this->set('current_domain',$current_domain);
			
            App::import("Model", "Event");
            $this->Event =   & new Event();
            
            $current_date=date('Y-m-d');
            
             App::import("Model", "RecurringEvent");
             $this->RecurringEvent =   & new RecurringEvent();
           // get all the events from the database.
            $events = $this->RecurringEvent->find('all',array('conditions' => "RecurringEvent.project_id='".$project_id."' and RecurringEvent.active_status='1' and RecurringEvent.delete_status='0'"));

            // insert rows to an array.
            for ($a=0; count($events)> $a; $a++){
                
            $validate_event = $this->Event->find('all',array('conditions' => "Event.id='".$events[$a]['RecurringEvent']['event_id']."' and Event.active_status='1' and Event.delete_status='0'"));
            
                if(!empty($validate_event))
                {
                    
                $starttime=date('Y-m-d H:i:s', strtotime($events[$a]['RecurringEvent']['start_date']));
                $endtime=date('Y-m-d H:i:s', strtotime($events[$a]['RecurringEvent']['end_date']));
                
                $event_startdate=$events[$a]['RecurringEvent']['start_date'];                
                  if($event_startdate >= $current_date)				  		
                         $url="http://".$current_domain."/admins/eventcreate/";
                    else
                        $url="http://".$current_domain."/admins/pasteventcreated/";                          

                $rows[]= '{"id":'.$events[$a]['RecurringEvent']['event_id'].', "title":"'.$events[$a]['RecurringEvent']['event_title'].'", "start":"'.$starttime.'","end":"'.$endtime.'","url":"'.$url.$events[$a]['RecurringEvent']['id'].'", "className":"'.$events[$a]['RecurringEvent']['event_type'].'","type":"'.$events[$a]['RecurringEvent']['event_type'].'"}';
                }

            }

            // convert the array to a string.
            if (isset($rows)){

				$convertojson = implode(",", $rows);
            }else{
					$convertojson ="";
			}
//		$this->pl($convertojson);
            // pass the string to the json variable. this will then be passed  and printed to the javascript code.
			
            $this->set('json',$convertojson); 
        }

        
        
        function rsvp($rec_event_id=null){
        	    
            $this->session_check_admin();
            $project_id = '1';
            $this->set("hlpdata",$this->getHelpContent(20));            
            $projectid = $project_id;
            $field='';
            App::import("Model", "RecurringEvent");
            $this->RecurringEvent =   & new RecurringEvent();			
            App::import("Model", "EventInvitation");
            $this->EventInvitation =   & new EventInvitation();
            if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey']){
                $searchkeyword = $this->data['Admin']['searchkey'];
                $condition = "EventInvitation.delete_status = '0' AND EventInvitation.project_id = '".$project_id."' and EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.in_rsvp='1' and EventInvitation.rec_event_id!=''";

            }else{
                $condition = "EventInvitation.delete_status = '0' AND EventInvitation.project_id = '".$project_id."' and EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.in_rsvp='1' and EventInvitation.rec_event_id!=''";
            }
            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){
                  $_GET["sortBy"]="id";
                  $_GET["direction"]="desc";
            }
            $this->Pagination->sortByClass    = 'RecurringEvent'; ##initaite pagination 
            
                      
            $this->RecurringEvent->bindModel(array('belongsTo'=>array(
            'EventInvitation'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.rec_event_id = RecurringEvent.id'
            ),
            'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.invite_to_holder_id = Holder.id'
            ),
            'MemberType'=>array(
            'foreignKey'=>false,
            'conditions'=>'MemberType.id = Holder.member_type'
            ))));
            
            $this->Pagination->total= count($this->RecurringEvent->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            
            $this->RecurringEvent->bindModel(array('belongsTo'=>array(
            'EventInvitation'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.rec_event_id = RecurringEvent.id'
            ),
            'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.invite_to_holder_id = Holder.id'
            ),
            'MemberType'=>array(
            'foreignKey'=>false,
            'conditions'=>'MemberType.id = Holder.member_type'
            )
            )));

            $eventArray = $this->RecurringEvent->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));          
            $this->set("eventdata",$eventArray);                                       
            $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$project_id."' and EventInvitation.in_waitlist='1'";
            $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    
            
            if(empty($check_waiting_list))            
                $waiting_list=0;
            else
                $waiting_list=1;
         
            $this->set('waiting_list', $waiting_list); 
        }
        
        
        function waitlist($rec_event_id=null){
            $this->session_check_admin();
            $project_id = '0';            
            $this->set('rec_event_id',$rec_event_id);
			$this->set("hlpdata",$this->getHelpContent(20));
            $projectid = $project_id;
            $field='';
            App::import("Model", "RecurringEvent");
            $this->RecurringEvent =   & new RecurringEvent();

            App::import("Model", "EventInvitation");
            $this->EventInvitation =   & new EventInvitation();

            
            if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey']){

                $searchkeyword = $this->data['Admin']['searchkey'];
                $condition = "EventInvitation.delete_status = '0' AND EventInvitation.project_id = '".$project_id."' and EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.in_waitlist='1'";

            }else{

                $condition = "EventInvitation.delete_status = '0' AND EventInvitation.project_id = '".$project_id."' and EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.in_waitlist='1'";

            }
            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){
                  $_GET["sortBy"]="id";
                  $_GET["direction"]="desc";
            }
            $this->Pagination->sortByClass    = 'RecurringEvent'; ##initaite pagination 
            

            
            $this->RecurringEvent->bindModel(array('belongsTo'=>array(
            'EventInvitation'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.rec_event_id = RecurringEvent.id'
            ),
            'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.invite_to_holder_id = Holder.id'
            ),
            'MemberType'=>array(
            'foreignKey'=>false,
            'conditions'=>'MemberType.id = Holder.member_type'
            ),             
            )));
            
            $this->Pagination->total= count($this->RecurringEvent->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            
           $this->RecurringEvent->bindModel(array('belongsTo'=>array(
            'EventInvitation'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.rec_event_id = RecurringEvent.id'
            ),
            'Holder'=>array(
            'foreignKey'=>false,
            'conditions'=>'EventInvitation.invite_to_holder_id = Holder.id'
            ),
            'MemberType'=>array(
            'foreignKey'=>false,
            'conditions'=>'MemberType.id = Holder.member_type'
            )
            )));
            $eventArray = $this->RecurringEvent->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));          
            $this->set("eventdata",$eventArray);

        }
        
               
        function send_invite($tempid=''){

            ##check admin session live or not
            $this->session_check_admin();
            $projectid = '1';
            $current_domain= $_SERVER['HTTP_HOST']; 
            $this->set("current_domain",$current_domain);            
			$projectDetails=$this->getprojectdetails($projectid);
            App::import("Model", "EmailTemplate");
            $this->EmailTemplate =   & new EmailTemplate();    
			//$rec_event_id=$this->Session->read("rec_event_id");
            //$this->set('rec_event_id',$rec_event_id);
			$event_id=$this->Session->read("event_id");
            $this->set('event_id',$event_id);
            $tomail = "";
            $checkempty =true;           
            if(!empty($this->data)){   
               
               
			    if($this->data['EmailTemplate']['subject']=="" || $this->data['EmailTemplate']['content']=="" || $this->data['EmailTemplate']['toid']=="" || $this->data['EmailTemplate']['fromid']==""){
                    $this->Session->setFlash("All the fields are mandatory.",'default',array('class' => 'msgTXt'));
                    $checkempty = false;
                }                     
                if($checkempty== true){     
                    $sendflag = true;
                    $errorwith="";
                    $mailtempid = $this->data['EmailTemplate']['id'];    
                    $mailsubject = $this->data['EmailTemplate']['subject'];    
                    $mailcontent = $this->data['EmailTemplate']['content'];
                    $frommail = $this->data['EmailTemplate']['fromid'];  
                    App::import("Model", "CommunicationTask");
                    $this->CommunicationTask =   & new CommunicationTask();
                    $send_type="event";                   
                            $condition = "id='1'";
                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));
                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            
                            $mailcontent.=$mailfooter;
                        //STEP : GET EMAIL TEMP DETAILS
                         $conditiontemp = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND EmailTemplate.id = '$mailtempid'";

                        $templatearr = $this->EmailTemplate->find('first',array("conditions"=>$conditiontemp));
						$mailcontent=$this->replaceImgPathInEmailContent($mailcontent);                       
                        $task_email_sent_count=0;
                        $task_email_senterror_count=0;
                        $fromname = $this->data['EmailTemplate']['fromid'];   
                        $tomail = $this->data['EmailTemplate']['toid'];
                        $toids = explode(",",$tomail);
                        
                        App::import("Model", "CommunicationTaskExecutionReport");    
                        $this->CommunicationTaskExecutionReport =   & new CommunicationTaskExecutionReport();
                        foreach($toids as $eachid){

                             /**
                             * New Email Temp replacement code for data Elements 
                             */
                             //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    
                                $dataEleValuesArray = $this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectDetails, $eachid);
                             //STEP : SET VALUES TO REQUIRED DATA ELEMENTS
                              //   $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);
                             //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE
                                $mailsubject1=$this->EmailTemplates->insertDataElementValuesToContent($mailsubject);
                                $mailcontent1=$this->EmailTemplates->insertDataElementValuesToContent($mailcontent);

                            if(!$this->Sendemail->sendMailContentWithCC($eachid,$frommail,$mailsubject1,$mailcontent1,$fromname, $templatearr['EmailTemplate']['send_cc_email_to'])){
                                $sendflag = false;
                                $errorwith = $eachid.','.$errorwith;
                                $task_email_senterror_count++;
                                $email_status="not sent";
                            }else{
                                 $task_email_sent_count++;
                                 $email_status="sent";
                                 
                             
                                
                            }
                            $errorwith = substr($errorwith,0,-1);
                         
                        }                        
                         // STEP : UPDATE TASK History ARRAY                   
                       
                      if($this->data['id_list']!="")
                          {
                              App::import("Model", "EventInvitation");
                              $this->EventInvitation =   & new EventInvitation();
                          $rec_event_id = '0';
						  unset($event_inv['EventInvitation']['id']);
//                              $event_inv['EventInvitation']['id']='';
                              $event_inv['EventInvitation']['project_id']=$projectid;
                              $event_inv['EventInvitation']['event_id']=$event_id;							
                              $event_inv['EventInvitation']['rec_event_id']=$rec_event_id;
                              $event_inv['EventInvitation']['invite_status']='0';
                              $event_inv['EventInvitation']['active_status']='1';
                              $event_inv['EventInvitation']['delete_status']='0';
                              $event_inv['EventInvitation']['invitation']='1';

                              for($i=0;$i<count($this->data['id_list']);$i++)
                              {
                                  $val=$this->data['id_list'][$i];
                                  
                                  $val=explode('_',$val);
                                                              
                                  if($val[0]=="contact")
                                  {
                                      $event_inv['EventInvitation']['invite_to_contact_id']=$val[1];
                                      $event_inv['EventInvitation']['is_contact']='1';
                                      
                                      $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.invite_to_contact_id='".$val[1]."'";
                                  }
                                  else
                                  if($val[0]=="member")
                                  {
                                      $event_inv['EventInvitation']['invite_to_holder_id']=$val[1];
                                      $event_inv['EventInvitation']['is_contact']='0';

                $cond="EventInvitation.event_id='".$event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.invite_to_holder_id='".$val[1]."'";
                                  }
                                  
                                  
                                  $existing_data=$this->EventInvitation->find('first',array('conditions'=>$cond));
                                  if(!empty($existing_data))
                                    $event_inv['EventInvitation']['id']=$existing_data['EventInvitation']['id'];
									echo '<pre>';print($event_inv);
                                    $this->EventInvitation->save($event_inv['EventInvitation']);
                              }
                              
                          }
                       
                          
                        
                        if($sendflag==true){
                            $this->Session->setFlash('Mail sent successfully.','default', array('class' => 'successmsg'));
                        }else{
                            $this->Session->setFlash("Error in Mail sending with email id $errorwith. Please try again",'default',array('class' => 'msgTXt'));
                        }

                        ##setting action for save & apply        
                        if(isset($this->data['Action']['redirectpage'])){
                            $this->redirect(array('controller' =>'admins','action'=>'send_invite'));
                        }else{
							 $this->redirect(array('controller' =>'admins','action'=>'send_invite',$tempid));

                        }
                        
      
                }
            }

            if($tempid || isset($this->data['EmailTemplate']['id'])){
                if($this->data['EmailTemplate']['id']){
                    $tempid = $this->data['EmailTemplate']['id'];
                }
                $this->EmailTemplate->id = $tempid;
                $this->data = $this->EmailTemplate->read();
            }
            $chekret = $this->projectdetailbyid($projectid);
            $this->set('frmid',$chekret[0]['Sponsor']['email']);
            $this->set('toid',$tomail);

            $this->set('projectid',$projectid);
            
            $is_event_temp=0;			
            $this->customtemplatelisting($projectid,$is_event_temp);
            
            
            $get_site_type_id=$this->Project->query("select site_type_id from project_types where id=".$chekret[0]['Project']['project_type_id']);
            $site_type_id=$get_site_type_id[0]['project_types']['site_type_id'];
            
            // Set Current project id
            $this->set('currentprojectid',$site_type_id); 
            // Get Project Types
            $this->projecttypedropdown(); 
            //Get Company Type Drop Down
            $this->companytypedropdown($projectid); 
            //Get Company Type Drop Down   
            $this->contacttypedropdown($projectid);          
			$this->set("hlpdata",$this->getHelpContent(12));  
            # set help condition   
            // Set memeber types
            $this->set('member_type',$this->getMemberTypes($projectid,true));
            
            App::import("Model", "EventInvitation");
            $this->EventInvitation =   & new EventInvitation();    
        $rec_event_id = '';
            $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.in_waitlist='1'";
            $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    
            
            if(empty($check_waiting_list))            
                $waiting_list=0;
            else
                $waiting_list=1;
         
            $this->set('waiting_list', $waiting_list); 
            

        }     
        
        
        function event_pages($page=''){

            //Configure::write('debug', 2);    
            ##check user session live or not
            $this->session_check_admin();
			$para_arg=$this->params['pass'];
			$para_val=$para_arg['0'];
			$this->set('para_val',$para_val);

            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            //for active menu display
            $this->set('page_url','eventlist');
            
            ## Script used for default pagination
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }    


            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   
             
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);            

            $project_name=$projectDetails['Project']['project_name'];
            $this->set('project_name',$project_name);

            $projectid = $project_id;


            App::import("Model", "RecurringEvent");
            $this->RecurringEvent =   & new RecurringEvent();
            
            App::import("Model", "Content");
            $this->Content =   & new Content();
            
            $current_date=date('Y-m-d');
            
            $fields="RecurringEvent.id,RecurringEvent.event_title,RecurringEvent.start_date,RecurringEvent.starttime,RecurringEvent.show_to_invitees_only,RecurringEvent.active_status,RecurringEvent.event_detail_page,RecurringEvent.sponsor_detail_page,RecurringEvent.inquiry_detail_page,Content.id,Content.title";

            if($page=="detail")
            {           
                if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey'])
                {
                    $searchkeyword = $this->data['Admin']['searchkey'];
                    $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.delete_status ='0' and RecurringEvent.event_detail_page!='' ";
                }
                else
                {
                     $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.delete_status ='0' and RecurringEvent.event_detail_page!='' ";
                }       
                $bind_condition="Content.id = RecurringEvent.event_detail_page";
				$pageTitle = 'Event Pages';
            }
            
            if($page=="sponsor")
            {           
                if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey'])
                {
                    $searchkeyword = $this->data['Admin']['searchkey'];
                    $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.delete_status ='0' and RecurringEvent.sponsor_detail_page!='' ";
                }
                else
                {
                     $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.delete_status ='0' and RecurringEvent.sponsor_detail_page!='' ";
                }      
                $bind_condition="Content.id = RecurringEvent.sponsor_detail_page";
				$pageTitle = 'Sponsor Pages';     
            }
            
            if($page=="inquiry")
            {           
                if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey'])
                {
                    $searchkeyword = $this->data['Admin']['searchkey'];
                    $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.delete_status ='0' and RecurringEvent.inquiry_detail_page!='' ";
                }
                else
                {
                     $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.delete_status ='0' and RecurringEvent.inquiry_detail_page!='' ";
                } 
                $bind_condition="Content.id = RecurringEvent.inquiry_detail_page"; 
				$pageTitle = 'Inquiry Pages';           
            }

			
            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){
                  $_GET["sortBy"]="id";
                  $_GET["direction"]="ASC";
            }
            
			$this->RecurringEvent->bindModel(array('belongsTo'=>array(
            'Content'=>array(
            'foreignKey'=>false,
            'conditions'=>$bind_condition
            )
            )));
            $this->Pagination->sortByClass    = 'RecurringEvent'; ##initaite pagination 
            $this->Pagination->total= count($this->RecurringEvent->find('all',array("conditions"=>$condition,'fields'=>$fields)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$fields);

            
            $this->RecurringEvent->bindModel(array('belongsTo'=>array(
            'Content'=>array(
            'foreignKey'=>false,
            'conditions'=>$bind_condition
            )
            )));
            
            //$group="event_id";
          $eventArray = $this->RecurringEvent->find('all',array("conditions"=>$condition,'fields'=>$fields,'order'=>$order,'limit' => $limit, 'page' => $page));
           								
            $this->set("eventdata",$eventArray);
            $this->set("pageTitle",$pageTitle);

        }   
        
        function event_types(){
            //Configure::write('debug', 2);
            $this->session_check_admin();
           //$this->set('event_type_id',$recid);            
            $project_id = '0';
            $this->set('projectid',$project_id);                   
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    
            }
			$this->set("hlpdata",$this->getHelpContent(20));
            # set help condition                
           $projectid = $project_id;
		   	App::import("Model", "EventType");
            $this->EventType =   & new EventType();    
		
            if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey'])
            {	
                 $searchkeyword = $this->data['Admin']['searchkey'];
                $condition = "EventType.delete_status ='0' and EventType.event_type_desp like'%".$searchkeyword."%' or EventType.event_type like'%".$searchkeyword."%' ";
            }
            else
            {
                 $condition = "EventType.delete_status ='0'";
            } 
                       

            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){
                  $_GET["sortBy"]="id";
                  $_GET["direction"]="ASC";
            }
            
            $this->Pagination->sortByClass    = 'EventType'; ##initaite pagination 
            $this->Pagination->total= count($this->EventType->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition);
            $eventtypedata = $this->EventType->find('all',array("conditions"=>$condition,'order'=>$order,'limit' => $limit, 'page' => $page));
           
            $this->set("eventtypedata",$eventtypedata);

        }   
        
             
        function addeventtype($recid=null){

            //Configure::write('debug', 2);
            ##check admin session live or not
            $this->session_check_admin();
            $this->set('event_type_id',$recid);
            
            $projectid = '1';
            $this->set('projectid',$projectid);        
            ##import project type model for processing
            App::import("Model", "EventType");
            $this->EventType =   & new EventType();
            ##check empty data
            if(!empty($this->data)) {
                //print_r($this->data);die;
                $this->EventType->set($this->data);
                #check server side validation
                $this->EventType->invalidFields();
                #save data in project type table
                $recid  = $this->data['EventType']['id'];
                $event_type  = $this->data['EventType']['event_type'];
                $this->data['EventType']['project_id']=$projectid;                         
                if($recid=="")
                {
				   $condition = "EventType.event_type = '".$event_type."' AND EventType.project_id ='".$projectid."' AND  EventType.delete_status = '0'";
                    $etdata = $this->EventType->find('all',array("conditions"=>$condition));                
                }
                else
                {
                    $condition = "EventType.event_type = '".$event_type."' AND EventType.project_id ='".$projectid."' AND  EventType.delete_status = '0' and EventType.id!='".$recid."'";
                    $etdata = $this->EventType->find('all',array("conditions"=>$condition));                
                }
                
                if(!$etdata){
                   
                        if($this->EventType->Save($this->data))
                        {
                            $this->Session->setFlash('Event Type updated Successfully.','default', array('class' => 'successmsg'));                            
                        }
                        else
                        {
                            $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));
                        }
      
                }else{

                    $this->Session->setFlash('Event Type with same name already exists.','default',array('class' => 'msgTXt'));
                    $this->redirect(array('controller'=>'admins','action'=>'addeventtype',$recid));
                }

                if(isset($this->data['Action']['redirectpage'])){

                    //$sessdata=$this->Session->read('newsortingby');
                    $this->redirect(array('controller'=>'admins','action'=>'event_types'));
                }else
                {
                    $this->redirect("/admins/addeventtype/$recid");
                }

            }
            
            if($recid!="")
            {
                $this->EventType->id = $recid;
                $this->data = $this->EventType->read();
                $this->set("event_type_id", $recid);
            }
			 $this->set("hlpdata",$this->getHelpContent(58));
        }    
        
        
        
          /**
        * Function to get all content pages for by ajax call 
        * 
        * @param mixed $project_id  - 
        * @param mixed $selectedid
        */
        function getcontentpagesbyajax($projectid, $selectedid='',$temp_type=''){ 
            $this->layout = false;
            
            $this->set("selectedid",$selectedid);
            
            if($temp_type=="event_detail" || $temp_type=="event_sponsor" || $temp_type=="event_inquiry")
            {
                $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments') and type='".$temp_type."'";
            }
            else
            {
            
            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments')";
            }
            
            App::import("Model", 'Content');
            $this->Content =   & new Content();    
            $contentpages = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));
            $this->set('contentpages',$contentpages);

           
        }
        

        /*
        * Function name   : eventcreate()
        * Description : This function used to create event for project
        * Created On      : 11-08-11 
        *
        */     

        function eventcreate($eventid=''){

             $this->session_check_admin();
             $project_id = '1';
			 if($eventid > 0 ){
			 	$this->set('eid',$eventid);	
				 $this->Session->write("event_id",$eventid);
			} 
             App::import("Model", "Event");
            $this->Event =  & new Event(); 
            //for active menu display
            $this->set('page_url','editevent');
            
            $current_domain= $_SERVER['HTTP_HOST'];
            $this->set('current_domain',$current_domain);
			$this->set("hlpdata",$this->getHelpContent(20));  
            $projectid = $project_id;
			$this->set('projectid',$projectid);
			$projectDetails = $this->getprojectdetails($project_id);    
			$isWordPress = $projectDetails['Project']['is_wordpress_page'];
			$this->set('isWordPress',$isWordPress);	
            ##check empty data

            if(!empty($this->data)) {  
       			$this->data['Event']['project_id'] = $projectid;
                $this->Event->set($this->data);
                $errormsg = $this->Event->invalidFields();
                if(!$errormsg){
                    if($this->data['Event']['eventlogo']['name'] !=''){
                        $ptname = $projectDetails['Project']['project_name']; //$this->data['Project']['projectname'];
                         $filePath =  'img/project/uploads' ;
						$this->File->setDestPath($filePath);
                        $file_name1 = $this->File->setFileName($this->data['Event']['eventlogo']['name']);                   
                        $extDot = explode(".",$this->data['Event']['eventlogo']['name']);
                        $ext = $extDot[1];
                        if($ext=='bmp')
                        {
                            $this->Session->setFlash('Please upload jpg,gif,png file','default',array('class' => 'msgTXt'));
                            $this->redirect(array("controller"=>"admins","action"=>"eventcreate"));
                        }

                        $tmp1 = $this->data['Event']['eventlogo']['tmp_name'];
                        $width = 150;
                        $height = 150;

                        // Get new dimensions
                        list($width_orig, $height_orig) = getimagesize($tmp1);
                         
                        $ratio_orig = $width_orig/$height_orig;

                        if ($width/$height > $ratio_orig) {
                            $width = $height*$ratio_orig;
                        } else {
                            $height = $width/$ratio_orig;
                        }

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,$width."x".$height);
						$this->data['Event']['small_pic'] = $fileNamesidea;
                        $this->data['Event']['large_pic'] = $fileNamesidea;
                    }
                    $eid = "";                    
                    $etitle = $this->data['Event']['title'];
                    $data = explode("-", $this->data['Event']['starttime']);
                    $date = new DateTime();
                    $date->setDate($data['2'], $data['0'], $data['1']);
                    $sdt= $date->format("Y-m-d");
                    
                    // $dt=date("Y-m-d", strtotime($this->data['Event']['starttime']));
                    $sdate=  $sdt." ".$this->data['Event']['stime'];
                    $new_sdate=date("Y-m-d H:i:s", strtotime($sdate));
                    $this->data['Event']['starttime']=$new_sdate; // $date->format("Y-m-d H:i:s"); 

                    // $etitle = $this->data['Event']['endtime'];
                    $data = explode("-", $this->data['Event']['endtime']);
                    $date = new DateTime();
                    $date->setDate($data['2'], $data['0'], $data['1']);
                    $edt= $date->format("Y-m-d");

                    $edate=  $edt." ".$this->data['Event']['etime'];
                    $new_edate=date("Y-m-d H:i:s", strtotime($edate));
                    $this->data['Event']['endtime']= $new_edate;  
                    
                    $end_by_date = '';

					if(!empty($this->data['Event']['end_by_date'])) {

						$data = explode("-", $this->data['Event']['end_by_date']);
						$date = new DateTime();					
						$date->setDate($data['2'], $data['0'], $data['1']);
						$end_by_date= $date->format("Y-m-d");
					}
                    $this->data['Event']['task_end_by_date']= $end_by_date;  
                    
                    $recur_arr=array();
                    $event_arr=array();
                   
                    if($this->Event->Save($this->data['Event'])){
                       
                        if($this->data['Event']['id']=="" || $this->data['Event']['id']==NULL || $this->data['Event']['id']=="0")
                        {
                            $event_id=$this->Event->getLastInsertID();
                            $create_unique_events=1;
                        }
                        else
                        {
                            $event_id=$this->data['Event']['id'];
                            $create_unique_events=0;
                        }
                                               
                        $recur_arr=$this->data['Event'];
                        $recur_arr['event_id']=$event_id;
                        $recur_arr['event_title']=$this->data['Event']['title'];
                        $recur_arr['max_attendees_start']=0;
                        $recur_arr['show_attendees_start']=$this->data['Event']['max_attendees_start'];                        
                        $current_day=date('Y-m-d');
                        $start_time=strtotime($this->data['Event']['stime']);
                        $end_time=strtotime($this->data['Event']['etime']);                        
                        $start_time=date("H:i:s", $start_time);
                        $end_time=date("H:i:s", $end_time);                        
                        $event_pages_content=0;

                        if($create_unique_events==1)
                        {
                           //   echo '<pre>'; print_r($this->data);    
						   
                            if((empty($this->data['Event']['recur_pattern'])) || $this->data['Event']['recur_pattern']=="" || $this->data['Event']['recur_pattern']=="None")
                            {
								//before adding events delte any existing same events
								 $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' ");
                                $recur_arr['id']=""; 
                                $recur_arr['event_title']=$recur_arr['event_title']." ".date('m-d-Y', strtotime($this->data['Event']['starttime']));
                                $recur_arr['start_date']=$this->data['Event']['starttime'];
                                $recur_arr['end_date']=$this->data['Event']['endtime'];                                
                                if($event_pages_content>=1)
                                {
                                    if($this->data['Event']['event_detail_page']!="")
                                        $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                    if($this->data['Event']['inquiry_detail_page']!="")
                                        $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                    
                                }
                                                                                              
                                $this->RecurringEvent->Save($recur_arr);                                
                                $event_pages_content++;                                                             
                            }
                            else                
                            if($this->data['Event']['recur_pattern']=="Daily")
                            {                          
                               
                                //before adding events delte any existing same events
                                $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' ");                                                      
                                
                                $daily_arr_all=$this->RecurringEvent->initDailyRecurPattern($this->data['Event']);    
                                
                                for($j=0;$j<count($daily_arr_all);$j++)
                                {     
                                    if($daily_arr_all[$j]['task_is_done']==0)
                                    {
                                        $recur_arr['id']=""; 
                                        $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($daily_arr_all[$j]['task_last_execution_date']));
                                        $recur_arr['start_date']=$daily_arr_all[$j]['task_last_execution_date']." ".$start_time;
                                        $recur_arr['end_date']=$daily_arr_all[$j]['task_last_execution_date']." ".$end_time;;
                                        
                                        if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                        
                                        $this->RecurringEvent->Save($recur_arr);
                                        
                                        $event_pages_content++;
                                    }
                                    else
                                        break;
                                }
                                
                                $last= count($daily_arr_all)-1;                           
                            //    echo "<pre>"; print_r($daily_arr_all[$last]); echo "</pre>";
                                $daily_arr=$daily_arr_all[$last];
                                
                                $today=date('Y-m-d');
                                

                                
                                if($daily_arr['task_is_done']==0 || empty($daily_arr))
                                {
                                   
                                    $total_rem_occ=$this->data['Event']['task_end_after_occurrences']-$daily_arr['task_execution_count'];                                 
                                    $taskTotalOccurenceCount=$daily_arr['task_execution_count'];
                                    $taskTaskEndAfterOccurrences=$this->data['Event']['task_end_after_occurrences'];
                                    $taskStartDate=$this->data['Event']['starttime'];
                                    $taskDailyPattern=$this->data['Event']['daily_pattern'];
                                    $taskDailyEveryNumofDays=$this->data['Event']['daily_every_noof_days'];
                                    $taskTaskEndByDate="0000-00-00";
                                    
                                    if($this->data['Event']['task_end']=="by_no_date")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                        $taskTotalOccurenceCount=0;  
                                        $taskTaskEndAfterOccurrences=0;                                  
                                        
                                        if(!empty($daily_arr))
                                            $taskLastOccurenceDate=$daily_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                        
                                        for($i=0;$i<60;$i++)
                                        {
                                            $next_date=$this->RecurringEvent->calculateDailyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskDailyPattern, $taskDailyEveryNumofDays, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                            $taskLastOccurenceDate=$next_date;
                                            
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time; 
                                            $recur_arr['id']="";  
                                            
                                             if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                                         
                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                                                                    
                                        }
                                        $event_arr['id']=$event_id;
                                        $event_arr['stop_recur']=0;
                                        $this->Event->Save($event_arr);
                                        
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="after_accurrences")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                        for($i=0;$i<$total_rem_occ;$i++)
                                        {
                                            if($i==0)
                                            {
                                                if(!empty($daily_arr))
                                                    $taskLastOccurenceDate=$daily_arr['task_last_execution_date'];
                                                else
                                                    $taskLastOccurenceDate="0000-00-00";
                                            }
                                            else
                                                $taskLastOccurenceDate=$next_date;
                                                
                                            $next_date=$this->RecurringEvent->calculateDailyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskDailyPattern, $taskDailyEveryNumofDays, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                            $taskTotalOccurenceCount=$taskTotalOccurenceCount+1;
                                            
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time;
                                            $recur_arr['id']=""; 
                                            
                                             if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                                          
                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                        }
                                        
                                        $event_arr['id']=$event_id;
                                        $event_arr['stop_recur']=1;
                                        $this->Event->Save($event_arr);
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="by_date")
                                    {
                                        
                                        $taskTaskEndByDate=$this->data['Event']['task_end_by_date'];                       
                                        $taskTotalOccurenceCount=0;
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        if(!empty($daily_arr))
                                            $taskLastOccurenceDate=$daily_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                        
                                        $diff = abs(strtotime($taskStartDate) - strtotime($taskTaskEndByDate));

                                        $years = floor($diff / (365*60*60*24));
                                        $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
                                        $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                                        if($months<=3)
                                        {  
                                            $complete_all=1;
                                            $event_arr['stop_recur']=1;
                                        }
                                        else
                                        {
                                            $complete_all=0;
                                            $a=0;
                                            $event_arr['stop_recur']=0;
                                        }                                  
                                                                          
                                            do{
                                               
                                                   if($complete_all==0)
                                                   {
                                                       if($a>=60)
                                                        break;
                                                       $a++;
                                                   }
                                                                                               
                                                   $next_date=$this->RecurringEvent->calculateDailyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskDailyPattern, $taskDailyEveryNumofDays, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                                   
                                                   $taskLastOccurenceDate= $next_date;
                                                   
                                                   if($next_date>$taskTaskEndByDate || $next_date=="0000-00-00")
                                                        break;
                                                        
                                                   $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                                   $recur_arr['start_date']=$next_date." ".$start_time;
                                                   $recur_arr['end_date']=$next_date." ".$end_time;   
                                                   $recur_arr['id']="";     
                                                   
                                                    if($event_pages_content>=1)
                                                    {
                                                        if($this->data['Event']['event_detail_page']!="")
                                                            $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                        if($this->data['Event']['sponsor_detail_page']!="")
                                                            $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                        if($this->data['Event']['inquiry_detail_page']!="")
                                                            $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                        
                                                    }
                                                                           
                                                   $this->RecurringEvent->Save($recur_arr);   
                                                   
                                                   $event_pages_content++;                                           
                                               
                                            }while($next_date<=$taskTaskEndByDate);
                                            
                                            $event_arr['id']=$event_id;                                       
                                            $this->Event->Save($event_arr);
                                        
                                    }
                                }
                                
                            }
                            else
                            if($this->data['Event']['recur_pattern']=="Weekly")
                            {
                                                            
                                //before adding events delte any existing same events
                                $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' ");                                                       
                                
                                $weekly_arr_all=$this->RecurringEvent->initWeeklyRecurPattern($this->data['Event']);    
                                
                                for($j=0;$j<count($weekly_arr_all);$j++)
                                {     
                                    if($weekly_arr_all[$j]['task_is_done']==0)
                                    {
                                        $recur_arr['id']="";          
                                        $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($weekly_arr_all[$j]['task_last_execution_date']));                
                                        $recur_arr['start_date']=$weekly_arr_all[$j]['task_last_execution_date']." ".$start_time;
                                        $recur_arr['end_date']=$weekly_arr_all[$j]['task_last_execution_date']." ".$end_time;
                                        
                                        if($event_pages_content>=1)
                                        {
                                            if($this->data['Event']['event_detail_page']!="")
                                                $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                            if($this->data['Event']['sponsor_detail_page']!="")
                                                $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                            if($this->data['Event']['inquiry_detail_page']!="")
                                                $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                            
                                        }
                                        
                                        $this->RecurringEvent->Save($recur_arr);
                                        
                                        $event_pages_content++;
                                    }
                                    else
                                        break;
                                }
                                
                                $last= count($weekly_arr_all)-1;                           
                            //    echo "<pre>"; print_r($daily_arr_all[$last]); echo "</pre>";
                                $weekly_arr=$weekly_arr_all[$last];                            
                                $today=date('Y-m-d');
                                
                                                        
                                if($weekly_arr['task_is_done']==0 || empty($weekly_arr))
                                {
                                   
                                    $total_rem_occ=$this->data['Event']['task_end_after_occurrences']-$weekly_arr['task_execution_count'];                                 
                                    $taskTotalOccurenceCount=$weekly_arr['task_execution_count'];
                                    $taskTaskEndAfterOccurrences=$this->data['Event']['task_end_after_occurrences'];
                                    $taskStartDate=$this->data['Event']['starttime'];
                                    $taskDailyPattern=$this->data['Event']['daily_pattern'];
                                    $taskEveryNumofWeeks=$this->data['Event']['weekly_every_noof_weeks'];
                                    $taskTaskEndByDate="0000-00-00";
                                    
                                    $taskWeekDayArray= array(
                                       "1"=> $this->data['Event']['weekly_monday'],
                                       "2"=> $this->data['Event']['weekly_tuesday'],
                                       "3"=> $this->data['Event']['weekly_wednesday'],
                                       "4"=> $this->data['Event']['weekly_thursday'],
                                       "5"=> $this->data['Event']['weekly_friday'],
                                       "6"=> $this->data['Event']['weekly_saturday'],
                                       "7"=> $this->data['Event']['weekly_sunday'],
                                    );
                                    
                                     $taskExeNumOfTimesInWeek=0;
                                       for($i=1; $i<=7; $i++){
                                           if($taskWeekDayArray[$i]==1){
                                               $taskExeNumOfTimesInWeek++;
                                           }
                                       }
                                       
                                 
                                    if($this->data['Event']['task_end']=="by_no_date")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                        $taskTotalOccurenceCount=0;
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        if(!empty($weekly_arr))
                                            $taskLastOccurenceDate=$weekly_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                        
                                        for($i=0;$i<60;$i++)
                                        {
                                            $next_date=$this->RecurringEvent->calculateWeeklyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskEveryNumofWeeks, $taskWeekDayArray, $taskExeNumOfTimesInWeek, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                            $taskLastOccurenceDate=$next_date;
                                            
                                            if($next_date=="0000-00-00" || $next_date=="")
                                                break;
                                            
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time;
                                            $recur_arr['id']="";
                                            
                                             if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }

                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                        }
                                        $event_arr['id']=$event_id;
                                        $event_arr['stop_recur']=0;
                                        $this->Event->Save($event_arr);
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="after_accurrences")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                                                           
                                        for($i=0;$i<$total_rem_occ;$i++)
                                        {
                                            if($i==0)
                                            {
                                                if(!empty($weekly_arr))
                                                    $taskLastOccurenceDate=$weekly_arr['task_last_execution_date'];
                                                else
                                                    $taskLastOccurenceDate="0000-00-00";
                                            }
                                            else
                                                $taskLastOccurenceDate=$next_date;
                                                
                                           $next_date=$this->RecurringEvent->calculateWeeklyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskEveryNumofWeeks, $taskWeekDayArray, $taskExeNumOfTimesInWeek, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                           
                                            $taskTotalOccurenceCount=$taskTotalOccurenceCount+1;
                                            
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time; 
                                            $recur_arr['id']="";  
                                            
                                             if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                                         
                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                        }
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="by_date")
                                    {
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        $taskTaskEndByDate=$this->data['Event']['task_end_by_date'];
                                        if(!empty($weekly_arr))
                                            $taskLastOccurenceDate=$weekly_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                                                                                                        
                                        $taskTotalOccurenceCount=0;
                                        
                                        $diff = abs(strtotime($taskStartDate) - strtotime($taskTaskEndByDate));

                                        $years = floor($diff / (365*60*60*24));
                                        $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
                                        $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                                        if($months<=3)
                                        {  
                                            $complete_all=1;
                                            $event_arr['stop_recur']=1;
                                        }
                                        else
                                        {
                                            $complete_all=0;
                                            $b=0;
                                            $event_arr['stop_recur']=0;
                                        }                                  
                                                                          
                                        do{
                                            
                                            if($complete_all==0)
                                            {
                                                if($b>=60)
                                                    break;
                                                $b++;
                                            }
                                                                                       
                                           $next_date=$this->RecurringEvent->calculateWeeklyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskEveryNumofWeeks, $taskWeekDayArray, $taskExeNumOfTimesInWeek, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                           
                                           $taskLastOccurenceDate= $next_date;
                                           
                                           if($next_date>$taskTaskEndByDate || $next_date=="0000-00-00")
                                                break;
                                           
                                           $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                           $recur_arr['start_date']=$next_date." ".$start_time;
                                           $recur_arr['end_date']=$next_date." ".$end_time;   
                                           $recur_arr['id']="";           
                                           
                                           if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                             
                                           $this->RecurringEvent->Save($recur_arr); 
                                           
                                           $event_pages_content++;                                      
                                           
                                        }while($next_date<=$taskTaskEndByDate);
                                        
                                        $event_arr['id']=$event_id;                                  
                                        $this->Event->Save($event_arr);
                                    }
                                }
                                
                                
                                
                            }
                            else
                            if($this->data['Event']['recur_pattern']=="Monthly")
                            {
                                      
                                //before adding events delte any existing same events
                                $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' "); 
                              
                                $monthly_arr_all=$this->RecurringEvent->initMonthlyRecurPattern($this->data['Event']);    
                                
                                for($j=0;$j<count($monthly_arr_all);$j++)
                                {     
                                    if($monthly_arr_all[$j]['task_is_done']==0)
                                    {
                                        $recur_arr['id']="";      
                                        $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($monthly_arr_all[$j]['task_last_execution_date']));                    
                                        $recur_arr['start_date']=$monthly_arr_all[$j]['task_last_execution_date']." ".$start_time;
                                        $recur_arr['end_date']=$monthly_arr_all[$j]['task_last_execution_date']." ".$end_time;
                                        
                                        if($event_pages_content>=1)
                                        {
                                            if($this->data['Event']['event_detail_page']!="")
                                                $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                            if($this->data['Event']['sponsor_detail_page']!="")
                                                $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                            if($this->data['Event']['inquiry_detail_page']!="")
                                                $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                            
                                        }
                                        
                                        $this->RecurringEvent->Save($recur_arr);
                                        
                                        $event_pages_content++;
                                    }
                                    else
                                        break;
                                }
                                
                                $last= count($monthly_arr_all)-1;                           
                            //    echo "<pre>"; print_r($daily_arr_all[$last]); echo "</pre>";
                                $monthly_arr=$monthly_arr_all[$last];                            
                                $today=date('Y-m-d');
                                
                                                        
                                if($monthly_arr['task_is_done']==0 || empty($monthly_arr))
                                {
                                   
                                    $total_rem_occ=$this->data['Event']['task_end_after_occurrences']-$monthly_arr['task_execution_count'];                                 
                                    $taskTotalOccurenceCount=$monthly_arr['task_execution_count'];
                                    $taskTaskEndAfterOccurrences=$this->data['Event']['task_end_after_occurrences'];
                                    $taskStartDate=$this->data['Event']['starttime'];
                                    $taskMonthlyPattern=$this->data['Event']['monthly_pattern'];
                                    $taskMonthDate=$this->data['Event']['monthly_onof_day'];
                                    $taskMonthEveryNumofMonth=$this->data['Event']['monthly_every_noof_months'];
                                    $taskMonthWeekNumber=$this->data['Event']['monthly_weeknumber'];
                                    $taskMonthWeekDayName=$this->data['Event']['monthly_weekday'];
                                    $taskMonthWeekEveryNumofMonth=$this->data['Event']['monthly_weekof_noof_months'];                                                        
                                    $taskTaskEndByDate="0000-00-00";
                                    
                                                                      
                                                                    
                                    if($this->data['Event']['task_end']=="by_no_date")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                        $taskTotalOccurenceCount=0;
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        if(!empty($monthly_arr))
                                            $taskLastOccurenceDate=$monthly_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                        
                                        for($i=0;$i<24;$i++)
                                        {
                                            $next_date=$this->RecurringEvent->calculateMonthlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskMonthlyPattern, $taskMonthDate,$taskMonthEveryNumofMonth,$taskMonthWeekNumber,$taskMonthWeekDayName, $taskMonthWeekEveryNumofMonth,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                            $taskLastOccurenceDate=$next_date;
                                            
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time;   
                                            $recur_arr['id']="";
                                            
                                            if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                            
                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                        }
                                        $event_arr['id']=$event_id;
                                        $event_arr['stop_recur']=0;
                                        $this->Event->Save($event_arr);
                                        
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="after_accurrences")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                        
                                   
                                        for($i=0;$i<$total_rem_occ;$i++)
                                        {
                                            if($i==0)
                                            {
                                                if(!empty($monthly_arr))
                                                    $taskLastOccurenceDate=$monthly_arr['task_last_execution_date'];
                                                else
                                                    $taskLastOccurenceDate="0000-00-00";
                                            }
                                            else
                                                $taskLastOccurenceDate=$next_date;
                                                
                                           $next_date=$this->RecurringEvent->calculateMonthlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskMonthlyPattern, $taskMonthDate,$taskMonthEveryNumofMonth,$taskMonthWeekNumber,$taskMonthWeekDayName, $taskMonthWeekEveryNumofMonth,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                           
                                            $taskTotalOccurenceCount=$taskTotalOccurenceCount+1;
                                            
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time;
                                            $recur_arr['id']="";   
                                            
                                            if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                                        
                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                        }
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="by_date")
                                    {
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        $taskTaskEndByDate=$this->data['Event']['task_end_by_date'];
                                        if(!empty($monthly_arr))
                                            $taskLastOccurenceDate=$monthly_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                                                                
                                        $taskTotalOccurenceCount=0;
                                        
                                        $diff = abs(strtotime($taskStartDate) - strtotime($taskTaskEndByDate));

                                        $years = floor($diff / (365*60*60*24));
                                        $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
                                        $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                                        if($months<=24)
                                        {  
                                            $complete_all=1;
                                            $event_arr['stop_recur']=1;
                                        }
                                        else
                                        {
                                            $complete_all=0;
                                            $c=0;
                                            $event_arr['stop_recur']=0;
                                        }                                  
                                                                          
                                        do{
                                            
                                            if($complete_all==0)
                                            {
                                                if($c>=24)
                                                    break;
                                                $c++;
                                            }
                                                                                       
                                           $next_date=$this->RecurringEvent->calculateMonthlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskMonthlyPattern, $taskMonthDate,$taskMonthEveryNumofMonth,$taskMonthWeekNumber,$taskMonthWeekDayName, $taskMonthWeekEveryNumofMonth,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                           
                                           $taskLastOccurenceDate= $next_date;
                                           
                                           if($next_date>$taskTaskEndByDate || $next_date=="0000-00-00")
                                                break;
                                           
                                           $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                           $recur_arr['start_date']=$next_date." ".$start_time;
                                           $recur_arr['end_date']=$next_date." ".$end_time;
                                           $recur_arr['id']="";     
                                           
                                           if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                                   
                                           $this->RecurringEvent->Save($recur_arr);    
                                           
                                           $event_pages_content++;                                  
                                           
                                        }while($next_date<=$taskTaskEndByDate);
                                        
                                        $event_arr['id']=$event_id;
                                        $this->Event->Save($event_arr);
                                    }
                                }
                                
                               
                                
                            }
                            else
                            if($this->data['Event']['recur_pattern']=="Yearly")
                            {
                                                            
                                //before adding events delte any existing same events
                                $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' "); 
                              
                                $yearly_arr_all=$this->RecurringEvent->initYearlyRecurPattern($this->data['Event']);    
                                
                                for($j=0;$j<count($yearly_arr_all);$j++)
                                {     
                                    if($yearly_arr_all[$j]['task_is_done']==0)
                                    {
                                        $recur_arr['id']="";    
                                        $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($yearly_arr_all[$j]['task_last_execution_date']));                      
                                        $recur_arr['start_date']=$yearly_arr_all[$j]['task_last_execution_date']." ".$start_time;
                                        $recur_arr['end_date']=$yearly_arr_all[$j]['task_last_execution_date']." ".$end_time;
                                        
                                        if($event_pages_content>=1)
                                        {
                                            if($this->data['Event']['event_detail_page']!="")
                                                $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                            if($this->data['Event']['sponsor_detail_page']!="")
                                                $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                            if($this->data['Event']['inquiry_detail_page']!="")
                                                $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                            
                                        }
                                        
                                        $this->RecurringEvent->Save($recur_arr);
                                        
                                        $event_pages_content++;
                                    }
                                    else
                                        break;
                                }
                                
                                $last= count($yearly_arr_all)-1;                           
                            //    echo "<pre>"; print_r($daily_arr_all[$last]); echo "</pre>";
                                $yearly_arr=$yearly_arr_all[$last];                            
                                $today=date('Y-m-d');
                                
                                                               
                                if($yearly_arr['task_is_done']==0 || empty($yearly_arr))
                                {
                                   
                                    $total_rem_occ=$this->data['Event']['task_end_after_occurrences']-$yearly_arr['task_execution_count'];                                 
                                    $taskTotalOccurenceCount=$yearly_arr['task_execution_count'];
                                    $taskTaskEndAfterOccurrences=$this->data['Event']['task_end_after_occurrences'];
                                    $taskStartDate=$this->data['Event']['starttime'];
                                    $taskYearlyPattern=$this->data['Event']['yearly_pattern'];
                                    $taskYearEveryMonth=$this->data['Event']['yearly_everymonth'];
                                    $taskYearEveryMonthDate=$this->data['Event']['yearly_everymonth_date'];
                                    $taskYearWeekNumber=$this->data['Event']['yearly_weeknumber'];
                                    //if($taskYearWeekNumber=="last") $taskYearWeekNumber="fifth";
                                    $taskYearWeekDayName=$this->data['Event']['yearly_weekday'];
                                    $taskYearWeekMonthName=$this->data['Event']['yearly_weekof_month'];
                                    
                                    $taskEveryNumofWeeks=$this->data['Event']['weekly_every_noof_weeks'];
                                    $taskTaskEndByDate="0000-00-00";
                                    
                                                                      
                                                                    
                                    if($this->data['Event']['task_end']=="by_no_date")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                        $taskTotalOccurenceCount=0;
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        if(!empty($yearly_arr))
                                            $taskLastOccurenceDate=$yearly_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                        
                                        for($i=0;$i<10;$i++)
                                        {
                                            $next_date=$this->RecurringEvent->calculateYearlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskYearlyPattern, $taskYearEveryMonth,$taskYearEveryMonthDate,$taskYearWeekNumber,$taskYearWeekDayName, $taskYearWeekMonthName,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                            $taskLastOccurenceDate=$next_date;
                                             
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));                       
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time;
                                            $recur_arr['id']="";
                                            
                                           if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                            
                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                           
                                        }
                                        $event_arr['id']=$event_id;
                                        $event_arr['stop_recur']=0;
                                        $this->Event->Save($event_arr);
                                        
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="after_accurrences")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                                                           
                                        for($i=0;$i<$total_rem_occ;$i++)
                                        {
                                            if($i==0)
                                            {
                                                if(!empty($yearly_arr))
                                                    $taskLastOccurenceDate=$yearly_arr['task_last_execution_date'];
                                                else
                                                    $taskLastOccurenceDate="0000-00-00";
                                            }
                                            else {
                                                  $taskLastOccurenceDate=$next_date;  
                                            }
                                               
                                                
                                           $next_date=$this->RecurringEvent->calculateYearlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskYearlyPattern, $taskYearEveryMonth,$taskYearEveryMonthDate,$taskYearWeekNumber,$taskYearWeekDayName, $taskYearWeekMonthName,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                           if($next_date!="0000-00-00" && $next_date!=""){
                                                 $taskTotalOccurenceCount=$taskTotalOccurenceCount+1;   
                                                 $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));    
                                                 $recur_arr['start_date']=$next_date." ".$start_time;
                                                $recur_arr['end_date']=$next_date." ".$end_time;
                                                $recur_arr['id']="";    
                                                
                                                if($event_pages_content>=1)
                                                {
                                                    if($this->data['Event']['event_detail_page']!="")
                                                        $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                    if($this->data['Event']['sponsor_detail_page']!="")
                                                        $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                    if($this->data['Event']['inquiry_detail_page']!="")
                                                        $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                    
                                                }
                                                                           
                                                $this->RecurringEvent->Save($recur_arr);
                                                
                                                $event_pages_content++;
                                                
                                           }
                                           
                                           
                                            
                                        }
                                        
                                        exit;
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="by_date")
                                    {
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        $taskTaskEndByDate=$this->data['Event']['task_end_by_date'];
                                        if(!empty($yearly_arr))
                                            $taskLastOccurenceDate=$yearly_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                                                                
                                        $taskTotalOccurenceCount=0;
                                        
                                        $diff = abs(strtotime($taskStartDate) - strtotime($taskTaskEndByDate));

                                        $years = floor($diff / (365*60*60*24));
                                        $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
                                        $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                                        if($years<=10)
                                        {  
                                            $complete_all=1;
                                            $event_arr['stop_recur']=1;
                                        }
                                        else
                                        {
                                            $complete_all=0;
                                            $d=0;
                                            $event_arr['stop_recur']=0;
                                        }                                  
                                                                          
                                        do{
                                            
                                            if($complete_all==0)
                                            {
                                                if($d>10)
                                                    break;
                                                $d++;
                                            }
                                                                                       
                                           $next_date=$this->RecurringEvent->calculateYearlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskYearlyPattern, $taskYearEveryMonth,$taskYearEveryMonthDate,$taskYearWeekNumber,$taskYearWeekDayName, $taskYearWeekMonthName,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                           
                                           $taskLastOccurenceDate= $next_date;
                                           
                                           if($next_date>$taskTaskEndByDate || $next_date=="0000-00-00")
                                                break;
                                           
                                           $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));    
                                           $recur_arr['start_date']=$next_date." ".$start_time;
                                           $recur_arr['end_date']=$next_date." ".$end_time;
                                           $recur_arr['id']="";       
                                           
                                           if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                                 
                                           $this->RecurringEvent->Save($recur_arr);
                                           
                                           $event_pages_content++;
                                           
                                        }while($next_date<=$taskTaskEndByDate);
                                        
                                        $event_arr['id']=$event_id;
                                        $this->Event->Save($event_arr);
                                    }
                                }
                                
                                
                                
                            }
                            
                            //test if any recurring events are being generated or not,if not show warning
                            
                            $rec_id=$this->RecurringEvent->getLastInsertId();
                            
                            if($rec_id=="" || $rec_id==Null)
                            {
                                   $this->Session->setFlash('As per your recurrence pattern no recurring events have been generated.Please select appropriate recurrence pattern.','default',array('class' => 'msgTXt'));
                                   $this->redirect("/admins/eventcreate/".$event_id);   
                            }
                        }
                                        
                        if($eid){

                            $this->Session->setFlash('Event updated Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect('/admins/eventlist');

                            }else{

                                $this->redirect("/admins/eventcreate/".$eid);

                            }

                        }else{

                            $this->Session->setFlash('Event Added Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect('/admins/eventlist');

                            }else{  
                                $this->redirect('/admins/eventcreate/'.$this->data['Event']['id']);

                            }

                        }

                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));    

                    }




                }

            }
            ##check default dropdowns


            if($eventid){

                $this->Event->id = $eventid;
                $this->set('eventid', $eventid);   
                $this->data = $this->Event->read();
				$logo = $this->data['Event']['small_pic'];
				$this->set('logo',$logo);
				//$this->pl($this->data);
                $event_sdate=strtotime($this->data['Event']['starttime']);
                $sel_stime=date("h:i a", $event_sdate);
                // $this->data['Event']['endtime']= $date->format("Y-m-d  H:i:s");  
                $event_edate=strtotime($this->data['Event']['endtime']); 
                $sel_etime=date("h:i a", $event_edate);
                $this->set('sdate', date("m-d-Y", $event_sdate));  
                $this->set('edate', date("m-d-Y", $event_edate));  
                $this->set('eventdata', $this->data['Event']); 
               
                App::import("Model", 'EventInvitation');
                $this->EventInvitation =   & new EventInvitation();    
                
                $cond="EventInvitation.event_id='".$eventid."' and EventInvitation.project_id='".$project_id."' and EventInvitation.in_waitlist='1'";
                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    
                
                if(empty($check_waiting_list))            
                    $waiting_list=0;
                else
                    $waiting_list=1;
             
                $this->set('waiting_list', $waiting_list); 
                
            }else{
                
                $date = new DateTime();
                //   $date->setDate($d1[2], $d1[0], $d1[1]);
                $date->setTime(10, 0,0);
                $sel_stime= $date->format("h:i a");
                $sel_etime= $date->format("h:i a");
                $this->set('eventid', 0);  
            }     

            $this->set('sel_stime', $sel_stime);  
            $this->set('sel_etime', $sel_etime);  

            $prodtl = $this->projectdetailbyid($projectid);

            $sponname = $this->getsponsornamebyprojectid($projectid);

            $this->set('sponorname',$sponname);
			$this->getRespondorlist();
			$this->getTimeZone();

            $projectname = $prodtl[0]['Project']['project_name'];

            $this->set('projectname',$projectname);
 			$this->set('is_wp',  $projectname = $prodtl[0]['Project']['is_wordpress_page']);
           
           $this->eventtypelisting($projectid);
                              
            $member_type=$this->getMemberTypes(true);
            
            $this->set('member_type',$member_type);
            
            $this->set('recur_pattern',$this->getRecurPatternkArray());


            //event and sponsor detail dropdown
			/************************************/
			 App::import("Model", 'WpPost');
            $this->WpPost =   & new WpPost();   
            //$conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments')";
			$conditionsubmenu = "WpPost.post_type = 'page'";
            //App::import("Model", 'Content');
            //$this->Content =   & new Content();    
            $submenus = $this->WpPost->find('all',array('fields' => array('WpPost.post_title','WpPost.id'),"conditions"=>$conditionsubmenu));
            //$menulist[0]="Parent menu";
		
            foreach($submenus as $submenu)
            {
                $menulist[$submenu['WpPost']['id']]=$submenu['WpPost']['post_title'];
			}
			
            $this->set('submenu',$menulist);         
  			/************************************/  
  
            //pick a email tempalte list

            $conditions= "project_id = $projectid and delete_status='0' and active_status='1' and is_event_temp='1'";
            App::import("Model", 'EmailTemplate');
            $this->EmailTemplate =   & new EmailTemplate();    
            $email_templates = $this->EmailTemplate->find('all',array('fields' => array('EmailTemplate.id','EmailTemplate.email_template_name'),"conditions"=>$conditions));
            //$menulist[0]="Parent menu";
			$templatedropdown=array();
            foreach($email_templates as $email_template)
            {
               $templatedropdown[$email_template['EmailTemplate']['id']]=$email_template['EmailTemplate']['email_template_name'];
            }

            $this->set('templatedropdown',$templatedropdown);
            
            /*
            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments') and type='event_detail'";                   
            $event_detail_pages = $this->Content->find('all',array('fields' => array('Content.id'),"conditions"=>$conditionsubmenu));
            if(!empty($event_detail_pages)){
				
				for($i=0;$i<count($event_detail_pages);$i++)
		        {

					$event_detail_pages_ids[$i]=$event_detail_pages[$i]['Content']['id'];
					$event_detail_pages_ids_str=implode(",",$event_detail_pages_ids);            
					$this->set('event_detail_pages_ids',$event_detail_pages_ids_str);            
				}
			}
	            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments') and type='event_sponsor'";               
	            $event_sponsor_pages = $this->Content->find('all',array('fields' => array('Content.id'),"conditions"=>$conditionsubmenu));
			
			if(!empty($event_sponsor_pages)){

	        	for($i=0;$i<count($event_sponsor_pages);$i++)
		        {
			        $event_sponsor_pages_ids[$i]=$event_sponsor_pages[$i]['Content']['id'];
				}
				$event_sponsor_pages_ids_str=implode(',',$event_sponsor_pages_ids);
				$this->set('event_sponsor_pages_ids',$event_sponsor_pages_ids_str);
            }
            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments') and type='event_inquiry'";                
            $event_inquiry_pages = $this->Content->find('all',array('fields' => array('Content.id'),"conditions"=>$conditionsubmenu));
            
            if(!empty($event_inquiry_pages)){
				for($i=0;$i<count($event_inquiry_pages);$i++)
				{
					$event_inquiry_pages_ids[$i]=$event_inquiry_pages[$i]['Content']['id'];
				}            
				$event_inquiry_pages_ids_str=implode(',',$event_inquiry_pages_ids);            
				$this->set('event_inquiry_pages_ids',$event_inquiry_pages_ids_str);
			}  */
            
            ##country state default selection
            $this->set("selectedcountry","");
            $this->set("selectedstate","");

            ##country drop down
            $this->countrydroupdown();
            $this->statedroupdown();


            if(isset($this->data['Event']['country'])){
                $conid = $this->data['Event']['country'];
                $this->set("selectedcountry",$conid);
                ##state drop down
                $this->statedroupdown($conid);

                if(isset($this->data['Event']['state'])){
                   $statid = $this->data['Event']['state'];
                    $this->set("selectedstate",$statid);
                }
            }



        }
        
        
		#####Appointment  type events #######
		
		  function appointment($eventid=''){

             $this->session_check_admin();
             $project_id = '1';
			 if($eventid > 0 ){
			 	$this->set('eid',$eventid);	
				 $this->Session->write("event_id",$eventid);
			} 
			
			  $conditions= "delete_status='0' and is_sytem='1'";
            App::import("Model", 'EmailTemplate');
            $this->EmailTemplate =   & new EmailTemplate();    
            $email_templates = $this->EmailTemplate->find('all',array('fields' => array('EmailTemplate.id','EmailTemplate.email_template_name'),"conditions"=>$conditions));
			$this->set('email_templates',$email_templates); 
            
             App::import("Model", "Event");
            $this->Event =  & new Event(); 
            //for active menu display
            $this->set('page_url','editevent');
            
            $current_domain= $_SERVER['HTTP_HOST'];
            $this->set('current_domain',$current_domain);
			$this->set("hlpdata",$this->getHelpContent(20));  
            $projectid = $project_id;
			$this->set('projectid',$projectid);
			$projectDetails = $this->getprojectdetails($project_id);    
			$isWordPress = $projectDetails['Project']['is_wordpress_page'];
			$this->set('isWordPress',$isWordPress);	
            ##check empty data

            if(!empty($this->data)) {  
       			$this->data['Event']['project_id'] = $projectid;
                $this->Event->set($this->data);
                $errormsg = $this->Event->invalidFields();
                if(!$errormsg){
                    if($this->data['Event']['eventlogo']['name'] !=''){
                        $ptname = $projectDetails['Project']['project_name']; //$this->data['Project']['projectname'];
                         $filePath =  'img/project/uploads' ;
						$this->File->setDestPath($filePath);
                        $file_name1 = $this->File->setFileName($this->data['Event']['eventlogo']['name']);                   
                        $extDot = explode(".",$this->data['Event']['eventlogo']['name']);
                        $ext = $extDot[1];
                        if($ext=='bmp')
                        {
                            $this->Session->setFlash('Please upload jpg,gif,png file','default',array('class' => 'msgTXt'));
                            $this->redirect(array("controller"=>"admins","action"=>"eventcreate"));
                        }

                        $tmp1 = $this->data['Event']['eventlogo']['tmp_name'];
                        $width = 150;
                        $height = 150;

                        // Get new dimensions
                        list($width_orig, $height_orig) = getimagesize($tmp1);
                         
                        $ratio_orig = $width_orig/$height_orig;

                        if ($width/$height > $ratio_orig) {
                            $width = $height*$ratio_orig;
                        } else {
                            $height = $width/$ratio_orig;
                        }

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,$width."x".$height);
						$this->data['Event']['small_pic'] = $fileNamesidea;
                        $this->data['Event']['large_pic'] = $fileNamesidea;
                    }
                    $eid = "";                    
                    $etitle = $this->data['Event']['title'];
                    $data = explode("-", $this->data['Event']['starttime']);
                    $date = new DateTime();
                    $date->setDate($data['2'], $data['0'], $data['1']);
                    $sdt= $date->format("Y-m-d");
                    
                    // $dt=date("Y-m-d", strtotime($this->data['Event']['starttime']));
                    $sdate=  $sdt." ".$this->data['Event']['stime'];
                    $new_sdate=date("Y-m-d H:i:s", strtotime($sdate));
                    $this->data['Event']['starttime']=$new_sdate; // $date->format("Y-m-d H:i:s"); 

                    // $etitle = $this->data['Event']['endtime'];
                    $data = explode("-", $this->data['Event']['endtime']);
                    $date = new DateTime();
                    $date->setDate($data['2'], $data['0'], $data['1']);
                    $edt= $date->format("Y-m-d");

                    $edate=  $edt." ".$this->data['Event']['etime'];
                    $new_edate=date("Y-m-d H:i:s", strtotime($edate));
                    $this->data['Event']['endtime']= $new_edate;  
                    
                    $end_by_date = '';

					if(!empty($this->data['Event']['end_by_date'])) {

						$data = explode("-", $this->data['Event']['end_by_date']);
						$date = new DateTime();					
						$date->setDate($data['2'], $data['0'], $data['1']);
						$end_by_date= $date->format("Y-m-d");
					}
                    $this->data['Event']['task_end_by_date']= $end_by_date;  
                    
                    $recur_arr=array();
                    $event_arr=array();
                   
                    if($this->Event->Save($this->data['Event'])){
                       
                        if($this->data['Event']['id']=="" || $this->data['Event']['id']==NULL || $this->data['Event']['id']=="0")
                        {
                            $event_id=$this->Event->getLastInsertID();
                            $create_unique_events=1;
                        }
                        else
                        {
                            $event_id=$this->data['Event']['id'];
                            $create_unique_events=0;
                        }
                                               
                        $recur_arr=$this->data['Event'];
                        $recur_arr['event_id']=$event_id;
                        $recur_arr['event_title']=$this->data['Event']['title'];
                        $recur_arr['max_attendees_start']=0;
                        $recur_arr['show_attendees_start']=$this->data['Event']['max_attendees_start'];                        
                        $current_day=date('Y-m-d');
                        $start_time=strtotime($this->data['Event']['stime']);
                        $end_time=strtotime($this->data['Event']['etime']);                        
                        $start_time=date("H:i:s", $start_time);
                        $end_time=date("H:i:s", $end_time);                        
                        $event_pages_content=0;

                        if($create_unique_events==1)
                        {
                           //   echo '<pre>'; print_r($this->data);    
						   
                            if((empty($this->data['Event']['recur_pattern'])) || $this->data['Event']['recur_pattern']=="" || $this->data['Event']['recur_pattern']=="None")
                            {
								//before adding events delte any existing same events
								 $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' ");
                                $recur_arr['id']=""; 
                                $recur_arr['event_title']=$recur_arr['event_title']." ".date('m-d-Y', strtotime($this->data['Event']['starttime']));
                                $recur_arr['start_date']=$this->data['Event']['starttime'];
                                $recur_arr['end_date']=$this->data['Event']['endtime'];                                
                                if($event_pages_content>=1)
                                {
                                    if($this->data['Event']['event_detail_page']!="")
                                        $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                    if($this->data['Event']['inquiry_detail_page']!="")
                                        $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                    
                                }
                                                                                              
                                $this->RecurringEvent->Save($recur_arr);                                
                                $event_pages_content++;                                                             
                            }
                            else                
                            if($this->data['Event']['recur_pattern']=="Daily")
                            {                          
                               
                                //before adding events delte any existing same events
                                $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' ");                                                      
                                
                                $daily_arr_all=$this->RecurringEvent->initDailyRecurPattern($this->data['Event']);    
                                
                                for($j=0;$j<count($daily_arr_all);$j++)
                                {     
                                    if($daily_arr_all[$j]['task_is_done']==0)
                                    {
                                        $recur_arr['id']=""; 
                                        $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($daily_arr_all[$j]['task_last_execution_date']));
                                        $recur_arr['start_date']=$daily_arr_all[$j]['task_last_execution_date']." ".$start_time;
                                        $recur_arr['end_date']=$daily_arr_all[$j]['task_last_execution_date']." ".$end_time;;
                                        
                                        if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                        
                                        $this->RecurringEvent->Save($recur_arr);
                                        
                                        $event_pages_content++;
                                    }
                                    else
                                        break;
                                }
                                
                                $last= count($daily_arr_all)-1;                           
                            //    echo "<pre>"; print_r($daily_arr_all[$last]); echo "</pre>";
                                $daily_arr=$daily_arr_all[$last];
                                
                                $today=date('Y-m-d');
                                

                                
                                if($daily_arr['task_is_done']==0 || empty($daily_arr))
                                {
                                   
                                    $total_rem_occ=$this->data['Event']['task_end_after_occurrences']-$daily_arr['task_execution_count'];                                 
                                    $taskTotalOccurenceCount=$daily_arr['task_execution_count'];
                                    $taskTaskEndAfterOccurrences=$this->data['Event']['task_end_after_occurrences'];
                                    $taskStartDate=$this->data['Event']['starttime'];
                                    $taskDailyPattern=$this->data['Event']['daily_pattern'];
                                    $taskDailyEveryNumofDays=$this->data['Event']['daily_every_noof_days'];
                                    $taskTaskEndByDate="0000-00-00";
                                    
                                    if($this->data['Event']['task_end']=="by_no_date")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                        $taskTotalOccurenceCount=0;  
                                        $taskTaskEndAfterOccurrences=0;                                  
                                        
                                        if(!empty($daily_arr))
                                            $taskLastOccurenceDate=$daily_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                        
                                        for($i=0;$i<60;$i++)
                                        {
                                            $next_date=$this->RecurringEvent->calculateDailyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskDailyPattern, $taskDailyEveryNumofDays, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                            $taskLastOccurenceDate=$next_date;
                                            
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time; 
                                            $recur_arr['id']="";  
                                            
                                             if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                                         
                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                                                                    
                                        }
                                        $event_arr['id']=$event_id;
                                        $event_arr['stop_recur']=0;
                                        $this->Event->Save($event_arr);
                                        
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="after_accurrences")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                        for($i=0;$i<$total_rem_occ;$i++)
                                        {
                                            if($i==0)
                                            {
                                                if(!empty($daily_arr))
                                                    $taskLastOccurenceDate=$daily_arr['task_last_execution_date'];
                                                else
                                                    $taskLastOccurenceDate="0000-00-00";
                                            }
                                            else
                                                $taskLastOccurenceDate=$next_date;
                                                
                                            $next_date=$this->RecurringEvent->calculateDailyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskDailyPattern, $taskDailyEveryNumofDays, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                            $taskTotalOccurenceCount=$taskTotalOccurenceCount+1;
                                            
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time;
                                            $recur_arr['id']=""; 
                                            
                                             if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                                          
                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                        }
                                        
                                        $event_arr['id']=$event_id;
                                        $event_arr['stop_recur']=1;
                                        $this->Event->Save($event_arr);
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="by_date")
                                    {
                                        
                                        $taskTaskEndByDate=$this->data['Event']['task_end_by_date'];                       
                                        $taskTotalOccurenceCount=0;
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        if(!empty($daily_arr))
                                            $taskLastOccurenceDate=$daily_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                        
                                        $diff = abs(strtotime($taskStartDate) - strtotime($taskTaskEndByDate));

                                        $years = floor($diff / (365*60*60*24));
                                        $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
                                        $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                                        if($months<=3)
                                        {  
                                            $complete_all=1;
                                            $event_arr['stop_recur']=1;
                                        }
                                        else
                                        {
                                            $complete_all=0;
                                            $a=0;
                                            $event_arr['stop_recur']=0;
                                        }                                  
                                                                          
                                            do{
                                               
                                                   if($complete_all==0)
                                                   {
                                                       if($a>=60)
                                                        break;
                                                       $a++;
                                                   }
                                                                                               
                                                   $next_date=$this->RecurringEvent->calculateDailyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskDailyPattern, $taskDailyEveryNumofDays, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                                   
                                                   $taskLastOccurenceDate= $next_date;
                                                   
                                                   if($next_date>$taskTaskEndByDate || $next_date=="0000-00-00")
                                                        break;
                                                        
                                                   $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                                   $recur_arr['start_date']=$next_date." ".$start_time;
                                                   $recur_arr['end_date']=$next_date." ".$end_time;   
                                                   $recur_arr['id']="";     
                                                   
                                                    if($event_pages_content>=1)
                                                    {
                                                        if($this->data['Event']['event_detail_page']!="")
                                                            $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                        if($this->data['Event']['sponsor_detail_page']!="")
                                                            $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                        if($this->data['Event']['inquiry_detail_page']!="")
                                                            $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                        
                                                    }
                                                                           
                                                   $this->RecurringEvent->Save($recur_arr);   
                                                   
                                                   $event_pages_content++;                                           
                                               
                                            }while($next_date<=$taskTaskEndByDate);
                                            
                                            $event_arr['id']=$event_id;                                       
                                            $this->Event->Save($event_arr);
                                        
                                    }
                                }
                                
                            }
                            else
                            if($this->data['Event']['recur_pattern']=="Weekly")
                            {
                                                            
                                //before adding events delte any existing same events
                                $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' ");                                                       
                                
                                $weekly_arr_all=$this->RecurringEvent->initWeeklyRecurPattern($this->data['Event']);    
                                
                                for($j=0;$j<count($weekly_arr_all);$j++)
                                {     
                                    if($weekly_arr_all[$j]['task_is_done']==0)
                                    {
                                        $recur_arr['id']="";          
                                        $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($weekly_arr_all[$j]['task_last_execution_date']));                
                                        $recur_arr['start_date']=$weekly_arr_all[$j]['task_last_execution_date']." ".$start_time;
                                        $recur_arr['end_date']=$weekly_arr_all[$j]['task_last_execution_date']." ".$end_time;
                                        
                                        if($event_pages_content>=1)
                                        {
                                            if($this->data['Event']['event_detail_page']!="")
                                                $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                            if($this->data['Event']['sponsor_detail_page']!="")
                                                $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                            if($this->data['Event']['inquiry_detail_page']!="")
                                                $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                            
                                        }
                                        
                                        $this->RecurringEvent->Save($recur_arr);
                                        
                                        $event_pages_content++;
                                    }
                                    else
                                        break;
                                }
                                
                                $last= count($weekly_arr_all)-1;                           
                            //    echo "<pre>"; print_r($daily_arr_all[$last]); echo "</pre>";
                                $weekly_arr=$weekly_arr_all[$last];                            
                                $today=date('Y-m-d');
                                
                                                        
                                if($weekly_arr['task_is_done']==0 || empty($weekly_arr))
                                {
                                   
                                    $total_rem_occ=$this->data['Event']['task_end_after_occurrences']-$weekly_arr['task_execution_count'];                                 
                                    $taskTotalOccurenceCount=$weekly_arr['task_execution_count'];
                                    $taskTaskEndAfterOccurrences=$this->data['Event']['task_end_after_occurrences'];
                                    $taskStartDate=$this->data['Event']['starttime'];
                                    $taskDailyPattern=$this->data['Event']['daily_pattern'];
                                    $taskEveryNumofWeeks=$this->data['Event']['weekly_every_noof_weeks'];
                                    $taskTaskEndByDate="0000-00-00";
                                    
                                    $taskWeekDayArray= array(
                                       "1"=> $this->data['Event']['weekly_monday'],
                                       "2"=> $this->data['Event']['weekly_tuesday'],
                                       "3"=> $this->data['Event']['weekly_wednesday'],
                                       "4"=> $this->data['Event']['weekly_thursday'],
                                       "5"=> $this->data['Event']['weekly_friday'],
                                       "6"=> $this->data['Event']['weekly_saturday'],
                                       "7"=> $this->data['Event']['weekly_sunday'],
                                    );
                                    
                                     $taskExeNumOfTimesInWeek=0;
                                       for($i=1; $i<=7; $i++){
                                           if($taskWeekDayArray[$i]==1){
                                               $taskExeNumOfTimesInWeek++;
                                           }
                                       }
                                       
                                 
                                    if($this->data['Event']['task_end']=="by_no_date")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                        $taskTotalOccurenceCount=0;
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        if(!empty($weekly_arr))
                                            $taskLastOccurenceDate=$weekly_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                        
                                        for($i=0;$i<60;$i++)
                                        {
                                            $next_date=$this->RecurringEvent->calculateWeeklyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskEveryNumofWeeks, $taskWeekDayArray, $taskExeNumOfTimesInWeek, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                            $taskLastOccurenceDate=$next_date;
                                            
                                            if($next_date=="0000-00-00" || $next_date=="")
                                                break;
                                            
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time;
                                            $recur_arr['id']="";
                                            
                                             if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }

                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                        }
                                        $event_arr['id']=$event_id;
                                        $event_arr['stop_recur']=0;
                                        $this->Event->Save($event_arr);
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="after_accurrences")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                                                           
                                        for($i=0;$i<$total_rem_occ;$i++)
                                        {
                                            if($i==0)
                                            {
                                                if(!empty($weekly_arr))
                                                    $taskLastOccurenceDate=$weekly_arr['task_last_execution_date'];
                                                else
                                                    $taskLastOccurenceDate="0000-00-00";
                                            }
                                            else
                                                $taskLastOccurenceDate=$next_date;
                                                
                                           $next_date=$this->RecurringEvent->calculateWeeklyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskEveryNumofWeeks, $taskWeekDayArray, $taskExeNumOfTimesInWeek, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                           
                                            $taskTotalOccurenceCount=$taskTotalOccurenceCount+1;
                                            
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time; 
                                            $recur_arr['id']="";  
                                            
                                             if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                                         
                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                        }
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="by_date")
                                    {
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        $taskTaskEndByDate=$this->data['Event']['task_end_by_date'];
                                        if(!empty($weekly_arr))
                                            $taskLastOccurenceDate=$weekly_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                                                                                                        
                                        $taskTotalOccurenceCount=0;
                                        
                                        $diff = abs(strtotime($taskStartDate) - strtotime($taskTaskEndByDate));

                                        $years = floor($diff / (365*60*60*24));
                                        $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
                                        $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                                        if($months<=3)
                                        {  
                                            $complete_all=1;
                                            $event_arr['stop_recur']=1;
                                        }
                                        else
                                        {
                                            $complete_all=0;
                                            $b=0;
                                            $event_arr['stop_recur']=0;
                                        }                                  
                                                                          
                                        do{
                                            
                                            if($complete_all==0)
                                            {
                                                if($b>=60)
                                                    break;
                                                $b++;
                                            }
                                                                                       
                                           $next_date=$this->RecurringEvent->calculateWeeklyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskEveryNumofWeeks, $taskWeekDayArray, $taskExeNumOfTimesInWeek, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                           
                                           $taskLastOccurenceDate= $next_date;
                                           
                                           if($next_date>$taskTaskEndByDate || $next_date=="0000-00-00")
                                                break;
                                           
                                           $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                           $recur_arr['start_date']=$next_date." ".$start_time;
                                           $recur_arr['end_date']=$next_date." ".$end_time;   
                                           $recur_arr['id']="";           
                                           
                                           if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                             
                                           $this->RecurringEvent->Save($recur_arr); 
                                           
                                           $event_pages_content++;                                      
                                           
                                        }while($next_date<=$taskTaskEndByDate);
                                        
                                        $event_arr['id']=$event_id;                                  
                                        $this->Event->Save($event_arr);
                                    }
                                }
                                
                                
                                
                            }
                            else
                            if($this->data['Event']['recur_pattern']=="Monthly")
                            {
                                      
                                //before adding events delte any existing same events
                                $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' "); 
                              
                                $monthly_arr_all=$this->RecurringEvent->initMonthlyRecurPattern($this->data['Event']);    
                                
                                for($j=0;$j<count($monthly_arr_all);$j++)
                                {     
                                    if($monthly_arr_all[$j]['task_is_done']==0)
                                    {
                                        $recur_arr['id']="";      
                                        $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($monthly_arr_all[$j]['task_last_execution_date']));                    
                                        $recur_arr['start_date']=$monthly_arr_all[$j]['task_last_execution_date']." ".$start_time;
                                        $recur_arr['end_date']=$monthly_arr_all[$j]['task_last_execution_date']." ".$end_time;
                                        
                                        if($event_pages_content>=1)
                                        {
                                            if($this->data['Event']['event_detail_page']!="")
                                                $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                            if($this->data['Event']['sponsor_detail_page']!="")
                                                $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                            if($this->data['Event']['inquiry_detail_page']!="")
                                                $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                            
                                        }
                                        
                                        $this->RecurringEvent->Save($recur_arr);
                                        
                                        $event_pages_content++;
                                    }
                                    else
                                        break;
                                }
                                
                                $last= count($monthly_arr_all)-1;                           
                            //    echo "<pre>"; print_r($daily_arr_all[$last]); echo "</pre>";
                                $monthly_arr=$monthly_arr_all[$last];                            
                                $today=date('Y-m-d');
                                
                                                        
                                if($monthly_arr['task_is_done']==0 || empty($monthly_arr))
                                {
                                   
                                    $total_rem_occ=$this->data['Event']['task_end_after_occurrences']-$monthly_arr['task_execution_count'];                                 
                                    $taskTotalOccurenceCount=$monthly_arr['task_execution_count'];
                                    $taskTaskEndAfterOccurrences=$this->data['Event']['task_end_after_occurrences'];
                                    $taskStartDate=$this->data['Event']['starttime'];
                                    $taskMonthlyPattern=$this->data['Event']['monthly_pattern'];
                                    $taskMonthDate=$this->data['Event']['monthly_onof_day'];
                                    $taskMonthEveryNumofMonth=$this->data['Event']['monthly_every_noof_months'];
                                    $taskMonthWeekNumber=$this->data['Event']['monthly_weeknumber'];
                                    $taskMonthWeekDayName=$this->data['Event']['monthly_weekday'];
                                    $taskMonthWeekEveryNumofMonth=$this->data['Event']['monthly_weekof_noof_months'];                                                        
                                    $taskTaskEndByDate="0000-00-00";
                                    
                                                                      
                                                                    
                                    if($this->data['Event']['task_end']=="by_no_date")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                        $taskTotalOccurenceCount=0;
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        if(!empty($monthly_arr))
                                            $taskLastOccurenceDate=$monthly_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                        
                                        for($i=0;$i<24;$i++)
                                        {
                                            $next_date=$this->RecurringEvent->calculateMonthlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskMonthlyPattern, $taskMonthDate,$taskMonthEveryNumofMonth,$taskMonthWeekNumber,$taskMonthWeekDayName, $taskMonthWeekEveryNumofMonth,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                            $taskLastOccurenceDate=$next_date;
                                            
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time;   
                                            $recur_arr['id']="";
                                            
                                            if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                            
                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                        }
                                        $event_arr['id']=$event_id;
                                        $event_arr['stop_recur']=0;
                                        $this->Event->Save($event_arr);
                                        
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="after_accurrences")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                        
                                   
                                        for($i=0;$i<$total_rem_occ;$i++)
                                        {
                                            if($i==0)
                                            {
                                                if(!empty($monthly_arr))
                                                    $taskLastOccurenceDate=$monthly_arr['task_last_execution_date'];
                                                else
                                                    $taskLastOccurenceDate="0000-00-00";
                                            }
                                            else
                                                $taskLastOccurenceDate=$next_date;
                                                
                                           $next_date=$this->RecurringEvent->calculateMonthlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskMonthlyPattern, $taskMonthDate,$taskMonthEveryNumofMonth,$taskMonthWeekNumber,$taskMonthWeekDayName, $taskMonthWeekEveryNumofMonth,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                           
                                            $taskTotalOccurenceCount=$taskTotalOccurenceCount+1;
                                            
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time;
                                            $recur_arr['id']="";   
                                            
                                            if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                                        
                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                        }
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="by_date")
                                    {
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        $taskTaskEndByDate=$this->data['Event']['task_end_by_date'];
                                        if(!empty($monthly_arr))
                                            $taskLastOccurenceDate=$monthly_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                                                                
                                        $taskTotalOccurenceCount=0;
                                        
                                        $diff = abs(strtotime($taskStartDate) - strtotime($taskTaskEndByDate));

                                        $years = floor($diff / (365*60*60*24));
                                        $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
                                        $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                                        if($months<=24)
                                        {  
                                            $complete_all=1;
                                            $event_arr['stop_recur']=1;
                                        }
                                        else
                                        {
                                            $complete_all=0;
                                            $c=0;
                                            $event_arr['stop_recur']=0;
                                        }                                  
                                                                          
                                        do{
                                            
                                            if($complete_all==0)
                                            {
                                                if($c>=24)
                                                    break;
                                                $c++;
                                            }
                                                                                       
                                           $next_date=$this->RecurringEvent->calculateMonthlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskMonthlyPattern, $taskMonthDate,$taskMonthEveryNumofMonth,$taskMonthWeekNumber,$taskMonthWeekDayName, $taskMonthWeekEveryNumofMonth,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                           
                                           $taskLastOccurenceDate= $next_date;
                                           
                                           if($next_date>$taskTaskEndByDate || $next_date=="0000-00-00")
                                                break;
                                           
                                           $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));
                                           $recur_arr['start_date']=$next_date." ".$start_time;
                                           $recur_arr['end_date']=$next_date." ".$end_time;
                                           $recur_arr['id']="";     
                                           
                                           if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                                   
                                           $this->RecurringEvent->Save($recur_arr);    
                                           
                                           $event_pages_content++;                                  
                                           
                                        }while($next_date<=$taskTaskEndByDate);
                                        
                                        $event_arr['id']=$event_id;
                                        $this->Event->Save($event_arr);
                                    }
                                }
                                
                               
                                
                            }
                            else
                            if($this->data['Event']['recur_pattern']=="Yearly")
                            {
                                                            
                                //before adding events delte any existing same events
                                $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' "); 
                              
                                $yearly_arr_all=$this->RecurringEvent->initYearlyRecurPattern($this->data['Event']);    
                                
                                for($j=0;$j<count($yearly_arr_all);$j++)
                                {     
                                    if($yearly_arr_all[$j]['task_is_done']==0)
                                    {
                                        $recur_arr['id']="";    
                                        $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($yearly_arr_all[$j]['task_last_execution_date']));                      
                                        $recur_arr['start_date']=$yearly_arr_all[$j]['task_last_execution_date']." ".$start_time;
                                        $recur_arr['end_date']=$yearly_arr_all[$j]['task_last_execution_date']." ".$end_time;
                                        
                                        if($event_pages_content>=1)
                                        {
                                            if($this->data['Event']['event_detail_page']!="")
                                                $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                            if($this->data['Event']['sponsor_detail_page']!="")
                                                $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                            if($this->data['Event']['inquiry_detail_page']!="")
                                                $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                            
                                        }
                                        
                                        $this->RecurringEvent->Save($recur_arr);
                                        
                                        $event_pages_content++;
                                    }
                                    else
                                        break;
                                }
                                
                                $last= count($yearly_arr_all)-1;                           
                            //    echo "<pre>"; print_r($daily_arr_all[$last]); echo "</pre>";
                                $yearly_arr=$yearly_arr_all[$last];                            
                                $today=date('Y-m-d');
                                
                                                               
                                if($yearly_arr['task_is_done']==0 || empty($yearly_arr))
                                {
                                   
                                    $total_rem_occ=$this->data['Event']['task_end_after_occurrences']-$yearly_arr['task_execution_count'];                                 
                                    $taskTotalOccurenceCount=$yearly_arr['task_execution_count'];
                                    $taskTaskEndAfterOccurrences=$this->data['Event']['task_end_after_occurrences'];
                                    $taskStartDate=$this->data['Event']['starttime'];
                                    $taskYearlyPattern=$this->data['Event']['yearly_pattern'];
                                    $taskYearEveryMonth=$this->data['Event']['yearly_everymonth'];
                                    $taskYearEveryMonthDate=$this->data['Event']['yearly_everymonth_date'];
                                    $taskYearWeekNumber=$this->data['Event']['yearly_weeknumber'];
                                    //if($taskYearWeekNumber=="last") $taskYearWeekNumber="fifth";
                                    $taskYearWeekDayName=$this->data['Event']['yearly_weekday'];
                                    $taskYearWeekMonthName=$this->data['Event']['yearly_weekof_month'];
                                    
                                    $taskEveryNumofWeeks=$this->data['Event']['weekly_every_noof_weeks'];
                                    $taskTaskEndByDate="0000-00-00";
                                    
                                                                      
                                                                    
                                    if($this->data['Event']['task_end']=="by_no_date")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                        $taskTotalOccurenceCount=0;
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        if(!empty($yearly_arr))
                                            $taskLastOccurenceDate=$yearly_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                        
                                        for($i=0;$i<10;$i++)
                                        {
                                            $next_date=$this->RecurringEvent->calculateYearlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskYearlyPattern, $taskYearEveryMonth,$taskYearEveryMonthDate,$taskYearWeekNumber,$taskYearWeekDayName, $taskYearWeekMonthName,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                            $taskLastOccurenceDate=$next_date;
                                             
                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));                       
                                            $recur_arr['start_date']=$next_date." ".$start_time;
                                            $recur_arr['end_date']=$next_date." ".$end_time;
                                            $recur_arr['id']="";
                                            
                                           if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                            
                                            $this->RecurringEvent->Save($recur_arr);
                                            
                                            $event_pages_content++;
                                           
                                        }
                                        $event_arr['id']=$event_id;
                                        $event_arr['stop_recur']=0;
                                        $this->Event->Save($event_arr);
                                        
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="after_accurrences")
                                    {
                                        $taskTaskEndByDate="0000-00-00";
                                                                           
                                        for($i=0;$i<$total_rem_occ;$i++)
                                        {
                                            if($i==0)
                                            {
                                                if(!empty($yearly_arr))
                                                    $taskLastOccurenceDate=$yearly_arr['task_last_execution_date'];
                                                else
                                                    $taskLastOccurenceDate="0000-00-00";
                                            }
                                            else {
                                                  $taskLastOccurenceDate=$next_date;  
                                            }
                                               
                                                
                                           $next_date=$this->RecurringEvent->calculateYearlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskYearlyPattern, $taskYearEveryMonth,$taskYearEveryMonthDate,$taskYearWeekNumber,$taskYearWeekDayName, $taskYearWeekMonthName,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                           if($next_date!="0000-00-00" && $next_date!=""){
                                                 $taskTotalOccurenceCount=$taskTotalOccurenceCount+1;   
                                                 $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));    
                                                 $recur_arr['start_date']=$next_date." ".$start_time;
                                                $recur_arr['end_date']=$next_date." ".$end_time;
                                                $recur_arr['id']="";    
                                                
                                                if($event_pages_content>=1)
                                                {
                                                    if($this->data['Event']['event_detail_page']!="")
                                                        $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                    if($this->data['Event']['sponsor_detail_page']!="")
                                                        $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                    if($this->data['Event']['inquiry_detail_page']!="")
                                                        $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                    
                                                }
                                                                           
                                                $this->RecurringEvent->Save($recur_arr);
                                                
                                                $event_pages_content++;
                                                
                                           }
                                           
                                           
                                            
                                        }
                                        
                                        exit;
                                    }
                                    else
                                    if($this->data['Event']['task_end']=="by_date")
                                    {
                                        $taskTaskEndAfterOccurrences=0;
                                        
                                        $taskTaskEndByDate=$this->data['Event']['task_end_by_date'];
                                        if(!empty($yearly_arr))
                                            $taskLastOccurenceDate=$yearly_arr['task_last_execution_date'];
                                        else
                                            $taskLastOccurenceDate="0000-00-00";
                                                                                
                                        $taskTotalOccurenceCount=0;
                                        
                                        $diff = abs(strtotime($taskStartDate) - strtotime($taskTaskEndByDate));

                                        $years = floor($diff / (365*60*60*24));
                                        $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));
                                        $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                                        if($years<=10)
                                        {  
                                            $complete_all=1;
                                            $event_arr['stop_recur']=1;
                                        }
                                        else
                                        {
                                            $complete_all=0;
                                            $d=0;
                                            $event_arr['stop_recur']=0;
                                        }                                  
                                                                          
                                        do{
                                            
                                            if($complete_all==0)
                                            {
                                                if($d>10)
                                                    break;
                                                $d++;
                                            }
                                                                                       
                                           $next_date=$this->RecurringEvent->calculateYearlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskYearlyPattern, $taskYearEveryMonth,$taskYearEveryMonthDate,$taskYearWeekNumber,$taskYearWeekDayName, $taskYearWeekMonthName,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);
                                           
                                           $taskLastOccurenceDate= $next_date;
                                           
                                           if($next_date>$taskTaskEndByDate || $next_date=="0000-00-00")
                                                break;
                                           
                                           $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));    
                                           $recur_arr['start_date']=$next_date." ".$start_time;
                                           $recur_arr['end_date']=$next_date." ".$end_time;
                                           $recur_arr['id']="";       
                                           
                                           if($event_pages_content>=1)
                                            {
                                                if($this->data['Event']['event_detail_page']!="")
                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");
                                                if($this->data['Event']['sponsor_detail_page']!="")
                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");
                                                if($this->data['Event']['inquiry_detail_page']!="")
                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");
                                                
                                            }
                                                                 
                                           $this->RecurringEvent->Save($recur_arr);
                                           
                                           $event_pages_content++;
                                           
                                        }while($next_date<=$taskTaskEndByDate);
                                        
                                        $event_arr['id']=$event_id;
                                        $this->Event->Save($event_arr);
                                    }
                                }
                                
                                
                                
                            }
                            
                            //test if any recurring events are being generated or not,if not show warning
                            
                            $rec_id=$this->RecurringEvent->getLastInsertId();
                            
                            if($rec_id=="" || $rec_id==Null)
                            {
                                   $this->Session->setFlash('As per your recurrence pattern no recurring events have been generated.Please select appropriate recurrence pattern.','default',array('class' => 'msgTXt'));
                                   $this->redirect("/admins/eventcreate/".$event_id);   
                            }
                        }
                                        
                        if($eid){

                            $this->Session->setFlash('Event updated Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect('/admins/eventlist');

                            }else{

                                $this->redirect("/admins/eventcreate/".$eid);

                            }

                        }else{

                            $this->Session->setFlash('Event Added Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect('/admins/eventlist');

                            }else{  
                                $this->redirect('/admins/eventcreate/'.$this->data['Event']['id']);

                            }

                        }

                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));    

                    }




                }

            }
            ##check default dropdowns


            if($eventid){

                $this->Event->id = $eventid;
                $this->set('eventid', $eventid);   
                $this->data = $this->Event->read();
				$logo = $this->data['Event']['small_pic'];
				$this->set('logo',$logo);
				//$this->pl($this->data);
                $event_sdate=strtotime($this->data['Event']['starttime']);
                $sel_stime=date("h:i a", $event_sdate);
                // $this->data['Event']['endtime']= $date->format("Y-m-d  H:i:s");  
                $event_edate=strtotime($this->data['Event']['endtime']); 
                $sel_etime=date("h:i a", $event_edate);
                $this->set('sdate', date("m-d-Y", $event_sdate));  
                $this->set('edate', date("m-d-Y", $event_edate));  
                $this->set('eventdata', $this->data['Event']); 
               
                App::import("Model", 'EventInvitation');
                $this->EventInvitation =   & new EventInvitation();    
                
                $cond="EventInvitation.event_id='".$eventid."' and EventInvitation.project_id='".$project_id."' and EventInvitation.in_waitlist='1'";
                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    
                
                if(empty($check_waiting_list))            
                    $waiting_list=0;
                else
                    $waiting_list=1;
             
                $this->set('waiting_list', $waiting_list); 
                
            }else{
                
                $date = new DateTime();
                //   $date->setDate($d1[2], $d1[0], $d1[1]);
                $date->setTime(10, 0,0);
                $sel_stime= $date->format("h:i a");
                $sel_etime= $date->format("h:i a");
                $this->set('eventid', 0);  
            }     

            $this->set('sel_stime', $sel_stime);  
            $this->set('sel_etime', $sel_etime);  

            $prodtl = $this->projectdetailbyid($projectid);

            $sponname = $this->getsponsornamebyprojectid($projectid);

            $this->set('sponorname',$sponname);
			$this->getRespondorlist();
			$this->getTimeZone();

            $projectname = $prodtl[0]['Project']['project_name'];

            $this->set('projectname',$projectname);
 			$this->set('is_wp',  $projectname = $prodtl[0]['Project']['is_wordpress_page']);
           
           $this->eventtypelisting($projectid);
                              
            $member_type=$this->getMemberTypes(true);
            
            $this->set('member_type',$member_type);
            
            $this->set('recur_pattern',$this->getRecurPatternkArray());


            //event and sponsor detail dropdown
			/************************************/
			 App::import("Model", 'WpPost');
            $this->WpPost =   & new WpPost();   
            //$conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments')";
			$conditionsubmenu = "WpPost.post_type = 'page'";
            //App::import("Model", 'Content');
            //$this->Content =   & new Content();    
            $submenus = $this->WpPost->find('all',array('fields' => array('WpPost.post_title','WpPost.id'),"conditions"=>$conditionsubmenu));
            //$menulist[0]="Parent menu";
		
            foreach($submenus as $submenu)
            {
                $menulist[$submenu['WpPost']['id']]=$submenu['WpPost']['post_title'];
			}
			
            $this->set('submenu',$menulist);         
  			/************************************/  
  
            //pick a email tempalte list

            $conditions= "project_id = $projectid and delete_status='0' and active_status='1' and is_event_temp='1'";
            App::import("Model", 'EmailTemplate');
            $this->EmailTemplate =   & new EmailTemplate();    
            $email_templates = $this->EmailTemplate->find('all',array('fields' => array('EmailTemplate.id','EmailTemplate.email_template_name'),"conditions"=>$conditions));
            //$menulist[0]="Parent menu";
			$templatedropdown=array();
            foreach($email_templates as $email_template)
            {
               $templatedropdown[$email_template['EmailTemplate']['id']]=$email_template['EmailTemplate']['email_template_name'];
            }

            $this->set('templatedropdown',$templatedropdown);
            
            /*
            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments') and type='event_detail'";                   
            $event_detail_pages = $this->Content->find('all',array('fields' => array('Content.id'),"conditions"=>$conditionsubmenu));
            if(!empty($event_detail_pages)){
				
				for($i=0;$i<count($event_detail_pages);$i++)
		        {

					$event_detail_pages_ids[$i]=$event_detail_pages[$i]['Content']['id'];
					$event_detail_pages_ids_str=implode(",",$event_detail_pages_ids);            
					$this->set('event_detail_pages_ids',$event_detail_pages_ids_str);            
				}
			}
	            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments') and type='event_sponsor'";               
	            $event_sponsor_pages = $this->Content->find('all',array('fields' => array('Content.id'),"conditions"=>$conditionsubmenu));
			
			if(!empty($event_sponsor_pages)){

	        	for($i=0;$i<count($event_sponsor_pages);$i++)
		        {
			        $event_sponsor_pages_ids[$i]=$event_sponsor_pages[$i]['Content']['id'];
				}
				$event_sponsor_pages_ids_str=implode(',',$event_sponsor_pages_ids);
				$this->set('event_sponsor_pages_ids',$event_sponsor_pages_ids_str);
            }
            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments') and type='event_inquiry'";                
            $event_inquiry_pages = $this->Content->find('all',array('fields' => array('Content.id'),"conditions"=>$conditionsubmenu));
            
            if(!empty($event_inquiry_pages)){
				for($i=0;$i<count($event_inquiry_pages);$i++)
				{
					$event_inquiry_pages_ids[$i]=$event_inquiry_pages[$i]['Content']['id'];
				}            
				$event_inquiry_pages_ids_str=implode(',',$event_inquiry_pages_ids);            
				$this->set('event_inquiry_pages_ids',$event_inquiry_pages_ids_str);
			}  */
            
            ##country state default selection
            $this->set("selectedcountry","");
            $this->set("selectedstate","");

            ##country drop down
            $this->countrydroupdown();
            $this->statedroupdown();


            if(isset($this->data['Event']['country'])){
                $conid = $this->data['Event']['country'];
                $this->set("selectedcountry",$conid);
                ##state drop down
                $this->statedroupdown($conid);

                if(isset($this->data['Event']['state'])){
                   $statid = $this->data['Event']['state'];
                    $this->set("selectedstate",$statid);
                }
            }



        }
		
		
		
		
         function edit_event($rec_eventid=null){

            $this->session_check_admin();            
            $project_id = '1';   
         
            $this->Session->write("rec_event_id",$rec_eventid);
            ##import Company  model for processing
            App::import("Model", "Event");
            $this->Event =  & new Event();   

            $this->set('page_url','editevent');
            
            $current_domain= $_SERVER['HTTP_HOST'];
            $this->set('current_domain',$current_domain);
			$this->set("hlpdata",$this->getHelpContent(20));             
            $projectid = $project_id;
            $this->set('projectid',$projectid);
            if(!empty($this->data)) {   
                $this->data['RecurringEvent']['project_id'] = $projectid;

                #set the posted data

                $this->RecurringEvent->set($this->data);

                #check server side validation

                //$errormsg = $this->RecurringEvent->invalidFields();
                
                $errormsg="";
                
                $errormsg = preg_match("/\d{2}\/\d{2}\/\d{4}$/", $this->data['Event']['title']);
                $errormsg = preg_match("/\d{2}\-\d{2}\-\d{4}$/", $this->data['RecurringEvent']['event_title']);

                if(!$errormsg){



                    ##uploading Sponsor logo

                    if($this->data['RecurringEvent']['eventlogo']['name'] !=''){

                        $ptname = $projectDetails['Project']['project_name']; //$this->data['Project']['projectname'];



                        $filePath =  'img' . DS . $ptname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);

                       
                        $file_name1 = $this->File->setFileName($this->data['RecurringEvent']['eventlogo']['name']); 
                        
                        $extDot = explode(".",$this->data['RecurringEvent']['eventlogo']['name']);
            
                        $ext = $extDot[1];
                        if($ext=='bmp')
                        {
                            $this->Session->setFlash('Please upload jpg,gif,png file','default',array('class' => 'msgTXt'));
                            $this->redirect(array("controller"=>"admins","action"=>"edit_event",$rec_eventid));
                        }

                        $tmp1 = $this->data['RecurringEvent']['eventlogo']['tmp_name'];
                        $width = 150;
                        $height = 150;

                        // Get new dimensions
                        list($width_orig, $height_orig) = getimagesize($tmp1);
                         
                        $ratio_orig = $width_orig/$height_orig;

                        if ($width/$height > $ratio_orig) {
                            $width = $height*$ratio_orig;
                        } else {
                            $height = $width/$ratio_orig;
                        }

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,$width."x".$height);

                        $this->data['RecurringEvent']['small_pic'] = $fileNamesidea;
                        $this->data['RecurringEvent']['large_pic'] = $fileNamesidea;

                    }

                    $eid = "";
                    
                    $etitle = $this->data['RecurringEvent']['event_title'];
                    $data = explode("-", $this->data['RecurringEvent']['starttime']);
                    $date = new DateTime();
                    $date->setDate($data['2'], $data['0'], $data['1']);
                    $sdt= $date->format("Y-m-d");
                    
                    // $dt=date("Y-m-d", strtotime($this->data['Event']['starttime']));
                    $sdate=  $sdt." ".$this->data['RecurringEvent']['stime'];
                    $new_sdate=date("Y-m-d H:i:s", strtotime($sdate));
                    $this->data['RecurringEvent']['starttime']=$new_sdate; // $date->format("Y-m-d H:i:s"); 

                    $this->data['RecurringEvent']['event_title']=$this->data['RecurringEvent']['event_title']." ".date("m-d-Y", strtotime($sdt));
                    
                    // $etitle = $this->data['Event']['endtime'];
                    $data = explode("-", $this->data['RecurringEvent']['endtime']);
                    $date = new DateTime();
                    $date->setDate($data['2'], $data['0'], $data['1']);
                    $edt= $date->format("Y-m-d");

                    $edate=  $edt." ".$this->data['RecurringEvent']['etime'];
                    $new_edate=date("Y-m-d H:i:s", strtotime($edate));
                    $this->data['RecurringEvent']['endtime']= $new_edate;  
					if(isset($this->data['RecurringEvent']['end_by_date']))
					{
						$data = explode("-", $this->data['RecurringEvent']['end_by_date']);
	                    $date = new DateTime();
				        $date->setDate($data['2'], $data['0'], $data['1']);
			            $end_by_date= $date->format("Y-m-d");
					    $this->data['RecurringEvent']['task_end_by_date']= $end_by_date;  
					}
                    
                    $this->data['RecurringEvent']['start_date']=$this->data['RecurringEvent']['starttime'];
                    $this->data['RecurringEvent']['end_date']=$this->data['RecurringEvent']['endtime'];                    
                    if($this->data['RecurringEvent']['event_detail_page']!="")
                    {
                        $title=$this->data['RecurringEvent']['event_title'];
                        $metatitle=$this->data['RecurringEvent']['event_title']." event_detail";
                        $status=$this->Content->query("update contents set title='".$title."',metatitle='".$metatitle."' where id='".$this->data['RecurringEvent']['event_detail_page']."'  ");
                    }
                    
                    if($this->data['RecurringEvent']['sponsor_detail_page']!="")
                    {
                        $title=$this->data['RecurringEvent']['event_title'];
                        $metatitle=$this->data['RecurringEvent']['event_title']." event_detail";
                        $status=$this->Content->query("update contents set title='".$title."',metatitle='".$metatitle."' where id='".$this->data['RecurringEvent']['sponsor_detail_page']."'  ");
                    }
                    
                    if($this->data['RecurringEvent']['inquiry_detail_page']!="")
                    {
                        $title=$this->data['RecurringEvent']['event_title'];
                        $metatitle=$this->data['RecurringEvent']['event_title']." event_detail";
                       $status=$this->Content->query("update contents set title='".$title."',metatitle='".$metatitle."' where id='".$this->data['RecurringEvent']['inquiry_detail_page']."'  ");
                    }
                    
                    if($this->RecurringEvent->Save($this->data['RecurringEvent'])){
                       
                                  
                        if($eid){

                            $this->Session->setFlash('Event updated Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect(array("controller"=>"admins","action"=>"eventlist"));

                            }else{

                                $this->redirect(array("controller"=>"admins","action"=>"edit_event",rec_eventid));

                            }

                        }else{

                            $this->Session->setFlash('Event Added Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect('/admins/eventlist');

                            }else{  
                                $this->redirect(array("controller"=>"admins","action"=>"edit_event",$this->data['RecurringEvent']['id']));
                            }
                        }

                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));  
                        

                    }
                }
                else
                {
                    $this->Session->setFlash('Please use event title with no date.','default',array('class' => 'msgTXt'));    
                    $this->redirect(array("controller"=>"admins","action"=>"edit_event",$this->data['RecurringEvent']['id'])); 
                }

            }
            ##check default dropdowns


            if($rec_eventid){
                $this->RecurringEvent->id = $rec_eventid;
                $this->set('rec_eventid', $rec_eventid);   
                $this->data = $this->RecurringEvent->read();
                $this->set('rec_event_data', $this->data); 
                $event_sdate=strtotime($this->data['RecurringEvent']['start_date']);
                $ev_sdate=strtotime($this->data['RecurringEvent']['starttime']);
                $sel_stime=date("h:i a", $ev_sdate);
                // $this->data['Event']['endtime']= $date->format("Y-m-d  H:i:s");  
                $event_edate=strtotime($this->data['RecurringEvent']['end_date']); 
                $ev_edate=strtotime($this->data['RecurringEvent']['endtime']); 
                $sel_etime=date("h:i a", $ev_edate);

                $this->set('sdate', date("m-d-Y", $event_sdate));  
                $this->set('edate', date("m-d-Y", $event_edate));  
                $this->set('eventdata', $this->data['RecurringEvent']); 
               
                App::import("Model", 'EventInvitation');
                $this->EventInvitation =   & new EventInvitation();    
                
                $cond="EventInvitation.rec_event_id='".$rec_eventid."' and EventInvitation.project_id='".$project_id."' and EventInvitation.in_waitlist='1'";
                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    
                
                if(empty($check_waiting_list))            
                    $waiting_list=0;
                else
                    $waiting_list=1;
             
                $this->set('waiting_list', $waiting_list); 
                
            }else{
                
                $date = new DateTime();
                //   $date->setDate($d1[2], $d1[0], $d1[1]);
                $date->setTime(10, 0,0);
                $sel_stime= $date->format("h:i a");
                $sel_etime= $date->format("h:i a");
                $this->set('eventid', 0);  
            }     

            $this->set('sel_stime', $sel_stime);  
            $this->set('sel_etime', $sel_etime);  

            $prodtl = $this->projectdetailbyid($projectid);

            $sponname = $this->getsponsornamebyprojectid($projectid);

            $this->set('sponorname',$sponname);

            $projectname = $prodtl[0]['Project']['project_name'];

            $this->set('projectname',$projectname);                    
            
            $this->eventtypelisting($projectid);        
            
            $member_type=$this->getMemberTypesListByProject($projectid,true);
            $this->set('member_type',$member_type);
            
            $this->set('recur_pattern',$this->getRecurPatternkArray());

            //event and sponsor detail dropdown

            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments')";
            App::import("Model", 'Content');
            $this->Content =   & new Content();    
            $submenus = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));
            //$menulist[0]="Parent menu";

            foreach($submenus as $submenu)
            {
                $menulist[$submenu['Content']['id']]=$submenu['Content']['title'];
            }
            $this->set('submenu',$menulist);
          
            
            //pick a email tempalte list

            $conditions= "project_id = $projectid and delete_status='0' and active_status='1' and is_event_temp='1'";
            App::import("Model", 'EmailTemplate');
            $this->EmailTemplate =   & new EmailTemplate();    
            $email_templates = $this->EmailTemplate->find('all',array('fields' => array('EmailTemplate.id','EmailTemplate.email_template_name'),"conditions"=>$conditions));
            //$menulist[0]="Parent menu";
			$templatedropdown=array();
            foreach($email_templates as $email_template)
            {
                $templatedropdown[$email_template['EmailTemplate']['id']]=$email_template['EmailTemplate']['email_template_name'];
            }

            $this->set('templatedropdown',$templatedropdown);
            
            
            ##country state default selection
            $this->set("selectedcountry","");
            $this->set("selectedstate","");

            ##country drop down
            $this->countrydroupdown();
            $this->statedroupdown();

            
            if($this->data['RecurringEvent']['country']){
                $conid = $this->data['RecurringEvent']['country'];
                $this->set("selectedcountry",$conid);
                ##state drop down
                $this->statedroupdown($conid);

                if($this->data['RecurringEvent']['state']){
                    $statid = $this->data['RecurringEvent']['state'];
                    $this->set("selectedstate",$statid);
                }
            }
        }
        
        
        function pasteventcreated($eventid=''){

            //Configure::write('debug', 2);    
            ##check user session live or not
            $this->session_check_admin();
            ##project id for each project
            $project_id = '1';
            //$project_name=$this->Session->read("projectwebsite_name_admin");  
            //$this->set('current_project_name',$project_name);     // used in project_name element file 
            ##import Company  model for processing
            App::import("Model", "RecurringEvent");

            $this->Event =  & new RecurringEvent();   

            //for active menu display
            $this->set('page_url','editevent');
            
            $current_domain= $_SERVER['HTTP_HOST'];
            $this->set('current_domain',$current_domain);

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;

            $this->set('project_name',$projectDetails['Project']['project_name']);


            if($eventid){

                $this->RecurringEvent->id = $eventid;
                $this->set('eventid', $eventid);   
                $this->data = $this->RecurringEvent->read();
                $event_sdate=strtotime($this->data['RecurringEvent']['starttime']);
                $sel_stime=date("h:i a", $event_sdate);
                // $this->data['Event']['endtime']= $date->format("Y-m-d  H:i:s");  
                $event_edate=strtotime($this->data['RecurringEvent']['endtime']); 
                $sel_etime=date("h:i a", $event_edate);

                $this->set('sdate', date("m-d-Y", $event_sdate));  
                $this->set('edate', date("m-d-Y", $event_edate));  
                $this->set('eventdata', $this->data['RecurringEvent']); 
               
                App::import("Model", 'EventInvitation');
                $this->EventInvitation =   & new EventInvitation();    
                
                $cond="EventInvitation.event_id='".$eventid."' and EventInvitation.project_id='".$project_id."' and EventInvitation.in_waitlist='1'";
                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    
                
                if(empty($check_waiting_list))            
                    $waiting_list=0;
                else
                    $waiting_list=1;
             
                $this->set('waiting_list', $waiting_list); 
                
            }else{
                
                $date = new DateTime();
                //   $date->setDate($d1[2], $d1[0], $d1[1]);
                $date->setTime(10, 0,0);
                $sel_stime= $date->format("h:i a");
                $sel_etime= $date->format("h:i a");
                $this->set('eventid', 0);  
            }     

            $this->set('sel_stime', $sel_stime);  
            $this->set('sel_etime', $sel_etime);  

            $prodtl = $this->projectdetailbyid($projectid);

            $sponname = $this->getsponsornamebyprojectid($projectid);

            $this->set('sponorname',$sponname);

            $projectname = $prodtl[0]['Project']['project_name'];

            $this->set('projectname',$projectname);
            
            
            //set evet_type and member_type
            
            //$this->data['Event']['event_type'];
            
            /*
            
            $event_type['At Location']="At Location";
            $event_type['Video Conference']="Video Conference";
            $event_type['Webinar']="Webinar";
            $event_type['Conference Call']="Conference Call";
            $event_type['At Location & Live Broadcast']="At  & Live Broadcast";
            
            $this->set('event_type',$event_type);
            */
            $this->eventtypelisting($projectid);
            /*
            $member_type['all']="All";
            $member_type['coin_holders']="Coin Holders";
            $member_type['non_coin_holders']="Non Coin Holders";
            $member_type['non_members']="Non Members";
            */
            $member_type=$this->getMemberTypesListByProject($projectid,true);
            $this->set('member_type',$member_type);
            
            $this->set('recur_pattern',$this->getRecurPatternkArray());


            //event and sponsor detail dropdown

            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments')";
            App::import("Model", 'Content');
            $this->Content =   & new Content();    
            $submenus = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));
            //$menulist[0]="Parent menu";

            foreach($submenus as $submenu)
            {
                $menulist[$submenu['Content']['id']]=$submenu['Content']['title'];
            }

            $this->set('submenu',$menulist);
            
            
            //pick a email tempalte list

            $conditions= "project_id = $projectid and delete_status='0' and is_sytem='1'";
            App::import("Model", 'EmailTemplate');
            $this->EmailTemplate =   & new EmailTemplate();    
            $email_templates = $this->EmailTemplate->find('all',array('fields' => array('EmailTemplate.id','EmailTemplate.email_template_name'),"conditions"=>$conditions));
            //$menulist[0]="Parent menu";

            foreach($email_templates as $email_template)
            {
                $templatedropdown[$email_template['EmailTemplate']['id']]=$email_template['EmailTemplate']['email_template_name'];
            }

            $this->set('templatedropdown',$templatedropdown);
            
            ##country state default selection
            $this->set("selectedcountry","");
            $this->set("selectedstate","");

            ##country drop down
            $this->countrydroupdown();
            $this->statedroupdown();

            
            if($this->data['RecurringEvent']['country']){
                $conid = $this->data['RecurringEvent']['country'];
                $this->set("selectedcountry",$conid);
                ##state drop down
                $this->statedroupdown($conid);

                if($this->data['RecurringEvent']['state']){
                    $statid = $this->data['RecurringEvent']['state'];
                    $this->set("selectedstate",$statid);
                }
            }


        }
        
        
        function create_invitation_csv()
        {
            $this->layout="ajax";
            ##check admin session live or not
            //$this->session_check_admin();
            

            $invitation_list=$_GET['selected_for_invitations'];
            $projectid = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin"); 

            $invitation_list=str_replace(",","\n",$invitation_list);
            
            
            $fp = fopen('output.csv', 'w');           
            //fputcsv($fp, $invitation_list); 
            $header_list="Email"."\n";
            fwrite($fp,$header_list);
            fwrite($fp,$invitation_list);
            fclose($fp);
            $data[] = 'success';
            echo json_encode($data);
            exit;
                        
            
        }

        /*
        * Function name   : eventinvitation()
        * Description : This function used to send invitaiton to selected project members
        * Created On      : 25-02-11 (02:18am)
        *
        */ 

        function eventinvitation($rec_eventid=''){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            ##import  Holder  model for processing
            App::import("Model", "Holder");
            $this->Holder =   & new Holder(); 

            ##import  Event  model for processing
            App::import("Model", "Event");
            $this->Event =   & new Event();       

            //for active menu display

            $this->set('page_url',"evenlist");

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '3'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition  

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    

            $field='';
            
             App::import("Model", "RecurringEvent");
             $this->RecurringEvent =   & new RecurringEvent();    
             
             $condition = "RecurringEvent.id = ".$rec_eventid;  
             $rec_event_data= $this->RecurringEvent->find('first',array("conditions"=>$condition));
             $eventid=$rec_event_data['RecurringEvent']['event_id'];
            
            if(!empty($this->data))

            {        
  
                 App::import("Model", "EventInvitation");
                $this->EventInvitation =   & new EventInvitation();    

                $this->data['EventInvitation']['project_id'] = $projectid;
                $this->data['EventInvitation']['rec_event_id'] = $rec_eventid;
                //$this->data['EventInvitation']['event_id'] = $this->data['EventInvitation']['id'];
                $holdersArray=  $_REQUEST['holderids'];

                //  echo "<pre>"; print_r($this->data);  echo "</pre>"; exit;
                for($i=0; $i<sizeof($holdersArray); $i++){
                    $this->data['EventInvitation']['invite_to_holder_id']=$holdersArray[$i];
                    $this->EventInvitation->save($this->data['EventInvitation']);
                    $this->data['EventInvitation']['id']='';
                }

                $this->Session->setFlash('Event invitation sent succeffully.','default', array('class' => 'successmsg')); 
                $this->redirect('/admins/eventlist');
            } 

            else
            {
                if($eventid==''){
                    $this->Session->setFlash('First select event to send invitation.','default', array('class' => 'errormsg')); 
                    $this->redirect('/admins/eventlist');
                }

                //$condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND Holder.id  IN (SELECT DISTINCT holder_id FROM coins_holders)";
                $this->Event->id = $eventid;
                $this->set('eventid', $eventid);   
                $this->data = $this->Event->read(); 


            }
            
            $member_type=$rec_event_data['RecurringEvent']['member_type'];
            
            if($member_type=="coin_holders")
                {
                  $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and Holder.id NOT IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid') and  Holder.id In(select holder_id from coins_holders where project_id=".$projectid." and active_status='1' and delete_status='0')";   
                }
                else
                if($member_type=="non_coin_holders")
                {
                                      
                    $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and Holder.id NOT IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid') and Holder.id NOT In(select holder_id from coins_holders where project_id=".$projectid." and active_status='1' and delete_status='0')";       
                }
                else
                if($member_type=="non_members")
                {
                                     
                    $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND Holder.active_status='0' and Holder.id NOT IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid')";  
                    
                }
                else // $member_type==all     - Holder.active_status"=>"1",
                {               
                    $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and Holder.id NOT IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid') and (Holder.active_status='0' or Holder.active_status='1')";  
                }
            

            //  $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 
           // $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and Holder.id NOT IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid')";  

            if($order == "Holder.id ASC"){
                $order = "Holder.id DESC";
            }
            $order = "Holder.id DESC"; 
            $query="SELECT Holder.*,User.avatar_url
            from holders Holder
            LEFT JOIN users User ON User.id = Holder.user_id
            where  ".$condition."
            Order by  ".$order;

            $holderarr = $this->Holder->query($query); 

            $this->set("holderlist",$holderarr);
            $this->set("eventid",$eventid);     

        }


        /**
        * Function name   : eventattending()
        * Description : Fucntion to show all attending memebrs for given event           
        * Created On      : 25-02-11 (02:18am)
        *
        **/ 

        function eventattending($eventid=''){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            ##import  Holder  model for processing
            App::import("Model", "Holder");
            $this->Holder =   & new Holder(); 

            ##import  Event  model for processing
            App::import("Model", "Event");
            $this->Event =   & new Event();       

            //for active menu display

            $this->set('page_url',"evenlist");

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '3'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition  

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    

            $field='';


            if($eventid==''){
                $this->Session->setFlash('First select event to send invitation.','default', array('class' => 'errormsg')); 
                $this->redirect('/admins/eventlist');
            }

            //$condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND Holder.id  IN (SELECT DISTINCT holder_id FROM coins_holders)";
            $this->Event->id = $eventid;
            $this->set('eventid', $eventid);   
            $this->data = $this->Event->read(); 

            //  $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 
            $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and 
            Holder.id IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid' and invite_status='1')";  

            if($order == "Holder.id ASC"){
                $order = "Holder.id DESC";
            }
            $order = "Holder.id DESC"; 
            $query="SELECT Holder.*,User.avatar_url
            from holders Holder
            LEFT JOIN users User ON User.id = Holder.user_id
            where  ".$condition."
            Order by  ".$order;

            $holderarr = $this->Holder->query($query); 

            $this->set("holderlist",$holderarr);
            $this->set("eventid",$eventid);     

        }

        /**
        * Fucntion to show all may be attending members for given event           
        * 
        * @param mixed $eventid
        */
        function eventmayattending($eventid=''){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            ##import  Holder  model for processing
            App::import("Model", "Holder");
            $this->Holder =   & new Holder(); 

            ##import  Event  model for processing
            App::import("Model", "Event");
            $this->Event =   & new Event();       

            //for active menu display

            $this->set('page_url',"evenlist");

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '3'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition  

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    

            $field='';


            if($eventid==''){
                $this->Session->setFlash('First select event to send invitation.','default', array('class' => 'errormsg')); 
                $this->redirect('/admins/eventlist');
            }

            //$condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND Holder.id  IN (SELECT DISTINCT holder_id FROM coins_holders)";
            $this->Event->id = $eventid;
            $this->set('eventid', $eventid);   
            $this->data = $this->Event->read(); 

            //  $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 
            $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and 
            Holder.id IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid' and invite_status='2')";  

            if($order == "Holder.id ASC"){
                $order = "Holder.id DESC";
            }
            $order = "Holder.id DESC"; 
            $query="SELECT Holder.*,User.avatar_url
            from holders Holder
            LEFT JOIN users User ON User.id = Holder.user_id
            where  ".$condition."
            Order by  ".$order;

            $holderarr = $this->Holder->query($query); 

            $this->set("holderlist",$holderarr);
            $this->set("eventid",$eventid);     

        }

        /**
        * Fucntion to show all pending invitation for given event
        * 
        * @param mixed $eventid
        */
        function eventpending($eventid=''){     

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            ##import  Holder  model for processing
            App::import("Model", "Holder");
            $this->Holder =   & new Holder(); 

            ##import  Event  model for processing
            App::import("Model", "Event");
            $this->Event =   & new Event();       

            //for active menu display

            $this->set('page_url',"evenlist");

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '3'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition  

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    

            $field='';


            if($eventid==''){
                $this->Session->setFlash('First select event to send invitation.','default', array('class' => 'errormsg')); 
                $this->redirect('/admins/eventlist');
            }

            //$condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND Holder.id  IN (SELECT DISTINCT holder_id FROM coins_holders)";
            $this->Event->id = $eventid;
            $this->set('eventid', $eventid);   
            $this->data = $this->Event->read(); 

            //  $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 
            $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and 
            Holder.id IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid' and invite_status='0')";  

            if($order == "Holder.id ASC"){
                $order = "Holder.id DESC";
            }
            $order = "Holder.id DESC"; 
            $query="SELECT Holder.*,User.avatar_url
            from holders Holder
            LEFT JOIN users User ON User.id = Holder.user_id
            where  ".$condition."
            Order by  ".$order;

            $holderarr = $this->Holder->query($query); 

            $this->set("holderlist",$holderarr);
            $this->set("eventid",$eventid);     

        }





		




        /**
        * QR CODE Generator Module Fucntions start here
        **********************************************************************************************************************************/

        /*
        * Function name   : qrcodegenerate()
        * Description : This function used to generate QR-code
        * Created On      : 16-08-11 
        *
        */ 

        function qrcodegenerate(){ 
            //Configure::write('debug', 2);    
            ##check user session live or not
            $this->session_check_admin();
			
			$project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 

            //for active menu display
            $this->set('page_url','grcodegenerate');
            $current_domain= $_SERVER['HTTP_HOST']; 
            $this->set('current_domain',$current_domain);
            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   

            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);            

            $project_name=$projectDetails['Project']['project_name'];
            $this->set('project_name',$project_name);
            
			$img_dest =  '';
				if(isset($_POST['getqrcode']) || isset($_POST['qr_cnt'])){ 
                   $qr_cnt_type= $_POST['qr_cnt_type'];
                   $qr_cnt= $_POST['qr_cnt']; 
                   $qr_size= $_POST['qr_size'];
                   $this->set('qr_cnt_type',$qr_cnt_type); 
                   $this->set('qr_cnt',$qr_cnt); 
                   $this->set('qr_size',$qr_size); 
                   $img_dest =  'img' . DS . $project_name . DS.'uploads'. DS.'qrcode.png' ;    
                }

                if(isset($_POST['downloadqrcode'])){ 
                   $qr_cnt_type= $_POST['qr_cnt_type'];
                   $qr_cnt= $_POST['qr_cnt']; 
                   $qr_size= $_POST['qr_size'];
                   $this->set('qr_cnt_type',$qr_cnt_type); 
                   $this->set('qr_cnt',$qr_cnt); 
                   $this->set('qr_size',$qr_size); 

                    //$ptname = $projectDetails['Project']['project_name']; //$this->data['Project']['projectname'];
                    $img_dest =  'img' . DS . $project_name . DS.'uploads'. DS.'qrcode.png' ;    
                    
                   // $filename= $this->data['Admin']['filename'];
                    $filepath =  'img/'.$project_name .'/uploads/qrcode.png' ;
                    $this->ForceDownload->forceDownload($filepath, 'qrcode.png');
                }
				
				$this->set('img_dest',$img_dest);  

            $projectid = $project_id; 
        }

        function get_qrcode_by_ajax(){     
            ##check user session live or not
            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $current_domain= $_SERVER['HTTP_HOST']; 
            //for active menu display
            $this->set('page_url','grcodegenerate');

            $this->layout = 'ajax';  
            $qr_cnt_type= $_POST['qr_cnt_type'];
            $qr_cnt= $_POST['qr_cnt']; 
            $qr_size= $_POST['qr_size'];
            $this->set('qr_cnt_type',$qr_cnt_type); 
            $this->set('qr_cnt',$qr_cnt); 
            $this->set('qr_size',$qr_size); 

            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);            

            $project_name=$projectDetails['Project']['project_name'];
            $this->set('project_name',$project_name);
            //$ptname = $projectDetails['Project']['project_name']; //$this->data['Project']['projectname'];
            $img_dest =  'img' . DS . $project_name . DS.'uploads'. DS.'qrcode.png' ;    
            $this->set('img_dest',$img_dest);  
            //print_r($_REQUEST); exit;
        }

        function get_qrcode_file(){     
            $this->layout = ''; 

            ##check user session live or not
            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);            

        }  

        /**
        * Blog Module Fucntions start here
        **********************************************************************************************************************************/

        /**
        * fucntion to list all blogs for related project
        * 
        */
        function bloglist(){
            //Configure::write('debug', 2);    
            ##check user session live or not
            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 

            //for active menu display
            $this->set('page_url','bloglist');

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   

            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);            

            $project_name=$projectDetails['Project']['project_name'];
            $this->set('project_name',$project_name);

            $projectid = $project_id;

            ##fetch data from Blog table for listing

            $field='';

            App::import("Model", "Blog");
            $this->Blog =   & new Blog();

            if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey']){

                $searchkeyword = $this->data['Admin']['searchkey'];



                $condition = "Blog.delete_status = '0' AND Blog.project_id = '".$project_id."' and (Blog.title LIKE '%".$searchkeyword."%' OR Blog.introcontent  LIKE '%".$searchkeyword."%' )";

            }else{

                $condition = "Blog.delete_status = '0' AND Blog.project_id = '".$project_id."'";

            }

            $this->Pagination->sortByClass    = 'Blog'; ##initaite pagination 
            $this->Pagination->total= count($this->Blog->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $blogArray = $this->Blog->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            //  print_r($eventArray);    exit;    
            ##set project type data in variable
            $this->set("blogdata",$blogArray);
        }

        /*
        * Function name   : blogadd()
        * Description : This function used to add/edit blog entry for project
        * Created On      : 11-08-11 
        *
        */     

        function blogadd($blogid=''){
            //Configure::write('debug', 2);    
            ##check user session live or not
            $this->session_check_admin();
            ##project id for each project
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     // used in project_name element file 
            ##import Company  model for processing
            App::import("Model", "Blog");

            $this->Blog =  & new Blog();   

            //for active menu display
            $this->set('page_url','addblog');

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;

            $this->set('project_name',$projectDetails['Project']['project_name']);

            ##check empty data

            if(!empty($this->data)) { 

                $this->data['Blog']['project_id'] = $projectid;
                $bid= $this->data['Blog']['id'];
                #set the posted data
                $this->Blog->set($this->data);

                #check server side validation
                $errormsg = $this->Blog->invalidFields();
					
                if(!$errormsg){
                    // $bid = $this->data['Blog']['id'];   
                    $title = $this->data['Blog']['title'];
                    ##check already exists company name
                    if($this->Blog->Save($this->data)){

                        if($bid > 0){

                            $this->Session->setFlash('Blog updated Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect('/admins/bloglist');

                            }else{

                                $this->redirect("/admins/blogadd/$blogid");

                            }

                        }else{

                            $this->Session->setFlash('Blog Added Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect('/admins/bloglist');

                            }else{

                                $this->redirect("/admins/blogadd");       

                            }

                        }

                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));    

                    }


                }

            }

            if($blogid){
                $this->Blog->id = $blogid;
                $this->set('blogid', $blogid);  
                $this->set('blogpageaction', "Edit");    
                $this->data = $this->Blog->read();
            }else{
                $this->set('blogid', 0); 
                $this->set('blogpageaction', "Add"); 
			}     


            $prodtl = $this->projectdetailbyid($projectid);

            $sponname = $this->getsponsornamebyprojectid($projectid);

            $this->set('sponorname',$sponname);

            $projectname = $prodtl[0]['Project']['project_name'];

            $this->set('projectname',$projectname);
        }


        /**
        * Function name   : messagelist()
        * Description : This function used to list messages for sponsor of related project
        * Created On      : 24-8-2011
        *
        */ 
        function messagelist(){
		            
            $project_id ='1';
            $this->set("hlpdata",$this->getHelpContent(6)); 
            $projectDetails=$this->getprojectdetails($project_id);
            $this->set('project',$projectDetails);    
            $projectid =$project_id;    
            App::import("Model", "Sponsor");
            $sponsor =   & new Sponsor();
            $sponserid=$projectDetails['Project']['sponsor_id'];    
            $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid));
            $usr_id =$sponsordetails['Sponsor']['id'];
            $usr_name =$sponsordetails['Sponsor']['sponsor_name'];
			if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                //$this->Session->write("newsortingby",$strdata);    
				$base_url = Configure::read('App.base_url');
                $this->Session->write("newsortingby",$base_url.$strdata);    
            }
			App::import("Model", "MessageHolder");
            $this->MessageHolder =  & new MessageHolder();
			 $this->MessageHolder->bindModel(array('belongsTo'=>array(
            'Message'=>array(
            'foreignKey'=>false,
            'conditions'=>'MessageHolder.msgid = Message.id'
            )
            )));
			

            if(!empty($this->data))
            {        
                $val=$this->data['admins']['searchkey'];
                $condition = "Message.from_holdername  like '%$val%' OR Message.to_holdername  like '%$val%' OR Message.msg_subject like '%$val%' 
                MessageHolder.holderid='".$usr_id."' and  MessageHolder.project_id = '$projectid' AND Message.delete_status='0'  AND MessageHolder.usertype='sponsor'";
            } 
            else
            {
                $condition = " MessageHolder.holderid='".$usr_id."' and  MessageHolder.project_id = '$projectid' AND Message.delete_status='0'  AND MessageHolder.usertype='sponsor'";
            }
            //print'<pre>';print_r($condition);
            ##fetch data from Messages table for listing
            $field='';
			$this->Pagination->sortByClass    = 'Message'; ##initaite pagination 
			$this->Pagination->total= count($this->MessageHolder->find('all',array('condition'=>$condition)));
			list($order,$limit,$page) = $this->Pagination->init($condition,$field);
			
			App::import("Model", "MessageHolder");
            $this->MessageHolder =  & new MessageHolder();
			$this->MessageHolder->bindModel(array('belongsTo'=>array(
            'Message'=>array(
            'foreignKey'=>false,
            'conditions'=>'MessageHolder.msgid = Message.id'
            )
            )));
			$msgarr =  $this->MessageHolder->find('all',array('conditions'=>$condition,'order'=>$order,'limit' => $limit, 'page' => $page));
			//$this->pl($msgarr);
			
			/*$msgQuery="Select MessageHolder.is_new, Message.*
            FROM message_holders MessageHolder
            LEFT JOIN messages Message ON  Message.id=MessageHolder.msgid
            WHERE ".$condition." Order by  Message.lastreplydate DESC  ";
            $msgarr = $this->Message->query($msgQuery);  
            
            $this->Pagination->total= count($msgarr);            
            $order = "Message.created DESC";*/
			
			
        /*    $msgQuery="Select MessageHolder.is_new, Message.*
            FROM message_holders MessageHolder
            LEFT JOIN messages Message ON  Message.id=MessageHolder.msgid
            WHERE ".$condition." Order by  Message.lastreplydate DESC  ";
            $msgarr = $this->Message->query($msgQuery);   */
            ##set message data in variable            
            $this->set("msglist",$msgarr);
        }

        /**
        * Fucntion to create new message and also if msgid then view that message -For Sponsor
        *  
        * @param mixed $msgid
        */
        function messagenew($msgid=null, $msgholder=null){            
            $this->session_check_admin();
            $project_id = '1';
            $this->set('msgholder',$msgholder);
            $this->set("hlpdata",$this->getHelpContent(6)); 
            $current_domain= $_SERVER['HTTP_HOST']; 
            
            $projectDetails = $this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set("msgid",$msgid); 
			
            $projectid =$project_id;    
            App::import("Model", "Sponsor");
            $sponsor =   & new Sponsor();
            $sponserid = $projectDetails['Project']['sponsor_id'];    
            $sponsordetails = $sponsor->find('first',array("conditions"=>'id='.$sponserid)); 
            // Import Message model 
            App::import('Model','Message');
            $this->Message = new Message(); 
            if(isset($_REQUEST['recevier_id']))
            {        
                $recevier_id =  $_REQUEST['recevier_id'];  
				//print_r($recevier_id);
				if($recevier_id[0] == 0 )
				unset($recevier_id[0]);
				
                $subject= $_REQUEST['subject'];     
                $message= nl2br((string)$_REQUEST['message']);    
                $fromusertype='sponsor';
				//$this->pl($recevier_id);
                if($recevier_id){

                     $from_holderid = $sponsordetails['Sponsor']['id'];
                     $from_holdername =$sponsordetails['Sponsor']['sponsor_name'];
                    // Get receiver comma separated list
                    $to_holderid=""; 
                    $to_holdername="";
                    foreach($recevier_id as $recevier){
                        $recevierArray=explode("-", $recevier);
                        if($to_holderid==""){
                            $to_holderid = ','.$recevierArray[0];
                            $to_holdername=$recevierArray[1];
                        }else{
                            $to_holderid.=",".$recevierArray[0];
                            $to_holdername.=",".$recevierArray[1];       
                        }
						 $to_holderid.=",";
                    }              


                    if($message!="" && $subject!=""){ 
                        // Send message to receiver INBOX  Folder
                        $this->data['Message']['project_id']=$project_id;
                        $this->data['Message']['from_holderid']=$from_holderid; 
                        $this->data['Message']['to_holderid']=$to_holderid;
                        $this->data['Message']['from_holdername']=$from_holdername;
                        $this->data['Message']['to_holdername']=$to_holdername;
                        $this->data['Message']['msg_subject']=trim($subject);
                        $this->data['Message']['msg_content']=trim($message);
                        $this->data['Message']['fromusertype']=$fromusertype;  
                        $this->data['Message']['lastreplydate']=date("Y-m-d h:i:s");
                        $this->data['Message']['active_status']=1;  
  
                        $this->Message->save($this->data['Message']);
                        $new_msg_id = $this->Message->getLastInsertId();
                        if($new_msg_id){
                            App::import('Model','MessageHolder');
                            $this->MessageHolder = new MessageHolder();
                            foreach($recevier_id as $recevier){
                                $recevierArray=explode("-", $recevier);
                                $to_id=$recevierArray[0];
                                // Insert mesg id to message holder table for receiver
                                $this->data['MessageHolder']['id']=0;      
                                $this->data['MessageHolder']['project_id']=$project_id;
                                $this->data['MessageHolder']['msgid']=$new_msg_id; 
                                $this->data['MessageHolder']['holderid']=$to_id; 
                                $this->data['MessageHolder']['is_new']=1; 
                                $this->data['MessageHolder']['usertype']='holder';   
                                $this->data['MessageHolder']['active_status']=1;
                                $this->MessageHolder->save($this->data['MessageHolder']);
                            }

                            // Insert mesg id to message holder table for sender
                            $this->data['MessageHolder']['id']=0; 
                            $this->data['MessageHolder']['project_id']=$project_id;
                            $this->data['MessageHolder']['msgid']=$new_msg_id; 
                            $this->data['MessageHolder']['holderid']=$from_holderid; 
                            $this->data['MessageHolder']['is_new']=0; 
                            $this->data['MessageHolder']['usertype']=$fromusertype;   
                            $this->data['MessageHolder']['active_status']=1;
                            $this->MessageHolder->save($this->data['MessageHolder']);       
                        }
                        $this->Session->setFlash('Your message sent successfully!.','default',array('class' => 'successmsg')); 
                        $this->redirect(array('controller'=>'admins','action'=>'messagelist')); 
                    } else{
                        $this->Session->setFlash('Please enter subject and message both.','default',array('class' => 'errormsg'));   
                        //echo json_encode(0);   exit;      
                    }    
                }else{
                    $this->Session->setFlash('Please select receiver.','default',array('class' => 'errormsg'));    
                }

            } 

            if ($msgid!=null){
			
			 $condition = " Holder.delete_status='0' ";  
                $order = "Holder.id DESC"; 
                $query="SELECT Holder.*
                from holders Holder
                where  ".$condition."
                Order by  firstname ASC";
                $holderarr = $this->Holder->query($query); 
                $this->set("holderlist",$holderarr);
                // Update message read staus
               // $this->Message->query("UPDATE message_holders SET is_new = '0'  WHERE msgid = ' ".$msgid."' and holderid='".$sponsordetails['Sponsor']['id']."'");  
//                // Get msg details if msg id 
//                $condition = "Message.id = '$msgid' AND Message.project_id = '$project_id' AND Message.active_status='1' AND Message.delete_status='0' ";  
//                $msgInfo = $this->Message->find('first',array('conditions' => $condition ));       
//                $this->set("msgInfo",$msgInfo);

            }else{
                // Get receiver list to send message 
                $condition = " Holder.delete_status='0' ";  
                $order = "Holder.id DESC"; 
                $query="SELECT Holder.*
                from holders Holder
                where  ".$condition."
                Order by  firstname ASC";
                $holderarr = $this->Holder->query($query); 
                $this->set("holderlist",$holderarr);
            }
        }

        /**
        * Fucntion to get all replies for selected message and selected project
        *     
        * @param mixed $msgid         - Selected message id
        * @param mixed $reply_start   - Reply Start limit
        * @param mixed $reply_offset  - Reply Offset 
        * 
        */
		
		
		

        function  message_reply_by_ajax($msgid,$reply_start=0, $reply_offset=50){ 

            $this->layout = 'ajax';    
            ##check user session live or not
            $this->session_check_admin();
            ##project id for each project
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  

            $this->set('project_name',$project_name);    
            $this->set('project_id',$project_id);

            // if(empty($project_name)) $this->redirect('/companies/session_expired');
            // Import MessageReply model send message
            App::import('Model','MessageReply');
            $this->MessageReply = new MessageReply();

            $replycondition = " MessageReply.project_id='".$project_id."' and MessageReply.active_status='1' and MessageReply.delete_status='0' and   MessageReply.msgid='".$msgid."'";
            // Get all relpies for select project and selected message
            $query="SELECT MessageReply.*   FROM message_replies MessageReply
            WHERE  ".$replycondition."   ORDER BY  MessageReply.created desc   LIMIT ".$reply_start.", ".$reply_offset;
            $msgReplyArray = $this->User->query($query); 
            $this->set('msgReplyArray',$msgReplyArray);      
        }

        /**
        * Send message reply - by holder 
        * 
        */
        function message_sendreply(){
            $this->session_check_admin();
            ##project id for each project
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  

            // $userid = $this->Session->read("User.User.id");   

            $this->layout= 'ajax';
            if(empty($project_name)) $this->redirect('/companies/session_expired');
            $this->set('project_name',$project_name);

            $msgid=  $_REQUEST['msgid'];     
            $reply= nl2br((string) $_REQUEST['data']['reply']);     
            if( $msgid ){

                App::import("Model", "Sponsor");
                $sponsor =   & new Sponsor();
                $projectDetails=$this->getprojectdetails($project_id);
                $sponserid=$projectDetails['Project']['sponsor_id'];    
                $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid));
                $holderid =$sponsordetails['Sponsor']['id'];
                $holdername =$sponsordetails['Sponsor']['sponsor_name'];

                if( $reply!="" ){ 
                    // Import MessageReply model send message
                    App::import('Model','MessageReply');
                    $this->MessageReply = new MessageReply();

                    // Insert message reply 
                    $this->data['MessageReply']['project_id']=$project_id;
                    $this->data['MessageReply']['msgid']=$msgid; 
                    $this->data['MessageReply']['holderid']=$holderid; 
                    $this->data['MessageReply']['holdername']=$holdername; 
                    $this->data['MessageReply']['reply_content']=trim($reply); 
                    $this->data['MessageReply']['active_status']=1;
                    $this->MessageReply->save($this->data['MessageReply']);   
                    // Update message is_new status - if msg has new reply then msg status is_new become new (1)
                    App::import('Model','Message');
                    $this->Message = new Message();    
                    $this->Message->id = $msgid;
                    $this->data = $this->Message->read(); 
                    if($this->data['Message']['id'])  {
                        $this->data['Message']['lastreplydate']=date("Y-m-d h:i:s");    
                        $this->Message->save($this->data['Message']);  
                        $this->Message->query("UPDATE message_holders SET is_new = '1'  WHERE msgid = ' ".$msgid."' and holderid!='".$holderid."'");  
                    }  
                    echo json_encode(1);   exit;       

                } else{
                    // if no reply enterd
                    echo json_encode(0);   exit;      
                }    
            }
            else{
                // if no msg id defined    
                echo json_encode(0);   exit;      
            }
        }


        /*******************************************************************
        * Function Name: projectbackup
        * Function Arguments: None
        * Function Return: (array)
        * Purpose:This function is used to generate project backup along with database.
        * Created By      : QUAD
        ********************************************************************/
        function projectbackup() {
			$this->session_check_admin();
            ##project id for each project
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");         

            //for active menu display
            $this->set('page_url','projectbackup');
			$userArray = array();

            //    if(empty($project_name)) $this->redirect('/companies/session_expired');

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '18'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

            $this->set('project_name',$project_name);

            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    

            $filename='';  // 20110826_191928.sql
            $filepath =  'img' . DS . $project_name . DS.'uploads';
            if(!empty($this->data)) {
                if(isset($this->data['Admin']['generate'])){
                    //pr($this->data); die("in generate pr");
					$errorString ='';
                    ini_set('max_execution_time', 7200);
                    ini_set('memory_limit','300M');

                    $filename=$this->Backup->getProjectBackup($project_id, $project_name);
					//pr($this->data); die;
				   if($filename){
                        //   $filename=$this->Backup->getDatabaseBackUP($filepath, $project_id);
                        $this->Session->setFlash("Backup generated successfully!.",'default',array('class' => 'successmsg'));        
                    }else{
                        $this->Session->setFlash("Opps! There seems to some problem. Please try later.",'default',array('class' => 'errormsg'));        
                    }
                }

                if(isset($this->data['Admin']['download'])){ 
					$filename= $this->data['Admin']['filename'];
                    echo $filepath =  'backup/'.$filename."/".$project_name.".zip" ;
                    exit;
                    //echo $project_name;
					//pr($this->data); die("in download pr");	
                    
					$this->ForceDownload->forceDownload($filepath, 'ProjectBackup.zip');
                    $this->Session->setFlash("Backup downloaded successfully!.",'default',array('class' => 'successmsg'));
                    $this->redirect('/admins/projectbackup');
                    //    exit();
                }

            }else{
                $this->data = $userArray;
            }
            $this->set('project_name',$project_name);  
            $this->set('filepath',$filepath);  
            $this->set('filename',$filename);   
        }

        function get_project_backup_file($filename){
            $this->layout = ''; 
            // ##check user session live or not
            //  $this->session_check_admin();
            //    $project_id = $this->Session->read("sessionprojectid");
            //   $projectDetails=$this->getprojectdetails($project_id);    
            //   $this->set('project',$filename); 
            $this->set('filename',$filename); 
        }

        function fbfeeds() {
            $this->session_check_admin();
            ##project id for each project
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);    
            //for active menu display
            $this->set('page_url','fbfeeds');

            $this->set(compact('projectid', 'project_name'));

        }//end view()


        function get_distributorcompanytype()
        {
            $this->layout = ''; 
            $search_from =  strtolower($_GET["q"]);//$_REQUEST['term'];

            ##import Company  model for processing
            App::import("Model", "Company");
            $this->Company =   & new Company();    
            ##fetch data from Company table for listing
            $field='';
            //$condition = "Company.delete_status = '0' AND Company.project_id = '0'";
            $condition = "Company.delete_status = '0'  and   Company.company_name like '".$search_from."%'  AND
            CompanyType.delete_status = '0' and CompanyType.is_3rdparty='1' ";


            $this->Company->bindModel(array('belongsTo'=>array(
            'CompanyType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Company.company_type_id = CompanyType.id'
            )
            )));


            $companydata = $this->Company->find('all',array("conditions"=>$condition, 'order' =>$order));
            ##set project type data in variable

            // $this->set("companytypedata",$companytypedata);

            //  $search_suggestions = $this->contactlist_model->serach_suggestions($search_from);
            if($companydata!= false)
            {
                foreach($companydata as $value)
                {   
                    echo $value['Company']['company_name']."\n";
                }

            }
            else
            {
                echo "No Match Found";
            }


            exit;
        } 
        
        
            /**
      * Function for Form Type Enhancements
      */
    
      /**
        * fucntion to list all form types for related project
        * 
        */
        function formtypelist(){
            ##check user session live or not
            $this->session_check_admin();
            ##project id for each project
            $project_id = '1';
			$this->set("hlpdata",$this->getHelpContent(20));           
            //$projectDetails=$this->getprojectdetails($project_id);    
            //$this->set('project',$projectDetails);            
            //$project_name=$projectDetails['Project']['project_name'];
            //$this->set('project_name',$project_name);
            $projectid = $project_id;
            ##fetch data from Blog table for listing             
            $field='';                
            App::import("Model", "FormType");
            $this->FormType =  & new FormType();
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition = "FormType.delete_status = '0' AND FormType.project_id =$project_id and (FormType.formtype_name LIKE '%".$searchkeyword."%' OR FormType.form_description  LIKE '%".$searchkeyword."%' )";
            }else{
                $condition = "FormType.delete_status = '0' AND FormType.project_id = '$project_id'";

            }

            $this->Pagination->sortByClass    = 'FormType'; ##initaite pagination 
            $this->Pagination->total= count($this->FormType->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $formtypeArray = $this->FormType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            //  print_r($eventArray);    exit;    
            ##set project type data in variable
            $this->set("formtypedata",$formtypeArray);
        }   

        
        function ajax_get_responders_by_relationshiptype($id ="0", $rid ="0"){
        	
        	$this->layout = false;
        	App::import("Model", "EmailTemplate");
        	$this->EmailTemplate =   & new EmailTemplate();
        	$condition = " EmailTemplate.relationship_type = '".$id."'";
        	$responders = $this->EmailTemplate->find('all',array("conditions"=>$condition));
        	
        	foreach($responders as $responder){
        		echo "<option value='".$responder['EmailTemplate']['id']."' ";
        		echo ($rid==$responder['EmailTemplate']['id'])? "selected=selected" : "";
        		echo " >".$responder['EmailTemplate']['email_template_name']."</option>";
        	}
        	
        	exit;
        }
      
      /*
       * Function name   : fromtype_add()
       * Description : This function used to add form types  for selected project
       * Created On      : 27-10-11 (Quad)
       */     
       function formtype_add($formtypeid=''){
                  
           ##check user session live or not
            $this->session_check_admin();
            ##project id for each project
         	$project_id = '1';
          	 $projectid = $project_id;
            $this->set('projectid',$projectid);            
			$this->set("hlpdata",$this->getHelpContent(20));
            
             App::import("Model", "FormType");
            $this->FormType =  & new FormType();               

            ##check empty data
            if(!empty($this->data)) {      

             $this->data['FormType']['project_id'] =$project_id;   
               // Default Setting for field inclusion and required field setting
             $this->data['FormType']['fld_firstname'] =1;   
             $this->data['FormType']['req_firstname'] =1;   
             $this->data['FormType']['fld_lastname'] =1;   
             $this->data['FormType']['req_lastname'] =1;   
             $this->data['FormType']['fld_title'] =0;   
             $this->data['FormType']['req_title'] =0;   
             $this->data['FormType']['fld_company'] =0;   
             $this->data['FormType']['req_company'] =0;   
             $this->data['FormType']['fld_phone'] =0;   
             $this->data['FormType']['req_phone'] =0;   
             $this->data['FormType']['fld_email'] =1;   
             $this->data['FormType']['req_email'] =1;   
             $this->data['FormType']['fld_address1'] =0;   
             $this->data['FormType']['req_address1'] =0;   
             $this->data['FormType']['fld_address2'] =0;   
             $this->data['FormType']['req_address2'] =0;   
             $this->data['FormType']['fld_city'] =0;   
             $this->data['FormType']['req_city'] =0;   
             $this->data['FormType']['fld_stprovince'] =0;   
             $this->data['FormType']['req_stprovince'] =0;   
             $this->data['FormType']['fld_country'] =0;   
             $this->data['FormType']['req_country'] =0;   
             $this->data['FormType']['fld_list1'] =0;   
             $this->data['FormType']['req_list1'] =1;   
             $this->data['FormType']['fld_list2'] =0;   
             $this->data['FormType']['req_list2'] =1;   
             $this->data['FormType']['fld_message'] =0;   
             $this->data['FormType']['req_message'] =1; 
             $strFormHtml="";
			
			 if(isset($_REQUEST['chkfld'])){
			
			 	if($this->data['FormType']['backcolor']=='')
					$this->data['FormType']['backcolor'] = 'FFFFFF';
			 	if($this->data['FormType']['textcolor']=='')
					$this->data['FormType']['textcolor'] = '000000';
					
                $strFormHtml="<table cellpadding='3' align='center' width='100%' style='background:#".$this->data['FormType']['backcolor']."; color:#".$this->data['FormType']['textcolor']."'><tbody>";
                    for($i=0; $i<sizeof($_REQUEST['chkfld']); $i++){
                        $fld=$_REQUEST['chkfld'][$i];
                        $fldnm= end(explode("_", $fld));
                        if($fldnm!="" && $fldnm!=NULL){  
                            // Check included field is set as required or not 
                            $req_fldnm="req_".$fldnm;
                            $fld_req=0;
                            $fld_req_html="";
						//	echo '<pre>';print_r($_REQUEST);die('puneet');
                            if(in_array($req_fldnm, $_REQUEST['chkfld'])){
                                $fld_req=1;
                                $fld_req_html="<span style='color: red;'>*</span>";
                            }
                            $strFormHtml.="<tr>"; 
                            if($fldnm=="message"){
                                $strFormHtml.=" <td width='40%' align='right' valign='top'><label class='boldlabel'>".ucfirst($fldnm).$fld_req_html."</label></td>";
                                $strFormHtml.="<td width='60%'><span class='txtArea_top'><span class='newtxtArea_bot'> ";
                                $strFormHtml.="<textarea id='".$fld."' name='".$fld."' class='noBg'  cols='35' row='7' style='height: 100px;'></textarea> </span></span></td>"; 
                            }else if($fldnm=="list1" || $fldnm=="list2"){     
                                       
                                       $fld_label=  $this->data['FormType']['fld_'.$fldnm.'_label'];
                                       $order   = array("\r\n", "\n", "\r"); 
                                       $lst_fld_options= str_replace($order, "#", $this->data['FormType']['fld_'.$fldnm.'_options']); 
                                       $option_lines = explode("#",$lst_fld_options); 
                                        $strFormHtml.="<td width='40%' align='right' valign='top'><label class='boldlabel'>".ucfirst($fld_label).$fld_req_html."</label></td>";
                                        $strFormHtml.="<td width='60%'> <span class='txtArea_top'><span class='newtxtArea_bot'>";
                                        $strFormHtml.="<select name='fld_".$fldnm."' id='fld_".$fldnm."' empty='' class='multilist multi'>";
                                        $strFormHtml.="<option value=''>Select Options</option>";   
                                         for($l=0; $l < sizeof($option_lines); $l++){
                                               $strFormHtml.="  <option value='".$option_lines[$l]."'>".$option_lines[$l]."</option>";
                                         }
                                          $strFormHtml.="</select></span><span></td>";  
                                }else {
                                    if($fldnm=="stprovince") {
                                        $fldnm_lbl="ST/Province";
                                    }else if($fldnm=="zippostalcode") {
                                            $fldnm_lbl="Zip/Postal Code";
                                        }else{
                                            $fldnm_lbl=ucfirst($fldnm);
                                    }
                                    //  $strFormHtml.="<tr>"; 
                                    $strFormHtml.="<td width='40%' align='right' valign='top'><label class='boldlabel'>".$fldnm_lbl.$fld_req_html."</label></td>"; 
                                    $strFormHtml.="<td width='60%'><span class='intpSpan'><input type='text' id='".$fld."' name='".$fld."' class='inpt_txt_fld'  maxlength='200'> </span></td>"; 

                            }
                            $strFormHtml.="</tr>"; 
                            $this->data['FormType'][$fld] =1;    
                            $this->data['FormType'][$req_fldnm] =$fld_req;    
                        }              
                    }
                  
                $strFormHtml.="</tbody></table>";
                $this->data['FormType']['form_html'] =$strFormHtml; 
  
               //$this->pl($this->data);
                 if($this->FormType->Save($this->data['FormType'])){
                     if(isset($this->data['FormType']['id'])){
                            $lastinsertid = $this->data['FormType']['id'];
                     }else{
                         $lastinsertid = $this->FormType->id;
                     }
                    

                    if(!isset($this->data['Admins']['Newredirect']))
                    {  
                        $this->Session->setFlash('Form Type Added Successfully.','default', array('class' => 'successmsg'));  
                        if(isset($this->data['Action']['redirectpage'])){  
                            $this->redirect("/admins/formtypelist");   
                        }else{
							$this->redirect(array('controller'=>'admins','action'=>'formtype_add',$lastinsertid));
                        }
                    }
                    else
                    {
                        $editLinkId = $this->data['Admins']['Newredirect'];
                        $editLinkId = str_replace("@","", $editLinkId);
                          $lId = $this->FormType->getLastInsertID();
                            $this->Session->write('InsertRelatedFormId',$lId);
                        if($editLinkId=="")
                        {   
                            $this->redirect(array('controller'=>'links','action'=>'addlink'));                      
                        }
                        else
                        {
                          
                            $this->redirect(array('controller'=>'links','action'=>'editlink',$editLinkId));
                        }   
                    }     

                 }
                   
              //   echo "<pre>";  print_r($this->data['FormType']);  echo "</pre>";    
                 
            } else {
				$this->Session->setFlash('Please select at least one form field.','default', array('class' => 'successmsg'));$this->redirect("/admins/formtype_add/");   
			}

            }
			$this->getRespondorlist();
            $this->set('selectedtemplateresponce',"");
			$this->set('selectedstatustype',"");
            $this->set('selectedtemplateproj',""); 
            $this->set('sel_responce','');
            if($formtypeid){        // Read form type data and set it
				
            $this->FormType->id = $formtypeid;
               $this->data = $this->FormType->read();
            
			     $this->set('formtypeid',$formtypeid);    
                $this->set('selectedtemplateresponce',$this->data['FormType']['emailtemplate_toresponce']);    
                $this->set('selectedtemplateproj',$this->data['FormType']['emailtemplate_toalert_mgr']);     
				$this->set('selectedstatustype',$this->data['FormType']['status_type']);    
				$this->set('projectid',$this->data['FormType']['project_id']);
				
				$this->set('releation_type',$this->data['FormType']['releation_type']);
				$this->set('sel_responce',$this->data['FormType']['emailtemplate_toresponce']);
			
            }
            
            // GET ALL CUSTOM EMAIL TEMPLATES
            $this->customtemplatelisting($project_id); 
            
             // GET ALL Company Types
            $this->companytypedropdown($project_id); 
            
             // GET ALL Contact Types
            $this->contacttypedropdown($project_id); 
			$this->formstatustypedropdown($project_id);
            $redirect = null;
            if(isset($this->params['named']['rl']))
            {
                $redirect = $this->params['named']['rl'];
            }  
            $this->set('redirect',$redirect);  
        } 
        
        /**
        * fucntion to list all form types for related project
        * 
        */
        function formsubmitlist(){
            ##check user session live or not
            $this->session_check_admin();
            ##project id for each project
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);    

            //for active menu display
            $this->set('page_url',"formsubmitlist");

            if(empty($project_name)) $this->redirect('/companies/session_expired');

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   

            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);            

            $project_name=$projectDetails['Project']['project_name'];
            $this->set('project_name',$project_name);

            $projectid = $project_id;

            ##fetch data from Blog table for listing
             
            $field='';
                
            App::import("Model", "FormType");
            $this->FormType =  & new FormType();
            
            App::import("Model", "FormSubmit");
            $this->FormSubmit =  & new FormSubmit();
            
            App::import("Model", "FormSubmitStatustype");
            $this->FormSubmitStatustype =  & new FormSubmitStatustype();

            if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey']){
                $searchkeyword = $this->data['Admin']['searchkey'];

                $condition = "FormSubmit.delete_status = '0' AND FormSubmit.project_id = '".$project_id."' and (FormSubmit.fld_firstname LIKE '%".$searchkeyword."%' OR FormSubmit.fld_lastname  LIKE '%".$searchkeyword."%' )";

            }else{

                $condition = "FormSubmit.delete_status = '0' AND FormSubmit.project_id = '".$project_id."'";

            }

            $this->Pagination->sortByClass    = 'FormSubmit'; ##initaite pagination 
              $this->FormSubmit->bindModel(array('belongsTo'=>array(
                    'FormType'=>array(
                    'foreignKey'=>false,
                    'conditions'=>'FormSubmit.formtype_id = FormType.id'
                    ),'FormSubmitStatustype'=>array('foreignKey'=>false, 'conditions'=>'FormSubmit.statustype_id = FormSubmitStatustype.id'  )
                    )));
            $this->Pagination->total= count($this->FormSubmit->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

              $this->FormSubmit->bindModel(array('belongsTo'=>array(
                    'FormType'=>array(
                    'foreignKey'=>false,
                    'conditions'=>'FormSubmit.formtype_id = FormType.id'
                    ),'FormSubmitStatustype'=>array('foreignKey'=>false, 'conditions'=>'FormSubmit.statustype_id = FormSubmitStatustype.id'  )
                    )));
            $formsubmitdata = $this->FormSubmit->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            //  print_r($eventArray);    exit;    
            ##set project type data in variable
            $this->set("formsubmitdata",$formsubmitdata);
        } 
        
        /**
        * Function to download csv file for submitted forms
        * 
        */
         function forms_csvdownloads(){

            ##Configure::write('debug',3);
            ##check admin session live or not
            $this->layout = null;
            $this->autoLayout = false; 
            Configure::write('debug', '0');
            ##check user session live or not
            $this->session_check_admin();
            ##project id for each project
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);     

            ##import  Holder  model for processing
            App::import("Model", "FormType");
            $this->FormType =  & new FormType();
            
            App::import("Model", "FormSubmit");
            $this->FormSubmit =  & new FormSubmit();
            
            App::import("Model", "FormSubmitStatustype");
            $this->FormSubmitStatustype =  & new FormSubmitStatustype();
            
            App::import("Model", "Country");
            $this->Country  =    &new Country();
            
            App::import("Model", "State");
            $this->State  =    &new State();  
               
            $condition = "FormSubmit.delete_status = '0' AND FormSubmit.project_id = '".$project_id."'";
             $this->FormSubmit->bindModel(array('belongsTo'=>array(
                    'FormType'=>array(
                    'foreignKey'=>false,
                    'conditions'=>'FormSubmit.formtype_id = FormType.id'
                    ),'FormSubmitStatustype'=>array('foreignKey'=>false, 'conditions'=>'FormSubmit.statustype_id = FormSubmitStatustype.id'  ),
                    'Country'=>array('foreignKey'=>false, 'conditions'=>'FormSubmit.fld_country = Country.country_id'  ),
                    'State'=>array('foreignKey'=>false, 'conditions'=>'FormSubmit.fld_stprovince = State.state_id'  )
                    )));
            $formsubmitdata = $this->FormSubmit->find('all',array("conditions"=>$condition));
            //  print_r($eventArray);    exit;    
            ##set project type data in variable
            $this->set("formsubmitdata",$formsubmitdata);

        }        
      
      
            /*
       * Function name   : fromtype_add()
       * Description : This function used to add form types  for selected project
       * Created On      : 27-10-11 (Quad)
       */     
       function formsubmitted($formubmittedid=''){

             ##check user session live or not
            $this->session_check_admin();
            ##project id for each project
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);    

            //for active menu display
            $this->set('page_url',"formsubmitted");



            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '20'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # check form submitted id    
            if(empty($formubmittedid) || $formubmittedid=="" || $formubmittedid==null) $this->redirect('/admins/formsubmitlist');
            
            $this->set('project_name',$project_name);
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    

            $projectid=$project_id;        
            $this->set('projectid',$projectid);  
            App::import("Model", "FormType");
            $this->FormType =  & new FormType();               

            App::import("Model", "FormSubmit");
            $this->FormSubmit =  & new FormSubmit(); 
            
            ##check empty data
            if(!empty($this->data)) {      
                 // echo "<pre>";  print_r($_REQUEST);  echo "</pre>";  
            // $this->data['FormSubmit']['project_id'] =$project_id;   
             if($formubmittedid){        
                    $this->data['FormSubmit']['id']=$formubmittedid;
 
                #Save form type data              
             
                 if($this->FormSubmit->Save($this->data['FormSubmit'])){

                     if(isset($this->data['FormSubmit']['id'])){
                            $lastinsertid = $this->data['FormSubmit']['id'];
                     }else{
                         $lastinsertid = $this->FormType->getLastInsertId();
                     }
                      
                      $this->Session->setFlash('Form sumbitted updated successfully.','default', array('class' => 'successmsg'));  
                      $this->redirect("/admins/formsubmitlist/");   
                 }
                   
              //   echo "<pre>";  print_r($this->data['FormType']);  echo "</pre>";    
             } 
           

            }

            $this->set('selectedtemplateresponce',"");
            $this->set('selectedtemplateproj',""); 
            if($formubmittedid){        // Read form type data and set it
            
                    $this->FormSubmit->bindModel(array('belongsTo'=>array(
                    'FormType'=>array(
                    'foreignKey'=>false,
                    'conditions'=>'FormSubmit.formtype_id = FormType.id'
                    )/*,'Sponsor'=>array(                     'foreignKey'=>false,                    'conditions'=>'Project.sponsor_id = Sponsor.id'                    )*/
                    )));
               $this->FormSubmit->id = $formubmittedid;
               $this->data = $this->FormSubmit->read();
               if($this->data['FormSubmit']){
                        $this->set('formubmittedid',$formubmittedid);    
                        $this->set('selectedtemplateresponce',$this->data['FormType']['emailtemplate_toresponce']);    
                        $this->set('selectedtemplateproj',$this->data['FormType']['emailtemplate_toalert_mgr']);     
                        $this->set('selectedcompanytype',$this->data['FormType']['company_type']);     
                        $this->set('selectedcontacttype',$this->data['FormType']['contact_type']);
                        $this->set('selectedstatustype',$this->data['FormSubmit']['statustype_id']); 
                 }else{
                   $this->redirect("/admins/formsubmitlist/");  
               }  
            }
            
            // GET ALL CUSTOM EMAIL TEMPLATES
            $this->customtemplatelisting($project_id); 
            
             // GET ALL Company Types
            $this->companytypedropdown($project_id); 
            
             // GET ALL Contact Types
            $this->contacttypedropdown($project_id); 
         
          // GEt ALl Form Status types
          $this->formstatustypedropdown($project_id);
          
           $this->countrydroupdown();

        } 
        
        
        
        
        
        /**
        * fucntion to list all form status type for selected project
        * 
        */
        function formstatustypelist(){
              ##check user session live or not
            $this->session_check_admin();
            ##project id for each project
            $project_id = '1';
            //for active menu display
            $this->set('page_url','formstatustypelist');
            # set help condition
            $this->set("hlpdata",$this->getHelpContent(20));  
            $projectid = $project_id;
            ##fetch data from FormSubmitstatustypes table for listing

            $field='';

            App::import("Model", "FormSubmitStatustype");
            $this->FormSubmitStatustype =   & new FormSubmitStatustype();

            if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey']){

            $searchkeyword = $this->data['Admin']['searchkey'];
            $condition = "FormSubmitStatustype.delete_status = '0' AND (FormSubmitStatustype.project_id = '".$project_id."' OR  FormSubmitStatustype.project_id = 0 ) and (FormSubmitStatustype.statustype_name LIKE '%".$searchkeyword."%')";

            }else{

                $condition = "FormSubmitStatustype.delete_status = '0' AND ( FormSubmitStatustype.project_id = '".$project_id."' OR  FormSubmitStatustype.project_id = 0)";

            }

            $this->Pagination->sortByClass    = 'FormSubmitStatustype'; ##initaite pagination 
            $this->Pagination->total= count($this->FormSubmitStatustype->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $statustypeArray = $this->FormSubmitStatustype->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            //  print_r($eventArray);    exit;    
            ##set project type data in variable
            $this->set("statustypedata",$statustypeArray);
        }
        
        
        
        /*
        * Function name   : formstatustype_add()
        * Description : This function used to add/edit form status type for project
        * Created On      : 22nd Nov 2011 
        *
        */     

        function formstatustype_add($statustypeid=''){
		    ##check user session live or not
            $this->session_check_admin();
            ##project id for each project
            $project_id = '1';            
            App::import("Model", "FormSubmitStatustype");
            $this->FormSubmitStatustype =  & new FormSubmitStatustype();             
            # set help condition
           $this->set("hlpdata",$this->getHelpContent(20));            
            $projectid = $project_id;
            ##check empty data
            if(!empty($this->data)) {     
				$this->data['FormSubmitStatustype']['project_id'] = $projectid;
				if(isset($this->data['FormSubmitStatustype']['id'])){
					 $typeid=$this->data['FormSubmitStatustype']['id'];
				}else{
					$typeid='0';
				}
				  #set the posted data
                $this->FormSubmitStatustype->set($this->data);

                #check server side validation
                $errormsg = $this->FormSubmitStatustype->invalidFields();
				
                if(!$errormsg){
                    // $bid = $this->data['Blog']['id'];   
					 $statustype_name = $this->data['FormSubmitStatustype']['statustype_name'];
                    ##check already exists company name
					//$this->pl($this->data);
                    if($this->FormSubmitStatustype->Save($this->data)){
                        $typeid = $this->FormSubmitStatustype->id;
						if($typeid > 0){

                            $this->Session->setFlash('Status type updated Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect(array('controller'=>'admins','action'=>'formstatustypelist'));

                            }else{

                                $this->redirect(array('controller'=>'admins','action'=>'formstatustype_add',$typeid));

                            }

                        }else{

                            $this->Session->setFlash('Status type Added Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                               $this->redirect(array('controller'=>'admins','action'=>'formstatustypelist'));

                            }else{

                                $this->redirect(array('controller'=>'admins','action'=>'formstatustype_add'));

                            }

                        }

                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));    

                    }


                }

            }

            if($statustypeid){
                $this->FormSubmitStatustype->id = $statustypeid;
                $this->set('statustypeid', $statustypeid);  
                $this->set('statustypepageaction', "Edit");    
                $this->data = $this->FormSubmitStatustype->read();
				
            }else{
                $this->set('statustypeid', 0); 
                $this->set('statustypepageaction', "Add"); 
            }     


            $prodtl = $this->projectdetailbyid($projectid);

            $sponname = $this->getsponsornamebyprojectid($projectid);

            $this->set('sponorname',$sponname);

            $projectname = $prodtl[0]['Project']['project_name'];

            $this->set('projectname',$projectname);
        }


       /*
        * Function name   : formtypes()
        * Description : For SUPER ADMIN - This function used to  form types listing for super admin under types menu
        * Created On      : 23rd Nov 2011
        *
        */ 
        function formtypes(){

            ##check admin session live or not
            $this->session_check_admin();

            ##Used for default Pagination.

            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }

            ##import form type model for processing
            App::import("Model", "FormType");
            $this->FormType =   & new FormType();    
            ##fetch data from project type table for listing
            $field='';
            $condition = "delete_status = '0' and project_id='0'";
            if(isset($this->data['Admins']['searchkey']) && $this->data['Admins']['searchkey']){
                $searchkeyword = $this->data['Admins']['searchkey'];
                $condition .= "  and (formtype_name LIKE '%".$searchkeyword."%' OR form_description  LIKE '%".$searchkeyword."%' )";
            }

            $this->Pagination->sortByClass    = 'FormType'; ##initaite pagination 

            $this->Pagination->total= count($this->FormType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $formtypedata = $this->FormType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
          // $this->pl($formtypedata);

            $this->set("formtypedata",$formtypedata);    


            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '39'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

        }
		
		/*
			@Auther			Suman Singh
			@Type			Created
			@Email			suman.singh@dotsqares.com				
			@Date			April 15, 2012
			@Description	To make Decline/suspend 
		*/
		function decline_suspend_list(){

            ##check admin session live or not
            $this->session_check_admin();

           ##check admin session live or not
            $this->session_check_admin();
          
            ##import project type model for processing
            App::import("Model", "DeclineSuspendType");
            $this->DeclineSuspendType =   & new DeclineSuspendType();
			$condition = '';
			$field='';
            if(isset($this->data['DeclineSuspendType']['searchkey']) && $this->data['DeclineSuspendType']['searchkey']){
                $searchkeyword = $this->data['DeclineSuspendType']['searchkey'];
                $condition .= "  DeclineSuspendType.type_name LIKE '%".$searchkeyword."%' OR DeclineSuspendType.notes  LIKE '%".$searchkeyword."%' ";
            }

            $this->Pagination->sortByClass    = 'DeclineSuspendType'; ##initaite pagination 

            $this->Pagination->total= count($this->DeclineSuspendType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $types_list = $this->DeclineSuspendType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
         
            $this->set("types_list",$types_list);  

        }
		
		
		function decline_suspend_type_add($id = null){
                  
           ##check user session live or not
            $this->session_check_admin();
            
			 ##import project type model for processing
            App::import("Model", "DeclineSuspendType");
            $this->DeclineSuspendType =   & new DeclineSuspendType();
			//pr($this->StatusType);
			##check empty data
            if(!empty($this->data)) {
				$this->DeclineSuspendType->create();
				if($this->DeclineSuspendType->save($this->data)) {
					if(isset($this->data['Action']['redirectpage'])){
						$msg='Status Type Added Successfully.';
						$this->Session->setFlash($msg,'default', array('class' => 'successmsg'));
					   $this->redirect(array('controller' =>'admins', 'action' =>'decline_suspend_list'));
					}
					else if(isset($this->data['Action']['noredirection'])){				
						$id = $this->DeclineSuspendType->id;
						//$id=$this->data['StatusType']['id'];
						//$opr=$id==""?'add':'edit';
						$msg='Status Type saved Successfully.';
						$this->Session->setFlash($msg,'default', array('class' => 'successmsg'));
						$this->redirect(array("controller"=>"admins" , "action"=>"decline_suspend_type_add",$id)); 			
					}
				} else
				{
					$this->validateErrors();
				}
			}
			
			if (empty($this->data)) {
            $this->data = $this->DeclineSuspendType->read(null, $id);
			}
            
        }
        
      /*
       * Function name   : formtypesadd()
       * Description :  For SUPER ADMIN - This function used to add form types  for selected project
       * Created On      : 23rd Nov 2011 (QUAD)
       */     
        function formtypesadd($formtypeid=''){
                  
           ##check user session live or not
            $this->session_check_admin();
           
            //for active menu display
            $this->set('page_url',"formtypesadd");
            //   if(empty($project_name)) $this->redirect('/companies/session_expired');

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '39'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition       
   
            App::import("Model", "FormType");
            $this->FormType =  & new FormType();             

            ##check empty data
            if(!empty($this->data)) {      
			
             $this->data['FormType']['project_id'] ='0';   
             // Default Setting for field inclusion and required field setting
             $this->data['FormType']['fld_firstname'] ='1';   
             $this->data['FormType']['req_firstname'] ='1';   
             $this->data['FormType']['fld_lastname'] ='1';   
             $this->data['FormType']['req_lastname'] ='1';   
             $this->data['FormType']['fld_title'] ='0';   
             $this->data['FormType']['req_title'] ='0';   
             $this->data['FormType']['fld_company'] ='0';   
             $this->data['FormType']['req_company'] ='0';   
             $this->data['FormType']['fld_phone'] ='0';   
             $this->data['FormType']['req_phone'] ='0';   
             $this->data['FormType']['fld_email'] ='1';   
             $this->data['FormType']['req_email'] ='1';   
             $this->data['FormType']['fld_address1'] ='0';   
             $this->data['FormType']['req_address1'] ='0';   
             $this->data['FormType']['fld_address2'] ='0';   
             $this->data['FormType']['req_address2'] ='0';   
             $this->data['FormType']['fld_city'] ='0';   
             $this->data['FormType']['req_city'] ='0';   
             $this->data['FormType']['fld_stprovince'] ='0';   
             $this->data['FormType']['req_stprovince'] ='0';   
             $this->data['FormType']['fld_zippostalcode'] ='0';   
             $this->data['FormType']['req_zippostalcode'] ='0';   
             $this->data['FormType']['fld_country'] ='0';   
             $this->data['FormType']['req_country'] ='0';   
             $this->data['FormType']['fld_list1'] ='0';   
             $this->data['FormType']['req_list1'] ='1';   
             $this->data['FormType']['fld_list2'] =0;   
             $this->data['FormType']['req_list2'] ='1';   
             $this->data['FormType']['fld_message'] ='0';   
             $this->data['FormType']['req_message'] ='1';
			 
             $strFormHtml="";
			//echo "<pre>";
            //print_r($_REQUEST);
			if(isset($_REQUEST['chkfld'])){
                $strFormHtml="<table cellpadding='3' align='center' width='100%'><tbody>";
                    for($i=0; $i<sizeof($_REQUEST['chkfld']); $i++){
                        $fld=$_REQUEST['chkfld'][$i];
                        $fldnm= end(explode("_", $fld));
                        if($fldnm!="" && $fldnm!=NULL){  
                            // Check included field is set as required or not 
                            $req_fldnm="req_".$fldnm;
                            $fld_req=0;
                            $fld_req_html="";
                            if(in_array($req_fldnm, $_REQUEST['reqfld'])){
                                $fld_req=1;
                                $fld_req_html="<span style='color: red;'>*</span>";
                            }
                            $strFormHtml.="<tr>"; 
                            if($fldnm=="message"){
                                $strFormHtml.=" <td width='40%' align='right' valign='top'><label class='boldlabel'>".ucfirst($fldnm).$fld_req_html."</label></td>";
                                $strFormHtml.="<td width='60%'><span class='txtArea_top'><span class='newtxtArea_bot'> ";
                                $strFormHtml.="<textarea id='".$fld."' name='".$fld."' class='noBg'  cols='35' row='7' style='height: 100px;'></textarea> </span></span></td>"; 
                            }else if($fldnm=="list1" || $fldnm=="list2"){     
                                       
                                       $fld_label=  $this->data['FormType']['fld_'.$fldnm.'_label'];
                                       $order   = array("\r\n", "\n", "\r"); 
                                       $lst_fld_options= str_replace($order, "#", $this->data['FormType']['fld_'.$fldnm.'_options']); 
                                       $option_lines = explode("#",$lst_fld_options); 
                                        $strFormHtml.="<td width='40%' align='right' valign='top'><label class='boldlabel'>".ucfirst($fld_label).$fld_req_html."</label></td>";
                                        $strFormHtml.="<td width='60%'> <span class='txtArea_top'><span class='newtxtArea_bot'>";
                                        $strFormHtml.="<select name='fld_".$fldnm."' id='fld_".$fldnm."' empty='' class='multilist multi'>";
                                        $strFormHtml.="<option value=''>Select Options</option>";   
                                         for($l=0; $l < sizeof($option_lines); $l++){
                                               $strFormHtml.="  <option value='".$option_lines[$l]."'>".$option_lines[$l]."</option>";
                                         }
                                          $strFormHtml.="</select></span><span></td>";  
                                }else {
                                    if($fldnm=="stprovince") {
                                        $fldnm_lbl="ST/Province";
                                    }else if($fldnm=="zippostalcode") {
                                            $fldnm_lbl="Zip/Postal Code";
                                        }else{
                                            $fldnm_lbl=ucfirst($fldnm);
                                    }
                                    //  $strFormHtml.="<tr>"; 
                                    $strFormHtml.="<td width='40%' align='right' valign='top'><label class='boldlabel'>".$fldnm_lbl.$fld_req_html."</label></td>"; 
                                    $strFormHtml.="<td width='60%'><span class='intpSpan'><input type='text' id='".$fld."' name='".$fld."' class='inpt_txt_fld'  maxlength='200'> </span></td>"; 

                            }
                            $strFormHtml.="</tr>"; 
                            $this->data['FormType'][$fld] =1;    
                            $this->data['FormType'][$req_fldnm] =$fld_req;    
                        }              
                    }
                  
                $strFormHtml.="</tbody></table>";
                $this->data['FormType']['form_html'] =$strFormHtml; 
  
                #Save form type data              
                
				//echo '<pre>';print_r($this->data['FormType']); die;
                if($this->FormType->Save($this->data['FormType'])){
                    $lastinsertid = $this->FormType->id;
					if(isset($this->data['FormType']['id'])){
                        $this->Session->setFlash('Form Type updated Successfully.','default', array('class' => 'successmsg'));
                    }else{
                        $this->Session->setFlash('Form Type Added Successfully.','default', array('class' => 'successmsg'));;
                    }
                       
                      if(isset($this->data['Action']['redirectpage'])){  
                       $this->redirect("/admins/formtypes");   
                      }else{
                           $this->redirect("/admins/formtypesadd/".$lastinsertid);
                      }
                 }
                   
              //   echo "<pre>";  print_r($this->data['FormType']);  echo "</pre>";    
                 
            }

            }

            $this->set('selectedtemplateresponce',"");
            $this->set('selectedtemplateproj',""); 
            if($formtypeid){        // Read form type data and set it
               $this->FormType->id = $formtypeid;
               $this->data = $this->FormType->read();
                $this->set('formtypeid',$formtypeid);    
                $this->set('selectedtemplateresponce',$this->data['FormType']['emailtemplate_toresponce']);    
                $this->set('selectedtemplateproj',$this->data['FormType']['emailtemplate_toalert_mgr']);     
            }
            
            // GET ALL CUSTOM EMAIL TEMPLATES
           // $this->customtemplatelisting($project_id); 
            
             // GET ALL Company Types
            $this->companytypedropdown(0); 
            
             // GET ALL Contact Types
            $this->contacttypedropdown(0); 
        }    
        
        
        /**
        *  Function to Set Super admin Form types as default form type for newly created projects
        *  funstion used in addproejct fucntion
        */

        function setDefaultFormTypesToNewProject($proejctid){  
                if($proejctid==""){
                    return false;
                }
                ##import FormType  model for processing
                App::import("Model", "FormType");
                $this->FormType =   & new FormType();
            
             $fromcondition = "delete_status = '0' and project_id='0'";
             $defaultformtypedata = $this->FormType->find('all',array("conditions"=>$fromcondition));
             if($defaultformtypedata){
                 foreach($defaultformtypedata as $eachrow){
                    $this->data['FormType']['id'] = "";
                    $this->data['FormType']['project_id'] = $proejctid;
                    $this->data['FormType']['formtype_name'] = $eachrow['FormType']['formtype_name'];
                    $this->data['FormType']['form_description'] = $eachrow['FormType']['form_description'];
                    $this->data['FormType']['emailtemplate_toresponce'] = $eachrow['FormType']['emailtemplate_toresponce'];
                    $this->data['FormType']['emailtemplate_toalert_mgr'] = $eachrow['FormType']['emailtemplate_toalert_mgr'];
                    $this->data['FormType']['company_type'] = $eachrow['FormType']['company_type'];
                    $this->data['FormType']['contact_type'] = $eachrow['FormType']['contact_type'];
                    
                    $this->data['FormType']['fld_firstname'] = $eachrow['FormType']['fld_firstname'];
                    $this->data['FormType']['req_firstname'] = $eachrow['FormType']['req_firstname'];
                    
                    $this->data['FormType']['fld_lastname'] = $eachrow['FormType']['fld_lastname'];
                    $this->data['FormType']['req_lastname'] = $eachrow['FormType']['req_lastname'];
                    
                    $this->data['FormType']['fld_title'] = $eachrow['FormType']['fld_title'];
                    $this->data['FormType']['req_title'] = $eachrow['FormType']['req_title'];
                    
                    $this->data['FormType']['fld_company'] = $eachrow['FormType']['fld_company'];
                    $this->data['FormType']['req_company'] = $eachrow['FormType']['req_company'];
                    
                    $this->data['FormType']['fld_phone'] = $eachrow['FormType']['fld_phone'];
                    $this->data['FormType']['req_phone'] = $eachrow['FormType']['req_phone'];
                    
                    $this->data['FormType']['fld_email'] = $eachrow['FormType']['fld_email'];
                    $this->data['FormType']['req_email'] = $eachrow['FormType']['req_email'];
                    
                    $this->data['FormType']['fld_address1'] = $eachrow['FormType']['fld_address1'];
                    $this->data['FormType']['req_address1'] = $eachrow['FormType']['req_address1'];
                    
                    $this->data['FormType']['fld_address2'] = $eachrow['FormType']['fld_address2'];
                    $this->data['FormType']['req_address2'] = $eachrow['FormType']['req_address2'];
                    
                    $this->data['FormType']['fld_city'] = $eachrow['FormType']['fld_city'];
                    $this->data['FormType']['req_city'] = $eachrow['FormType']['req_city'];
                    
                    $this->data['FormType']['fld_stprovince'] = $eachrow['FormType']['fld_stprovince'];
                    $this->data['FormType']['req_stprovince'] = $eachrow['FormType']['req_stprovince'];
                    
                    $this->data['FormType']['fld_zippostalcode'] = $eachrow['FormType']['fld_zippostalcode'];
                    $this->data['FormType']['req_zippostalcode'] = $eachrow['FormType']['req_zippostalcode'];
                    
                    $this->data['FormType']['fld_country'] = $eachrow['FormType']['fld_country'];
                    $this->data['FormType']['req_country'] = $eachrow['FormType']['req_country'];
                    
                    $this->data['FormType']['fld_list1'] = $eachrow['FormType']['fld_list1'];
                    $this->data['FormType']['req_list1'] = $eachrow['FormType']['req_list1'];
                    $this->data['FormType']['fld_list1_label'] = $eachrow['FormType']['fld_list1_label'];
                    $this->data['FormType']['fld_list1_options'] = $eachrow['FormType']['fld_list1_options'];
                    
                    $this->data['FormType']['fld_list2'] = $eachrow['FormType']['fld_list2'];
                    $this->data['FormType']['req_list2'] = $eachrow['FormType']['req_list2'];
                    $this->data['FormType']['fld_list2_label'] = $eachrow['FormType']['fld_list2_label'];
                    $this->data['FormType']['fld_list2_options'] = $eachrow['FormType']['fld_list2_options'];
                    
                    $this->data['FormType']['fld_message'] = $eachrow['FormType']['fld_message'];
                    $this->data['FormType']['req_message'] = $eachrow['FormType']['req_message'];
                    $this->data['FormType']['form_html'] = $eachrow['FormType']['form_html'];
                   
                    $this->FormType->Save($this->data['FormType']);
                    
                    unset($this->data['FormType']);
                 }
             }
        }
        
       /**
        * Function to set default Member types to New project member type
        * This function used in addproject funtion
        * @param mixed $projectid     - new project id
        * Creaded  - Date : 20th Feb 2011 (QUAD-U) - Member Types and Member Enhacement   
        */
        function setDefaultMemberTypesToNewProject($projectid){    
                if($projectid=="" || $projectid==0){
                    return false;
                }
                ##import FormType  model for processing
                App::import("Model", "MemberType");
                $this->MemberType =   & new MemberType();
            
                $memebertypecondition = "delete_status = '0' and project_id='0'";
                $defaultmembertypedata = $this->MemberType->find('all',array("conditions"=>$memebertypecondition));
                 if($defaultmembertypedata){
                        foreach($defaultmembertypedata as $eachrow){
                        $this->data['MemberType']['id'] = "";
                        $this->data['MemberType']['project_id'] = $projectid;
                        $this->data['MemberType']['member_type'] = $eachrow['MemberType']['member_type'];
                        $this->data['MemberType']['is_coinholder'] = $eachrow['MemberType']['is_coinholder'];
                        $this->data['MemberType']['note'] = $eachrow['MemberType']['note'];
                        $this->data['MemberType']['active_status'] = $eachrow['MemberType']['active_status'];
                        $this->data['MemberType']['delete_status'] = $eachrow['MemberType']['delete_status'];
                                                                     
                        $this->MemberType->Save($this->data['MemberType']);
                        
                        unset($this->data['MemberType']);
                     }
                 }
             
        }
        
        
       /**
        * Function to inherit Super admin Contact types to New project Contact type
        * This function used in addproject funtion
        * @param mixed $projectid     - new project id
        * Creaded
        */
        function inheritSuperContactTypeToNewProject($projectid){    
                if($projectid=="" || $projectid==0){
                    return false;
                }
                ##import FormType  model for processing
                App::import("Model", "ContactType");
                $this->ContactType =   & new ContactType();
            
                $contacttypecondition = "delete_status = '0' and project_id='0'";
                $defaultcontacttypedata = $this->ContactType->find('all',array("conditions"=>$contacttypecondition));
                 if($defaultcontacttypedata){
                        foreach($defaultcontacttypedata as $eachrow){
                        $this->data['ContactType']['id'] = "";
                        $this->data['ContactType']['project_id'] = $projectid;
                        $this->data['ContactType']['contact_type_name'] = $eachrow['ContactType']['contact_type_name'];
                        $this->data['ContactType']['active_status'] = $eachrow['ContactType']['active_status'];
                        $this->data['ContactType']['delete_status'] = $eachrow['ContactType']['delete_status'];
                                                                     
                        $this->ContactType->Save($this->data['ContactType']);
                        
                        unset($this->data['ContactType']);
                     }
                 }
             
        }       
        
        /*
        * Function name   : projectmembertypes()
        * Description : This function used to list all member types of related project
        * Created On      : 20th Feb 2012 - Member Type and Member Enhncement  - QUAD(UA)
        *
        */ 

        function membertypes(){
            //STEP : Check Session
            $this->session_check_admin();
            
            //STEP : Get session project id and its details
            $project_id = '0';
            //for active menu display
            $this->set('page_url',"projectmembertypes");            
            //STEP : Get Query string
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }
			$this->set("hlpdata",$this->getHelpContent(62));           
            App::import("Model", "MemberType");
            $this->MemberType =   & new MemberType();               
             if(!empty($this->data))
            {      
                $searchkey=$this->data['Admins']['searchkey'];
            }else{
                $searchkey="";
            }
            $condMemberTypes=$this->MemberType->getMemberTypesByProjectCondition($searchkey);
            $field='';
            $this->Pagination->sortByClass    = 'MemberType'; ##initaite pagination 
           
            $this->Pagination->total= count($this->MemberType->getMemberTypesByProject($condMemberTypes));    
            list($order,$limit,$page) = $this->Pagination->init($condMemberTypes,$field);            
            $membertypelist = $this->MemberType->getMemberTypesByProject($condMemberTypes,$order, $limit, $page);

            ##set Coinset data in variable            
            $this->set("membertypelist",$membertypelist);

          

        }
        
        
        /**
        * Fucntion to add/ edit member type to project
        * 
        * @param mixed $membertypeid
        */
        function addmembertype($membertypeid='', $returnurl=""){
             //STEP : Check admin session
            $this->session_check_admin();               
            //STEP : Chekc project session and get project details
            $projectid = '1';                  
            App::import("Model", "MemberType");
            $this->MemberType =   & new MemberType(); 
            if(!empty($this->data)) {  
				//$this->pl($this->data);
                      
                $ctid= $this->data['MemberType']['id'];  
				#set the posted data
                $this->MemberType->set($this->data);
                #check server side validation
                $this->MemberType->invalidFields();
                 $ptname = $this->data['MemberType']['member_type'];
				//Check member type name already exist or not
				//$condition = "member_type = '$ptname'";
				//$isExistCnt = count($this->MemberType->find('all',array("conditions"=>$condition)));
				//if($isExistCnt > 0){		
						if($ctid > 0)  {
							$condition = "member_type = '".$ptname."'    AND  delete_status = '0' and  id!='".$ctid."'";
							$ptdata = $this->MemberType->find('all',array("conditions"=>$condition));
						}else{
                   $condition = "member_type = '".$ptname."'    AND  delete_status = '0'";
                   $ptdata = $this->MemberType->find('all',array("conditions"=>$condition)); 
                }
				$ptdata = $ptdata['0']['MemberType']['member_type'];
                if(empty($ptdata)){

                  $this->data['MemberType']['project_id']=$projectid; 
                    #save data in contact type table
                    if($this->MemberType->Save($this->data['MemberType'])){
                          if($returnurl!=""){  // if its pop-up window from addformtype
                          //   $gotourl=str_replace("_id_", "/", $returnurl);
                             $this->set("closeit","yes");
                          }else{
                               if($ctid > 0){
                                    $this->Session->setFlash('Member Type updated Successfully.','default', array('class' => 'successmsg'));
                                    if(isset($this->data['Action']['redirectpage'])){
                                        $this->redirect(array('controller'=>'admins','action'=>'membertypes'));
                                    }else{
                                        $this->redirect(array('controller'=>'admins','action'=>'addmembertype',$ctid));
                                    }
                               }else{
                                    $this->Session->setFlash('Member Type Added Successfully.','default', array('class' => 'successmsg'));
                                    if(isset($this->data['Action']['redirectpage'])){
                                    		$this->redirect(array('controller'=>'admins','action'=>'membertypes'));
                                    }else{
										$this->redirect(array('controller'=>'admins','action'=>'addmembertype',$ctid));       
                                    }
                               }
                          }

                    }else{
                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));
                          if(isset($this->data['Action']['redirectpage'])){
                                $sessdata=$this->Session->read('newsortingby');
                                $this->redirect('/'.$sessdata);
                            }else{
                                $this->redirect(array('controller'=>'admins','action'=>'addmembertype'));
                            }
                         
                    }

                }else{
                    $this->Session->setFlash('Member Type with same name already exists.','default',array('class' => 'msgTXt'));
                      if(isset($this->data['Action']['redirectpage'])){
                            $sessdata=$this->Session->read('newsortingby');
                            $this->redirect('/'.$sessdata);
                        }else{
                            $this->redirect( array('controller'=>'admins','action'=>'projectcompanytypes_add'));
                        }
					}
            }

            //STEP : if $contacttypeid is not 0 then read data
            if($membertypeid){
                $this->MemberType->id = $membertypeid;
                $this->set('membertypeid', $membertypeid);  
                $this->set('pageactionname', "Edit");    
                $this->data = $this->MemberType->read();
				$this->set('membertypeid',$membertypeid);
            }else{
                $this->set('membertypeid', 0); 
                $this->set('pageactionname', "Add"); 
            }            
            //STEP : Set Variables
            $this->set('page_url','projectcontacttypes');       
	       $this->set("hlpdata",$this->getHelpContent(57));   
        }
        
        
                /*
        * Function name   : projectdonatelevels()
        * Description : This function used to list all donation levels of related project
        * Created On      : 22nd Feb 2012 - Member Type and Member Enhncement  - QUAD(UA)
        *
        */ 

        function memberlevels(){
            
            $this->session_check_admin();            
            $project_id = '0';            
            $this->set("hlpdata",$this->getHelpContent(62));   
            App::import("Model", "MemberLevel");
            $this->MemberLevel =   & new MemberLevel();   
            
             if(!empty($this->data))
            {      
                $searchkey=$this->data['Admins']['searchkey'];
            }else{
                $searchkey="";
            }
            $cond='';//$this->MemberType->getMemberTypesByProjectCondition($project_id,$searchkey);
            $field='';
            $this->Pagination->sortByClass    = 'MemberLevel'; ##initaite pagination 
           
            $this->Pagination->total= count($this->MemberLevel->getDonationLevelsByProject($project_id, $searchkey));    
            list($order,$limit,$page) = $this->Pagination->init($cond,$field);            
            $memberlevellist = $this->MemberLevel->getDonationLevelsByProject($project_id, $searchkey,$order, $limit, $page);
			//$this->pl($memberlevellist);
            ##set Coinset data in variable            
            $this->set("memberlevellist",$memberlevellist);         

        }
        
        /**
        * Fucntion to add/ edit company type to project
        * 
        * @param mixed $companytypeid
        */
        function memberlevels_add($levelid='', $returnurl=""){

            $this->session_check_admin();               
            $projectid = '0';   
            App::import("Model", "MemberLevel");
            $this->MemberLevel =   & new MemberLevel();
            if(!empty($this->data)) {        
				//pr($this->data);die;
	
                $ctid= $this->data['MemberLevel']['id'];  
                #set the posted data
                $this->MemberLevel->set($this->data);

                #check server side validation
                $this->MemberLevel->invalidFields();
                $level_name = $this->data['MemberLevel']['level_name'];
                $level_number = $this->data['MemberLevel']['level_number'];

                if($ctid > 0)  {
                    $condition = "level_name = '".$level_name."' AND level_number = '".$level_number."'  AND  delete_status = '0' and project_id='".$projectid."' and id!='".$ctid."'";
                    $ptdata = $this->MemberLevel->find('all',array("conditions"=>$condition));
                }else{
                   $condition = "level_name = '".$level_name."'  AND level_number = '".$level_number."'  AND  delete_status = '0' and project_id='".$projectid."'";
                   $ptdata = $this->MemberLevel->find('all',array("conditions"=>$condition)); 
                }

                if(!$ptdata){

                    $this->data['MemberLevel']['project_id']=$projectid; 
                    #save data in contact type table
                    if($this->MemberLevel->Save($this->data['MemberLevel'])){
                          if($returnurl!=""){  
                             $this->set("closeit","yes");
                          }else{
                               if($ctid > 0){
                                    $this->Session->setFlash('Member Level updated Successfully.','default', array('class' => 'successmsg'));
                                    if(isset($this->data['Action']['redirectpage'])){
                                         $this->redirect(array('controller'=>'admins','action'=>'memberlevels'));
                                    }else{
                                        $this->redirect(array('controller'=>'admins','action'=>'memberlevels_add/$ctid'));
                                    }
                               }else{
                                    $this->Session->setFlash('Member Level Added Successfully.','default', array('class' => 'successmsg'));
                                    if(isset($this->data['Action']['redirectpage'])){
                                        $this->redirect(array('controller'=>'admins','action'=>'memberlevels'));
                                    }else{
                                        $this->redirect(array('controller'=>'admins','action'=>'memberlevels_add'));
                                    }
                               }
                          }

                    }else{
                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));
                          if(isset($this->data['Action']['redirectpage'])){
                                $sessdata=$this->Session->read('newsortingby');
                                $this->redirect('/'.$sessdata);
                            }else{
                               $this->redirect(array('controller'=>'admins','action'=>'memberlevels_add'));
                            }
                         
                    }

                }else{
                    $this->Session->setFlash('Donation Level with same name already exists.','default',array('class' => 'msgTXt'));
                      if(isset($this->data['Action']['redirectpage'])){
                            $sessdata=$this->Session->read('newsortingby');
                            $this->redirect('/'.$sessdata);
                        }else{
                           $this->redirect(array('controller'=>'admins','action'=>'memberlevels_add'));
                        }
                }

              
            }
                
            //STEP : if $contacttypeid is not 0 then read data
            if($levelid){

                $this->MemberLevel->id = $levelid;
                $this->set('levelid', $levelid);  
                $this->set('pageactionname', "Edit");    
                $this->data = $this->MemberLevel->read();
                $level_num='01';
                $level_lowrange='0.00';
				if($this->data['MemberLevel']){                                 
                    $level_num=$this->data['MemberLevel']['level_number'];
                    $level_lowrange=$this->data['MemberLevel']['level_lowerrange']; 
					$level_upperrange=$this->data['MemberLevel']['level_upperrange']; 
                }
            }else{
                $this->set('membertypeid', 0); 
                $this->set('pageactionname', "Add"); 
                $level_num='01';
                $level_lowrange='0.00';
				$level_upperrange='0.00';
                $lastlevel=$this->MemberLevel->getLastDonationLevelOfProject($projectid);
                if($lastlevel){
					$level_upperrange='';
                    $level_num=$lastlevel['MemberLevel']['level_number']+1;
                    $level_lowrange=$lastlevel['MemberLevel']['level_upperrange']+.01; 
                }
            }           
            $this->set('level_num',$level_num);   
            $this->set('level_lowrange',$level_lowrange);   
			$this->set('level_upperrange',$level_upperrange);   
            $this->set("hlpdata",$this->getHelpContent(57));  
 
        }     
        
          /**
        * Function to inherit Super admin mail templates to New project Contact type
        * This function used in addproject funtion
        * @param mixed $projectid     - new project id Creaded
        * Date :  12-12-2011
        */
        function inheritSuperMailTempaltesToNewProject($projectid){    
                if($projectid=="" || $projectid==0){
                    return false;
                }
               
                ##import EmailTemplate  model for processing
                 App::import("Model", "EmailTemplate");
                 $this->EmailTemplate =   & new EmailTemplate();
                $projectdetails=$this->getprojectdetails($projectid); 
            
                //$supermailtempcondition = "delete_status = '0' and project_id='0' and is_inherit='1' ";
                $supermailtempcondition = "delete_status = '0' and project_id='0' and is_sytem='0' ";
                $defaultmailtempdata = $this->EmailTemplate->find('all',array("conditions"=>$supermailtempcondition));
                 if($defaultmailtempdata){
                        foreach($defaultmailtempdata as $eachrow){
                        $this->data['EmailTemplate']['id'] = "";
                        $this->data['EmailTemplate']['project_id'] = $projectid;
                        $this->data['EmailTemplate']['email_template_name'] = $eachrow['EmailTemplate']['email_template_name'];
                        $this->data['EmailTemplate']['subject'] = $eachrow['EmailTemplate']['subject'];
                        $this->data['EmailTemplate']['sender'] = $projectdetails['Sponsor']['email'];
                        $this->data['EmailTemplate']['content'] = $eachrow['EmailTemplate']['content']; 
                        $this->data['EmailTemplate']['is_sytem'] = '0';
                        $this->data['EmailTemplate']['is_inherit'] = '0'; 
                        $this->data['EmailTemplate']['active_status'] = $eachrow['EmailTemplate']['active_status'];
                        $this->data['EmailTemplate']['delete_status'] = $eachrow['EmailTemplate']['delete_status'];
                        $this->data['EmailTemplate']['send_cc_email'] = $eachrow['EmailTemplate']['send_cc_email'];
                                                                     
                        $this->EmailTemplate->Save($this->data['EmailTemplate']);
                        
                        unset($this->data['EmailTemplate']);
                     }
                 }
             
        }
        
        
                 /*
        * Function name   : coming_soon()
        * Description : coming soon  page
        * Created On      : 5th March 2012
        *
        */

        function coming_soon($tabpagename, $topmenuname='donation'){
            ##check user session live or not
            $this->session_check_admin();
            
            //for active menu display
            $this->set('page_url',"memberhistory");            
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            $this->set("recordid",$project_id);

            /* Project Details */
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    
            

            /* Get Member profile edit */
             $projecteditmember = $this->Session->read("projecteditmember");        
             $this->set('projecteditmember',$projecteditmember);
             
             # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);
            # set help condition    
            
            $this->set("tabpagename",$tabpagename);
            $this->set("topmenuname",$topmenuname);  

         }    

       /**
       * Function access shopping cart admin panel with PM auto login to open cart system
       * Ref - Shopping cart Enahcemnt document 
       *  Created : 12th March 2012 ( QUAD- UA) 
       */
         
        function projectshoppingcart(){
          
            ##check user session live or not
            $this->session_check_admin();
            
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            
             /* Project Details */
            $projectDetails=$this->getprojectdetails($project_id);
            $this->set('project_id',$project_id);      
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;  
            
            # import ProjectShoppingCart    
            App::import("Model", "ProjectShoppingCart");
            $this->ProjectShoppingCart =  & new ProjectShoppingCart();
            $shoppingCart=$this->ProjectShoppingCart->getShoppingCartByProject($project_id);
            $this->set("shoppingCartData",$shoppingCart);  
            
            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '67'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition
        }
		
		function project_redirection() {
			Configure::write('debug', '0');
			$this->layout = false;
			//print_r($this->data);
			//print_r($_REQUEST);
			$status = 0;
			if(isset($_REQUEST['id'])) {
				$projectid = $_REQUEST['id'];
				$this->Session->delete('sessionprojectid');
				$this->Session->write("sessionprojectid",$projectid);
				$status = 1;
				//$this->redirect(array('controller' =>'admins', 'action' =>'projectdashboard'));
				//$this->projectlist();
				//$this->set("selectedprojectid",$projectid);
			}
			echo $status;
			exit(0);
		}
		
		
		/*
			@Auther			Suman Singh
			@Type			Created
			@Variable name	odified
			@Date			May 14, 2012
		*/
		function setup_changestatus($recid=null,$status=null){
		if($status == 2 )
		$status = 0;
            ##check user session live or not
			$this->session_check_admin();
            
			##import dynamic model for processing
			App::import("Model", "StatusType");
            $this->StatusType =   & new StatusType();
			$data = $this->StatusType->read(null, $recid);
			//var_dump($status);
			//pr($data);
			//die;
			if($status == 0 && $data['StatusType']['default'] == 1) {
			$this->Session->setFlash('you can not deactivate this record.','default', array('class' => 'successmsg'));
			} else {
			$this->StatusType->updateAll(array('StatusType.active_status'=> $status), array('StatusType.id' => $recid));
			$this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));
			}
			$this->redirect(array("controller"=>"admins","action"=>"status_type_list"));
        }
		
		function status_setAsDefault($recid=null){

            ##check user session live or not
            $this->session_check_admin();
            ##import dynamic model for processing
            App::import("Model", 'StatusType');
            $this->StatusType =   & new StatusType();       
            ##set the record for updation
            $this->StatusType->updateAll(array('StatusType.default'=> 1,'StatusType.active_status'=> 1), array('StatusType.id' => $recid));
            $this->StatusType->updateAll(array('StatusType.default'=> 0), array('StatusType.id !=' => $recid));
			
            $this->Session->setFlash('Default Status updated successfully.','default', array('class' => 'successmsg'));

            $this->redirect(array('controller'=>'admins','action'=>'status_type_list'));
        }
		
		function status_type_delete($recid=null){
            ##check user session live or not
            $this->session_check_admin();
			
            ##import dynamic model for processing
            App::import("Model", 'StatusType');
            $this->StatusType =   & new StatusType(); 
			//print_r($recid);
			$allid=str_replace('*', ' or id = ',$recid);
            $where="id=$allid";  
            if(count(explode('*',$recid))==1){
                $this->data['StatusType']['id'] = $recid;
            }
			$ww = explode('*',$recid);
			//print_r($ww);
			//$id_data=$this->StatusType->query("select `default` from status_types where ".$where);
			$id_data=$this->StatusType->find('first',array('conditions'=>array('StatusType.default'=>1),'fields'=>array('id')));
			
			if(isset($id_data['StatusType']['id']) && $id_data['StatusType']['id'] != '' && in_array($id_data['StatusType']['id'],$ww)) {
				//print_r($id_data);
				$this->Session->setFlash('You cannot delete project default Status.','default', array('class' => 'successmsg'));
				$this->redirect(array('controller'=>'admins','action'=>'status_type_list'));
			}

            ##set the record for updation
            //$this->StatusType->updateAll(array('StatusType.delete_status'=> 1), array('StatusType.id' => $recid,'StatusType.default'=> 0));
            $this->StatusType->updateAll(array('delete_status'=>1),$where);
            $this->Session->setFlash('Status type deleted successfully.','default', array('class' => 'successmsg'));

            $this->redirect(array('controller'=>'admins','action'=>'status_type_list'));
        }
		
		function billing_type_delete($recid=null) {
            ##check user session live or not
            $this->session_check_admin();
			
            ##import dynamic model for processing
            App::import("Model", 'BillingType');
            $this->BillingType =   & new BillingType(); 
			//print_r($recid);
			$allid=str_replace('*', ' or id = ',$recid);
            $where="id=$allid";  
            if(count(explode('*',$recid))==1){
                $this->data['BillingType']['id'] = $recid;
            }
			
            ##set the record for updation
            
            $this->BillingType->updateAll(array('delete_status'=>1),$where);
            $this->Session->setFlash('Billing type deleted successfully.','default', array('class' => 'successmsg'));

            $this->redirect(array('controller'=>'admins','action'=>'billingtype_list'));
        }
		
		function sponsor_delete($recid=null,$pid=null){
            ##check user session live or not
            $this->session_check_admin();
			
            ##import dynamic model for processing
            App::import("Model", "Company");
            $this->Company =   & new Company();  
			//print_r($recid);
			//$allid=str_replace('*', ' or id = ',$recid);
            //$where="id=$allid";  
            //if(count(explode('*',$recid))==1){
              //  $this->data['Company']['id'] = $recid;
            //}
			$cides = explode('*',$recid);
			$pides = explode('*',$pid);
			//print_r($cides);
			//print_r($pides);
			
			if(isset($cides) && !empty($cides)) {
				
				App::import("Model", "ProjectOwner");
				$this->ProjectOwner =   & new ProjectOwner();
				foreach($cides as $key=>$vv) {
					$this->ProjectOwner->deleteAll(array('owner_id'=>$vv,'project_id'=>$pides[$key]));
					$this->Company->updateAll(array('Company.delete_status'=>"'1'"),array('Company.id'=>$vv));
				}
			}
			
			$this->Session->setFlash('Project Owner deleted successfully.','default', array('class' => 'successmsg'));

            $this->redirect(array('controller'=>'admins','action'=>'ownerlist'));
        }
		
		function setDefaultProjectLead($recid=null){

            ##check user session live or not
            $this->session_check_admin();
            ##import dynamic model for processing
            App::import("Model", 'ContactType');
            $this->ContactType =   & new ContactType();       
            ##set the record for updation
            $this->ContactType->updateAll(array('ContactType.active_status' => '"1"','ContactType.project_lead'=> '1'), array('ContactType.id' => $recid));
            $this->ContactType->updateAll(array('ContactType.project_lead'=> '0'), array('ContactType.id !=' => $recid,'ContactType.delete_status' => '0'));			
            $this->Session->setFlash('Project Lead updated successfully.','default', array('class' => 'successmsg'));
            $this->redirect(array('controller'=>'admins','action'=>'contacttype'));
        }
		
		function contactType_changestatus($recid=null,$status=null){
			if($status == 2 )
			$status = '0';
			
			if($status == 1 )
			$status = '1';
			
            ##check user session live or not
			$this->session_check_admin();
            
			##import dynamic model for processing
			App::import("Model", "ContactType");
            $this->ContactType =   & new ContactType();
			$data = $this->ContactType->read(null, $recid);
			
			if($status == 0 && $data['ContactType']['project_lead'] == 1) {
			$this->Session->setFlash('you can not deactivate this record.','default', array('class' => 'successmsg'));
			} else {
			$this->ContactType->updateAll(array('ContactType.active_status'=> "'$status'"), array('ContactType.id' => $recid));
			$this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));
			}
			$this->redirect(array("controller"=>"admins","action"=>"contacttype"));

        } //end changestatus function
		
		function getprojectLeadEmai_ajax(){
			Configure::write('debug', '0');
			$this->layout = false;
			//print_r($this->data);
			//print_r($_REQUEST);
			
			if(isset($_REQUEST['id'])) {
			$ids = $_REQUEST['id'];
			//print_r($_REQUEST);
			$ids = '';
			if(is_array($_REQUEST['id'])) {
			$ids = implode(',',$_REQUEST['id']);
			} else {
			$ids = $_REQUEST['id'];
			}
			
			##import Contacts  model for processing
            App::import("Model", "Contact");
            $this->Contact =   & new Contact();    
            $contactname="";
            //contact box
            ##relation with company
            /*
			$this->Contact->bindModel(array('belongsTo'=>array(
            'ContactType'=>array(
            'foreignKey'=>false,
            'conditions'=>'Contact.contact_type_id = ContactType.id '
            )
            )));
			*/
            //$condition2 = "Contact.id in (".$ids.") AND  Contact.delete_status = '0' AND Contact.active_status='1' AND ContactType.project_lead= '1'";    
            $condition2 = "Contact.id in (".$ids.") AND  Contact.delete_status = '0' AND Contact.active_status='1'";    
            $condata = $this->Contact->find('first',array("conditions"=>$condition2,'fields'=>array('Contact.email')));
			//print_r($condata);
			if(!empty($condata))
			echo $condata['Contact']['email'];
			else
			echo '';
			//print_r($condata);
            exit(0);
			}
		}

		function getOwnerName($id = null) {
			App::import("Model", "Company");
            $this->Company =   & new Company();
			$cc = $this->Company->findById($id,array('Company.company_name'));
			
			if(isset($cc['Company']['company_name']))
			return $cc['Company']['company_name'];
			else
			return '';
		}

		function getallcompanydata(){
			$this->session_check_admin();
			 $this->layout = false;
			App::import("Model", "Company");
            $this->Company =   & new Company();
			$condition="Company.delete_status='0' and Company.active_status='1'";         
			$companydata = $this->Company->find('all',array('conditions' => $condition));
			//if($companydata ){
				//	$companyname = Set::combine($companydata, '{n}.Company.id', '{n}.Company.company_name');
		//	}
			$this->set('companydata',$companydata);

		}
		
		/**
		* Function name : categorylist()
        * Description : This function used to dispaly list of all category 
        * Created On : 9th July 2012
		*
		*/
		
		 function categorylist(){
            
            ##check user session live or not
            $this->session_check_admin();
         
            if(isset($_SERVER['QUERY_STRING']))            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    
            }
            //for active menu display
            $this->set('page_url',"coinsetlist");
           
            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '40'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
      
		    # set help condition   
             //App::import("Model", "CategoryDetail");
            //$this->CategoryDetail =   & new CategoryDetail(); 
			App::import("Model", "Category");
            $this->Category =   & new Category();    
         
		 $this->Category->bindModel( array('belongsTo' => array(
					'CategoryDetail' => array(
					'foreignKey' => 'category_id'
			))));
			##fetch data from Category table for listing
            $field='';
            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='category_name'){
                $this->Pagination->sortByClass    = 'Category'; ##initaite pagination
            }else if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='merchant'){
                    $this->Pagination->sortByClass    = 'Category'; ##initaite pagination
                }else{
                    $this->Pagination->sortByClass    = 'Category'; ##initaite pagination 
				}
            ##checking search key
	
            if(isset($this->data['categories']['searchkey']) && $this->data['categories']['searchkey']){
                $searchkeyword = $this->data['categories']['searchkey'];
                 $condition = "Category.delete_status = '0' AND Category.category_name LIKE '%".$searchkeyword."%' )";
            }else{
                $condition = "Category.delete_status = '0' ";
            }
            $condition .= " AND Category.parent_category = '0' AND CategoryDetail.category_id = Category.id ";
			
           $this->Category->bindModel( array('hasOne' => array(
            		'CategoryDetail' => array(
            		'foreignKey' => 'category_id'
           ))));
            	
            
		   $this->Pagination->total= count($this->Category->find('all',array("conditions"=>$condition)));
           list($order,$limit,$page) = $this->Pagination->init($condition,$field);
        
			##relation ship with companytocategories table with categories
			$this->Category->bindModel( array('hasOne' => array(
					'CategoryDetail' => array(
					'foreignKey' => 'category_id'
			))));
			
				
           $contegorydtlarr = $this->Category->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
		  
            $this->set("categorydata",$contegorydtlarr);

        }//end categorylist();
		
		
		/**
		* Function name : addcategories()
        * Description : This function used to add and edit category 
        * Created On : 9th July 2012
		*
		*/
		
		 function addcategories($categorydetailsid='',$companyid=''){
		 
			#check user session live or not
			//Configure::write('debug','2');
            $this->session_check_admin(); 
            ##project id for each project
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
           
			##import Category Detail  model for processing
            App::import("Model", "CategoryDetail");
            $this->CategoryDetail =   & new CategoryDetail();  
			
            App::import("Model", "Category");
            $this->Category =   & new Category();  
			  
            //for active menu display
            $this->set('page_url',"addcategories");
      			
			# set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '47'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);

            # set help condition       
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;        
            $this->set("selectedcountry",'');
            $this->set("selectedstate",'');
			$this->set("selectedcategory",'');
			$this->set("selectedsubcategory",'');

            ##check empty data
            if(!empty($this->data)) {
				$parentDirPath =  'img' . DS;
				$filePath1 =  $parentDirPath.'categories' . DS .'square' ;
				$this->File = & new FileComponent;
                $this->File->setDestPath($filePath1);
                $this->data['Project']['id']=$project_id; 
                if(isset($this->data['CategoryDetail']['square_graphic']['name']) && $this->data['CategoryDetail']['square_graphic']['name'] !=''){
                    ##upload image
                    $file_name1 = $this->File->setFileName($this->data['CategoryDetail']['square_graphic']['name']); 
                    $tmp1 = $this->data['CategoryDetail']['square_graphic']['tmp_name'];
                    $file_namesquare = $this->File->uploadImageCategory($file_name1,$tmp1,true,'210X210');
                   
                    if(!empty($file_namesquare)){
						$this->data['CategoryDetail']['square_graphic'] = $file_namesquare;
					}
					else{   
						unset($this->data['CategoryDetail']['square_graphic']); 
					}
                }else{
                	unset($this->data['CategoryDetail']['square_graphic']);
                }

				
				$filePath2 =  $parentDirPath.'categories/wide' ;
			    $this->File->setDestPath($filePath2);
                $this->data['Project']['id']=$project_id; 
                if(isset($this->data['CategoryDetail']['wide_graphic']['name']) && $this->data['CategoryDetail']['wide_graphic']['name'] !=''){
                    ##upload image
                    $file_name2 = $this->File->setFileName($this->data['CategoryDetail']['wide_graphic']['name']); 
                    $tmp2 = $this->data['CategoryDetail']['wide_graphic']['tmp_name'];
                    $file_name_wide = $this->File->uploadImageCategory($file_name2,$tmp2,true,'350X220');
                   
                    if(!empty($file_name_wide)){
						$this->data['CategoryDetail']['wide_graphic'] = $file_name_wide;
					}
					else{   
						unset($this->data['CategoryDetail']['wide_graphic']); 
					}
                }else{   
						unset($this->data['CategoryDetail']['wide_graphic']); 
				}

				$filePath3 =  $parentDirPath.'categories/tall' ;
				$this->File->setDestPath($filePath3);
                $this->data['Project']['id']=$project_id; 
                if(isset($this->data['CategoryDetail']['tall_graphic']['name']) && $this->data['CategoryDetail']['tall_graphic']['name'] !=''){
                    ##upload image
                    $file_name3 = $this->File->setFileName($this->data['CategoryDetail']['tall_graphic']['name']); 
                    $tmp3 = $this->data['CategoryDetail']['tall_graphic']['tmp_name'];
                    $file_name_tall = $this->File->uploadImageCategory($file_name3,$tmp3,true,'350X336');
                   
                    if(!empty($file_name_tall)){
						$this->data['CategoryDetail']['tall_graphic'] = $file_name_tall;
					}
					else{   
						unset($this->data['CategoryDetail']['tall_graphic']); 
					}
                }else{   
						unset($this->data['CategoryDetail']['tall_graphic']); 
				}
				
				
                #set the posted data
                $this->CategoryDetail->set($this->data);
                #check server side validation
				//echo '<pre>';	print_r($this->data);
                 $errormsg = $this->CategoryDetail->invalidFields();
				
                if(empty($errormsg)){
                    $cid = "";
                    $category_id = $this->data['CategoryDetail']['category_id'];
					$sub_category_id = $this->data['CategoryDetail']['sub_category_id'];
                    $description = $this->data['CategoryDetail']['description'];
                   
                    if($this->data['CategoryDetail']['id']){
                        $cid = $this->data['CategoryDetail']['id'];
                       // Check Contact already exists with same firstname, last name. title, address, city state, country, zip 
                        $condition = "category_id = '".$category_id."' sub_category_id = '".$sub_category_id."' AND description = '".$description."' AND delete_status = '0' AND id !='".$cid."'";
                    }else{
                        // Check Contact already exists with same firstname, last name. title, address, city state, country, zip      
                        $condition = "category_id = '".$category_id."' sub_category_id = '".$sub_category_id."' AND description = '".$description."' AND  delete_status = '0'";
                    }    
					
                    ##check already exists company name
                    $ctdata = $this->CategoryDetail->find('all',array("conditions"=>$condition));
					
                    if(!$ctdata){
                    	
                    	if($this->data['Category']['category_name_text']){
                    		$dataCategory['category_name'] =  $this->data['Category']['category_name_text'];
                    		$this->Category->Save($dataCategory);
                    		$this->data['CategoryDetail']['category_id'] = $this->Category->getLastInsertId();
                    	}
                    	
                    	if($this->data['Category']['sub_category_name_text']){
                    		$this->Category->create();
                    		$dataSubCategory['category_name']   =  $this->data['Category']['sub_category_name_text'];
                    		$dataSubCategory['parent_category'] =  $this->data['CategoryDetail']['category_id'];
                    		$this->Category->Save($dataSubCategory);
                    		$this->data['CategoryDetail']['sub_category_id'] = $this->Category->getLastInsertId();
                    	}
            			if($this->CategoryDetail->Save($this->data)){
                            if($cid){
                                $this->Session->setFlash('Category updated Successfully.','default', array('class' => 'successmsg'));
                                if(isset($this->data['Action']['redirectpage'])){
                                    $sessdata=$this->Session->read('newsortingby');
                                    $this->redirect('/'.$sessdata);
                                }else{
                                    $this->redirect(array('controller'=>'admins','action'=>'addcategories',$cid));
                                }
                            }else{
                                $this->Session->setFlash('Category Added Successfully.','default', array('class' => 'successmsg'));
                                if(isset($this->data['Action']['redirectpage'])){
                                    $sessdata=$this->Session->read('newsortingby');
                                    $this->redirect('/'.$sessdata);
                                }else{
                                     $this->redirect(array('controller'=>'admins','action'=>'addcategories'));
                                }
                            }
                        }else{
                            $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));    
                        }
						$this->redirect(array('controller'=>'admins','action'=>'categorylist'));
                    }else{
                        $this->Session->setFlash('Category with same name already exists.','default',array('class' => 'msgTXt'));
                    }
                }else{
					if($errormsg['category_id']!='')
					 $this->Session->setFlash($errormsg['category_id'],'default',array('class' => 'msgTXt'));
					else{
					if($errormsg['description']!='')
					 $this->Session->setFlash($errormsg['description'],'default',array('class' => 'msgTXt'));        
					}
				}
            }
			
            
			//$this->data['CategoryDetail']['category_id'] ='-1';
			if($categorydetailsid){
				
                $this->CategoryDetail->id = $categorydetailsid;
                $condition = array('id' => $categorydetailsid);
                $this->data = $this->CategoryDetail->find('all',array('conditions' =>$condition));
                $this->data = $this->data[0];
             
			 	$this->set("selectedcategory",$this->data['CategoryDetail']['category_id']);
				$this->set("selectedsubcategory",$this->data['CategoryDetail']['sub_category_id']);
				
            }
			
			$this->set("categorydropdown", $this->getCategoryDropdown());
			$this->set("subcategorydropdown", $this->getSubCategoryDropdown($this->data['CategoryDetail']['category_id']));
			
        }//end addcategories();
		
		
		function ajax_add_category(){
		
			$this->layout = 'ajax'; 
		    App::import("Model", "Category");
            $this->Category =   & new Category();    
			$this->data['Category']['category_name'] = $_REQUEST['category_name'];
			if(!empty($this->data)) {
			 	$this->Category->Save($this->data);
			}
			$categorydropdown = $this->getCategoryDropdown();
			foreach($categorydropdown as $key=>$val){	
				echo "<option value='".$key."' >".$val."</option>";
			}
			die();
		}
		
		function ajax_edit_category(){

			$this->layout = 'ajax'; 
		    App::import("Model", "Category");
            $this->Category =   & new Category();    
			$this->data['Category']['category_name'] = '"'.$_REQUEST['category_name'].'"';
			if(!empty($this->data)) {
				$conditions = array('Category.id'=>$_REQUEST['category_id']);
			 	$this->Category->updateAll($this->data['Category'], $conditions);
			}
			$categorydropdown = $this->getCategoryDropdown();
			echo "<option value='' >--Select--</option>";
			foreach($categorydropdown as $key=>$val){	
				echo "<option value='".$key."' >".$val."</option>";
			}
			die();	
		}
		
		
		function ajax_add_sub_category(){
			$this->layout = 'ajax'; 
		    App::import("Model", "Category");
            $this->Category =   & new Category();    
			if(isset($_REQUEST['sub_category_name']) &&  isset($_REQUEST['category_id'])) {
				$this->data['Category']['category_name'] = trim($_REQUEST['sub_category_name']);
				$this->data['Category']['parent_category'] = $_REQUEST['category_id'];
				if(!empty($this->data)) {
					$this->Category->Save($this->data);
				}
			}
			$subcategorydropdown = $this->getSubCategoryDropdown($_REQUEST['category_id']);
			echo "<option value='' >--Select--</option>";
			foreach($subcategorydropdown as $key=>$val){
				echo "<option value='".$key."' >".$val."</option>";
			}
			die();
		}
		
		function ajax_edit_sub_category(){
			$this->layout = 'ajax'; 
		    App::import("Model", "Category");
            $this->Category =   & new Category();    
			if(isset($_REQUEST['sub_category_name']) &&  isset($_REQUEST['sub_category_id'])) {
				$this->data['Category']['category_name'] = "'".$_REQUEST['sub_category_name']."'";
				if(!empty($this->data)) {
					$conditions = array('Category.id'=>$_REQUEST['sub_category_id']);
			 		$this->Category->updateAll($this->data['Category'], $conditions);
				}
			}
			$subcategorydropdown = $this->getSubCategoryDropdown($_REQUEST['category_id']);
			echo "<option value='' >--Select--</option>";
			foreach($subcategorydropdown as $key=>$val){
				echo "<option value='".$key."' >".$val."</option>";
			}
			die();
		}
		
		
		function ajax_add_company_type_category(){
		
			$this->layout = 'ajax'; 
		    App::import("Model", "CompanyTypeCategory");
            $this->CompanyTypeCategory =   & new CompanyTypeCategory();    
			$this->data['CompanyTypeCategory']['company_type_category_name'] = $_REQUEST['ctcn'];
			if(!empty($this->data)) {
			 	$this->CompanyTypeCategory->Save($this->data);
			}
			$companytypecategorydropdown = $this->getCompanyTypeCategoryDropdown();
			echo "<option value='' >--Select--</option>";
			foreach($companytypecategorydropdown as $key=>$val){	
				echo "<option value='".$key."' >".$val."</option>";
			}
			die();
		}
		
		
		function ajax_add_company_type_status(){
		
			$this->layout = 'ajax'; 
		    App::import("Model", "CompanyTypeStatus");
            $this->CompanyTypeStatus =   & new CompanyTypeStatus();    
			$this->data['CompanyTypeStatus']['company_type_status_name'] = $_REQUEST['ctsn'];
			if(!empty($this->data)) {
			 	$this->CompanyTypeStatus->Save($this->data);
			}
			$companytypestatusdropdown = $this->getCompanyTypeStatusDropdown();
			echo "<option value='' >--Select--</option>";
			foreach($companytypestatusdropdown as $key=>$val){	
				echo "<option value='".$key."' >".$val."</option>";
			}
			die();
		}
		
		function ajax_edit_company_type_category(){
			
			$this->layout = 'ajax'; 
		    App::import("Model", "CompanyTypeCategory");
            $this->CompanyTypeCategory =   & new CompanyTypeCategory();    
			$this->data['CompanyTypeCategory']['company_type_category_name'] =  "'".$_REQUEST['ctcn']."'";
			if(!empty($this->data)) {
				$conditions = array('CompanyTypeCategory.id'=>$_REQUEST['ctcn_id']);
			 	$this->CompanyTypeCategory->updateAll($this->data['CompanyTypeCategory'],$conditions);
			}
			$companytypecategorydropdown = $this->getCompanyTypeCategoryDropdown();
			echo "<option value='' >--Select--</option>";
			foreach($companytypecategorydropdown as $key=>$val){	
				echo "<option value='".$key."' >".$val."</option>";
			}
			die();
		}
		
		function ajax_edit_company_type_status(){
			$this->layout = 'ajax'; 
		    App::import("Model", "CompanyTypeStatus");
            $this->CompanyTypeStatus =   & new CompanyTypeStatus();
                
			$this->data['CompanyTypeStatus']['company_type_status_name'] =  "'".$_REQUEST['ctsn']."'";
			if(!empty($this->data)) {
				$conditions = array('CompanyTypeStatus.id'=>$_REQUEST['ctsn_id']);
			 	$this->CompanyTypeStatus->updateAll($this->data['CompanyTypeStatus'],$conditions);
			}
			$companytypestatusdropdown = $this->getCompanyTypeStatusDropdown();
			echo "<option value='' >--Select--</option>";
			foreach($companytypestatusdropdown as $key=>$val){	
				echo "<option value='".$key."' >".$val."</option>";
			}
			die();
		}
		
		
		/**
		* Function name : nonprofittypelist()
        * Description : This function used to dispaly list of all Non-Profit Types 
        * Created On :  August 2012
		*
		*/
		
		 function nonprofittypelist(){
			
            ##check user session live or not
            $this->session_check_admin();
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
            if(isset($_SERVER['QUERY_STRING']))            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    
            }
            //for active menu display
            $this->set('page_url',"nonprofittypelist");
            $project_name=$this->Session->read("projectwebsite_name_admin"); 
			
			
            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '40'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
      
		    # set help condition   
            //App::import("Model", "NonProfitType");
            //$this->NonProfitType =   & new NonProfitType();    
			
			$projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;
			
			##fetch data from Non Profit Type table for listing
            $field='';
            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='non_profit_type_name'){
                $this->Pagination->sortByClass    = 'NonProfitType'; ##initaite pagination
            }else if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='description'){
                    $this->Pagination->sortByClass    = 'NonProfitType'; ##initaite pagination
                }else{
                    $this->Pagination->sortByClass    = 'NonProfitType'; ##initaite pagination 
				}
            ##checking search key
			//print_r($this->data);
            if(isset($this->data['admins']['searchkey']) && $this->data['admins']['searchkey']){
                $searchkeyword = $this->data['admins']['searchkey'];
                 $condition = "NonProfitType.delete_status = '0' AND (NonProfitType.non_profit_type_name LIKE '%".$searchkeyword."%' OR NonProfitType.description  LIKE '%".$searchkeyword."%' )";
            }else{
                $condition = "NonProfitType.delete_status = '0' ";
            }
	  	  
		   $this->Pagination->total= count($this->NonProfitType->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
           $nonprofittypedata = $this->NonProfitType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            ##set project type data in variable
            $this->set("nonprofittypedata",$nonprofittypedata);

        }//end nonprofittypelist();

		/**
		* Function name : addnonprofittypes()
        * Description : This function used to add and edit non profit
        * Created On : August 2012
		*
		*/
		
		 function addnonprofittypes($nonprofittypeid='',$companyid=''){
		 // Configure::write('debug', 2);
            ##check user session live or not
            $this->session_check_admin();
            ##project id for each project
            $project_id = $this->Session->read("sessionprojectid");
            $project_name=$this->Session->read("projectwebsite_name_admin");  
            $this->set('current_project_name',$project_name);
           
            //for active menu display
            $this->set('page_url',"coinsetlist");           
			# set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '47'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);

            # set help condition       
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;        
            $this->set("selectedcountry",'');
            $this->set("selectedstate",'');

            ##check empty data
            if(!empty($this->data)) {
                $this->data['NonProfitType']['project_id'] = $projectid;
                #set the posted data
                $this->NonProfitType->set($this->data);
                #check server side validation
                $errormsg = $this->NonProfitType->invalidFields();
                if(!$errormsg){
                    $cid = "";
                    $non_profit_type_name 	 = $this->data['NonProfitType']['non_profit_type_name'];
                    $description = $this->data['NonProfitType']['description'];
                   
                    if($this->data['NonProfitType']['id']){
                        $cid = $this->data['NonProfitType']['id'];
                       // Check NonProfitType already exists with same firstname, last name. title, address, city state, country, zip 
                        $condition = "	NonProfitType.non_profit_type_name= '".$non_profit_type_name 	."' AND NonProfitType.description = '".$description."' AND NonProfitType.delete_status = '0' AND id !='".$cid."'";
                    }else{
                        // Check NonProfitType already exists with same firstname, last name. title, address, city state, country, zip      
                        $condition = "	NonProfitType.non_profit_type_name= '".$non_profit_type_name 	."' AND NonProfitType.description = '".$description."' AND  NonProfitType.delete_status = '0'";
                    }    
                    ##check already exists company name
                    $ctdata = $this->NonProfitType->find('all',array("conditions"=>$condition));
                    if(!$ctdata){

                       if($this->NonProfitType->Save($this->data)){
                            if($cid){
                                $this->Session->setFlash('Non-Profit Type updated Successfully.','default', array('class' => 'successmsg'));
                                if(isset($this->data['Action']['redirectpage'])){
                                    $sessdata=$this->Session->read('newsortingby');
                                    $this->redirect('/'.$sessdata);
                                }else{
                                    $this->redirect(array('controller'=>'players','action'=>'addnonprofittypes',$cid));
                                }
                            }else{
                                $this->Session->setFlash('Non-Profit Type Added Successfully.','default', array('class' => 'successmsg'));
                                if(isset($this->data['Action']['redirectpage'])){
                                    $sessdata=$this->Session->read('newsortingby');
                                    $this->redirect('/'.$sessdata);
                                }else{
                                     $this->redirect(array('controller'=>'admins','action'=>'addnonprofittypes'));
                                }
                            }
                        }else{
                            $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));    
                        }
						$this->redirect(array('controller'=>'admins','action'=>'nonprofittypelist'));
                    }else{
                        $this->Session->setFlash('Non-Profit Type with same name already exists.','default',array('class' => 'msgTXt'));
                    }
                }else{
					if($errormsg['category_name']!='')
					 $this->Session->setFlash($errormsg['category_name'],'default',array('class' => 'msgTXt'));
					else{
					if($errormsg['description']!='')
					 $this->Session->setFlash($errormsg['description'],'default',array('class' => 'msgTXt'));        
					}
				}
            }
			
			if($nonprofittypeid && $nonprofittypeid !=='addcontact'){
                $this->NonProfitType->id = $nonprofittypeid;
                $this->data = $this->NonProfitType->read();
            }
           
        }//end addnonprofittypes()
		
		/**
		* Function name : overrideslist()
        * Description : This function used to get list of overrides
        * Created On : August 2012
		*
		*/
		
		function overrideslist(){
		
		}// end overrideslist()
		
		//###########################################################################13 - 09 - 12  ##############################
		
		
		function donationlist(){
           
		  
		      $this->session_check_admin();                  
            //for active menu display
            $this->set('page_url',"donationlist");            
            //STEP : Get Query string
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    

            }
              //STEP :    set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '62'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition
           /**
           * Fetch Holder Events  Listing 
           */
             //STEP :    Impost company type model
            App::import("Model", "DonationLevel");
            $this->DonationLevel =   & new DonationLevel();   
            
             if(!empty($this->data))
            {      
			print_r($this->data);
                echo $searchkey=$this->data['Admins']['searchkey'];
            }else{
                $searchkey="";
            }
            $cond='';//$this->MemberType->getMemberTypesByProjectCondition($project_id,$searchkey);
            $field='';
            $this->Pagination->sortByClass    = 'DonationLevel'; ##initaite pagination 
           
            $this->Pagination->total= count($this->DonationLevel->getLastDonationLevelforsa());    
            list($order,$limit,$page) = $this->Pagination->init($cond,$field);            
            $donationlevellist = $this->DonationLevel->getDonationLevelsByProject(0,$searchkey,$order, $limit, $page);
			//echo '<pre>';print_r($donationlevellist);

            ##set Coinset data in variable            
            $this->set("donationlevellist",$donationlevellist);
        }//donationlist
		
		function adddonation($levelid='', $returnurl=""){
		

            //STEP : Check admin session
            $this->session_check_admin(); 
            // STEP : import company type model for processing
            App::import("Model", "DonationLevel");
            $this->DonationLevel =   & new DonationLevel();
            
            // STEP :  If isset data , save contact type
            if(!empty($this->data)) {        
				//echo '<pre>';;print_r($this->data);die;
			     $ctid= $this->data['DonationLevel']['id'];  
                #set the posted data
                $this->DonationLevel->set($this->data);

                #check server side validation
                $this->DonationLevel->invalidFields();
                $level_name = $this->data['DonationLevel']['level_name'];
                $level_number = $this->data['DonationLevel']['level_number'];

                if($ctid > 0)  {
                    $condition = "level_name = '".$level_name."' AND level_number = '".$level_number."'  AND  delete_status = '0' and project_id='".$projectid."' and id!='".$ctid."'";
                    $ptdata = $this->DonationLevel->find('all',array("conditions"=>$condition));
                }else{
                   $condition = "level_name = '".$level_name."'  AND level_number = '".$level_number."'  AND  delete_status = '0' and project_id='".$projectid."'";
                   $ptdata = $this->DonationLevel->find('all',array("conditions"=>$condition)); 
                }

                if(!$ptdata){

                    $this->data['DonationLevel']['project_id']='0'; 
                    #save data in contact type table
                    if($this->DonationLevel->Save($this->data['DonationLevel'])){
                          if($returnurl!=""){  // if its pop-up window from addformtype
                          //   $gotourl=str_replace("_id_", "/", $returnurl);
                             $this->set("closeit","yes");
                          }else{
                               if($ctid > 0){
                                    $this->Session->setFlash('Donation Level updated Successfully.','default', array('class' => 'successmsg'));
                                    if(isset($this->data['Action']['redirectpage'])){
                                        $this->redirect('/admins/donationlist');
                                    }else{
                                        $this->redirect("/admins/adddonation/$ctid");
                                    }
                               }else{
                                    $this->Session->setFlash('Donation Level Added Successfully.','default', array('class' => 'successmsg'));
                                    if(isset($this->data['Action']['redirectpage'])){
                                        $this->redirect('/admins/donationlist');
                                    }else{
                                        $this->redirect("/admins/adddonation");       
                                    }
                               }
                          }

                    }else{
                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));
                          if(isset($this->data['Action']['redirectpage'])){
                                $sessdata=$this->Session->read('newsortingby');
                                $this->redirect('/'.$sessdata);
                            }else{
                                $this->redirect('/admins/adddonation');
                            }
                         
                    }

                }else{
                    $this->Session->setFlash('Donation Level with same name already exists.','default',array('class' => 'msgTXt'));
                      if(isset($this->data['Action']['redirectpage'])){
                            $sessdata=$this->Session->read('newsortingby');
                            $this->redirect('/'.$sessdata);
                        }else{
                            $this->redirect('/admins/adddonation');
                        }
                }

              
            }
                
            //STEP : if $contacttypeid is not 0 then read data
            if($levelid){
                $this->DonationLevel->id = $levelid;
                $this->set('levelid', $levelid);  
                $this->set('pageactionname', "Edit");    
                $this->data = $this->DonationLevel->read();
                $level_num='01';
                $level_lowrange='0';
                if($this->data['DonationLevel']){                                 
                    $level_num=$this->data['DonationLevel']['level_number'];
                    $level_lowrange=$this->data['DonationLevel']['level_lowerrange']; 
                }
            }else{
                $this->set('membertypeid', 0); 
                $this->set('pageactionname', "Add"); 
                $level_num='01';
                $level_lowrange='0';
              $lastlevel=$this->DonationLevel->getLastDonationLevelOfProject($projectid);
                if($lastlevel){
                    $level_num=$lastlevel['DonationLevel']['level_number']+1;
                    $level_lowrange=$lastlevel['DonationLevel']['level_upperrange']+1; 
                }
            }           
            $this->set('level_num',$level_num);   
            $this->set('level_lowrange',$level_lowrange);   
             
            //STEP : Set Variables
         /*   $this->set('page_url','projectcontacttypes');
            $this->set('current_project_name',$project_name); 
            $this->set('project',$projectDetails);            
            $this->set('project_name',$projectDetails['Project']['project_name']);    
            */

            //STEP : Set Help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '57'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition
            
            $this->set("returnurl",$returnurl);   
        }//end adddonation     
        
		//############################# 17 - 05 - 2012 -###############################//
		/*
		@Function :  sa_event_types
		@Desc :  listing of event type added by SA
		@Created Date :  17 -09-2012
		@Created By : Brijesh
		*/
		
		 function sa_event_types(){
            //Configure::write('debug', 2);
            ##check admin session live or not
            $this->session_check_admin();
            if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                $this->Session->write("newsortingby",$strdata);    
            }

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);
			
            App::import("Model", "EventType");
            $this->EventType =   & new EventType();
            if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey'])
            {
                 $searchkeyword = $this->data['Admin']['searchkey'];
                 $condition = "EventType.project_id = 0 and EventType.delete_status ='0' and (EventType.event_type_desp like '%".$searchkeyword."%' or EventType.event_type like '%".$searchkeyword."%' )";
            }
            else
            {
                 $condition = "EventType.project_id = 0 AND EventType.delete_status ='0'";
            } 
                       

            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){
                  $_GET["sortBy"]="id";
                  $_GET["direction"]="ASC";
            }
            
            $this->Pagination->sortByClass    = 'EventType'; ##initaite pagination 
            $this->Pagination->total= count($this->EventType->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition);
            $eventtypedata = $this->EventType->find('all',array("conditions"=>$condition,'order'=>$order,'limit' => $limit, 'page' => $page));
           
            $this->set("eventtypedata",$eventtypedata);
	 }//end sa_event_types
	 
	 /*
		@Function :  sa_addeventtype
		@Desc :  add new event type added by SA
		@Created Date :  17 -09-2012
		@Created By : Brijesh
		*/
	 
	 function sa_addeventtype($recid=null){

            //Configure::write('debug', 2);
            ##check admin session live or not
            $this->session_check_admin();
            $this->set('event_type_id',$recid);         
            
            ##import project type model for processing
            App::import("Model", "EventType");
            $this->EventType =   & new EventType();

            ##check empty data
            if(!empty($this->data)) {
                #set the posted data
				$this->data['EventType']['project_id'] = 0;

                $this->EventType->set($this->data);				
                #check server side validation
                $this->EventType->invalidFields();
                #save data in project type table
                $recid  = $this->data['EventType']['id'];
                $event_type  = $this->data['EventType']['event_type'];
                if($recid=="")
                {
                    $condition = "EventType.event_type = '".$event_type."'  AND  EventType.delete_status = '0'";
                    $etdata = $this->EventType->find('all',array("conditions"=>$condition));                
                }
                else
                {
                    $condition = "EventType.event_type = '".$event_type."' AND  EventType.delete_status = '0' and EventType.id!='".$recid."'";
                    $etdata = $this->EventType->find('all',array("conditions"=>$condition));                
                }
                
                if(!$etdata){
                    
                        if($this->EventType->Save($this->data))
                        {
                            $this->Session->setFlash('Event Type updated Successfully.','default', array('class' => 'successmsg'			
						));                            
                        }
                        else
                        {
                            $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'
							));
                        }
      
                }else{

                    $this->Session->setFlash('Event Type with same name already exists.','default',array('class' => 'msgTXt'));
                    $this->redirect(array('controller' =>'admins','action' =>'sa_addeventtype',$recid));
                }

                if(isset($this->data['Action']['redirectpage'])){

                    //$sessdata=$this->Session->read('newsortingby');
                     $this->redirect(array('controller' =>'admins','action' =>'sa_event_types'));
                }else
                {
                      $this->redirect(array('controller' =>'admins','action' =>'sa_addeventtype',$recid));
                }

            }
            
            if($recid!="")
            {
                $this->EventType->id = $recid;
                $this->data = $this->EventType->read();
                $this->set("event_type_id", $recid);
            }


            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '58'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

        }//end sa_addeventtype       
		
		/*
        * @fucntion: to list all form status type for selected project for sa
        * 
        */
        function sa_formstatustypelist(){
              ##check user session live or not
            $this->session_check_admin();          
            $this->set('page_url','sa_formstatustypelist');
			
			# set help condition
            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

           $field='';

            App::import("Model", "FormSubmitStatustype");
            $this->FormSubmitStatustype =   & new FormSubmitStatustype();

            if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey']){

            $searchkeyword = $this->data['Admin']['searchkey'];
            $condition = "FormSubmitStatustype.delete_status = '0' AND FormSubmitStatustype.project_id = 0 and (FormSubmitStatustype.statustype_name LIKE '%".$searchkeyword."%')";

            }else{

                $condition = "FormSubmitStatustype.delete_status = '0' AND FormSubmitStatustype.project_id = 0";

            }

            $this->Pagination->sortByClass    = 'FormSubmitStatustype'; ##initaite pagination 
            $this->Pagination->total= count($this->FormSubmitStatustype->find('all',array("conditions"=>$condition)));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $statustypeArray = $this->FormSubmitStatustype->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
            //  print_r($eventArray);    exit;    
            ##set project type data in variable
            $this->set("statustypedata",$statustypeArray);
        }
		
		
		/*
        * Function name   : sa_formstatustype_add()
        * Description : This function used to add/edit form status type for project
        * Created On      : 22nd Nov 2011 
        *
        */     

        function sa_formstatustype_add($statustypeid=''){
		    ##check user session live or not

            $this->session_check_admin();
            $this->set('page_url','sa_formstatustype_add');
            ##import Company  model for processing
            App::import("Model", "FormSubmitStatustype");

            $this->FormSubmitStatustype =  & new FormSubmitStatustype(); 
            
            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);
            ##check empty data
            if(!empty($this->data)) {     
				$this->data['FormSubmitStatustype']['project_id'] = 0;
				if(isset($this->data['FormSubmitStatustype']['id'])){
					 $typeid=$this->data['FormSubmitStatustype']['id'];
				}else{
					$typeid='0';
				}
				  #set the posted data
                $this->FormSubmitStatustype->set($this->data);

                #check server side validation
                $errormsg = $this->FormSubmitStatustype->invalidFields();
				
                if(!$errormsg){
                    // $bid = $this->data['Blog']['id'];   
					 $statustype_name = $this->data['FormSubmitStatustype']['statustype_name'];
                    ##check already exists company name
					
                    if($this->FormSubmitStatustype->Save($this->data)){
                        if($typeid > 0){

                            $this->Session->setFlash('Status type updated Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect(array('controller'=>'admins','action'=>'sa_formstatustypelist'));

                            }else{

                                $this->redirect(array('controller'=>'admins','action'=>'sa_formstatustype_add',$typeid));

                            }

                        }else{

                            $this->Session->setFlash('Status type Added Successfully.','default', array('class' => 'successmsg'));

                            if(isset($this->data['Action']['redirectpage'])){

                               $this->redirect(array('controller'=>'admins','action'=>'sa_formstatustypelist'));

                            }else{

                                $this->redirect(array('controller'=>'admins','action'=>'sa_formstatustype_add'));

                            }

                        }

                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));    

                    }


                }

            }

            if($statustypeid){
                $this->FormSubmitStatustype->id = $statustypeid;
                $this->set('statustypeid', $statustypeid);  
                $this->set('statustypepageaction', "Edit");    
                $this->data = $this->FormSubmitStatustype->read();
				
            }else{
                $this->set('statustypeid', 0); 
                $this->set('statustypepageaction', "Add"); 
            }     
        }//end sa_statyustype_add
		
		  function sa_suggested_list(){

            $this->session_check_admin();
            $this->set('page_url','edit_project_detail');			
            App::import("Model", "Project");
            $this->Project =   & new Project();
            App::import("Model", "Sponsor");
            $sponsor =   & new Sponsor();
            App::import("Model", "User");
            $user =   & new User();

            # set help condition
            App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
            $condition = "HelpContent.id = '36'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
            # set help condition

            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();                    

           

            App::import("Model", "CommentType");
            $this->CommentType =   & new CommentType();
            ##check empty data
            if(!empty($this->data)) {
                if(!empty($this->data['ProjectType'])) {
                   echo '<pre>'; print_r($this->data);exit;
                    #set the posted data
                    $this->ProjectType->set($this->data['ProjectType']);
                    #check server side validation

                    $this->ProjectType->invalidFields();
                    #save data in project type table
                    $recid  = $this->data['ProjectType']['id'];
                    $ptname  = $this->data['ProjectType']['project_type_name'];
                    $condition = "ProjectType.id !=$recid AND  ProjectType.delete_status = '0'";
                    $ptdata = $this->ProjectType->find('all',array("conditions"=>$condition));
                    //print_r($this->data);exit;
                    if(!empty($ptdata)){

                        if($recid !=''){
                            $saveflag=true;

                            if($this->ProjectType->Save($this->data['ProjectType'])){
                                $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));
                                if($this->data['ProjectType']['maxnumbercomment']>0)
                                {
                                    App::import("Model", "ProjectCommentType");
                                    $this->ProjectCommentType =   & new ProjectCommentType();


                                    // unset sequence first
                                    $this->CommentType->query("UPDATE comment_types SET sequence_id = 0 WHERE project_id = '".$projectid."'");

                                    for($i=0;$i<=$this->data['ProjectType']['maxnumbercomment'];$i++){
                                        if($this->data['ProjectType']['commenttypeoption'.$i]>0){

                                            // set sequence at comment type
                                            unset($this->data['CommentType']);
                                            $this->data['CommentType']['id']=$this->data['ProjectType']['commenttypeoption'.$i];
                                            $this->data['CommentType']['sequence_id']=$i;
                                            if($this->CommentType->Save($this->data['CommentType'])){    
                                                $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));
                                            }else{
                                                $saveflag=false;
                                            }


                                            unset($this->data['ProjectCommentType']);
                                            $this->ProjectCommentType->create();
                                            $comment_type_id = $this->ProjectCommentType->find('first',array("conditions"=>"ProjectCommentType.project_type_id=$recid and ProjectCommentType.sequence_id=".$i." and ProjectCommentType.active_status='1' and ProjectCommentType.delete_status='0'", 'fields' =>"id"));
                                            if(is_array($comment_type_id) && !empty($comment_type_id))
                                            {
                                                $this->data['ProjectCommentType']['id']=$comment_type_id['ProjectCommentType']['id'];
                                            }
                                            $this->data['ProjectCommentType']['sequence_id']=$i;
                                            $this->data['ProjectCommentType']['comment_type_id']=$this->data['ProjectType']['commenttypeoption'.$i];
                                            $this->data['ProjectCommentType']['project_type_id']=$this->data['ProjectType']['id'];
                                            if($this->ProjectCommentType->Save($this->data['ProjectCommentType'])){    
                                                $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));
                                            }else{
                                                $saveflag=false;
                                            }
                                        }
                                    }

                                }
                                unset($this->data['CommentType']);
                                if($this->data['ProjectType']['additional_comment']==1)
                                {

                                    $allowed_additional_comment_id=$this->data['ProjectType']['additionalcomment'];

                                    // Select previously set additional comment id
                                    $condition = "CommentType.project_id ='$projectid' AND  CommentType.is_additional_allowed = '1'";
                                    $commenttypedata = $this->CommentType->find('first',array("conditions"=>$condition));
                                    $setnewid=false;
                                    if($commenttypedata){
                                        if($commenttypedata['CommentType']['id']!=$allowed_additional_comment_id){  

                                            // Unset previously set additional comment id
                                            $this->CommentType->id =$commenttypedata['CommentType']['id'];
                                            $this->data = $this->CommentType->read();
                                            $this->data['CommentType']['is_additional_allowed']='0';  
                                            //$this->data['CommentType']['sequence_id']='1000'; 
                                            if($this->CommentType->Save($this->data['CommentType'])){
                                                // Set new addtional comment flag true
                                                $setnewid=true;
                                            }


                                        }else{
                                            $setnewid=false; 
                                            $this->data['CommentType']['id']=$commenttypedata['CommentType']['id']  ;  
                                            $this->data['CommentType']['sequence_id']='1000';  
                                            $this->CommentType->Save($this->data['CommentType']);
                                        }

                                    }else{
                                        // Set new addtional comment flag true
                                        $setnewid=true;
                                    }

                                    if($setnewid){

                                        // Set new addtional comment type id
                                        $this->CommentType->id =$allowed_additional_comment_id;
                                        $this->data = $this->CommentType->read();
                                        $this->data['CommentType']['is_additional_allowed']='1'; 
                                        $this->data['CommentType']['sequence_id']='1000'; 

                                        if($this->CommentType->Save($this->data['CommentType'])){
                                            $this->Session->setFlash('Allow additional comment has beed saved.','default', array('class' => 'successmsg'));
                                        }else{
                                            $saveflag=false;
                                        } 

                                    }


                                }else{
                                    App::import("Model", "CommentType");
                                    $this->CommentType =   & new CommentType();
                                    $condition = "CommentType.project_id ='$projectid' AND  CommentType.is_additional_allowed = '1'";
                                    $commenttypedata = $this->CommentType->find('first',array("conditions"=>$condition));
                                    $this->CommentType->id =$commenttypedata['CommentType']['id'];
                                    $this->data = $this->CommentType->read();
                                    $this->data['CommentType']['is_additional_allowed']='0';
                                    if($this->CommentType->Save($this->data['CommentType'])){
                                        // Set new addtional comment flag true
                                        // $saveflag=true;
                                    }else{
                                        $saveflag=false;
                                    }
                                }

                                if($saveflag==true){
                                    $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));
                                }else{
                                    $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));
                                }
                                //$this->Session->setFlash('Project Type updated Successfully.','default', array('class' => 'successmsg'));

                            }else{
                                $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                            }
                        }else{
                            $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));
                        }
                    }else{

                        $this->Session->setFlash('Project Type with same name already exists.','default',array('class' => 'msgTXt'));
                    }
                    //$this->redirect("/admins/editprojectdtl");
                }
                else{
                    $recid = $this->data['Project']['project_type_id'];
                    $this->ProjectType->id = $recid;
                    //$this->data = $this->ProjectType->read();
                    $this->set("ProjectTypeId", $recid);
                }                
                if(isset($this->data['Action']['redirectpage'])){
                    $this->redirect('/admins/suggestedlist');
                }else{
                    $this->redirect('/admins/suggestedlist');
                }            
                //End upload images linke side A side B and logo
                //             }
            }
            $this->Project->id = $projectid;
            $this->data = $this->Project->read();



            $project_type_id=$this->data['Project']['project_type_id'];
            App::import("Model", "ProjectType");
            $this->ProjectType =   & new ProjectType();
            $projecttypedetails=$this->ProjectType->find('first',array('conditions'=>"ProjectType.id=$project_type_id")); 


            $this->set('ProjectTypeId',$project_type_id);
            $this->data = array_merge($this->data,$projecttypedetails);

            // STEP: Get Maximum number comment types for project
            $condition = "CommentType.project_id IN(0,'".$projectid."') and CommentType.sequence_id > 0 and CommentType.sequence_id < 1000 and CommentType.active_status='1' and CommentType.delete_status='0' ";
			
            $maxnumbercomment = $this->CommentType->find('count',array("conditions"=>$condition));
            if($maxnumbercomment){

            }else{
                $maxnumbercomment=0;
            }
            $this->set('maxnumber_comment',$maxnumbercomment);
		 }
		 /*
			*function name : newinquiry()
			*description   : to do function show new enquiry listing
		*/
		function inquirylist(){
			
			$this->session_check_admin();
			$project_id = '1';				
        	App::import("Model", "FormSubmit");
            $this->FormSubmit =  & new FormSubmit();
			if(isset($this->data['admins']['searchkey']) && $this->data['admins']['searchkey']){
        		$searchkeyword = $this->data['admins']['searchkey'];
        		$condition = " FormSubmit.project_id='".$project_id."'  AND (FormSubmit.fld_firstname LIKE '%".$searchkeyword."%' OR FormSubmit.fld_lastname LIKE '%".$searchkeyword."%')";
        	}else{
        		 $condition = " FormSubmit.project_id='".$project_id."' AND FormSubmit.delete_status = '0'  ";
			}
			if(isset($this->params['pass']['0'])){
				$this->set('enqtype',$this->params['pass']['0']);
				if($this->params['pass']['0']==trim("new")){
					$condition .= " AND FormSubmit.statustype_id = '0'";
				}else if($this->params['pass']['0']==trim("open")){
						$condition .= " AND FormSubmit.statustype_id > 0";
				}else{
					$condition .= " AND FormSubmit.statustype_id IN(0,1,2,3,4,5,6,7)";
				}
			}
			
        	$this->Pagination->sortByClass    = 'FormSubmit'; ##initaite pagination
        	$this->Pagination->total= count($this->FormSubmit->find('all',array("conditions"=>$condition)));
        	list($order,$limit,$page) = $this->Pagination->init($condition);
			$newinquirydata = $this->FormSubmit->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
			//$this->pl($newinquirydata);
			$this->set("newinquirydata",$newinquirydata);
			$this->set("hlpdata",$this->getHelpContent(14));   
		}//end of newinquiry listing
		
		/*
       * Function name   : inquirydetail()
       * Description : This function used to add form types  for selected project
       * Created On      : 27-10-11 (Quad)
       */
       function inquirydetail($enquiryid = '',$enqtype){
			
					$this->session_check_admin();
					$project_id = '1';
					 //for active menu display
            $this->set('page_url',"inquirydetail");
           $this->set("hlpdata",$this->getHelpContent(20));   

            $projectid=$project_id;        
            $this->set('projectid',$projectid);  
            App::import("Model", "FormType");
            $this->FormType =  & new FormType();               

            App::import("Model", "FormSubmit");
            $this->FormSubmit =  & new FormSubmit(); 
          	$this->set('enqtype',$enqtype);
            if(!empty($this->data)){ 
						if($this->FormSubmit->Save($this->data['FormSubmit'])){	
	                	     if(isset($this->data['FormSubmit']['id'])){
                        	    $lastinsertid = $this->data['FormSubmit']['id'];
	                     	  }else{
    	                     	$lastinsertid = $this->FormType->getLastInsertId();
            	        }                      
        	           $this->Session->setFlash('Form sumbitted updated successfully.','default', array('class' => 'successmsg'));
					  	//if($this->data['Action']['redirectpage']){  
						//echo $this->data['admins']['enqtype'];exit;
	                	      $this->redirect(array('controller' => 'admins','action'=>'inquirylist',$this->data['admins']['enqtype']));   
						  //}
                 		}
					
           

            }
			$this->set('selectedtemplateresponce',"");
            $this->set('selectedtemplateproj',""); 
            if($enquiryid){        // Read form type data and set it
            
                    $this->FormSubmit->bindModel(array('belongsTo'=>array(
                    'FormType'=>array(
                    'foreignKey'=>false,
                    'conditions'=>'FormSubmit.formtype_id = FormType.id'
                    )
                    )));
               $this->FormSubmit->id = $enquiryid;
               $this->data = $this->FormSubmit->read();
			   $this->set('formsubmitid',$this->data['FormSubmit']['id']);
			   $this->countrydroupdown();
           		$this->statedroupdown();
           		if($this->data['FormSubmit']['fld_country']){
		     		 $conid = $this->data['FormSubmit']['fld_country'];
               		 $this->set("selectedcountry",$conid);
                ##state drop down
                $this->statedroupdown($conid);
                if($this->data['FormSubmit']['fld_stprovince']){
                    $statid = $this->data['FormSubmit']['fld_stprovince'];
                    $this->set("selectedstate",$statid);
                }
            }
			   //$this->pl($this->data);
               if($this->data['FormSubmit']){
                        $this->set('formubmittedid',$enquiryid);    
                        $this->set('selectedtemplateresponce',$this->data['FormType']['emailtemplate_toresponce']);    
                        $this->set('selectedtemplateproj',$this->data['FormType']['emailtemplate_toalert_mgr']);     
                        $this->set('selectedcompanytype',$this->data['FormType']['company_type']);     
                        $this->set('selectedcontacttype',$this->data['FormType']['contact_type']);
                        $this->set('selectedstatustype',$this->data['FormSubmit']['statustype_id']); 
                 }else{
                   $this->redirect("/admins/formsubmitlist/");  
               }  
            }            
            // GET ALL CUSTOM EMAIL TEMPLATES
            $this->customtemplatelisting($project_id);             
             // GET ALL Company Types
            $this->companytypedropdown($project_id);             
             // GET ALL Contact Types
            $this->contacttypedropdown($project_id);          
          // GEt ALl Form Status types
            $this->formstatustypedropdown($project_id);          
           $this->countrydroupdown();
        } //end of inquirydetailopeninquiry
		
		function map($type = 2){
					
			$this->session_check_admin(); 
			$projectid = '1';
        	$newCmpData = array();
        //company or branch lat long code        
        if($type == 1 || $type == 4)
        {    
            App::import("Model", "Company");
            $this->Company =   & new Company();    
            $conditions = array(
                                'Company.delete_status' => '0',
                                'Company.project_id' => '0',
                                'Company.lat <>' => '',
                                'Company.long <>' => ''
                            );
            $cmpData = $this->Company->find('all',array("conditions"=>array('Company.delete_status' => '0','Company.project_id' => '0','Company.lat <>' => '','Company.long <>' => '')));
			//ignore null values lang latitude    
            foreach ($cmpData as $row) {
                if($row['Company']['lat']!='' && $row['Company']['long']!='' ) 
                {    
                    $newCmpData[] = array($row['Company']['lat'],$row['Company']['long'],$row['Company']['company_name']); 
                }
            }
        }
        else if($type == 2||$type == 3||$type == 5||$type == 6||$type == 7||$type == 8||$type == 9)
        {
            App::import("Model", "Contact");
            $this->Contact =   & new Contact();  

            if($type==5)
            {    //Los lat long code
				$cmpData = $this->Contact->find('all',array('conditions' => array('Contact.active_status' => 1,'Contact.delete_status' => 0,'Contact.contact_type_id' => 262)));                            			
            }
			else if($type==6)
            {     //Employees lat long code
				$cmpData = $this->Contact->find('all',array('conditions' => array('Contact.active_status' => 1,'Contact.delete_status' => 0,'Contact.contact_type_id' => 263)));                            			
            }
			else if($type==7)
            {     //Correspondents lat long code
				$cmpData = $this->Contact->find('all',array('conditions' => array('Contact.active_status' => 1,'Contact.delete_status' => 0,'Contact.contact_type_id' => 48)));                            			
            }
			else if($type==8)
            {     //Brokers lat long code
				$cmpData = $this->Contact->find('all',array('conditions' => array('Contact.active_status' => 1,'Contact.delete_status' => 0,'Contact.contact_type_id' => 264)));                            			
            }
			else if($type==9)
            {   //Others lat long code  
				$cmpData = $this->Contact->find('all',array('conditions' => array('Contact.active_status' => 1,'Contact.delete_status' => 0,'Contact.contact_type_id' => 265)));                            			
            }
            else
            {	 //default lat long code
				$cmpData = $this->Contact->find('all',array('conditions' => array('Contact.active_status' => 1,'Contact.delete_status' => 0)));
			}
            //echo "<pre>";print_r( $cmpData);die();
            //ignore null values lang latitude    
            foreach ($cmpData as $row) {
                if($row['Contact']['lat']!='' && $row['Contact']['long']!='' ) 
                {    
                    $name = $row['Contact']['firstname'].' '.$row['Contact']['lastname'];
                    $newCmpData[] = array($row['Contact']['lat'],$row['Contact']['long'],$name); 
                }
            }
        }    
        $this->set('cmpData',$newCmpData);
        $this->set('chkSelected',$type);
		 			
		}
		function memberoffers(){			
			$this->session_check_admin();
			$project_id = $this->Session->read("sessionprojectid");
			$project_name=$this->Session->read("projectwebsite_name_admin");  
			$this->set('current_project_name',$project_name);  
			App::import("Model", "HelpContent");
            $this->HelpContent =  & new HelpContent();
			$condition = "HelpContent.id = '3'";  
            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));
            $this->set("hlpdata",$hlpdata);
		}
		function mail_open(){
			//$this->session_check_admin();
			if(isset($this->params['pass'])){
				 $execurtionId = $this->params['pass']['0'];
			}
			App::import("Model", "CommunicationTaskExecutionReport");    
            $this->CommunicationTaskExecutionReport =   & new CommunicationTaskExecutionReport();			 
			$this->layout = false;			
			$this->data['CommunicationTaskExecutionReport']['id'] = $execurtionId;
			$this->data['CommunicationTaskExecutionReport']['email_open'] = '1';
			$this->CommunicationTaskExecutionReport->save($this->data['CommunicationTaskExecutionReport']);
			//$this->redirect(array('controller'=>'admins','action'=>'memberoffers'));
			 
		}
		
		/*
        * Function name   : holderslist()
        * Description : This function used to list registered holders of related project
        * Created On      : 25-02-11 (02:18am)
        *
        */ 

        function coinholderslist(){
            $this->session_check_admin();
           $project_id = '1';
           $base_url = Configure::read('App.base_url');
			if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                //$this->Session->write("newsortingby",$strdata);    
				$this->Session->write("newsortingby",$base_url.$strdata);
            }        
            //for active menu display
           	$this->set('page_url',"coinholderslist");
		   	$this->set("hlpdata",$this->getHelpContent('3'));
            $projectDetails=$this->getprojectdetails($project_id);    
            $this->set('project',$projectDetails);    
            $this->set('project_name',$projectDetails['Project']['project_name']);
            $projectid=$project_id;    
           
           // STEP : GET ALL Holders OF RELATED PROJECT
            
            App::import("Model", "Holder");
            $this->Holder =   & new Holder();
            $field='';
            $searchkey=""; 
            if(!empty($this->data))
            {        
               $searchkey=$this->data['Admin']['searchkey'];
            }
            $this->Pagination->sortByClass = 'Holder'; ##initaite pagination 
            App::import("Model", "MemberType");
            $this->MemberType =  & new MemberType();
            $member_type = MemberType::MEMBER_TYPE_HOLDER;  // get all members
			$condition = '';
            $this->Pagination->total= count($this->Holder->getMemberListByCoinHolder($member_type,$searchkey,$order,$limit, $page));
            list($order,$limit,$page) = $this->Pagination->init($condition,$field);
            if($order == "Holder.id ASC"){
                $order = "Holder.created DESC,Holder.lastnameshow ASC, Holder.firstname ASC";
            }
            $holderlist = $this->Holder->getMemberListByCoinHolder($member_type,$searchkey,$order,$limit, $page);
			$this->set("holderlist",$holderlist);
        }
        
        
		function membersurvey($memberid='0'){
			$this->session_check_admin();
			$this->set("recordid",$memberid);
           	$this->Session->write("memberid",$memberid);
           // $project_name=$this->Session->read("projectwebsite_name_admin");  
           // $this->set('current_project_name',$project_name);

            
			$base_url = Configure::read('App.base_url');
			if(isset($_SERVER['QUERY_STRING']))
            {
                $this->Session->delete("newsortingby");
                $strloc=strpos($_SERVER['QUERY_STRING'],'=');
                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    
                //$this->Session->write("newsortingby",$strdata);    
                $this->Session->write("newsortingby",$base_url.$strdata);    
            }

            ##import  Holder  model for processing
          //  App::import("Model", "Holder");
           // $this->Holder =   & new Holder();
            
			App::import("Model", "SurveyResponse");
			$this->SurveyResponse =   & new SurveyResponse();
			    	   
			$this->set("hlpdata",$this->getHelpContent(3)); 			
            $field='';
           
            if(isset($this->data['Admin']['searchkey']) && $this->data['Admin']['searchkey']){
            	$searchkeyword = $this->data['Admin']['searchkey'];
            	$condition = " (Holder.firstname LIKE '%".$searchkeyword."%' OR Holder.lastnameshow LIKE '%".$searchkeyword."%' OR Survey.survey_name LIKE '%".$searchkeyword."%' OR Holder.city LIKE '%".$searchkeyword."%') AND ";
            }
            
           	$this->SurveyResponse->bindModel(array('belongsTo'=>array(
        			'Holder'=>array(
        					'foreignKey'=>'member_id'
        			),
            		'Survey'=>array(
            				'foreignKey'=>'survey_id'
            		)
					)));
        
			
        	$condition .=" SurveyResponse.delete_status = '0' AND SurveyResponse.member_id='".$memberid."' ";
        	
            $this->Pagination->sortByClass    = 'SurveyResponse'; ##initaite pagination
			$this->Pagination->total= count($this->SurveyResponse->find('all',array("conditions"=>$condition)));
			list($order,$limit,$page) = $this->Pagination->init($condition,$field);
			
			$this->SurveyResponse->bindModel(array('belongsTo'=>array(
        			'Holder'=>array(
        					'foreignKey'=>'member_id'
        			),
            		'Survey'=>array(
            				'foreignKey'=>'survey_id'
            		)
					)));
			
			$this->set('member_id',$memberid);
			$surveyData = $this->SurveyResponse->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
			//$this->pl($surveyData);
            $this->set("surveyData",$surveyData);
		}
		
		
		function downloadmembersurvey(){           
          // $this->layout = null;
           // $this->autoLayout = false; 
            //Configure::write('debug', '2');
            $this->session_check_admin();
			$memberid = $this->Session->read("memberid");  
            App::import("Model", "SurveyResponse");
            $this->SurveyResponse =   & new SurveyResponse();    
			
				
			$this->SurveyResponse->bindModel(array('belongsTo'=>array(
        			'Holder'=>array(
        					'foreignKey'=>'member_id'
        			),
            		'Survey'=>array(
            				'foreignKey'=>'survey_id'
            		)
			)));
				
           	$condition =" SurveyResponse.delete_status = '0' AND SurveyResponse.member_id='".$memberid."' ";
          	$order			=	"SurveyResponse.created ASC";			
			$surveyData = $this->SurveyResponse->find('all',array("conditions"=>$condition, 'order' =>$order));   
			//$this->pl($surveyData);		
			$this->set("surveyData",$surveyData);			
		    $this->Session->delete('memberid');

        }
        
		function phpinfofile(){
			//$this->layout = false;
			phpinfo();
		}
		
		public function active_link(){
		
			
			//$this->Link->paginate = array('conditions' => array('Link.status' => 'a'));
			//$this->set('linkDate', $this->Link->paginate());
			
			$datelist = $this->Link->find('all', array('conditions' => array('Link.status' => 'a')));
			$this->set('linkDate', $datelist);
			
		}

		public function inactive_link(){
		
		
			$datelist = $this->Link->find('all', array('conditions' => array('Link.status' => 'd')));
			$this->set('linkDate', $datelist);
			
			
		  		}

		public function placement(){
				}

		public function history(){
			$datelist = $this->Link->find('all');
			$this->set('linkDate', $datelist);
		}
		
		// admin menber develop by sunil kumar sain
		
		function userslist(){
		$this->session_check_admin();
		$projectid = '1';
		if(isset($_SERVER['QUERY_STRING']))
		{
			$this->Session->delete("newsortingby");
			$strloc=strpos($_SERVER['QUERY_STRING'],'=');
			$strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);
			$this->Session->write("newsortingby",$strdata);
		}
		$field='';
		if(isset($this->data['Admin']['Admin']) && $this->data['Admin']['searchkey']){
			$searchkeyword = $this->data['Admin']['searchkey'];
			$condition = "Admin.active_status = '1' AND (Admin.firstname LIKE '%".$searchkeyword."%' OR Admin.lastname LIKE '%".$searchkeyword."%')";
		}else{
			$condition = "Admin.active_status = '1' ";
		}
		$this->Pagination->sortByClass    = 'Admin'; ##initaite pagination
		$this->Pagination->total= count($this->Admin->find('all',array("conditions"=>$condition)));
		list($order,$limit,$page) = $this->Pagination->init($condition,$field);
		$taskdata = $this->Admin->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
		$this->set("memberlist",$taskdata);
		$this->set("hlpdata",$this->getHelpContent('13'));
		
		}
		
		
		function add_newuser(){
		
		$this->session_check_admin();
		
        // get user type
        $formtypeArray = $this->Role->find('list'   , array('fields' => array('Role.id', 'Role.title')));
        $this->set("formtypedata",$formtypeArray);


         $menuarray = $this->Menu->find('all') ;


       
         $this->set("getmenu",$menuarray);

   	if (!empty($this->data)) {
		
			$this->data['admin']['password'] = md5($this->data['admin']['password']);
			$this->Admin->create();
            if ($this->Admin->save($this->data['admin'])) {
			
                $this->Session->setFlash(__('The User has been saved', true), 'default', array('class' => 'success'));
                $this->redirect(array('controller' =>'admins','action'=>'userslist'));
            } else {
                $this->Session->setFlash(__('The User could not be saved. Please, try again.', true), 'default', array('class' => 'error'));
            }
        }
		}


// Edit user for the admin section.

 public function edituser($id = null) {
     $this->session_check_admin();
        
        $formtypeArray = $this->Role->find('list'   , array('fields' => array('Role.id', 'Role.title')));
        $this->set("formtypedata",$formtypeArray);

        if (!$id && empty($this->data)) {
            $this->Session->setFlash(__('Invalid User', true), 'default', array('class' => 'error'));
           $this->redirect(array('controller' =>'admins','action'=>'userslist'));
        }
        if (!empty($this->data['Admin'])) {
              $this->Admin->id = $id;
            if ($this->Admin->save($this->data['Admin'])) {
                $this->Session->setFlash(__('The User has been saved', true), 'default', array('class' => 'success'));
               $this->redirect(array('controller' =>'admins','action'=>'userslist'));
            } else {
                $this->Session->setFlash(__('The User could not be saved. Please, try again.', true), 'default', array('class' => 'error'));
            }
        }
        if (empty($this->data)) {
            $this->data = $this->Admin->read(null, $id);
            $oldData    = $this->data;
        
            $this->set('oldData',$oldData);
        }
            $this->set('id',$id);
    }



// user delete functionality 
// developer : vidur
// Developed On : 03:01:2013
public function users_delete($id = null){
            if (!$id) 
            {
                $this->Session->setFlash(__('Invalid id for record', true), 'default', array('class' => 'error'));
                $this->redirect(array('controller'=>'admins','action' => 'userslist'));
            }
            
            $ids = explode("*", $id);
            if(count($ids))
            {
                for($i =0 ;$i<count($ids);$i++)
                {
                    
                    if ($ids[$i]!='')
                    {
                        $data = $this->Admin->find('first',array('conditions' => array('Admin.id' => $ids[$i])));
                      
                        $this->Admin->delete($ids[$i]);
                    }
                }
            }
            
            $this->Session->setFlash(__('Record deleted', true), 'default', array('class' => 'success'));
            $this->redirect(array('controller'=>'admins','action' => 'userslist'));
    }
    



function rolle_list(){
		
		
		$this->session_check_admin();
		$projectid = '1';
		if(isset($_SERVER['QUERY_STRING']))
		{
			$this->Session->delete("newsortingby");
			$strloc=strpos($_SERVER['QUERY_STRING'],'=');
			$strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);
			$this->Session->write("newsortingby",$strdata);
		}
		$field='';
		if(isset($this->data['Role']['Role']) && $this->data['Role']['searchkey']){
			$searchkeyword = $this->data['Role']['searchkey'];
			$condition = "Role.status = 'a' AND (Role.firstname LIKE '%".$searchkeyword."%' OR Role.lastname LIKE '%".$searchkeyword."%')";
		}else{
			$condition = "Role.status = 'a' ";
		}
		$this->Pagination->sortByClass    = 'Role'; ##initaite pagination
		$this->Pagination->total= count($this->Role->find('all',array("conditions"=>$condition)));
		list($order,$limit,$page) = $this->Pagination->init($condition,$field);
		$taskdata = $this->Role->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
		$this->set("memberlist",$taskdata);
		$this->set("hlpdata",$this->getHelpContent('13'));
		
		
		
		}
		
		function add_role(){
		
		 if (!empty($this->data)) {
           
            $this->Role->create();
            if ($this->Role->save($this->data['admin'])) {
                $role_id = $this->Role->getLastInsertId();
			    $strAccess = "";
                $access = $this->data['admin'];
                foreach ($access as $key => $value) {
                    if($key!='user_id'&&$key!='title')
                     {
                        if(is_array($value)&&count($value))
                        {
                            foreach ($value as $key => $value) {
                                if($strAccess=="")
                                {
                                   $strAccess =  $value;
                                }   
                                else
                                {
                                    $strAccess .= ",".$value;    
                                } 
                            }

                        }    
                     }   
                }    

                if($strAccess!='')
                {
                        $strAccessArray = explode(',', $strAccess);
                        $access_id=0;
                        foreach ($strAccessArray as $key=>$value) { 
                               $access_id = $value;
                               $this->data['Access']['iteam_id'] = $access_id;
                               $this->data['Access']['user_type'] = $role_id; 
                               $this->Access->create();
                               $this->Access->save($this->data['Access']);
                        }
                }   

                $this->Session->setFlash(__('The Role has been saved', true), 'default', array('class' => 'success'));
                $this->redirect(array('controller'=>'admins','action'=>'rolle_list'));
            } else {
                $this->Session->setFlash(__('The Role could not be saved. Please, try again.', true), 'default', array('class' => 'error'));
            }
        }
		
         if (empty($this->data)) {
            $this->Role->bindModel(array(
                    'hasMany' => array(
            'Admin' => array(
            'foreignKey' => 'user_type'
            )
        )
                ));
            $this->data = $this->Role->find('all');
            $oldData    = $this->data;
            $this->Role->unbindModel('Admin');
            $this->set('oldData',$oldData);
            $menu = $this->Menu->find('list');
            $this->set('menu',$menu);    
        }

		}



 public function editusertype($id = null) {
     $this->session_check_admin();
       if (!$id && empty($this->data)) {
            $this->Session->setFlash(__('Invalid User', true), 'default', array('class' => 'error'));
           $this->redirect(array('controller' =>'admins','action'=>'rolle_list'));
        }
        if (!empty($this->data)) {

              $this->Role->id = $id;
            if ($this->Role->save($this->data['admin'])) {
                $role_id = $id;
                $strAccess = "";
                $access = $this->data['admin'];
                foreach ($access as $key => $value) {
                    if($key!='user_id'&&$key!='title')
                     {
                        if(is_array($value)&&count($value))
                        {
                            foreach ($value as $key => $value) {
                                if($strAccess=="")
                                {
                                   $strAccess =  $value;
                                }   
                                else
                                {
                                    $strAccess .= ",".$value;    
                                } 
                            }

                        }    
                     }   
                }    

                if($strAccess!='')
                {
                        $conditions = array (
                            "Access.user_type" => $role_id
                        );
                        $this->Access->deleteAll($conditions);
                        $strAccessArray = explode(',', $strAccess);
                        $access_id=0;
                        foreach ($strAccessArray as $key=>$value) { 
                               $access_id = $value;
                               $this->data['Access']['iteam_id'] = $access_id;
                               $this->data['Access']['user_type'] = $role_id; 
                               $this->Access->create();
                               $this->Access->save($this->data['Access']);
                        }
                }   

               $this->Session->setFlash(__('The User has been saved', true), 'default', array('class' => 'success'));
               $this->redirect(array('controller' =>'admins','action'=>'rolle_list'));
            } else {
                $this->Session->setFlash(__('The User could not be saved. Please, try again.', true), 'default', array('class' => 'error'));
            }
        }
        if (empty($this->data)) {
            $this->Role->bindModel(array(
                    'hasMany' => array(
            'Admin' => array(
            'foreignKey' => 'user_type'
            )
        )
                ));
            $this->data = $this->Role->read(null, $id);
            $oldData    = $this->data;
            $this->Role->unbindModel('Admin');
            $this->set('oldData',$oldData);
            $menu = $this->Menu->find('list');
            $this->set('menu',$menu);    
        }
            $previousChecked =  $this->Access->find('all', array('conditions' => array('Access.user_type' => $id)));
            $previousCheckedArray = array();
            if(count($previousChecked))
            {
                foreach ($previousChecked as $row) { 
                    $previousCheckedArray[] =  $row['Access']['iteam_id'];
                }
            }
            $this->set('previousChecked',$previousCheckedArray);
            $this->set('id',$id);
    }


 // user delete functionality 
// developer : vidur
// Developed On : 03:01:2013
public function userstype_delete($id = null){
            if (!$id) 
            {
                $this->Session->setFlash(__('Invalid id for record', true), 'default', array('class' => 'error'));
                $this->redirect(array('controller'=>'admins','action' => 'rolle_list'));
            }
            
            $ids = explode("*", $id);
            if(count($ids))
            {
                for($i =0 ;$i<count($ids);$i++)
                {
                    
                    if ($ids[$i]!='')
                    {
                        $data = $this->Role->find('first',array('conditions' => array('Role.id' => $ids[$i])));
                      
                        $this->Role->delete($ids[$i]);
                    }
                }
            }
            
            $this->Session->setFlash(__('Record deleted', true), 'default', array('class' => 'success'));
            $this->redirect(array('controller'=>'admins','action' => 'rolle_list'));
    }

public function getmenuweb($id = null) {
	$finalArray = array();
	$menuArray = array();
	$adminRole = $this->Role->find('first',array('conditions' => array('Role.title' => 'Admin')));
	$topMenu = $this->Menu->find('all');
	if(count($topMenu))
	{
		$topmenuList = array();
		foreach($topMenu as $menuRow)
		{
			$topmenuList[$menuRow['Menu']['id']] = $menuRow['Menu']['name'];
		}
		foreach($topMenu as $menuRow)
		{
			$subMenu = $this->Iteam->find('list',array('conditions' => array('Iteam.pid' => $menuRow['Menu']['id'])));
			$menuArray[]  =  array($menuRow,$subMenu);
		}
	}
	$previousChecked =  $this->Access->find('all', array('conditions' => array('Access.user_type' => $adminRole['Role']['id'])));
    $previousCheckedArray = array();
    if(count($previousChecked))
    {
       foreach ($previousChecked as $row) { 
         $previousCheckedArray[] =  $row['Access']['iteam_id'];
       }
    }
	$finalArray = array(
						'role' => $adminRole,
						'previousChecked' => $previousCheckedArray,
						'menu' => $menuArray,
						'topMenu' => $topMenu
					);
					
	echo json_encode($finalArray);
	die();
}

public function savemenuweb($id = nul)
{		
		$role_id = $id;
		$strAccess = "";
		$access = $this->data['admin'];
		foreach ($access as $key => $value) {
			if($key!='user_id'&&$key!='title')
			 {
				if(is_array($value)&&count($value))
				{
					foreach ($value as $key => $value) {
						if($strAccess=="")
						{
						   $strAccess =  $value;
						}   
						else
						{
							$strAccess .= ",".$value;    
						} 
					}

				}    
			 }   
		}    

		if($strAccess!='')
		{
				$conditions = array (
					"Access.user_type" => $role_id
				);
				$this->Access->deleteAll($conditions);
				$strAccessArray = explode(',', $strAccess);
				$access_id=0;
				foreach ($strAccessArray as $key=>$value) { 
					   $access_id = $value;
					   $this->data['Access']['iteam_id'] = $access_id;
					   $this->data['Access']['user_type'] = $role_id; 
					   $this->Access->create();
					   $this->Access->save($this->data['Access']);
				}
				echo "save";
		}
		else
		{
			echo "not save";
		}
		die();				
}
		
		
function typelist(){
	
		##check admin session live or not
		$this->session_check_admin();

		$projectid = '1';
		if(isset($_SERVER['QUERY_STRING']))
		{
			$this->Session->delete("newsortingby");
			$strloc=strpos($_SERVER['QUERY_STRING'],'=');
			$strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);
			$this->Session->write("newsortingby",$strdata);

		}
		
		App::import("Model", "DonationType");
		$this->DonationType =  & new DonationType();  
		
		$field='';

		##checking search key
		if(isset($this->data['Mailtasks']['searchkey']) && $this->data['Mailtasks']['searchkey']){
			$searchkeyword = $this->data['Mailtasks']['searchkey'];
			$condition = "DonationType.status = '1' and DonationType.project_id='".$projectid."' AND (DonationType.type LIKE '%".$searchkeyword."%' OR DonationType.note LIKE '%".$searchkeyword."%')";
		}else{
			$condition = "DonationType.status = '1' and DonationType.project_id='".$projectid."'";
		}

		// $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."'";
		$this->Pagination->sortByClass    = 'DonationType'; ##initaite pagination

		$this->Pagination->total= count($this->DonationType->find('all',array("conditions"=>$condition)));

		list($order,$limit,$page) = $this->Pagination->init($condition,$field);
		
		
		$taskdata = $this->DonationType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
		##set project type data in variable
		$this->set("taskdata",$taskdata);
		

	
	
		$this->set("hlpdata",$this->getHelpContent('13'));
		
		
	}
	
function edit_donationtype($id = null){
			
		$this->session_check_admin();
		$projectid = '1';
		App::import("Model", "DonationType");
		$this->DonationType =  & new DonationType();   
	   
		   
		   if (!empty($this->data)) {
            $this->DonationType->id = $id;
            if ($this->DonationType->save($this->data)) {
			
                $this->Session->setFlash(__('The DonationType has been saved', true), 'default', array('class' => 'success'));
                $this->redirect(array('controller'=>'admins','action'=>'typelist'));
            } else {
                $this->Session->setFlash(__('The DonationType could not be saved. Please, fill the requir fields.', true), 'default', array('class' => 'error'));
            }
        }
		
		if(empty($this->data))
		{
			$this->data = $this->DonationType->find('first',array('conditions' => array('DonationType.id' => $id)));
			$this->set('oldData',$this->data);
		}
		$this->set('id',$id);
	
	}
	
	
function adddonation_type($redirect = null){
		$projectid = '1';
		
		App::import("Model", "DonationType");
		$this->DonationType =  & new DonationType();   
	   
		if (!empty($this->data)) {
            $this->DonationType->create();
            if ($this->DonationType->save($this->data)) {
            	if($redirect == null)
                {
                	$this->Session->setFlash(__('The DonationType has been saved', true), 'default', array('class' => 'success'));
                	$this->redirect(array('controller'=>'admins','action'=>'typelist'));
                }
                else
                {
                	$editLinkId = $redirect;
                	$editLinkId = str_replace("@","", $editLinkId);
                	$lId = $this->DonationType->getLastInsertID();
                	$this->Session->write('InsertGroupId',$lId);

                	if($editLinkId=="")
                	{	
                		$this->redirect(array('controller'=>'admins','action'=>'adddonation_type'));                		
                	}
                	else
                	{
                		$this->redirect(array('controller'=>'admins','action'=>'edit_donationtype',$editLinkId));
                	}	
                } 
            } else {
                $this->Session->setFlash(__('The Group could not be saved. Please, fill the requir fields.', true), 'default', array('class' => 'error'));
            }
        }
        $this->set('redirect',$redirect);
	 }
	 
function donation()
{
		##check admin session live or not
		$this->session_check_admin();
		if(isset($_SERVER['QUERY_STRING']))
		{
			$this->Session->delete("newsortingby");
			$strloc=strpos($_SERVER['QUERY_STRING'],'=');
			$strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);
			$this->Session->write("newsortingby",$strdata);

		}
		App::import("Model", "Donation");
		$this->Donation =  & new Donation();  
		$field='';
		##checking search key
			$searchkeyword = $this->data['Mailtasks']['searchkey'];
			$condition = "Donation.status = '1' ";
		// $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."'";
		$this->Pagination->sortByClass    = 'Donation'; ##initaite pagination
		$this->Pagination->total= count($this->Donation->find('all',array("conditions"=>$condition)));
		list($order,$limit,$page) = $this->Pagination->init($condition,$field);
		$donationdata = $this->Donation->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
		##set project type data in variable
		$this->set("donationdata",$donationdata);	
		$this->set("hlpdata",$this->getHelpContent('13'));
		
	}
	
	
	
	
	function by_event()
	{
			$this->session_check_admin();
			if(isset($_SERVER['QUERY_STRING']))
			{
				$this->Session->delete("newsortingby");
				$strloc=strpos($_SERVER['QUERY_STRING'],'=');
				$strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);
				$this->Session->write("newsortingby",$strdata);
			}
			App::import("Model", "Donation");
			$this->Donation =  & new Donation();  
			$field='';
			$searchkeyword = $this->data['Mailtasks']['searchkey'];
			$condition = "Donation.status = '1' ";
			$this->Pagination->sortByClass    = 'Donation'; ##initaite pagination
			$this->Pagination->total= count($this->Donation->find('all',array("conditions"=>$condition)));
			list($order,$limit,$page) = $this->Pagination->init($condition,$field);
			$donationdata = $this->Donation->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
			$this->set("donationdata",$donationdata);
			$this->set("hlpdata",$this->getHelpContent('13'));
			
			
	}
	
		
 function adddonations($redirect = null){
		
		App::import("Model", "Donation");
		$this->Donation =  & new Donation();   
		
		
		 App::import("Model", "Company");
         $this->Company =   & new Company(); 
		 $selectedcompany =  $this->Company->find('all',array('fields'=>array('id','company_name')));
		$this->set("selectedcompany",$selectedcompany);
		

		 App::import("Model", "DonationType");
         $this->DonationType =   & new DonationType();
		 //$condition = "DonationType.'status = '1'"; 
		 $selectedtype =  $this->DonationType->find('all',array('fields'=>array('id','type')));
		$this->set("selectedtype",$selectedtype);
				
				
	   
		if (!empty($this->data)) {
            $this->Donation->create();
            if ($this->Donation->save($this->data)) {
            	if($redirect == null)
                {
                	$this->Session->setFlash(__('The Donations has been saved', true), 'default', array('class' => 'success'));
                	$this->redirect(array('controller'=>'admins','action'=>'donation'));
                }
                else
                {
                	$editLinkId = $redirect;
                	$editLinkId = str_replace("@","", $editLinkId);
                	$lId = $this->Donation->getLastInsertID();
                	$this->Session->write('InsertGroupId',$lId);

                	if($editLinkId=="")
                	{	
                		$this->redirect(array('controller'=>'admins','action'=>'adddonations'));                		
                	}
                	else
                	{
                		$this->redirect(array('controller'=>'admins','action'=>'edit_donationtype',$editLinkId));
                	}	
                } 
            } else {
                $this->Session->setFlash(__('The Donations could not be saved. Please, fill the required fields.', true), 'default', array('class' => 'error'));
            }
        }
        $this->set('redirect',$redirect);
	 }
	 
	 
function edit_donation($id = null){
			
		$this->session_check_admin();
		$projectid = '1';
		App::import("Model", "Donation");
		$this->Donation =  & new Donation();   
	    App::import("Model", "Company");
         $this->Company =   & new Company(); 
		 $selectedcompany =  $this->Company->find('all',array('fields'=>array('id','company_name')));
		$this->set("selectedcompany",$selectedcompany);
		

		 App::import("Model", "DonationType");
         $this->DonationType =   & new DonationType();
		 //$condition = "DonationType.'status = '1'"; 
		 $selectedtype =  $this->DonationType->find('all',array('fields'=>array('id','type')));
		$this->set("selectedtype",$selectedtype);
		   
		   if (!empty($this->data)) {
            $this->Donation->id = $id;
            if ($this->Donation->save($this->data)) {
			
                $this->Session->setFlash(__('The Donation has been saved', true), 'default', array('class' => 'success'));
                $this->redirect(array('controller'=>'admins','action'=>'donation'));
            } else {
                $this->Session->setFlash(__('The Donation could not be saved. Please, fill the required fields.', true), 'default', array('class' => 'error'));
            }
        }
		
		if(empty($this->data))
		{
			$this->data = $this->Donation->find('first',array('conditions' => array('Donation.id' => $id)));
			$this->set('oldData',$this->data);
		}
		$this->set('id',$id);
	
	}
	
	
	
	########## Call Function Under Contacs Module ############
	
function Call($redirect = null){
		
		
		App::import("Model", "Call");
		$this->Call =  & new Call();   
		
				
				
	   
		if (!empty($this->data)) {
            $this->Call->create();
            if ($this->Call->save($this->data)) {
            	if($redirect == null)
                {
                	$this->Session->setFlash(__('The Call has been saved', true), 'default', array('class' => 'success'));
                	$this->redirect(array('controller'=>'admins','action'=>'call'));
                }
                else
                {
                	$editLinkId = $redirect;
                	$editLinkId = str_replace("@","", $editLinkId);
                	$lId = $this->Call->getLastInsertID();
                	$this->Session->write('InsertGroupId',$lId);

                	if($editLinkId=="")
                	{	
                		$this->redirect(array('controller'=>'admins','action'=>'addcall'));                		
                	}
                	else
                	{
                		$this->redirect(array('controller'=>'admins','action'=>'edit_call',$editLinkId));
                	}	
                } 
            } else {
                $this->Session->setFlash(__('The Call could not be saved. Please, fill the required fields.', true), 'default', array('class' => 'error'));
            }
        }
        $this->set('redirect',$redirect);
	 }
		 
	 
	 
		########## SMS Function Under Contacs Module ############
	
function Sendsms($redirect = null)
{
		App::import("Model", "Sendsms");
		$this->Sendsms =  & new Sendsms();  
		App::import("Model", 'EmailTemplate');
            $this->EmailTemplate =   & new EmailTemplate();
			$conditions= "delete_status='0' and is_sytem='1'";    
            $email_templates = $this->EmailTemplate->find('all',array('fields' => array('EmailTemplate.id','EmailTemplate.email_template_name'),"conditions"=>$conditions));
            //$menulist[0]="Parent menu";
			$template=array();
            foreach($email_templates as $email_template)
            {
               $template[$email_template['EmailTemplate']['id']]=$email_template['EmailTemplate']['email_template_name'];
            }

            $this->set('template',$template); 
		if (!empty($this->data)) {
            $this->Sendsms->create();
            if ($this->Sendsms->save($this->data)) {
            	if($redirect == null)
                {
                	$this->Session->setFlash(__('The Call has been saved', true), 'default', array('class' => 'success'));
                	$this->redirect(array('controller'=>'admins','action'=>'sendsms'));
                }
                else
                {
                	$editLinkId = $redirect;
                	$editLinkId = str_replace("@","", $editLinkId);
                	$lId = $this->Sendsms->getLastInsertID();
                	$this->Session->write('InsertGroupId',$lId);

                	if($editLinkId=="")
                	{	
                		$this->redirect(array('controller'=>'admins','action'=>'sendsms'));                		
                	}
                	else
                	{
                		$this->redirect(array('controller'=>'admins','action'=>'edit_sendsms',$editLinkId));
                	}	
                } 
            } else {
                $this->Session->setFlash(__('The Send SMS could not be saved. Please, fill the required fields.', true), 'default', array('class' => 'error'));
            }
        }
        $this->set('redirect',$redirect);
	 }	
	 
	 
public function Donationupload()
{
		##check admin session live or not
		$this->session_check_admin();
		if(isset($_SERVER['QUERY_STRING']))
		{
			$this->Session->delete("newsortingby");
			$strloc=strpos($_SERVER['QUERY_STRING'],'=');
			$strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);
			$this->Session->write("newsortingby",$strdata);

		}
		App::import("Model", "Donationupload");
		$this->Donationupload =  & new Donationupload();  
		$field='';
		##checking search key
			$searchkeyword = $this->data['Mailtasks']['searchkey'];
			$condition = "Donationupload.status = '1' ";
		// $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."'";
		$this->Pagination->sortByClass    = 'Donationupload'; ##initaite pagination
		$this->Pagination->total= count($this->Donationupload->find('all',array("conditions"=>$condition)));
		list($order,$limit,$page) = $this->Pagination->init($condition,$field);
		$donationdata = $this->Donationupload->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));
		##set project type data in variable
		$this->set("donationdata",$donationdata);	
		$this->set("hlpdata",$this->getHelpContent('13'));
		
	}

	 function downloaddonation($id = null){

			App::import("Model", "Donationupload");
            $this->Donationupload =   & new Donationupload();    
            $condition = "Donationupload.status='1' and id=$id";
			$file = $this->Donationupload->find('all', array('conditions' => $condition));
			$filename=$file[0]['Donationupload']['filename'];
			$downloadpath='uploads/donation/';
			
			$filedownload=$downloadpath.$filename;
		
			$filename = $filedownload;
			
			if (file_exists($filename))
			{
			header('Pragma: public');
			header('Expires: 0');
			header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
			header('Cache-Control: private', false);
			header('Content-Type: application/force-download');
			header('Content-Type: application/csv');
			header('Content-Type: application/pdf');
			header('Content-Type: application/octet-stream');
			header('Content-Type: image/png');
			header('Content-Type: image/gif');
			header('Content-Type: image/jpg');
			header('Content-Type: application/vnd.ms-excel');
			header('Content-Type: application/vnd.ms-excel');
			header('Content-Description: File Transfer');
			header('Content-Disposition: attachment; filename=' . $filename. ";");
			header('Content-Transfer-Encoding: binary');
			header('Content-Length: ' . filesize($filename));
			readfile($filename) or die('Errors');
			exit();
			}
 } 
		
		
		
function adddonationsuploade($redirect = null){
		
		
		App::import("Model", "Donationupload");
		$this->Donationupload =  & new Donationupload(); 
		
		if (!empty($this->data)) {
            $this->Donationupload->create();
			App::import("Model", "Admin");
            $this->Admin =   & new Admin();
			$adminSess = $this->Session->read("Admin");
			$this->Admin->id = $adminSess['Admin']['id']; //$_SESSION['Admin']['id'];          
            //print_r($adminSess['Admin']['id']);
			$condition = " Admin.active_status='1' and Admin.delete_status='0' and Admin.id=".$adminSess['Admin']['id']." ";
			$selectedloginname = $this->Admin->find('all', array ('conditions' => array('id' =>$adminSess['Admin']['id'])));

			
			$image=$this->data['Donationupload']['filename'];
			$path='uploads/donation/';
			$upimage=rand(0,10000000).$this->data['Donationupload']['filename']['name'];
			$this->data['Donationupload']['name'] =$this->data['Donationupload']['name'];
			$this->data['Donationupload']['status'] =$this->data['Donationupload']['status'];
		$this->data['Donationupload']['relatedevent'] =$this->data['Donationupload']['relatedevent'];
		
		$this->data['Donationupload']['filename'] =$upimage;
		$this->data['Donationupload']['loginname'] = $selectedloginname[0]['Admin']['username'];
			  
            if ($this->Donationupload->save($this->data)) {
			
				move_uploaded_file($image["tmp_name"],$path.$upimage);
            	if($redirect == null)
                {
				
                	$this->Session->setFlash(__('The Donations has been saved', true), 'default', array('class' => 'success'));
                	$this->redirect(array('controller'=>'admins','action'=>'donationupload'));
                }
                else
                {
                	$editLinkId = $redirect;
                	$editLinkId = str_replace("@","", $editLinkId);
                	$lId = $this->Donationupload->getLastInsertID();
                	$this->Session->write('InsertGroupId',$lId);

                	if($editLinkId=="")
                	{	
                		$this->redirect(array('controller'=>'admins','action'=>'donationupload'));                		
                	}
                	else
                	{
                		$this->redirect(array('controller'=>'admins','action'=>'donationupload',$editLinkId));
                	}	
                } 
            } else {
                $this->Session->setFlash(__('The Donations could not be saved. Please, fill the required fields.', true), 'default', array('class' => 'error'));
            }
        }
        $this->set('redirect',$redirect);
	 
		 }
		 
	function edit_donationuploade($id = null){
			
		$this->session_check_admin();
		$projectid = '1';
		App::import("Model", "Donationupload");
		$this->Donationupload =  & new Donationupload();
		
		  if (!empty($this->data)) {
		 
		  
		 App::import("Model", "Admin");
         $this->Admin =   & new Admin();
		$adminSess = $this->Session->read("Admin");
		$this->Admin->id = $adminSess['Admin']['id'];
		
       	$condition = " Admin.active_status='1' and Admin.delete_status='0' and Admin.id=".$adminSess['Admin']['id']." ";
		$selectedloginname = $this->Admin->find('all', array ('conditions' => array('id' =>$adminSess['Admin']['id'])));
		$this->data['Donationupload']['name'] =$this->data['Donationupload']['name'];
		$this->data['Donationupload']['status'] =$this->data['Donationupload']['status'];
		$this->data['Donationupload']['relatedevent'] =$this->data['Donationupload']['relatedevent'];
		$this->data['Donationupload']['loginname'] = $selectedloginname[0]['Admin']['username'];
			$image=$this->data['Donationupload']['filename1'];
			//print_r($this->data['Donationupload']['filename1']['name']); die;
			if(!empty($this->data['Donationupload']['filename1']['name'])){
			$path='uploads/donation/';
			$upimage=rand(0,10000000).$this->data['Donationupload']['filename1']['name'];
			$this->data['Donationupload']['filename'] =$upimage;
			move_uploaded_file($image["tmp_name"],$path.$upimage);
			}
			//print_r($this->data);
            $this->Donationupload->id = $id;
            if ($this->Donationupload->save($this->data)) {
			
                $this->Session->setFlash(__('The Donation Upload has been saved', true), 'default', array('class' => 'success'));
                $this->redirect(array('controller'=>'admins','action'=>'donationupload'));
            } else {
                $this->Session->setFlash(__('The Donation Upload could not be saved. Please, fill the required fields.', true), 'default', array('class' => 'error'));
            }
        }
		
		if(empty($this->data))
		{
			$this->data = $this->Donationupload->find('first',array('conditions' => array('Donationupload.id' => $id)));
			$this->set('oldData',$this->data);
		}
		$this->set('id',$id);
	
	}
	
	
	 function downloaduload(){
	 
	 
	 

			App::import("Model", "Donationupload");
            $this->Donationupload =   & new Donationupload();    
           
			
			$this->Donationupload->recursive = 0;

    $conditions = "Donationupload.status='1'";

    $result = $this->Donationupload->find('all', array('conditions' => $conditions));
header('Pragma: public');

if(sizeof($result) > 0)
	{
		//-------------------------------------------------------------------------------
	
		$filename       = 'donations-'.date("j_M_Y" , time()).'.csv';		
		$csv_terminated = "\n";
		$csv_separator  = ",";
		$csv_enclosed   = '"';
		$csv_escaped    = "\\";		
		$schema_insert  = '';
							
						
		$all_fields = array("id",'name','loginname','relatedevent','record','filename','status','created');						
							
						
		$fields_cnt = sizeof($all_fields);
		   
	   
		for ($i = 0; $i < sizeof($all_fields); $i++)
		{
			$l = $csv_enclosed . str_replace($csv_enclosed, $csv_escaped . $csv_enclosed,
				stripslashes($all_fields[$i])) . $csv_enclosed;
			$schema_insert .= $l;
			$schema_insert .= $csv_separator;
		} // end for
	 
	  
		$out = trim(substr($schema_insert, 0, -1));
		$out .= $csv_terminated;
	 
		// Format the data
		  
	  $pageCount = 0 ;
	  
	  foreach($result as $ticker_rowaa)
	  {		  
	      $ticker_row = $ticker_rowaa['Donationupload'];
	  
	// d( $ticker_row);
	  
			$schema_insert = '';
			for ($j = 0; $j < $fields_cnt; $j++)
			{
				if ($ticker_row[$all_fields[$j]] == '0' || $ticker_row[$all_fields[$j]] != '')
				{
					
					if ($csv_enclosed == '')
					{
						$schema_insert .= trim(strip_tags($ticker_row[$all_fields[$j]]));
					} else
					{
						$schema_insert .= $csv_enclosed .
						str_replace($csv_enclosed, $csv_escaped . $csv_enclosed, trim(strip_tags($ticker_row[$all_fields[$j]]))) . $csv_enclosed;
					}
				} else
				{
					$schema_insert .= '';
				}
	 
				if ($j < $fields_cnt - 1)
				{
					$schema_insert .= $csv_separator;
				}
				
			} // end for
	 
			$out .= $schema_insert;
			$out .= $csv_terminated;
			
			//die;
		} // end while
							
		header("Cache-Control: must-revalidate, post-check=0, pre-check=0");
		header("Content-Length: " . strlen($out));
		header("Content-type: text/x-csv");					
		header("Content-Disposition: attachment; filename=$filename");
		echo $out;
		exit;	
	}					
 }
	 
}
?>
