<?php

    /* Project           :-  imagecoin website

    * Controller Name :-  companies_contoller.php

    * Created  On     :-  15-02-10 (10:00am)

    * Description     :-  This controller contains all the methods for tasks that will be 

    *                     managed by project website                        

    */

    class CompaniesController extends AppController {



        var $name = 'Companies';

        var $uses     = array('Project', 'Theme', 'Sponsor','Comment','Subcomment','Content','CoinsHolder','Coinset','Holder','EmailTemplate','User','UserSession','Country','Company','CompanyType','Contact','Term','CoinTransferRequest','ProjectGraphic','CommentType','ProjectCommentType','Point','Invitation', 'ProductType','PricingType','PointArchiveUser','MailFooter','RecurringEvent','SystemPricing','SystemVersion','UserAgreement','SpamPolicy','Term');

        var $helpers = array('Common','Pagination','Html', 'Form','Session','Qrcode','Javascript','Tinymce','Recaptcha','Fck','Csv','csv','Ajax','Calendar');

        var $components = array('Backup', 'EmailTemplates', 'ForceDownload','Session','Cookie','Pagination','File','Sendemail','Mpdf', 'Progress','Payment','RequestHandler','Recaptcha','Filegenerator','Imageresizing');

        var $layout = 'layout';



        ####################################

        # Function Name:requestData



        # Parameter    :NA

        ####################################



        function beforeFilter() {

            //die("yes");            

					 /*permission code start*/	

			 if($this->Session->check("UserLoginDetails"))

			 {

			  	$admin =  $this->Session->read("UserLoginDetails");

				$permissions = array();

				if(!empty($admin))

				{

					//if($admin['Admin']['username']!='admin')

					//{

            			$permissions = $this->check_user_permissions($admin['Admin']['user_type']);

					//}

				}

				if(!empty($permissions))

				{

					$this->set('hideMenuPermission',$permissions);	

				}

			}

			/*permission code end*/	

          

			$google_metatag = '';

            $yahoo_metatag = '';

            $bing_metatag = '';

	

			$this->set('google_metatag',$google_metatag);

			$this->set('yahoo_metatag',$yahoo_metatag);

			$this->set('bing_metatag',$bing_metatag);

			

			//anurag's code starts here to remove warnings

            $cook_temp= array();

            $cook_temp['user']='';

            $cook_temp['pass']='';

            

			//$this->Session->destroy();

			//$this->Cookie->delete('name');

			//$this->Cookie->delete('id');

			

            //anurag's code starts here to remove warnings

            $this->Cookie->name ='project';

            $this->Cookie->time = 3600*24*2; // or '1 hour' 

			

			//echo $this->Session->read("projectwebsite_systemname");

			//echo $this->Session->read("projectwebsite_id");

			

            $this->Session->write('projectwebsite_id', '1');

            $this->Session->write('projectwebsite_name', '');

            

			if($this->Session->read("projectwebsite_id"))

            {

				$this->Cookie->write('id',$this->Session->read("projectwebsite_id"),false, 3600*24*2);

                $this->Cookie->write('name',$this->Session->read("projectwebsite_name"),false, 3600*24*2);

            }else{

				$name= $this->Cookie->read('name');

				//die("111");

                $id= $this->Cookie->read('id'); 

                $this->Session->write('projectwebsite_id',$id);

                $this->Session->write('projectwebsite_name',$name);	

                $_SESSION['projectwebsite_id']=$id;	  

            }

			 

			//echo $this->Session->read("projectwebsite_name");

			//var_dump($this->Session->read("projectwebsite_id"));

			//die("test"); 

			

            $datastyle=$this->getstyles();

            $this->Session->delete('styledata');

            $this->set('styledata',$datastyle);

            $this->Session->write("styledata",$datastyle);	            

            $dataprojects=$this->getprojectdetails1();

            $this->set('dataprojects',$dataprojects);    

			

            if($this->Session->read("User"))

            {

                $this->set("fb_auth_user",$this->Session->read("User"));

                $usr = $this->Session->read("User");

                $_SESSION["User"] = $usr; 

                $this->Cookie->write('UserId',$usr["User"]["id"],false, 36000);

                // Call set user session function

                $current_user_session_id=session_id();

                $this->SetLoggedInUserSession($current_user_session_id, $usr["User"]["id"]);

            }



            $current_domain= $_SERVER['HTTP_HOST'];



            $href_coin_image=$this->__getlink();

            $this->set('href_coin_image',$href_coin_image);

            //set page footer

            App::import('Model','PageFooter');

            $this->PageFooter = new PageFooter();

            $cond="project_id='".$this->Session->read("projectwebsite_id")."'";

            $page_footer_dt=$this->PageFooter->find("first",array('conditions'=>$cond));

            

            

            $page_footer_content=$page_footer_dt['PageFooter']['page_footer_content'];

            $this->set("page_footer_content",$page_footer_content);

			

			// By Suman for super footer SA dated 8 June 2012

			$projectID = $this->Session->read("projectwebsite_id");

			$super_footer_content = $this->get_super_footer_content($projectID);

			$this->set("super_footer_content",$super_footer_content);

			

			$project_border_footer_content = $this->get_project_border_footer_content($projectID);

			$this->set("project_border_footer_content",$project_border_footer_content);

			

			// End By suman

			

			App::import('Model','Theme');

            $this->Theme = new Theme(); 

			$condition = 'Theme.project_id='.$projectID;

			$themedata = $this->Theme->find('first', array('conditions' => $condition));

			$this->set('no_header_img',$themedata['Theme']['no_header_img']);

            

        }

        

        function requestData($key = ''){



            if(!empty($key)){

                $value = $this->params['url'][$key];

                return $value;

            }else{

                $value = $this->params['url'];

                return $value;

            }

        }

        

        /*******************************************************************

        * Function Name: index

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/





          function index() {
		    //Configure::write('debug', 2);    
            $theme = $this->Theme->find("first", array("conditions" => array("Theme.project_id" => 1)));
            print_r($theme);exit;
			$this->layout= 'layout';
            $current_domain= $_SERVER['HTTP_HOST'];
            $is_redirect="";
            //if take project through /projectname
			//print_r($this->params);
             $project_name = strtolower($this->params['url']['url']);
             //$project_name = strtolower($project_name);  
             $project_name = strtolower('cckiller');    
			//if take project through /projectname
            //if take project through site URl   
            //$project_data=$this->Project->find("first",array("conditions"=>array("url like '%$current_domain'")));
            //$project_name = $project_data['Project']['project_name'];  
            //if take project through site URl  
            if(!empty($project_name)&&($project_name!='/') &&($project_name!='register') &&($project_name!='login')){
				$project_name=$project_name;
            } else {
                //$this->redirect('indexhome');
                 if(!empty($project_name) && (($project_name=='register') || ($project_name=='login'))){
                     $is_redirect=$project_name;
                     $project_name="";
                  }  
           // $project_data=$this->Project->find("first",array("conditions"=>array("url like '%$current_domain'")));
                  $project_data=$this->Project->find("first",array("conditions"=>array("Project.id" => "1")));
            $project_name = $project_data['Project']['system_name'];  
              if($project_name=="" || $project_name==NULL)
                $project_name = "cckiller";        //if no project set default project i.e imagecoins
            }
            $project_name = strtolower($project_name);
            $this->set('page_url',"home_page");
            $this->Project->bindModel(array('hasOne' => array('Sponsor' => array('foreignKey' => false,'conditions' => array('Sponsor.id = Project.sponsor_id' )))));
            //$condition="Project.system_name='".$project_name."' and Project.active_status='1' and Project.delete_status='0'";
            $condition="Project.id='1' and Project.active_status='1' and Project.delete_status='0'";
            $projectDetails = $this->Project->find($condition,NULL,NULL,NULL,NULL,1);
            //checking project name in database
            if(is_array($projectDetails) && !empty($projectDetails)) 
            {
                if(empty($projectDetails['Sponsor']['sponsor_name'] )){
					$this->redirect(array('controller'=>'companies','action'=>'sitenotconfigured'));
                }else{
                    // Check User Login for different projects
                    $prjid = $this->Session->read('CurrentProject');
                    if($prjid != $projectDetails['Project']['id'])
                    {
                        $this->Session->delete('CurrentProject');
                        $this->Session->delete('User');
                    }
                    // Check User Login for different projects End
                    $this->Session->write('projectwebsite_id', $projectDetails['Project']['id']);
                    $this->Session->write('projectwebsite_name', $projectDetails['Project']['system_name']);
                   //$_SESSION['projectwebsite_id']=$projectDetails['Project']['id'];
                    $projectDetails=$this->getprojectdetails($projectDetails['Project']['id']);
                    // Set Cookie for Project
                    $this->Cookie->name = 'project'; 
                    $this->Cookie->time =  18000;  // or '1 hour' 
                    $this->Cookie->path = '/'; 
                    $this->Cookie->domain = 'localhost';   
                    $this->Cookie->secure = false;  //i.e. only sent if using secure HTTPS 
                    $this->Cookie->key = 'qSI232qs*&sXOw!';
                    $arr['name']=$projectDetails['Project']['project_name'];
                    $arr['id']=$projectDetails['Project']['id'];
                    $arr1 = serialize($arr);
                    $this->Cookie->write("proj_dtl",$arr1);
                    // Set Cookie for Project End    
                    $this->Cookie->write("name",$projectDetails['Project']['system_name']); 
                    $this->Cookie->write("id",$projectDetails['Project']['id']); 
                    $this->set('project',$projectDetails);
                    $this->set('project_name',$project_name);
                    $conditioncoinset = "project_id = '".$projectDetails['Project']['id']."' and  active_status='1' and delete_status='0'";
                    ##check already exists company name
                    $consetdata1 = $this->Coinset->find('first',array("conditions"=>$conditioncoinset));
                    $this->set('coinsdetail',$consetdata1);
                    $condition="(Content.internal_alias='home-page' or Content.alias='home-page' or Content.alias='home_page') and Content.project_id=".$projectDetails['Project']['id']." and Content.active_status='1' and Content.delete_status='0' ";

                    $noofcomments = $this->Comment->find('count',array('conditions' => "Comment.project_id='".$projectDetails['Project']['id']."'  and Comment.offensive='0'  and  Comment.active_status='1' and Comment.delete_status='0'"));
					  //echo $condition;exit;
                    $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);
                    if(isset($page_content['Content']['content'])&&$page_content['Content']['content']!='')
                    {
                           $page_content['Content']['content'] =  $this->replace_srt_code($page_content['Content']['content']); 
                    }    
                    //pr($page_content); 
                    //set page footer
                    App::import('Model','PageFooter');
                    $this->PageFooter = new PageFooter();
                    $cond="project_id='".$this->Session->read("projectwebsite_id")."'";
                    $page_footer_dt=$this->PageFooter->find("first",array('conditions'=>$cond));
                    $page_footer_content=$page_footer_dt['PageFooter']['page_footer_content'];
                    $this->set("page_footer_content",$page_footer_content);
					$google_metatag=$projectDetails['Project']['google_metatag'];
                    $yahoo_metatag=$projectDetails['Project']['yahoo_metatag'];
                    $bing_metatag=$projectDetails['Project']['bing_metatag'];
                    $this->set('meta_description',$page_content['Content']['metadescription']);
                    $this->set('meta_keyword',$page_content['Content']['metakeyword']);
                    $this->set('meta_title',$page_content['Content']['metatitle']);
                    $this->set('page_title',$page_content['Content']['metatitle']);
                    $this->set('noofcomments',$noofcomments);
                    $this->set('page_content',$page_content);
                    $this->set('google_metatag',$google_metatag);
                    $this->set('yahoo_metatag',$yahoo_metatag);
                    $this->set('bing_metatag',$bing_metatag);
                    $datastyle=$this->getstyles();
                    $this->Session->delete('styledata');
                    $this->set('styledata',$datastyle);
                    $this->Session->write("styledata",$datastyle);
                    $dataprojects=$this->getprojectdetails1();
                    $this->set('dataprojects',$dataprojects);
                }
                // For Showing social icons

                App::import('Model','ProjectGraphic');
                $this->ProjectGraphic = new ProjectGraphic();
                $socialiconsArr = $this->ProjectGraphic->find('all',array('conditions'=>array('ProjectGraphic.project_id'=>$projectDetails['Project']['id'],'ProjectGraphic.active_status'=>1, 'ProjectGraphic.delete_status'=>0 ,'ProjectGraphic.home_icon'=>1), 'order'=>'ProjectGraphic.id ASC'));
                $this->set('socialicons',$socialiconsArr);
                // For Showing social icons End

                // For Right side bar items
                if($projectDetails['ProjectType']['registrationbox_verification']==1 || $projectDetails['Project']['is_showcoins']==1 || count($socialiconsArr)>0)
                {
                    $this->set("rightbar",1);
                }
                else
                {
                    $this->set('rightbar',0);
                }
                // For Right side bar items end
            }else{
                $this->redirect('/companies/notavailable');
            }
            if($is_redirect=="register"){
                 $this->redirect(array('controller','companies','action'=>'registeruser'));
            }
            if($is_redirect=="login"){
                 $this->redirect(array('controller'=>'companies','action'=>'login'));
            }

            if(isset($_GET['register_redirect']))
            {
                if($_GET['t_id'])
                    $this->redirect(array('controller'=>'companies','action'=>'registeruser?t_id='.$_GET['t_id']));
                else
                if($_GET['invite_id'])
                    $this->redirect(array('controller'=>'companies','action'=>'registeruser?invite_id='.$_GET['invite_id']));
                else                                     
                    $this->redirect(array('controller','companies','action'=>'registeruser'));
            }

            if(isset($_GET['show_comment_link']))
            {
               $this->redirect(array('controller'=>'companies','action'=>'login?show_comment_link='.$_GET['show_comment_link']));
            }    
            //Check if email un-subscription link clicks from email footer   
             if(isset($_GET['email_subscriptions']))
            {
                    $this->redirect(array('controller'=>'companies','action'=>'login?redirecttopage=email_subscriptions'));
            } 

            // Check if email optout link clicks from email footer
            if(isset($_GET['optout']))
            {
            	$this->redirect(array('controller'=>'companies','action'=>'login?redirecttopage=optout'));
            }
             // Check if project privacy page  link clicks from email footer   
            if(isset($_GET['destinationpage']) && $_GET['destinationpage']=="privacy")
            {
                    $this->redirect(array('controller'=>'companies','action'=>$_GET['destinationpage']));
            }                                                                       
        }

        function indexhome(){

           //echo "I am in idexhome";die;

            $this->layout = 'layout1';

            //echo "i am in indexhome function";

            $this->render('indexhome');



        }

        

        function sitemap()

        {

            $this->layout= 'internal_layout';

            $this->set('page_url','sitemap');

            

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);        



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);                            

            

            

            

        }

        

        function user_agreement_project()

        {       

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';

               

            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            $this->set('current_project_name',$project_name);

            

            $condition="Project.id='$projectid'";

            $projectdataarr = $this->Project->find('first',array("conditions"=>$condition));

            $this->set('project',$projectdataarr);

            $user_agreement_id=$projectdataarr['Project']['user_agreement_id'];

            

            if($user_agreement_id==0)

            {

                $cont="UserAgreement.delete_status='0' and UserAgreement.active_status='1' and UserAgreement.default_new_projects='1'";           

                $selectedagreement=$this->UserAgreement->find('first',array('conditions'=>$cont,'fields'=>array('id','agreement_name'))); 

                $user_agreement_id=$selectedagreement['UserAgreement']['id'];

            }

            

            $this->UserAgreement->id = $user_agreement_id;

            $this->data = $this->UserAgreement->read();

            $this->set("data", $this->data);

        }

        

        

        function spam_policy_project()

        {          

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';

            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            $this->set('current_project_name',$project_name);

            

            $condition="Project.id='$projectid'";

            $projectdataarr = $this->Project->find('first',array("conditions"=>$condition));

            $this->set('project',$projectdataarr);

            

            $condition="SpamPolicy.created_by='1' and SpamPolicy.active_status='1' and SpamPolicy.delete_status='0'";

            $spamaarr = $this->SpamPolicy->find('first',array("conditions"=>$condition));

            $spam_id=$spamaarr['SpamPolicy']['id'];

            

            if($spam_id!="")

            {

                $this->SpamPolicy->id = $spam_id;

                $this->data = $this->SpamPolicy->read();

                $this->set("data", $this->data);

            }

        }

        

        function calendar($year = null, $month = null)

        {

            

            $this->layout= 'internal_layout';

           

            //for active menu display

            $this->set('page_url','calendar');

            

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            //STEP : GET PAGE CONTENT

            $condition="Content.alias='calendar' and Content.project_id=".$project_id." and Content.active_status='1' and Content.delete_status='0' ";

            $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);     

            $this->set('meta_description',$page_content['Content']['metadescription']);

            $this->set('meta_keyword',$page_content['Content']['metakeyword']);

            $this->set('meta_title',$page_content['Content']['metatitle']);

            $this->set('meta_isindex',$page_content['Content']['meta_isindex']);

            $this->set('meta_isfollow',$page_content['Content']['meta_isfollow']);

            $this->set('page_title',$page_content['Content']['title']);

            $this->set('page_content',$page_content);             

            

            $this->set('project_name',$project_name);    



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            

			/*

				@Auther			Suman Singh

				@Type			Modified

			*/	

			

            //$current_domain= $_SERVER['HTTP_HOST'];

            $current_domain= Configure::read('App.base_url');

            

             App::import("Model", "Holder");

             $this->Holder =  & new Holder();   

                        

            

             App::import("Model", "RecurringEvent");

             $this->RecurringEvent =   & new RecurringEvent();

             // get all the events from the database.

             $events = $this->RecurringEvent->find('all',array('conditions' => "RecurringEvent.project_id='".$project_id."' and RecurringEvent.active_status='1' and RecurringEvent.delete_status='0'"));

             

             App::import("Model", "Event");

             $this->Event =   & new Event();

             

             App::import("Model", "EventInvitation");

             $this->EventInvitation =   & new EventInvitation();

                         

             

             $current_date=date('Y-m-d');

             $holder_id = $this->Session->read("User.Holder.id");



			

            // insert rows to an array.

            for ($a=0; count($events)> $a; $a++){

               

                    $starttime=date('Y-m-d H:i:s', strtotime($events[$a]['RecurringEvent']['start_date']));

                    $endtime=date('Y-m-d H:i:s', strtotime($events[$a]['RecurringEvent']['end_date']));

                   //$starttime=date_format($events[$a]['Event']['starttime'],'Y-m-d');

                   //$endtime=date_format($events[$a]['Event']['endtime'],'Y-m-d');

                   

                   $event_startdate=$events[$a]['RecurringEvent']['start_date'];

                

                    if($event_startdate >= $current_date)

                        $url=$current_domain."companies/events/0/";

                    else

                        $url=$current_domain."companies/pastevents/0/";   

                        

                    if($events[$a]['RecurringEvent']['show_to_invitees_only']==1)

                    {

                        $match_found=0;

                        $condition = "EventInvitation.project_id = '".$events[$a]['RecurringEvent']['project_id']."' and  EventInvitation.rec_event_id='".$events[$a]['RecurringEvent']['id']."' and EventInvitation.active_status='1' and EventInvitation.delete_status='0' and EventInvitation.invite_to_holder_id='".$holder_id."'";

                        $event_inv_data = $this->EventInvitation->find('first',array("conditions"=>$condition));

                        if($username)

                        {

                            if(!empty($event_inv_data))

                            {

                                $match_found=1;

                            }

                        }

                    }  

                    

                    $member_type=$events[$a]['RecurringEvent']['member_type'];

					if($holder_id!="")

                    {

						if($member_type=="coin_holders")

						{

							 $condition = "Holder.project_id = '".$events[$a]['RecurringEvent']['project_id']."' AND Holder.delete_status='0' and Holder.id='".$holder_id."' and  Holder.id In(select holder_id from coins_holders where project_id=".$events[$a]['RecurringEvent']['project_id']." and active_status='1' and delete_status='0')";   

						}

                        else if($member_type=="non_coin_holders")

                        {

                                              

                            $condition = "Holder.project_id = '".$events[$a]['RecurringEvent']['project_id']."' AND Holder.delete_status='0' and Holder.id='".$holder_id."' and Holder.id NOT In(select holder_id from coins_holders where project_id=".$events[$a]['RecurringEvent']['project_id']." and active_status='1' and delete_status='0')";       

                        }

                        else if($member_type=="non_members")

                        {

                                             

                            $condition = "Holder.project_id = '".$events[$a]['RecurringEvent']['project_id']."' AND Holder.delete_status='0' AND Holder.active_status='0' and Holder.id='".$holder_id."'";  

                            

                        }

                        $show_to_member_type = $this->Holder->find('first',array("conditions"=>$condition));

                        if(!empty($show_to_member_type) || $member_type=="all")

                            $show_to_member_type=1;

                    }

                    else if($member_type=="all" || $member_type=="0")

                            $show_to_member_type=1;

                    else

                        $show_to_member_type=0;  



                    if($show_to_member_type==1) {

					

                        if( ($events[$a]['RecurringEvent']['show_to_invitees_only']==1 && $match_found==1) || $events[$a]['RecurringEvent']['show_to_invitees_only']==0)

                        {

						$rows[]= '{"id":'.$events[$a]['RecurringEvent']['event_id'].', "title":"'.$events[$a]['RecurringEvent']['event_title'].'", "start":"'.$starttime.'","end":"'.$endtime.'","url":"'.$url.$events[$a]['RecurringEvent']['id'].'", "className":"'.$events[$a]['RecurringEvent']['event_type'].'","type":"'.$events[$a]['RecurringEvent']['event_type'].'"}';

                        }

                   }

                

            }



            // convert the array to a string.

            

			if (!empty($rows) && isset($rows)){

	            $convertojson = implode(",", $rows);

				$this->set('json',$convertojson);

			}else{

				  $convertojson='';

			}

	



            // pass the string to the json variable. this will then be passed  and printed to the javascript code.

 

        }

        

        

        

        

        function iframeeventcalendar($year = null, $month = null)

        {

        	$this->layout= 'iframelayout';

        	 

        	//for active menu display

        	$this->set('page_url','calendar');

        

        	$project_id='1';

        	$project_name='';

        	$this->set('project_name',$project_name);

        	$projectDetails=$this->getprojectdetails($project_id);

        	$this->set('project',$projectDetails);

       

        	$current_domain= Configure::read('App.base_url');

        

        	App::import("Model", "Holder");

        	$this->Holder =  & new Holder();

 

        	App::import("Model", "RecurringEvent");

        	$this->RecurringEvent =   & new RecurringEvent();

        	// get all the events from the database.

        	$events = $this->RecurringEvent->find('all',array('conditions' => "RecurringEvent.project_id='".$project_id."' and RecurringEvent.active_status='1' and RecurringEvent.delete_status='0'"));

        	 

        	App::import("Model", "Event");

        	$this->Event =   & new Event();

        	 

        	App::import("Model", "EventInvitation");

        	$this->EventInvitation =   & new EventInvitation();

        	 

        	$current_date=date('Y-m-d');

        	$holder_id = $this->Session->read("User.Holder.id");

			

        	

        	// insert rows to an array.

        	for ($a=0; count($events)> $a; $a++){

        		 

        		$starttime=date('Y-m-d H:i:s', strtotime($events[$a]['RecurringEvent']['start_date']));

        		$endtime=date('Y-m-d H:i:s', strtotime($events[$a]['RecurringEvent']['end_date']));

        		//$starttime=date_format($events[$a]['Event']['starttime'],'Y-m-d');

        		//$endtime=date_format($events[$a]['Event']['endtime'],'Y-m-d');

        		 

        		$event_startdate=$events[$a]['RecurringEvent']['start_date'];

        

        		if($event_startdate >= $current_date)

        			$url=$current_domain."companies/iframeevent/0/";

        		else

        			$url=$current_domain."companies/iframeevent/0/";

        

        		if($events[$a]['RecurringEvent']['show_to_invitees_only']==1)

        		{

        			$match_found=0;

        			$condition = "EventInvitation.project_id = '".$events[$a]['RecurringEvent']['project_id']."' and  EventInvitation.rec_event_id='".$events[$a]['RecurringEvent']['id']."' and EventInvitation.active_status='1' and EventInvitation.delete_status='0' and EventInvitation.invite_to_holder_id='".$holder_id."'";

        			$event_inv_data = $this->EventInvitation->find('first',array("conditions"=>$condition));

        			if($username)

        			{

        				if(!empty($event_inv_data))

        				{

        					$match_found=1;

        				}

        			}

        		}

        

        		$member_type=$events[$a]['RecurringEvent']['member_type'];

        		

        		

				if($holder_id!="")

        		{

        			if($member_type=="coin_holders")

        			{

        				$condition = "Holder.project_id = '".$events[$a]['RecurringEvent']['project_id']."' AND Holder.delete_status='0' and Holder.id='".$holder_id."' and  Holder.id In(select holder_id from coins_holders where project_id=".$events[$a]['RecurringEvent']['project_id']." and active_status='1' and delete_status='0')";

        			}

        			else if($member_type=="non_coin_holders")

        			{

        

        				$condition = "Holder.project_id = '".$events[$a]['RecurringEvent']['project_id']."' AND Holder.delete_status='0' and Holder.id='".$holder_id."' and Holder.id NOT In(select holder_id from coins_holders where project_id=".$events[$a]['RecurringEvent']['project_id']." and active_status='1' and delete_status='0')";

        			}

        			else if($member_type=="non_members")

        			{

        				 

        				$condition = "Holder.project_id = '".$events[$a]['RecurringEvent']['project_id']."' AND Holder.delete_status='0' AND Holder.active_status='0' and Holder.id='".$holder_id."'";

        

        			}

        			$show_to_member_type = $this->Holder->find('first',array("conditions"=>$condition));

        			if(!empty($show_to_member_type) || $member_type=="all")

        				$show_to_member_type=1;

        		}

        		else if($member_type=="all" || $member_type=="1")

        			$show_to_member_type=1;

        		else

        			$show_to_member_type=0;

        

        		if($show_to_member_type==1) {

        				

        			if( ($events[$a]['RecurringEvent']['show_to_invitees_only']==1 && $match_found==1) || $events[$a]['RecurringEvent']['show_to_invitees_only']==0)

        			{

        				$rows[]= '{"id":'.$events[$a]['RecurringEvent']['event_id'].', "title":"'.$events[$a]['RecurringEvent']['event_title'].'", "start":"'.$starttime.'","end":"'.$endtime.'","url":"'.$url.$events[$a]['RecurringEvent']['event_id'].'", "className":"'.$events[$a]['RecurringEvent']['event_type'].'","type":"'.$events[$a]['RecurringEvent']['event_type'].'"}';

        			}

        		}

        

        	}

        

			

        	// convert the array to a string.

        

        	if (!empty($rows) && isset($rows)){

        		$convertojson = implode(",", $rows);

        		$this->set('json',$convertojson);

        	}else{

        		$convertojson='';

        	}

        	// pass the string to the json variable. this will then be passed  and printed to the javascript code.

        }

        



        /*******************************************************************

        * Function Name: gmap

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/





        function gmap() {



            //Configure::write('debug', 2);    

            $this->layout= 'layout';

            $this->set('page_url','gmap');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);        



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);                            



            $condition1="Comment.project_id='".$project_id."'  and Comment.offensive='0'  and  Comment.active_status='1' and Comment.delete_status='0'";



            $this->Comment->bindModel(array('belongsTo'=>array(

            'CoinsHolder'=>array(

            'foreignKey'=>false,

            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

            ),'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = Comment.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = Comment.coinset_id'

            )

            )));



            $field='';                



            $order      = array('Comment.created DESC');

            $holderdetails = $this->Comment->find('all',array('conditions' => $condition1, 'order' =>$order));    



            $this->set('holderdetails',$holderdetails);

            $this->set('coinserial',trim($this->data['Company']['coinset']));        

        }









        /*******************************************************************

        * Function Name: sponsor

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function sponsor() {

            //Configure::write('debug', 2);    

            $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url','sponsor');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    





            $companylist = $this->Company->find('all', array('conditions' => "Company.project_id='".$project_id."'"));    

            $this->set('companylist',$companylist);



            $this->set('sponsorDetails',$projectDetails);



        }



        /*******************************************************************

        * Function Name: our_coins

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function our_coins() {

            $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url','our_coins');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

        }



        /*******************************************************************

        * Function Name: notavailable

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function notavailable() {

            $this->layout= '';

        }

        /*******************************************************************

        * Function Name: sitenotconfigured

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function sitenotconfigured() {

            $this->layout= '';



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



        }

        /*******************************************************************

        * Function Name: session_expired

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 24 Feb, 2011

        ********************************************************************/

        function session_expired() {

            $this->layout= '';

            if(!empty($this->Cookie))

                $this->redirectlogout();







        }

        /*******************************************************************

        * Function Name: pagenotavailable

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 24 Feb, 2011

        ********************************************************************/

        function pagenotavailable() {

            $this->layout= '';

        }



        function show_msg() {

            $this->layout= '';    



        }

        /*******************************************************************

        * Function Name: pages1 old page

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function pages1($page_name) {



            $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url',$page_name);



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);

            $this->set('site_url',HTTP_PATH);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $condition="Content.alias='".$page_name."' and Content.project_id=".$project_id." and Content.active_status='1' and Content.delete_status='0' ";



            $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);        



            if($page_content['Content']['title']=="Home") 

                $this->redirect("/".$project_name);



            if($page_content['Content']['title']=="COMMENTS") 

                $this->redirect("/companies/comments");



            if($page_name == 'privacy' || $page_name == 'terms')

            {

                ##import Sponsor  model for processing

                App::import("Model", "Term");

                $this->Term =   & new Term();

                $condition="Term.project_id=".$project_id." and Term.active_status='1' and Term.delete_status='0' ";

                $page_content = $this->Term->find('all',array("conditions"=>$condition));



                if($page_name == 'privacy')

                {

                    $page_content['Content']['metadescription'] = $page_content[0]['Term']['privacytitle'];

                    $page_content['Content']['metakeyword'] = $page_content[0]['Term']['privacytitle'];

                    $page_content['Content']['metatitle'] =  $page_content[0]['Term']['privacytitle'];

                    $page_content['Content']['title'] = $page_content[0]['Term']['privacytitle'];

                    $page_content['Content']['content'] = $page_content[0]['Term']['privacycontent'];

                }

                if($page_name == 'terms')

                {

                    $page_content['Content']['metadescription'] = $page_content[0]['Term']['termstitle'];

                    $page_content['Content']['metakeyword'] = $page_content[0]['Term']['termstitle'];

                    $page_content['Content']['metatitle'] =  $page_content[0]['Term']['termstitle'];

                    $page_content['Content']['title'] = $page_content[0]['Term']['termstitle'];

                    $page_content['Content']['content'] = $page_content[0]['Term']['termscontent'];

                }

            }



            $this->set('meta_description',$page_content['Content']['metadescription']);

            $this->set('meta_keyword',$page_content['Content']['metakeyword']);

            $this->set('meta_title',$page_content['Content']['metatitle']);

            $this->set('page_title',$page_content['Content']['title']);

            $this->set('page_content',$page_content);

		

		}

        

		/*******************************************************************

        * Function Name: pages1

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function pages($page_name) {

          //  echo $page_name; 

			$this->layout= 'internal_layout';



            $page_name=str_replace("."," ",$page_name);



            $datastyle=$this->getstyles();

            $this->Session->delete('styledata');

            $this->set('styledata',$datastyle);



            //for active menu display

            $this->set('page_url',$page_name);



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $current_domain= $_SERVER['HTTP_HOST'];



            // if($current_domain!= 'coins4promo.com' && $current_domain!='www.coins4promo.com'  ){    



            if($page_name=='comments')

            {

                $this->redirect(array('action'=>'comments'));



            }



            //  }



            $condition="Content.alias='".$page_name."' and Content.project_id=".$project_id." and Content.active_status='1' and Content.delete_status='0' ";



            $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);        



            if($page_content['Content']['title']=="Home" || $page_content['Content']['internal_alias']=="home_page") 

                $this->redirect("/".$project_name);



            if($page_content['Content']['title']=="COMMENTS") 

                $this->redirect("/companies/comments");



            if($page_name == 'privacy' || $page_name == 'terms')

            {

                ##import Sponsor  model for processing

                App::import("Model", "Term");

                $this->Term =   & new Term();

                $condition="Term.project_id=".$project_id." and Term.active_status='1' and Term.delete_status='0' ";

                $page_content = $this->Term->find('all',array("conditions"=>$condition));



                if($page_name == 'privacy')

                {

                    $page_content['Content']['metadescription'] = $page_content[0]['Term']['privacytitle'];

                    $page_content['Content']['metakeyword'] = $page_content[0]['Term']['privacytitle'];

                    $page_content['Content']['metatitle'] =  $page_content[0]['Term']['privacytitle'];

                    $page_content['Content']['title'] = $page_content[0]['Term']['privacytitle'];

                    $page_content['Content']['content'] = $page_content[0]['Term']['privacycontent'];

                }

                if($page_name == 'terms')

                {

                    $page_content['Content']['metadescription'] = $page_content[0]['Term']['termstitle'];

                    $page_content['Content']['metakeyword'] = $page_content[0]['Term']['termstitle'];

                    $page_content['Content']['metatitle'] =  $page_content[0]['Term']['termstitle'];

                    $page_content['Content']['title'] = $page_content[0]['Term']['termstitle'];

                    $page_content['Content']['content'] = $page_content[0]['Term']['termscontent'];

                }

                $page_content['Content']['meta_isindex'] =1;

                $page_content['Content']['meta_isfollow'] =1;



            }

			

			//pr($page_content);die;

            $this->set('meta_description',$page_content['Content']['metadescription']);

            $this->set('meta_keyword',$page_content['Content']['metakeyword']);

            $this->set('meta_title',$page_content['Content']['metatitle']);

            $this->set('meta_isindex',$page_content['Content']['meta_isindex']);

            $this->set('meta_isfollow',$page_content['Content']['meta_isfollow']);

            $this->set('page_title',$page_content['Content']['title']);

            $this->set('page_content',$page_content);

		}

        /*******************************************************************

        * Function Name: dashboard

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function dashboard(){



            ##check user session live or not

            $this->session_check_user();            

			$usertype = $this->Session->read("User.User.usertype");

            $userid = $this->Session->read("User.User.id");            

            $condition="User.id=".$userid;

            $last_login= $this->User->find($condition,NULL,NULL,NULL,NULL,1);

            $last_login=$last_login['User']['modified'];			

            $this->set('last_login',$last_login);

		    $this->layout= 'internal_layout';

            if($usertype=="holder"){

                $this->layout= 'internal_layout';

            }

            else {

                $this->layout= 'new_sponsor_layout';

            }



            $current_domain= $_SERVER['HTTP_HOST'];  

            //for active menu display

            $this->set('page_url',"dashboard");

            $project_id = '1';

            //$project_name=$this->Session->read("projectwebsite_name");    

            if(empty($project_name)){ if(!empty($this->Cookie)){

                    $pname= $this->Cookie->read('name'); 

                    $project_id= $this->Cookie->read('id'); 

                    $projectDetails=$this->getprojectdetails($project_id);    

                    if($projectDetails['Project']['project_name']==$pname){

                        $logout_redirect=$projectDetails['Project']['logoutredirect'];



                        $condition="Content.id='".$logout_redirect." and Content.active_status='1' and Content.delete_status='0' ";



                        $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);

                        $page=$page_content['Content']['title'];

                    }    



                    if(!empty($page))

                        $this->redirect(array('controller'=>'companies','action'=>$page));



                }else{



                    $this->redirect(array('controller'=>'companies','action'=>'session_expired'));

                }

            }





            //print_r($holderdata);

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails); 

			$sponserid=$projectDetails['Project']['sponsor_id'];    			



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);



            $usermodified = $this->Session->read("User.User.last_login");

            $usermodified12=$this->Session->read("User.User.last_login");



            $today=getdate();

            $todaydate=$today['year']."-".$today['mon']."-".$today['mday'];

            $data1 = explode("-", $todaydate);            

            $dt=strtotime($usermodified);

            $my=date("Y", $dt);

            $md=date("d", $dt);

            $mm=date("m", $dt);

            $tdate1=$my."-".$mm."-".$md;

            if(is_array($usermodified))

            {

                $tdate1=$usermodified['year']."-".$usermodified['mon']."-".$usermodified['mday'];



            }

            $day=abs($data1[1]-$md)."  Days";

            $m=$data1[2]-$mm."  Months";

            $y=$data1[0]-$my."  Year";

            $d=$day;

            $usermodified=$d."  ".$m."  ".$y;

           $this->set("hlpdata",$this->getHelpContent(55));

		   if(substr($usermodified,0,10) != '0000-00-00'){

                //prashant code to calculate date difference

                $diffdate = abs(strtotime($todaydate) - strtotime($tdate1));

                $years1 = floor($diffdate / (365*60*60*24));

                $months1 = floor(($diffdate - $years1 * 365*60*60*24) / (30*60*60*24));

                $days1 = floor(($diffdate - $years1 * 365*60*60*24 - $months1*30*60*60*24)/ (60*60*24));

                //code end here

                $months1=($months1!=0)?$months1."  months":"";

                $years1=($years1!=0)?$years1."  years":"";

                $days1=($days1!=0)?(($days1==1)?$days1." day":$days1." days"):"-----";

                $usermodifiedat=$days1."  ".$months1."  ".$years1; 

            }

            $this->set('dateoflogin',$usermodifiedat);



            App::import('Model','Holder');

            $this->Holder = new Holder();

            $condition = "Holder.project_id = '$project_id' AND Holder.user_id='$userid' AND delete_status='0'"; 

			$dataholder=$this->Holder->find('all',array("conditions"=>$condition)); 

			//$hid =null add by puneet because $his is not assigning

			$hid=null;

			if(!empty($dataholder)){



				$created=$dataholder['0']['Holder']['created'];

		        $hid=$dataholder['0']['Holder']['id'];

			    $this->set('creatdate',$created);

				$this->set('screenname',$dataholder['0']['Holder']['screenname']);

			}

            App::import('Model','CoinsHolder');

            $this->Holder = new Holder();

            $condition1 = "CoinsHolder.project_id = '$project_id' AND CoinsHolder.holder_id='$hid'";

            $noofcoins=$this->CoinsHolder->find('count',array("conditions"=>$condition1));

            $holdercoin=$this->CoinsHolder->find('all',array("conditions"=>$condition1));

			if(!empty($holdercoin)){

				$coincreated=$holdercoin['0']['CoinsHolder']['created'];

				$this->set('coincreatdate',$coincreated);

			}		

            

            $this->set('noofcoins',$noofcoins);

            App::import('Model','Comment');

            $this->Comment = new Comment();

            $condition3 = "Comment.project_id = '$project_id' AND Comment.holder_id='$hid'";

            $comment=$this->Comment->find('first',array("conditions"=>$condition3,'order'=>'modified DESC'));



            $commentcount=$this->Comment->find('all',array("conditions"=>$condition3));

            $lastmodify=$comment['Comment']['modified'];

            $dt=strtotime($lastmodify);

            $my=date("Y", $dt);

            $md=date("d", $dt);

            $mm=date("m", $dt);

            $tdate=$my."-".$mm."-".$md;



            //prashant code to calculate date difference

            $lastcommenteddate="";

            if(substr($lastmodify,0,10) != '0000-00-00' && !empty($lastmodify)){



                $diff = abs(strtotime($todaydate) - strtotime($tdate));





                $years = floor($diff / (365*60*60*24));

                $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));

                $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                //code end here



                $months=($months!=0)?$months." months":"";

                $years=($years!=0)?$years." years":"";

                $days=($days!=0)?(($days==1)?$days." day":$days." days"):"----";

                $lastcommenteddate=$days."  ".$months."  ".$years; 

            }



            $day=abs($data1[1]-$md)." Days";

            $m=$data1[2]-$mm." Months";

            $y=$data1[0]-$my." Year";

            $d=$day; 

            $coun=0;

            if(!empty($commentcount))

                $coun=count($commentcount);

            //$lastcommenteddate=$comment[0]['Comment']['created'];

            $this->set('ncomment',$coun);

            $this->set('lastcommenteddate',$lastmodify);



            $conditionpagetitle="Content.internal_alias='dashboard' and Content.project_id=".$project_id." and Content.active_status='1' and Content.delete_status='0' ";

            $page_content= $this->Content->find($conditionpagetitle,NULL,NULL,NULL,NULL,1);        

            $this->set('meta_title',$page_content['Content']['metatitle']);

            $this->set('page_title',$page_content['Content']['metatitle']);

            

            $this->set('current_domain', $current_domain);



            //get profile completion %

			

			$profile_completion = $this->User->query("select register,profile,birthday,avatar,gender,social_account,reg_coin, comment as per from user_profile_completions where user_id=$userid");

			//$this->pl($profile_completion);

			if(!empty($profile_completion)){

				$profile_completion  = $profile_completion['0']['user_profile_completions'];

				 $this->set('pro_complete',$profile_completion);

			}                       

            //get member points

            $points=$this->User->query("select sum(points) as points from point_archive_users where member_id=$userid and project_id=$project_id");

            $member_points=$points[0][0];

            $this->set('member_points',$member_points);

            

            /** GET USER WAITING COMMENTS COUNT ***/



            // STEP : Get total number of suggested commets type for selected project

             $getCommentTypeCountQuery="Select count(1) as totalcommenttypes from comment_types where project_id='$project_id' and active_status='1' and delete_status='0' and sequence_id > 0";

             $commentTypeCountArray=$this->Comment->query($getCommentTypeCountQuery);

             $totalcommenttypes=$commentTypeCountArray[0][0]['totalcommenttypes'];

             



            // STEP : Get total number of holder commets on comment type for selected project             

            $getHolderCommentCountQuery="Select Count(DISTINCT(comment_type_id)) as totalholdercomments from comments 

                                        where project_id='$project_id' and holder_id='$hid' and coinset_id='0' and active_status='1' 

                                        and delete_status='0' and 

                                        comment_type_id IN(Select id from comment_types where project_id='$project_id' and active_status='1' and delete_status='0' and sequence_id > 0)";

             $holderCommentCountArray=$this->Comment->query($getHolderCommentCountQuery);

             $totalholdercomments=$holderCommentCountArray[0][0]['totalholdercomments'];

        

            

             $waiting_comments= $totalcommenttypes  -  $totalholdercomments;

             if($waiting_comments < 0){

                 $waiting_comments=0;

             }

            

            //STEP : Get total number waiting reply for comment posted by user

            $getCommentReplyCountQuery = "Select count(1) as totalcommentreplies from comment_replies where project_id='$project_id' and active_status='1' 

                                        and delete_status='0'   and reply_id='0' and holder_id!='$hid' and comment_id IN(Select id from comments 

                                        where project_id='$project_id' and holder_id='$hid'  and coinset_id='0' and active_status='1' 

                                        and delete_status='0')";

            $commentReplyCountArray=$this->Comment->query($getCommentReplyCountQuery);

            $totalcommentreplies=$commentReplyCountArray[0][0]['totalcommentreplies'];

            

            $waiting_comments=$waiting_comments + $totalcommentreplies;

            

            $this->set('waiting_comments',$waiting_comments); 

            

			$todayMessage = $this->getTodayMessage($userid,$project_id,$sponserid);

			$this->set('todayMessage',$todayMessage); 

			

           /*  $totcommentArray=$this->User->query("SELECT count(1) as totalcmt

             FROM coins_holders ch INNER JOIN comment_types ct ON ch.project_id = ct.project_id  

             where ch.project_id = '$project_id' and ch.holder_id='$hid'");

             $totcmt=$totcommentArray[0][0];

             $comntArray=$this->Comment->query("select count(1) as cmtcount from comments where holder_id='$hid' and project_id='$project_id' and comment_type_id!='0' ");

             $holdercmt=$comntArray[0][0];*/

            

        }

        

        

         function showtop10points(){

                

            ##check user session live or not

            $this->session_check_user();



            $usertype = $this->Session->read("User.User.usertype");

            $userid = $this->Session->read("User.User.id");

            $this->set('session_userid',$userid);

            

            $condition="User.id=".$userid;

            $last_login= $this->User->find($condition);

            $last_login=$last_login['User']['modified'];

            $this->set('last_login',$last_login);

           

            $user_details=$this->User->find('first',array("conditions"=>$condition)); 

            $avatar_url=$user_details['User']['avatar_url'];

            $this->set('avatar_url',$avatar_url);            



            $this->layout= 'internal_layout';

            if($usertype=="holder"){

                $this->layout= 'internal_layout';



            }

            else {

                $this->layout= 'new_sponsor_layout';

            }



            $current_domain= $_SERVER['HTTP_HOST'];  

            //for active menu display

            $this->set('page_url',"dashboard");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)){ 



                    $this->redirect('/companies/session_expired');

                }

           





            //print_r($holderdata);

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);



            $usermodified = $this->Session->read("User.User.last_login");

            $usermodified12=$this->Session->read("User.User.last_login");



            

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '55'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition





            App::import('Model','Holder');

            $this->Holder = new Holder();

            $condition = "Holder.project_id = '$project_id' AND Holder.user_id='$userid' AND delete_status='0'"; 

            $dataholder=$this->Holder->find('all',array("conditions"=>$condition)); 



            $created=$dataholder[0]['Holder']['created'];

            $hid=$dataholder[0]['Holder']['id'];

            $this->set('creatdate',$created);

            $this->set('screenname',$dataholder[0]['Holder']['screenname']);





            $this->set('current_domain', $current_domain);

           

            $condition = "PointArchiveUser.project_id = '$project_id' and PointArchiveUser.member_id IN  (SELECT id FROM users where delete_status='0')";

            $order = "sum(PointArchiveUser.points) DESC";

            $limit=10;

            

            $top_points_arr=$this->PointArchiveUser->find('all',array("conditions"=>$condition,'fields' => array('PointArchiveUser.member_id', 'sum(PointArchiveUser.points) as points'),'order' =>$order,'group' => array('PointArchiveUser.member_id')));



            $this->set("top_points_arr",$top_points_arr);

            

        }

        

        

        

        

        /*

        * Function name   : commentlist()

        * Description : This function used to list comments & holders information project

        * Created On      : 25-02-11 (02:18am)

        *

        */ 





        function commentlist(){



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"dashboard");



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            // set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '7'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid = $project_id;            



            $condition="";





            // retrieving session condition if required for searching and sorting

            if(count($this->requestData()) > 1){

                // retrieving condition from session

                $condition = $this->Session->read('condition_comment_list');      

            }else{

                // removing Session

                $this->Session->delete('condition_comment_list');

                $this->Session->delete('search_key_comment_list'); 

            }



            if(!empty($condition)){



                # Setting the value for search box 

                $key = $this->Session->read('search_key_comment_list');           

                $this->set('key',$key);



            }else{

                $key = '';

                $this->set('key',$key);



            }



            # if no search condtion and no session condition

            if(empty($this->data['Company']['searchkey']) && empty($condition)){

                $key_old = trim($this->data['Company']['searchkey']);



                //$condition .= "CoinsHolder.serialnum = '".$key_old."' AND ";





                # storing condition in session

                $this->Session->write('condition_comment_list',$condition);

                $this->set('key',$key_old); 



            }else if(!empty($this->data['Company']['searchkey']))

                {

                    # if search condition is set

                    # validating if '%' entered

                    $key_old = trim($this->data['Company']['searchkey']);

                    $key = str_replace('%','\%',$key_old);     



                    $condition .= "CoinsHolder.serialnum LIKE '%".$key_old."%' AND ";



                    # storing condition in session

                    $this->Session->write('condition_comment_list',$condition);

                    $this->Session->write('search_key_comment_list',$key_old);

                    $this->set('key',$key_old);     

                }



                ##checking search key

                /*if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                $searchkeyword = $this->data['Company']['searchkey'];

                $condition .= "CoinsHolder.serialnum = '".$searchkeyword."' AND ";

                }*/        



                ##fetch data from Comment table for listing



                $this->Comment->bindModel(array('belongsTo'=>array(

            'CoinsHolder'=>array(

            'foreignKey'=>false,

            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

            ),'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = Comment.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = Comment.coinset_id'

            )

            )));



            $field='';

            $condition .= "Comment.project_id = '$projectid' AND Comment.delete_status='0'";



            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='serialnum'){

                $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination

            }else{

                $this->Pagination->sortByClass    = 'Comment'; ##initaite pagination 

            }    

            $this->Pagination->total= count($this->Comment->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $this->Comment->bindModel(array('belongsTo'=>array(

            'CoinsHolder'=>array(

            'foreignKey'=>false,

            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

            ),'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = Comment.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = Comment.coinset_id'

            )

            )));    



            $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            $this->set("commentlist",$commentdtlarr);    

        }

        /*

        * Function name   : actionreply()

        * Description : This function used to do action on relative comment

        * Created On      : 24-02-11 (11:08pm)

        *

        */ 

        function actionreply($commentid){    

            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();

            $this->set('commentid', $commentid);



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"dashboard");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid = $project_id;    

            ##import Comment  model for processing

            App::import("Model", "Subcomment");

            $this->Subcomment =   & new Subcomment();    

            if(!empty($this->data)){

                $commentid = $this->data['Subcomment']['id'];

                #set the posted data 

                $this->Subcomment->set($this->data['Subcomment']);

                #check server side validation

                $errormsg = $this->Subcomment->invalidFields();



                if(!$errormsg){



                    if($this->Subcomment->Save($this->data['Subcomment'])){

                        $this->Session->setFlash("Data updated successfully.",'default',array('class' => 'successmsg'));



                        if(isset($this->data['Action']['redirectpage'])){

                            $sessdata=$this->Session->read('newsortingby');

                            $this->redirect('/'.$sessdata);

                        }else{

                            $this->redirect("/companies/actionreply/$commentid");

                        }

                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                    }                      

                }                      

            }



            if($commentid || $this->data['Subcomment']['id']){

                if($this->data['Subcomment']['id']){

                    $commentid = $this->data['Subcomment']['id'];

                }

            }

            if(!$commentid){

                $this->Session->setFlash('Invalid attempt to modify reply.','default',array('class' => 'msgTXt'));

                $this->redirect('/companies/commentreplylist');

            }      

            $condition = "Subcomment.project_id = '$projectid' AND Subcomment.delete_status='0' AND Subcomment.id = '$commentid'";          

            $this->Subcomment->bindModel(array('belongsTo'=>array(

            'CoinsHolder'=>array(

            'foreignKey'=>false,

            'conditions'=>'CoinsHolder.id = Subcomment.coin_holder_id'

            ),'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = Subcomment.holder_id'

            ),'Comment'=>array('foreignKey'=>false,

            'conditions'=>'Comment.id = Subcomment.comment_id'

            )

            )));



            $commentdtlarr = $this->Subcomment->find('all',array("conditions"=>$condition));

            if(!$commentdtlarr){

                $this->Session->setFlash('No data available for this reply.','default',array('class' => 'msgTXt'));

                $this->redirect('/companies/commentreplylist');

            }

            ##set Coimment data in variable        

            $this->Subcomment->id = $commentid;

            $this->data = $this->Subcomment->read();        

            $this->data['Company']['serial'] = $commentdtlarr[0]['CoinsHolder']['serialnum'];    

            $this->data['Comment']['comment']=$commentdtlarr[0]['Comment']['comment'];





        }

  

        /*

        * Function name   : commentreplylist()

        * Description : This function used to list comments & holders information project

        * Created On      : 25-02-11 (02:18am)

        *

        */ 





        function commentreplylist(){    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"dashboard");



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect(array('controller'=>'companies','action'=>'session_expired'));



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '8'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition 





            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid = $project_id;            



            ##import Comment  model for processing

            App::import("Model", "Subcomment");

            $this->Subcomment =   & new Subcomment();    

            $condition="";



            ##checking search key

            /* if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

            $searchkeyword = $this->data['Company']['searchkey'];

            $condition .= "CoinsHolder.serialnum = '".$searchkeyword."' AND ";

            } */



            ##fetch data from Comment table for listing



            $this->Subcomment->bindModel(array('belongsTo'=>array(

            'CoinsHolder'=>array(

            'foreignKey'=>false,

            'conditions'=>'CoinsHolder.id = Subcomment.coin_holder_id'

            ),'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = Subcomment.holder_id'

            ),'Comment'=>array('foreignKey'=>false,

            'conditions'=>'Comment.id = Subcomment.comment_id'

            )

            )));



            $field='';



            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='serialnum'){

                $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination

            }else{

                $this->Pagination->sortByClass    = 'Subcomment'; ##initaite pagination 

            }



            $this->Pagination->total= count($this->Subcomment->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $this->Subcomment->bindModel(array('belongsTo'=>array(

            'CoinsHolder'=>array(

            'foreignKey'=>false,

            'conditions'=>'CoinsHolder.id = Subcomment.coin_holder_id'

            ),'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = Subcomment.holder_id'

            ),'Comment'=>array('foreignKey'=>false,

            'conditions'=>'Comment.id = Subcomment.comment_id'

            )

            )));        



            if(!empty($this->data))

            {        

                $val=$this->data['Company']['searchkey'];

                $condition .= "Subcomment.project_id = '$projectid' AND Subcomment.delete_status='0' AND (CoinsHolder.serialnum like '%$val%' OR Subcomment.comment  like '%$val%' OR Holder.screenname like '%$val%') ";   



            } 

            else

            {

                $condition .= "Subcomment.project_id = '$projectid' AND Subcomment.delete_status='0'";

            }  







            $commentdtlarr = $this->Subcomment->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            //print_r($commentdtlarr);die;

            $this->set("commentlist",$commentdtlarr);

        }



        function suggestedcomments(){

            ##check admin session live or not



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);

          }

            //for active menu display

            $this->set('page_url',"dashboard");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect(array('controller'=>'companies','action'=>'session_expired'));

            ##import company type model for processing

            App::import("Model", "CommentType");

            $this->CommentType =   & new CommentType();    

            ##fetch data from project type table for listing

            $field='';

            $condition = "delete_status = '0' AND CommentType.project_id='".$project_id."'";

            if(isset($this->data['Companies']['searchkey']) && $this->data['Companies']['searchkey']){

                $searchkeyword = $this->data['Companies']['searchkey'];

                $condition .= "  and (comment_type_name LIKE '%".$searchkeyword."%'  )";

            }

            $this->Pagination->sortByClass    = 'CommentType'; ##initaite pagination 

            $this->Pagination->total= count($this->CommentType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            $commenttypedata = $this->CommentType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            ##set project type data in variable

            $this->set("commenttypedata",$commenttypedata);

        }







        /*

        * Function name   : rsvplist()

        * Description : This function used to list rsvp

        * Created On      : 25-02-11 (02:18am)

        *

        */ 





        function rsvplist(){



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"rsvp");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '9'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition 



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid = $project_id;                



            $condition="";

            ##checking search key

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                $searchkeyword = $this->data['Company']['searchkey'];

                $condition .= "CoinsHolder.serialnum = '".$searchkeyword."' AND ";

            }        



            ##fetch data from Comment table for listing



            $this->Comment->bindModel(array('belongsTo'=>array(

            'CoinsHolder'=>array(

            'foreignKey'=>false,

            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

            ),'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = Comment.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = Comment.coinset_id'

            )

            )));



            $field='';

            $condition .= "Comment.project_id = '$projectid' AND Comment.delete_status='0'";



            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='serialnum'){

                $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination

            }else{

                $this->Pagination->sortByClass    = 'Comment'; ##initaite pagination 

            }







            $this->Pagination->total= count($this->Comment->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $this->Comment->bindModel(array('belongsTo'=>array(

            'CoinsHolder'=>array(

            'foreignKey'=>false,

            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

            ),'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = Comment.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = Comment.coinset_id'

            )

            )));



            $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));



            $this->set("commentlist",$commentdtlarr);



        }

        /*

        * Function name   : registercoinlist()

        * Description : This function used to list registered coins of related project

        * Created On      : 24-02-11 (10:08pm)

        *

        */ 

        function registercoinlist(){

            ##Configure::write('debug',3);



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '6'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition





            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid =$project_id;    





            if(!empty($this->data))

            {        //print_r($this->data);

					$val=$this->data['Companies']['searchkey'];

                $condition = "CoinsHolder.project_id = '$projectid' AND (CoinsHolder.serialnum like '%$val%' OR Coinset.coinset_name  like '%$val%' OR Holder.screenname like '%$val%' AND CoinsHolder.delete_status='0')";

                

            } 

            else

            {

                $condition = "CoinsHolder.project_id = '$projectid' AND CoinsHolder.delete_status='0'";

            }



            ##fetch data from CoinsHolder table for listing



            $this->CoinsHolder->bindModel(array('belongsTo'=>array(

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = CoinsHolder.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'

            )

            )));



            $field='';



            $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination 



            $this->Pagination->total= count($this->CoinsHolder->find('all',array("conditions"=>$condition)));    

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);            

            $this->CoinsHolder->bindModel(array('belongsTo'=>array(

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = CoinsHolder.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'

            )

            )));



            if($order == "CoinsHolder.id ASC"){

                $order = "CoinsHolder.id DESC";

            }

            $coinscoinlistdtlarr = $this->CoinsHolder->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));





            ##set Coinset data in variable            

            $this->set("coinlist",$coinscoinlistdtlarr);



        }



        /*

        * Function name   : hascomment()

        * Description : This function used to check comment available for coin or not

        * Created On      : 02-03-11 (05:20am)

        *

        */ 

        function hascomment($coin_holid){



            if($coin_holid){    



                ##check user session live or not

                $this->session_check_user();



                $this->layout= 'internal_layout';



                //for active menu display

                $this->set('page_url',"coinsetlist");



                $project_id=$this->Session->read("projectwebsite_id");    

                $project_name=$this->Session->read("projectwebsite_name");    



                if(empty($project_name)) $this->redirect('/companies/session_expired');



                $this->set('project_name',$project_name);



                $projectDetails=$this->getprojectdetails($project_id);    

                $this->set('project',$projectDetails);    



                $projectid =$project_id;

                ##import Comment  model for processing

                App::import("Model", "Comment");

                $this->Comment =   & new Comment();    



                ##fetch data from Comment table for listing



                $this->Comment->bindModel(array('belongsTo'=>array(

                'CoinsHolder'=>array(

                'foreignKey'=>false,

                'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

                ),'Holder'=>array(

                'foreignKey'=>false,

                'conditions'=>'Holder.id = Comment.holder_id'

                ),'Coinset'=>array(

                'foreignKey'=>false,

                'conditions'=>'Coinset.id = Comment.coinset_id'

                )

                )));



                $field='';

                $condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.coin_holder_id = '$coin_holid'";

                $this->Pagination->sortByClass    = 'Comment'; ##initaite pagination 



                $this->Pagination->total= count($this->Comment->find('all',array("conditions"=>$condition)));



                list($order,$limit,$page) = $this->Pagination->init($condition,$field);



                $this->Comment->bindModel(array('belongsTo'=>array(

                'CoinsHolder'=>array(

                'foreignKey'=>false,

                'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

                ),'Holder'=>array(

                'foreignKey'=>false,

                'conditions'=>'Holder.id = Comment.holder_id'

                ),'Coinset'=>array(

                'foreignKey'=>false,

                'conditions'=>'Coinset.id = Comment.coinset_id'

                )

                )));

                if($order == "Comment.id ASC"){

                    $order = "Comment.id DESC";

                }



                $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

                if(!$commentdtlarr){

                    return false;

                }else{

                    return true;

                }



            }else{

                return false;

            }    

            exit;

        }

        /*

        * Function name   : viewcomments()

        * Description : This function used to list comments on registerd coin of related project

        * Created On      : 24-02-11 (11:08pm)

        *

        */ 

        function viewcomments($coin_holid){



            if($coin_holid){    

                $this->set("coin_holder_id",$coin_holid);

                ##check user session live or not

                $this->session_check_user();



                $this->layout= 'new_sponsor_layout';



                //for active menu display

                $this->set('page_url',"coinsetlist");



                $project_id=$this->Session->read("projectwebsite_id");    

                $project_name=$this->Session->read("projectwebsite_name");    



                if(empty($project_name)) $this->redirect('/companies/session_expired');



                $this->set('project_name',$project_name);



                $projectDetails=$this->getprojectdetails($project_id);    

                $this->set('project',$projectDetails);    



                $projectid =$project_id;    

                ##fetch data from Comment table for listing



                $this->Comment->bindModel(array('belongsTo'=>array(

                'CoinsHolder'=>array(

                'foreignKey'=>false,

                'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

                ),'Holder'=>array(

                'foreignKey'=>false,

                'conditions'=>'Holder.id = Comment.holder_id'

                ),'Coinset'=>array(

                'foreignKey'=>false,

                'conditions'=>'Coinset.id = Comment.coinset_id'

                )

                )));



                if(isset($this->data['Companies']['searchkey']) && $this->data['Companies']['searchkey']){

                    $searchkeyword = $this->data['Companies']['searchkey'];

                    $condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.coin_holder_id = '$coin_holid' AND (Holder.firstname LIKE '%$searchkeyword%' OR Holder.lastnameshow LIKE '%$searchkeyword%' OR Comment.comment LIKE '%$searchkeyword%')";



                }else{

                    $condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.coin_holder_id = '$coin_holid'";

                }



                $field='';

                //$condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.coin_holder_id = '$coin_holid'";

                $this->Pagination->sortByClass    = 'Comment'; ##initaite pagination 



                $this->Pagination->total= count($this->Comment->find('all',array("conditions"=>$condition)));



                list($order,$limit,$page) = $this->Pagination->init($condition,$field);



                $this->Comment->bindModel(array('belongsTo'=>array(

                'CoinsHolder'=>array(

                'foreignKey'=>false,

                'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

                ),'Holder'=>array(

                'foreignKey'=>false,

                'conditions'=>'Holder.id = Comment.holder_id'

                ),'Coinset'=>array(

                'foreignKey'=>false,

                'conditions'=>'Coinset.id = Comment.coinset_id'

                )

                )));





                $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

                if(!empty($commentdtlarr)){

	                $this->set("coinserial",$commentdtlarr['0']['CoinsHolder']['serialnum']);

		            $this->set("coinset",$commentdtlarr['0']['Coinset']['coinset_name']);

			        $this->set("commentlist",$commentdtlarr);

				}

            }else{

                //$this->Session->setFlash('Invalid attempt to view comment.','default',array('class' => 'errormsg'));

                //$this->redirect('/companies/registercoinlist');

            }

        }

        /*

        * Function name   : actioncomment()

        * Description : This function used to do action on relative comment

        * Created On      : 24-02-11 (11:08pm)

        *

        */ 

        function actioncomment($commentid,$holderid){        

                                          

            //Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_user();

            $this->set("coin_holder_id",$holderid);

            $this->set("recordid",$commentid);

            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid =$project_id;    



            if(!empty($this->data)){

                $commentid = $this->data['Comment']['id'];

                #set the posted data 

                $this->Comment->set($this->data);

                #check server side validation

                $errormsg = $this->Comment->invalidFields();



                if(!$errormsg){

                    $offensmsg = "";

                    if($this->data['Comment']['offensive']=='1'){



                        ##get offencive mail template

                        $tomailid = $this->data['Company']['emailid'];

                        $toname = $this->data['Company']['nameemailid'];

                        $mailserial = $this->data['Company']['serial'];

                        ##project related information

                        $projectarr = $this->projectdetailbyid($projectid);

                        $projectname = $projectarr[0]['Project']['system_name'];

                        $sponsor_name = $projectarr[0]['Sponsor']['sponsor_name'];





                        if(!empty($projectarr[0]['Project']['url']))

                            $homepagepath=str_replace('http://', '', $projectarr[0]['Project']['url']);

                        else

                            $homepagepath=HTTP_PATH.'/'.$projectarr[0]['Project']['project_name'];



                        $offtit = "OFFENSIVE COMMENT POSTED";

                        $conditiontemp = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND EmailTemplate.email_template_name = '$offtit'";

                        $templatearr = $this->EmailTemplate->find('all',array("conditions"=>$conditiontemp));

                        $subjectoff = $templatearr[0]['EmailTemplate']['subject'];

                        $contentoff= $templatearr[0]['EmailTemplate']['content'];

                        

                        /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/  

                        ///////////////////////////////// append mail footer set by super admin -U /////////////////////////

                            $condition = "id='1'";

                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                            $contentoff.=$mailfooter;

                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                        

                        

                        // Set path to inserted image 

                        $contentoff = $this->replaceImgPathInEmailContent($contentoff);

                        $fromemail = $templatearr[0]['EmailTemplate']['sender'];

                          /** 

                          * Original Code

                            $findarr = array("[[TO_FIRSTNAME]]","[[COIN_SERIAL]]","[[FROM_FIRSTNAME]]","[[PROJECT_NAME]]","[[PROJECT_HOMEPAGE_URL]]");

                            $replacearr = array($toname,$mailserial,$sponsor_name,$projectname,$homepagepath);

                            ## replace content dynamically for path to image

                            $message = str_replace($findarr, $replacearr, $contentoff);    

                          */  

                      

                      /**

                      * New Email Temp replacement code for data Elements 

                      */

                        //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                            $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectDetails, $tomailid);

                       //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                            $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $mailserial;

                            $dataEleValuesArray[DATA_ELEMENT_COMMENT_LINK]= $mailserial;

                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                        //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                            $subjectoff=$this->EmailTemplates->insertDataElementValuesToContent($subjectoff);

                            $message=$this->EmailTemplates->insertDataElementValuesToContent($contentoff);

                            

                        if($this->Sendemail->sendMailContentWithCC($tomailid,$fromemail,$subjectoff,$message, $fromemail,$templatearr[0]['EmailTemplate']['send_cc_email_to'])){ 

                            $offensmsg ="Also mail has been sent to Holder name $toname";

                        }    

                    }





                    if($this->Comment->Save($this->data['Comment'])){

                        $this->Session->setFlash("Comment updated successfully. $offensmsg",'default',array('class' => 'successmsg'));



                        if(isset($this->data['Action']['redirectpage'])){

                            $this->redirect("/companies/viewcomments/$holderid");

                        }else{

                            $this->redirect("/companies/actioncomment/$commentid/$holderid");          

                        }

                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                    }



                }



            }



            if($commentid || $this->data['Comment']['id']){

                if($this->data['Comment']['id']){

                    $commentid = $this->data['Comment']['id'];

                }

            }

            if(!$commentid){

                $this->Session->setFlash('Invalid attempt to modify comment.','default',array('class' => 'msgTXt'));

                $this->redirect("/companies/viewcomments/$holderid");

            }



            $condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.id = '$commentid'";



            $this->Comment->bindModel(array('belongsTo'=>array(

            'CoinsHolder'=>array(

            'foreignKey'=>false,

            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

            ),'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = Comment.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = Comment.coinset_id'

            )

            )));



            $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition));

            if(!$commentdtlarr){

                $this->Session->setFlash('No data available for this comment.','default',array('class' => 'msgTXt'));

                //$this->redirect('/companies/registercoinlist');

                $this->redirect("/companies/viewcomments/$holderid");

            }

            ##set Comment data in variable        



            $this->Comment->id = $commentid;

            $this->data = $this->Comment->read();



            $this->data['Company']['serial'] = $commentdtlarr[0]['CoinsHolder']['serialnum'].' Cointset : '.$commentdtlarr[0]['Coinset']['coinset_name'];

            $this->data['Company']['emailid'] = $commentdtlarr[0]['Holder']['email'];

            $this->data['Company']['nameemailid'] = $commentdtlarr[0]['Holder']['firstname'].' '.$commentdtlarr[0]['Holder']['lastnameshow'];

            $comment_type_name=$this->getcommenttypename($this->data['Comment']['comment_type_id']);

            $comment_type_purpose=$this->getcommenttypepurpose($this->data['Comment']['comment_type_id']);

            $this->set('commenttypename',$comment_type_name);

            $this->set('commenttypepurpose',$comment_type_purpose);    



            # set help condition



            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '34'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   





        }

        /*

        * Function name   : verifycommentlist()

        * Description : This function used to do action on relative comment

        * Created On      : 08-03-11 (03:05am)

        *

        */ 

        function verifycommentlist($commentid){





            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid =$project_id;            



            if(!empty($this->data)){

                $commentid = $this->data['Comment']['id'];

                #set the posted data 

                $this->Comment->set($this->data);

                #check server side validation

                $errormsg = $this->Comment->invalidFields();



                if(!$errormsg){

                    $offensmsg = "";

                    if($this->data['Comment']['offensive']=='1'){



                        ##get offencive mail template

                        $tomailid = $this->data['Company']['emailid'];

                        $toname = $this->data['Company']['nameemailid'];

                        $mailserial = $this->data['Company']['serial'];

                        ##project related information

                        $projectarr = $this->getprojectdetails($projectid);    //$this->projectdetailbyid($projectid);

                        $projectname = $projectarr['Project']['project_name'];

                        $sponsor_name = $projectarr['Sponsor']['sponsor_name'];



                        if(!empty($projectarr['Project']['url']))

                            $homepagepath=str_replace('http://', '', $projectarr[0]['Project']['url']);

                        else

                            $homepagepath=HTTP_PATH.'/'.$projectarr[0]['Project']['project_name'];





                        $offtit = "OFFENSIVE COMMENT POSTED";

                        $conditiontemp = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND EmailTemplate.email_template_name = '$offtit'";

                        $templatearr = $this->EmailTemplate->find('all',array("conditions"=>$conditiontemp));



                        $subjectoff = $templatearr[0]['EmailTemplate']['subject'];

                        $contentoff= $templatearr[0]['EmailTemplate']['content'];

                         /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/  

                         ///////////////////////////////// append mail footer set by super admin -U /////////////////////////

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    $contentoff.=$mailfooter;

                         ///////////////////////////////// append mail footer set by super admin /////////////////////////

                        

                         

                         // Set path to inserted image 

                        $contentoff = $this->replaceImgPathInEmailContent($contentoff);

                        $fromemail =$templatearr['0']['EmailTemplate']['sender'];

                        if(!empty($projectDetails['Project']['url'])) {

                             $pos = strpos($projectDetails['Project']['url'],"http://");

                             if ($pos === false) {

                                 $show_comment_link="http://".$projectDetails['Project']['url']."?show_comment_link=1";

                             }else{

                                 $show_comment_link=$projectDetails['Project']['url']."?show_comment_link=1"; 

                             }

                              

                        }else {

                             $show_comment_link='http://'.HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                        }

                        /**

                        * Original code

                        $findarr = array("[[TO_FIRSTNAME]]","[[COIN_SERIAL]]","[[FROM_FIRSTNAME]]","[[PROJECT_NAME]]","[[PROJECT_HOMEPAGE_URL]]");

                        $replacearr = array($toname,$mailserial,$sponsor_name,$projectname,$homepagepath);

                        ## replace content dynamically for path to image

                        $message = str_replace($findarr, $replacearr, $contentoff);  

                         **/

                         

                        /**

                          * New Email Temp replacement code for data Elements 

                          */

                        //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                            $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectDetails, $tomailid);

                       //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                            $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $mailserial;

                            $dataEleValuesArray[DATA_ELEMENT_COMMENT]=  $this->data['Comment']['comment'];

                            $dataEleValuesArray[DATA_ELEMENT_COMMENT_LINK]=  $show_comment_link;  

                            $dataEleValuesArray[DATA_ELEMENT_MESSAGE]=  $this->data['Comment']['comment'];  

                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                        //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                            $subjectoff=$this->EmailTemplates->insertDataElementValuesToContent($subjectoff);   

                            $message=$this->EmailTemplates->insertDataElementValuesToContent($contentoff);   

                            

                        if($this->Sendemail->sendMailContentWithCC($tomailid,$fromemail,$subjectoff,$message, $fromemail, $templatearr[0]['EmailTemplate']['send_cc_email_to'])){ 

                            $offensmsg ="Also mail has been sent to Holder name $toname";

                        } 

                                                /**

                        * Send OFFENSIVE COMMENT REPORTED - Send to Project manager  

                        */

                        $offreported = "OFFENSIVE COMMENT REPORTED";

                        $condoffreported = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND EmailTemplate.email_template_name = '$offreported'";

                        $offreportedarr = $this->EmailTemplate->find('first',array("conditions"=>$condoffreported));

                        if($offreportedarr){

                                $suboffreported = $offreportedarr['EmailTemplate']['subject'];

                                $contentoffreported= $offreportedarr['EmailTemplate']['content'];

                                

                                 /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button        **/    

                                ///////////////////////////////// append mail footer set by super admin -U /////////////////////////

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    $contentoffreported.=$mailfooter;

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                               

                                

                                // Set path to inserted image 

                                $contentoffreported = $this->replaceImgPathInEmailContent($contentoffreported);

                                

                                $fromemail1 =$offreportedarr['EmailTemplate']['sender'];  

                                

                                App::import("Model","Sponsor");

                                $this->Sponsor = new Sponsor();

                                $condition1 = " project_id = '".$projectid."' AND delete_status = '0'";

                                $spArr = $this->Sponsor->find('first',array("conditions"=>$condition1));

                                $sponsoremail= $spArr["Sponsor"]['email'];

                                 /**

                                  * New Email Temp replacement code for data Elements 

                                  */

                                //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectDetails, $sponsoremail,"Sponsor");

                               //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                    $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $mailserial;

                                    $dataEleValuesArray[DATA_ELEMENT_COMMENT]=  $this->data['Comment']['comment'];

                                    $dataEleValuesArray[DATA_ELEMENT_MESSAGE]=  $this->data['Comment']['comment'];

                                    $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                    $suboffreported=$this->EmailTemplates->insertDataElementValuesToContent($suboffreported);   

                                    $contentoffreported=$this->EmailTemplates->insertDataElementValuesToContent($contentoffreported); 

                                    

                                     if($this->Sendemail->sendMailContentWithCC($sponsoremail,$fromemail,$suboffreported,$contentoffreported,$fromemail,$offreportedarr['EmailTemplate']['send_cc_email_to'])){ 

                                         $offensmsg.="Also mail has been sent to Project owner ".$spArr["Sponsor"]['sponsor_name'];

                                     }    

                         } 

                           

                    }





                    if($this->Comment->Save($this->data['Comment'])){

                        $this->Session->setFlash("Comment updated successfully. $offensmsg",'default',array('class' => 'successmsg'));

                        if(isset($this->data['Action']['redirectpage'])){

                            $sessdata=$this->Session->read('newsortingby');

                            $this->redirect('/'.$sessdata);

                        }else{

                            $this->redirect("/companies/verifycommentlist/$commentid");

                        }



                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                    }



                }



            }



            if($commentid || $this->data['Comment']['id']){

                if($this->data['Comment']['id']){

                    $commentid = $this->data['Comment']['id'];

                }

            }

            if(!$commentid){

                $this->Session->setFlash('Invalid attempt to modify comment.','default',array('class' => 'msgTXt'));

                $this->redirect('/companies/commentlist');

            }



            $condition = "Comment.project_id = '$projectid' AND Comment.delete_status='0' AND Comment.id = '$commentid'";



            $this->Comment->bindModel(array('belongsTo'=>array(

            'CoinsHolder'=>array(

            'foreignKey'=>false,

            'conditions'=>'CoinsHolder.id = Comment.coin_holder_id'

            ),'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = Comment.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = Comment.coinset_id'

            )

            )));



            $commentdtlarr = $this->Comment->find('all',array("conditions"=>$condition));

            if(!$commentdtlarr){

                $this->Session->setFlash('No data available for this comment.','default',array('class' => 'msgTXt'));

                $this->redirect('/companies/commentlist');

            }

            ##set Comment data in variable    



            $this->Comment->id = $commentid;

            $this->data = $this->Comment->read();



            $this->data['Company']['serial'] = $commentdtlarr[0]['CoinsHolder']['serialnum'].' Cointset : '.$commentdtlarr[0]['Coinset']['coinset_name'];

            $this->data['Company']['emailid'] = $commentdtlarr[0]['Holder']['email'];

            $this->data['Company']['nameemailid'] = $commentdtlarr[0]['Holder']['firstname'].' '.$commentdtlarr[0]['Holder']['lastnameshow'];



            $comment_type_name=$this->getcommenttypename($this->data['Comment']['comment_type_id']);

            $comment_type_purpose=$this->getcommenttypepurpose($this->data['Comment']['comment_type_id']);

            $this->set('commenttypename',$comment_type_name);

            $this->set('commenttypepurpose',$comment_type_purpose);    



        }    

        /*

        * Function name   : mailtemplatelist()

        * Description : This function used to list Email Templates of related project

        * Created On      : 22-02-11 (04:20pm)

        *

        */ 

        function mailtemplatelist(){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '10'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition







            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid =$project_id;    



            ##checking search key

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                $searchkeyword = $this->data['Company']['searchkey'];

                $condition1 = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND (EmailTemplate.email_template_name LIKE '%$searchkeyword%' OR EmailTemplate.subject LIKE '%$searchkeyword%' OR EmailTemplate.content LIKE '%$searchkeyword%')  AND EmailTemplate.is_sytem='1' ";

            }else{

                $condition1 = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0'  AND EmailTemplate.is_sytem='1'";

            }



            ##fetch data from EmailTemplate table for listing

            $field='';



            $this->Pagination->sortByClass    = 'EmailTemplate'; ##initaite pagination 



            $this->Pagination->total= count($this->EmailTemplate->find('all',array("conditions"=>$condition1)));



            list($order,$limit,$page) = $this->Pagination->init($condition1,$field);



            $emailtempdtlarr = $this->EmailTemplate->find('all',array("conditions"=>$condition1, 'order' =>$order, 'limit' => $limit, 'page' => $page));



            ##set EmailTemplate data in variable



            $this->set("emailtemplates",$emailtempdtlarr);



        }

        

        /*

        * Function name   : mailtemplatelist()

        * Description :  This function used to list all system auto reposnder Email Templates of related project   

        * Created On      : 22-02-11 (04:20pm)

        *

        */ 

        function mailautoresponderlist(){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '10'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition







            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid =$project_id;    



            ##checking search key

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                $searchkeyword = $this->data['Company']['searchkey'];

                $condition1 = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND (EmailTemplate.email_template_name LIKE '%$searchkeyword%' OR EmailTemplate.subject LIKE '%$searchkeyword%' OR EmailTemplate.content LIKE '%$searchkeyword%')  AND EmailTemplate.is_sytem='0'  and (EmailTemplate.is_event_temp='0' or is_event_temp='' or is_event_temp is NULL)";

            }else{

                $condition1 = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0'  AND EmailTemplate.is_sytem='0'  and (EmailTemplate.is_event_temp='0' or is_event_temp='' or is_event_temp is NULL)";

            }



            ##fetch data from EmailTemplate table for listing

            $field='';



            $this->Pagination->sortByClass    = 'EmailTemplate'; ##initaite pagination 



            $this->Pagination->total= count($this->EmailTemplate->find('all',array("conditions"=>$condition1)));



            list($order,$limit,$page) = $this->Pagination->init($condition1,$field);



            $emailtempdtlarr = $this->EmailTemplate->find('all',array("conditions"=>$condition1, 'order' =>$order, 'limit' => $limit, 'page' => $page));



            ##set EmailTemplate data in variable



            $this->set("emailtemplates",$emailtempdtlarr);



        }

       

       

        function eventautoresponders(){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '10'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            App::import("Model", "EventMasterTemplate");

            $this->EventMasterTemplate =   & new EventMasterTemplate();    

            





            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid =$project_id;    



            ##checking search key

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

				//pr($this->data);die;

                $searchkeyword = $this->data['Company']['searchkey'];

                $condition1 = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND (EmailTemplate.email_template_name LIKE '%$searchkeyword%' OR EmailTemplate.subject LIKE '%$searchkeyword%' OR EmailTemplate.content LIKE '%$searchkeyword%')  AND ( EmailTemplate.is_event_temp='1' or EmailTemplate.is_event_temp='2' or EmailTemplate.is_event_temp='3')";

            }else{

                $condition1 = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0'  AND ( EmailTemplate.is_event_temp='1' or EmailTemplate.is_event_temp='2' or EmailTemplate.is_event_temp='3')";

            }



            ##fetch data from EmailTemplate table for listing

            $field='';

            

            $this->EmailTemplate->bindModel(array('belongsTo'=>array(

            'EventMasterTemplate'=>array(

            'foreignKey'=>false,

            'conditions'=>'EmailTemplate.is_event_temp = EventMasterTemplate.id'

            )

            )));



            $this->Pagination->sortByClass    = 'EmailTemplate'; ##initaite pagination 



            $this->Pagination->total= count($this->EmailTemplate->find('all',array("conditions"=>$condition1)));



            list($order,$limit,$page) = $this->Pagination->init($condition1,$field);

            

            $this->EmailTemplate->bindModel(array('belongsTo'=>array(

            'EventMasterTemplate'=>array(

            'foreignKey'=>false,

            'conditions'=>'EmailTemplate.is_event_temp = EventMasterTemplate.id'

            )

            )));

            

            if($order=="EmailTemplate.is_event_temp ASC")

            {

               $order="EventMasterTemplate.event_temp_name ASC";

            }

            if($order=="EmailTemplate.is_event_temp DESC")

            {

               $order="EventMasterTemplate.event_temp_name DESC";

            }



            $emailtempdtlarr = $this->EmailTemplate->find('all',array("conditions"=>$condition1, 'order' =>$order, 'limit' => $limit, 'page' => $page));



            ##set EmailTemplate data in variable



            $this->set("emailtemplates",$emailtempdtlarr);



        }

       

       

        

        /*

        * Function name   : editmailcontent()

        * Description : This function used to edit mail template contents of related projects

        * Created On      : 22-02-11 (09:27pm)

        *

        */ 

        function editmailcontent($opr='',$templateid='',$extra=''){

			  ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '22'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);	

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid =$project_id;



            $current_domain= $_SERVER['HTTP_HOST'];



            ##check empty data

            if(!empty($this->data)) {

                if(isset($this->data['Company']['extra'])){

					$extra=$this->data['Company']['extra'];     

				}

			

            #set the posted data

                $this->EmailTemplate->set($this->data);

                #check server side validation

                $errormsg = $this->EmailTemplate->invalidFields();

                 $templname = $this->data['EmailTemplate']['email_template_name'];

                 $templateid = $this->data['EmailTemplate']['id'];

                if(!$errormsg){

                    $templname = $this->data['EmailTemplate']['email_template_name'];

                    $templateid = $this->data['EmailTemplate']['id'];

                    $condition = "email_template_name = '".$templname."' AND project_id = '".$projectid."' AND  delete_status = '0' AND id !='".$templateid."'";



                    ##check already exists company name

                    $ctdata = $this->EmailTemplate->find('all',array("conditions"=>$condition));

                    

                    $this->data['EmailTemplate']['content']=str_replace("../img","http://".$current_domain."/img",$this->data['EmailTemplate']['content']);

                    

                    if(!$ctdata){    

                        if($this->EmailTemplate->Save($this->data['EmailTemplate'])){

                            $this->Session->setFlash('Template updated Successfully.','default', array('class' => 'successmsg'));



                            if(isset($this->data['Action']['redirectpage'])){

                                $sessdata=$this->Session->read('newsortingby');

                                $this->redirect('/'.$sessdata);

                            }else{

                                $this->redirect("/companies/editmailcontent/edit/$templateid");

                            }



                        }else{

                            $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                        }

                    }else{

                        $this->Session->setFlash('Template with same name already exists.','default',array('class' => 'msgTXt'));

                    }                

                }else{

                    $this->Session->setFlash('Please provide email content.','default',array('class' => 'msgTXt'));

                }                

            }



            				

            $this->EmailTemplate->id = $templateid;

            $this->data = $this->EmailTemplate->read();

            $this->set("isreadonly",'1');

            if($this->data['EmailTemplate']['is_sytem']=='0'){

                $this->set("isreadonly",'0');

            }

            if(!empty($errormsg)){

                $this->data['EmailTemplate']['content']="";

            }

            

            $this->set("extra",$extra);



        }

        /*

        * Function name   : addmailtemplate()

        * Description : This function used to add new mail templateof related projects

        * Created On      : 22-02-11 (09:50pm)

        *

        */          

        function addmailtemplate($returnurl="",$extra=""){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '11'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition





            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid =$project_id;





            

            

            ##check empty data

            if(!empty($this->data)){

        		  if(isset($this->data['Company']['returnurl'])){

					  $returnurl=$this->data['Company']['returnurl'];

				  }

                  if(isset($this->data['Company']['extra'])){

					  $extra=$this->data['Company']['extra'];

				  }

                #set the posted data

                $this->EmailTemplate->set($this->data);

                #check server side validation

                $errormsg = $this->EmailTemplate->invalidFields();

                

                $current_domain= $_SERVER['HTTP_HOST'];



                $this->data['EmailTemplate']['project_id'] = $projectid;

                $this->data['EmailTemplate']['is_sytem'] = '1';

                if(!$errormsg){

                    $templname = $this->data['EmailTemplate']['email_template_name'];



                    $condition = "email_template_name = '".$templname."' AND project_id = '".$projectid."' AND  delete_status = '0'";

                    ##check already exists EmailTemplate name

                    $ctdata = $this->EmailTemplate->find('all',array("conditions"=>$condition));

                    

                    $this->data['EmailTemplate']['content']=str_replace("../img","http://".$current_domain."/img",$this->data['EmailTemplate']['content']);

                    

                    if(!$ctdata){

                        

                        if($returnurl=="event" || $extra=="event")

                        {

                            

                            //$this->data['EmailTemplate']['is_event_temp']=1;

                            $this->data['EmailTemplate']['is_sytem']=0;

                        }

                        

                        if($this->EmailTemplate->Save($this->data['EmailTemplate'])){

                            

                            if($returnurl=="event" || $extra=="event")

                            {

                                $this->Session->setFlash('Template added Successfully.','default', array('class' => 'successmsg'));

                                

                                if($returnurl!="" && $returnurl!="event"){

                               // $gotourl=explode("_id_",$this->data['Admins']['returnurl']);

                               

                                $gotourl=str_replace("_id_", "/", $returnurl);

                                  

                                  $this->set("closeit","yes");

                                //$this->redirect('/admins/'.$gotourl); 

                            }else{ 

                                

                                if(isset($this->data['Action']['redirectpage'])){                                   

                                    $this->redirect('/companies/eventautoresponders');

                                }else{

                                    $this->redirect('/companies/addmailtemplate/event');

                                }

                                }

                            }

                           

                             if($returnurl!=""){

                               // $gotourl=explode("_id_",$this->data['companies']['returnurl']);

                               

                                $gotourl=str_replace("_id_", "/", $returnurl);

                                  

                                  $this->set("closeit","yes");

                                //$this->redirect('/companies/'.$gotourl); 

                            }else{

                                

                            

                                $this->Session->setFlash('Template added Successfully.','default', array('class' => 'successmsg'));



                                if(isset($this->data['Action']['redirectpage'])){

                                    $sessdata=$this->Session->read('newsortingby');

                                    $this->redirect('/'.$sessdata);

                                }else{

                                    $this->redirect('/companies/addmailtemplate');

                                }

                            }

                        }else{

                            $this->Session->setFlash('Error in processing. Please try again.','default',array('class' => 'msgTXt'));

                        }

                    }else{

                        $this->Session->setFlash('Template with same name already exists.','default',array('class' => 'msgTXt'));

                    }



                }else{

                    $this->Session->setFlash('Please provide email content.','default',array('class' => 'msgTXt'));

                }                                

            }

            

              $this->set("returnurl",$returnurl);

              $this->set("extra",$extra);

        }





        /*******************************************************************

        * Function Name: coinsetlist

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function coinsetlist(){



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            ##fetch data from Coinset table for listing



            ##checking search key

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                $searchkeyword = $this->data['Company']['searchkey'];



                $condition = "Coinset.project_id = '$project_id' AND Coinset.delete_status='0' and Coinset.coinset_name LIKE '%".$searchkeyword."%' OR Coinset.verifycode LIKE '%".$searchkeyword."%' OR Coinset.numunits LIKE '%".$searchkeyword."%' OR Coinset.startserialnum LIKE '%".$searchkeyword."%' OR Coinset.endserialnum LIKE '%".$searchkeyword."%'";

            }else{

                $condition = "Coinset.project_id = '$project_id' AND Coinset.delete_status='0'";

            }        



            $field='';



            $this->Pagination->sortByClass    = 'Coinset'; ##initaite pagination 



            $this->Pagination->total= count($this->Coinset->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $coinsetdtlarr = $this->Coinset->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));



            ##set Coinset data in variable



            $this->set("coinsetdetail",$coinsetdtlarr);

        }

        /*

        * Function name   : addcoinset()

        * Description : This function used to add new coinset for related projects

        * Created On      : 23-02-11 (00:45am)

        *

        */ 

   /*     function addcoinset(){ 



            ##Configure::write('debug', 3);    

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid=$project_id;

            ##check submit

            $consetdata = $this->Coinset->find('first',array('fields' => array('MAX(Coinset.id) as max_id'),'conditions'=>array("delete_status = '0' AND  project_id  ='".$projectid."'")));



            $sid=$consetdata[0]['max_id'];

            $singlearr = array("0","1","2","3","4","5","6","7","8","9");

            $condition1 = "project_id = '".$projectid."'  AND id=$sid";



            ##check already exists company name

            $consetdata1 = $this->Coinset->find('all',array("conditions"=>$condition1));

            $totcount = $consetdata1[0]['Coinset']['coinset_name'];



            if(preg_match('/[A-Z]{3}/', $totcount)==1){

                $coinsname= preg_split('/[A-Z]{3}/', $totcount);

                $totcount=$coinsname[1];

            }

            $nexval = ($totcount+1);

            if(in_array($nexval,$singlearr)){

                $newcoinsetname ='0'.$nexval;

            }else{

                $newcoinsetname = $nexval;

            }













            $this->set('coinsetname',$newcoinsetname);









            if(!empty($this->data)){

                $this->data['Coinset']['coinset_name']=$newcoinsetname;        

                #set the posted data

                $this->Coinset->set($this->data);

                #check server side validation

                $errormsg = $this->Coinset->invalidFields();



                if(!is_numeric(trim($this->data['Coinset']['verifycode']))&& ($this->data['Coinset']['verifycode'] != ''))

                {

                    $errormsg="Verification Code should be numeric.";                

                    $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));

                }







                if($this->data['Coinset']['verifycode']!=''){

                    $verifycode = $this->Coinset->find('first',array("conditions"=>"Coinset.verifycode='".$this->data['Coinset']['verifycode']."' and Coinset.project_id='".$projectid."' and Coinset.delete_status='0'"));

                    if(is_array($verifycode) and !empty($verifycode))

                    {

                        $errormsg="Verification Code is already used.";                

                        $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));

                    }

                }



                if(!$errormsg){





                    $this->data['Coinset']['project_id'] = $projectid;

                    $this->File = & new FileComponent;

                    $filePath =  'img' . DS . $project_name . DS.'uploads' ;

                    $this->File->setDestPath($filePath);



                    //for datesubmitchipco

                    //print_r($this->data);die;

                    if($this->data['Coinset']['coinsidea']['name'] !=''){

                        $file_name1 = $this->File->setFileName($this->data['Coinset']['coinsidea']['name']); 

                        $tmp1 = $this->data['Coinset']['coinsidea']['tmp_name'];

                        $fileNamesidea = $this->File->uploadcoin($file_name1,$tmp1,true);

                        $this->data['Coinset']['sidea'] =$fileNamesidea;

                    }

                    if($this->data['Coinset']['coinsideb']['name'] !=''){

                        $file_name2 = $this->File->setFileName($this->data['Coinset']['coinsideb']['name']); 

                        $tmp2 = $this->data['Coinset']['coinsideb']['tmp_name'];

                        $file_namesideb = $this->File->uploadcoin($file_name2,$tmp2,true);

                        $this->data['Coinset']['sideb'] =$file_namesideb;

                    }

                    if($this->data['Coinset']['coinedge']['name'] !=''){

                        $file_name4 = $this->File->setFileName($this->data['Coinset']['coinedge']['name']); 

                        $tmp4 = $this->data['Coinset']['coinedge']['tmp_name'];

                        $file_nameedge = $this->File->uploadlogo($file_name4,$tmp4,true,'300x12');

                        $this->data['Coinset']['edge'] =$file_nameedge;

                    }

                    $this->data['Coinset']['project_id'] = $projectid;

                    //for datesubmitchipco

                    $data = explode("-", $this->data['Coinset']['datesubmitchipco']);

                    $date = new DateTime();

                    $date->setDate($data[2], $data[0], $data[1]);

                    $this->data['Coinset']['datesubmitchipco']= $date->format("Y-m-d");

                    //for dateestship

                    $data = explode("-", $this->data['Coinset']['dateestship']);

                    $date = new DateTime();           

                    $date->setDate($data[2], $data[0], $data[1]);

                    $this->data['Coinset']['dateestship']= $date->format("Y-m-d");

                    //for dateship

                    $data = explode("-", $this->data['Coinset']['dateship']);

                    $date = new DateTime();           

                    $date->setDate($data[2], $data[0], $data[1]);

                    $this->data['Coinset']['dateship']= $date->format("Y-m-d");

                    //for dateestdelivery

                    $data = explode("-", $this->data['Coinset']['dateestdelivery']);

                    $date = new DateTime();           

                    $date->setDate($data[2], $data[0], $data[1]);

                    $this->data['Coinset']['dateestdelivery']= $date->format("Y-m-d");







                    //$this->data['Coinset']['verifycode'] =     rand(100, 999);

                    if($this->Coinset->Save($this->data['Coinset'])){

                        $this->Session->setFlash('Coinset added successfully.','default', array('class' => 'successmsg'));



                        if(isset($this->data['Action']['redirectpage'])){

                            $sessdata=$this->Session->read('newsortingby');

                            $this->redirect('/'.$sessdata);

                        }else{

                            $this->redirect('/companies/addcoinset');

                        }



                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                    }

                }



            }





            $prodectarr = $this->projectdetailbyid($projectid);

            $serialprefix = $prodectarr[0]['Project']['serialprefix'];$pref=$serialprefix."01";

            $state = $this->Coinset->find('count',array("conditions"=>"Coinset.coinset_name='$pref' and Coinset.project_id='".$projectid."' and Coinset.delete_status='0'"));

            if($state>0){$state="new";}

            $this->set('state',$state);



            $projectdtltype = $prodectarr[0]['Project']['project_type_id'];

            if($this->data['Coinset']['ship_type_id']){

                $this->set("selectedshippingtype",$this->data['Coinset']['ship_type_id']);

            }else{

                $this->set("selectedshippingtype","");

            }



            if($this->data['Company']['project_type_id'] || $projectdtltype){

                if($projectdtltype){

                    $projectdtltype = $projectdtltype;    

                }else{

                    $projectdtltype = $this->data['Company']['project_type_id'];

                }

                $this->set("selectedprojecttype",$projectdtltype);

            }else{

                $this->set("selectedprojecttype","");

            }



            $this->shippingtypedropdown();

            $this->projecttypedropdown();

            //======================================================//

            //======================================================//



            ##auto populated name

            $condition = "project_id = '".$projectid."' AND  delete_status = '0' ";



            ##check already exists company name

            //$consetdata = $this->Coinset->find('all',array("conditions"=>$condition));





            $this->set('serialpre',$serialprefix);



            ##start serial numbering



            $consetdata1 = $this->Coinset->find('first',array('fields' => array('MAX(Coinset.endserialnum) as max_ser'),'conditions'=>array("delete_status = '0' AND  project_id  ='".$projectid."'")));



            //$sid=$consetdata1[0]['max_id'];        





            /*

            $condition1 = "project_id = '".$projectid."' AND  delete_status = '0' and Coinset.coinset_name like '$serialprefix%'";

            ##check already exists company name

            $lastdata = $this->Coinset->find('all',array("conditions"=>$condition1,'order'=>'id desc','limit'=>'1'));

            * ///print_r($lastdata);

            //$lastserial="";

            if($consetdata1){//echo $lastdata[0]['Coinset']['endserialnum'];

                $lastserno = ($consetdata1[0]['max_ser']+1);

                $strlength = strlen($lastserno);

                $looplen = (7 -  $strlength);

                $finalres="";

                for($i=0; $i < $looplen; $i++){

                    $finalres = "0".$finalres;

                }

                $lastserial = $finalres.$lastserno;

                //echo $lastserial;

            }else{

                $lastserial = "0000001";

            }



            $this->set('lastserno',$lastserial);

            $this->set('totalreccount',$totcount);





        }

        

        */ 

        

        

                /*

        * Function name   : addcoinset()

        * Description : This function used to add new coinset for related projects

        * Created On      : 23-02-11 (00:45am)

        *

        */ 



        function addcoinset(){ 





            ##Configure::write('debug', 3);    

                  ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            

            

            ##import EmailTemplate  model for processing

            App::import("Model", "Coinset");

            $this->Coinset =   & new Coinset();    



            //STEP: Set curretn url

            $current_url= $_SERVER['HTTP_HOST'];

            $this->set('current_url',$current_url);

            

            //SETP :  Get product andd pricing details

            $getdetails = $this->ProductType->query("select * from price_type_options where project_id=$projectid");



            $product_pricing=array();

            for($i=0;$i<count($getdetails);$i++)

            {

                $rec_id=$getdetails[$i][price_type_options][id];

                $product_name=$this->getproductnamebyid($getdetails[$i][price_type_options][product_id]);

                $pricing_name=$this->getpricingnamebyid($getdetails[$i][price_type_options][pricing_id]);



                $name=$product_name; //." ----- ".$pricing_name;

                $product_pricing[$rec_id]=$name;



            }

             asort($product_pricing);



            $this->set("product_pricing",$product_pricing);





            //STEP:  get previous artwork details

            $pre_artwork= $this->Coinset->query("select * from coinsets where project_id=$projectid order by id desc limit 1");



            $has_pre_artwork=count($pre_artwork);

            $this->set("has_pre_artwork",$has_pre_artwork);



            $sidea_image=$pre_artwork[0][coinsets][sidea];

            $sideb_image=$pre_artwork[0][coinsets][sideb];

            $edge_image=$pre_artwork[0][coinsets][edge];



            $this->set("sidea_image",$sidea_image);

            $this->set("sideb_image",$sideb_image);

            $this->set("edge_image",$edge_image);



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '44'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   





            $cont="ProductType.delete_status=0 and ProductType.active_status=1";



            $product_types=$this->ProductType->find('list',array('fields'=>array('id','product_type_name')));



            $this->set('product_types',$product_types);





            $projectDetails=$this->getprojectdetails($projectid);    



            $project_name=$projectDetails['Project']['project_name'];



            $this->set('project',$projectDetails);    



            $this->set('project_name',$projectDetails['Project']['project_name']);



            $consetdata = $this->Coinset->find('first',array('fields' => array('MAX(Coinset.id) as max_id'),'conditions'=>array("delete_status = '0' AND  project_id  ='".$projectid."'")));



            $sid=$consetdata[0]['max_id'];

            $singlearr = array("0","1","2","3","4","5","6","7","8","9");

            $condition1 = "project_id = '".$projectid."'  AND id=$sid";



            ##check already exists company name

            $consetdata1 = $this->Coinset->find('all',array("conditions"=>$condition1));

            $totcount = $consetdata1[0]['Coinset']['coinset_name'];



            if(preg_match('/[A-Z]{3}/', $totcount)==1){

                $coinsname= preg_split('/[A-Z]{3}/', $totcount);

                $totcount=$coinsname[1];

            }

            $nexval = ($totcount+1);

            if(in_array($nexval,$singlearr)){

                $newcoinsetname ='0'.$nexval;

            }else{

                $newcoinsetname = $nexval;

            }



            $this->shippingtypedropdown();





            $this->set('coinsetname',$newcoinsetname);



           

            //get project type id

             $condition2 = "project_id = '".$projectid."'";

            $project_type = $this->Project->find('first',array("conditions"=>$condition2));

            $selectedprojecttype=$project_type['Project']['project_type_id'];

            $this->set('selectedprojecttype',$selectedprojecttype);





            ##check submit



            if(!empty($this->data)){

                $this->data['Coinset']['coinset_name']=$newcoinsetname;        

                #set the posted data

                //print_r($this->data);die; 

                $this->Coinset->set($this->data);



                #check server side validation



                $errormsg = $this->Coinset->invalidFields();



                if(!is_numeric(trim($this->data['Coinset']['verifycode']))&& ($this->data['Coinset']['verifycode'] != ''))

                {

                    $errormsg="Verification Code should be numeric.";                

                    $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));

                }



                if($this->data['Coinset']['verifycode'] != '')

                {    

                    $verifycode = $this->Coinset->find('first',array("conditions"=>"Coinset.verifycode='".$this->data['Coinset']['verifycode']."' and Coinset.project_id='".$projectid."' and Coinset.delete_status='0'"));



                    if(is_array($verifycode) and !empty($verifycode))



                    {



                        $errormsg="Verification Code is already used.";                



                        $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));



                    }

                }









                if(!$errormsg){

                   // $this->session_check_admin();

                    //$projectid = $this->Session->read("sessionprojectid");

                    $this->data['Coinset']['project_id'] = $projectid;

                    $this->File = & new FileComponent;

                    $filePath =  'img' . DS . $project_name . DS.'uploads' ;

                    $this->File->setDestPath($filePath);





                    $ch=$this->data['Coinset'];

                    $checked_pricing=array();



                    if($ch['check_qr']==1)

                    {

                        array_push($checked_pricing,"qr");  

                    }



                    if($ch['check_serial']==1)

                    {

                        array_push($checked_pricing,"serial");  

                    }

                    if($ch['check_barcode']==1)

                    {

                        array_push($checked_pricing,"barcode");  

                    }

                    if($ch['check_uv']==1)

                    {

                        array_push($checked_pricing,"uv");  

                    }

                    if($ch['check_photo']==1)

                    {

                        array_push($checked_pricing,"photo");  

                    }

                    if($ch['check_rfid']==1)

                    {

                        array_push($checked_pricing,"rfid");  

                    }



                    $checked_pricing=implode(",",$checked_pricing);



                    $this->data['Coinset']['checked_pricing']=$checked_pricing;



                    //for datesubmitchipco

                    //print_r($this->data);die;



                    if($this->data['Coinset']['use_pre_artwork']==1)        //if previous artwork selected

                    {

                        $this->data['Coinset']['sidea'] =$sidea_image;

                        $this->data['Coinset']['sideb'] =$sideb_image;

                        $this->data['Coinset']['edge'] =$edge_image;

                    }

                    else    //if no previous artwork selected

                    {

                        if($this->data['Coinset']['coinsidea']['name'] !=''){

                            $file_name1 = $this->File->setFileName($this->data['Coinset']['coinsidea']['name']); 

                            $tmp1 = $this->data['Coinset']['coinsidea']['tmp_name'];

                            $fileNamesidea = $this->File->uploadcoin($file_name1,$tmp1,true);

                            $this->data['Coinset']['sidea'] =$fileNamesidea;

                        }

                        if($this->data['Coinset']['coinsideb']['name'] !=''){

                            $file_name2 = $this->File->setFileName($this->data['Coinset']['coinsideb']['name']); 

                            $tmp2 = $this->data['Coinset']['coinsideb']['tmp_name'];

                            $file_namesideb = $this->File->uploadcoin($file_name2,$tmp2,true);

                            $this->data['Coinset']['sideb'] =$file_namesideb;

                        }

                        if($this->data['Coinset']['coinedge']['name'] !=''){

                            $file_name4 = $this->File->setFileName($this->data['Coinset']['coinedge']['name']); 

                            $tmp4 = $this->data['Coinset']['coinedge']['tmp_name'];

                            $file_nameedge = $this->File->uploadlogo($file_name4,$tmp4,true,'300x12');

                            $this->data['Coinset']['edge'] =$file_nameedge;

                        }

                    }



                        $data = explode("-", $this->data['Coinset']['datesubmitchipco']);



                        $date = new DateTime();



                        $date->setDate($data[2], $data[0], $data[1]);



                        $this->data['Coinset']['datesubmitchipco']= $date->format("Y-m-d");



                        //for dateestship



                        $data = explode("-", $this->data['Coinset']['dateestship']);



                        $date = new DateTime();           



                        $date->setDate($data[2], $data[0], $data[1]);



                        $this->data['Coinset']['dateestship']= $date->format("Y-m-d");



                        //for dateship



                        $data = explode("-", $this->data['Coinset']['dateship']);



                        $date = new DateTime();           



                        $date->setDate($data[2], $data[0], $data[1]);



                        $this->data['Coinset']['dateship']= $date->format("Y-m-d");



                        //for dateestdelivery



                        $data = explode("-", $this->data['Coinset']['dateestdelivery']);



                        $date = new DateTime();           



                        $date->setDate($data[2], $data[0], $data[1]);



                        $this->data['Coinset']['dateestdelivery']= $date->format("Y-m-d");





                        //$this->data['Coinset']['verifycode'] =     rand(100, 999);

                        //print_r($this->data);

                        //$this->Coinset->Save($this->data);die;    

                        if($this->Coinset->Save($this->data['Coinset'])){



                            $this->Session->setFlash('Coinset added successfully.','default', array('class' => 'successmsg'));





                            if(isset($this->data['Action']['redirectpage'])){



                                $sessdata=$this->Session->read('newsortingby');

                                $this->redirect('/'.$sessdata);



                            }else{



                                $this->redirect('/companies/addcoinset');



                            }







                        }else{



                            $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));



                        }

                 }



                $prodectarr = $this->projectdetailbyid($projectid);



                $serialprefix = $prodectarr[0]['Project']['serialprefix'];$pref=$serialprefix."01";



                $state = $this->Coinset->find('count',array("conditions"=>"Coinset.coinset_name='$pref' and Coinset.project_id='".$projectid."' and Coinset.delete_status='0'"));



                if($state>0){$state="new";}



                $this->set('state',$state);





                $projectdtltype = $prodectarr[0]['Project']['project_type_id'];



                if($this->data['Coinset']['ship_type_id']){



                    $this->set("selectedshippingtype",$this->data['Coinset']['ship_type_id']);



                }else{



                    $this->set("selectedshippingtype","");



                }







                if($this->data['Company']['project_type_id'] || $projectdtltype){



                    if($projectdtltype){



                        $projectdtltype = $projectdtltype;    



                    }else{



                        $projectdtltype = $this->data['Company']['project_type_id'];



                    }



                    $this->set("selectedprojecttype",$projectdtltype);



                }else{



                    $this->set("selectedprojecttype","");



                }







                $this->shippingtypedropdown();



                $this->projecttypedropdown();



                //======================================================//



                //======================================================//

                $condition = "project_id = '".$projectid."' AND  delete_status = '0' ";



                ##check already exists company name

                //$consetdata = $this->Coinset->find('all',array("conditions"=>$condition));







                $this->set('coinsetname',$newcoinsetname);







                $this->set('serialpre',$serialprefix);



            }

            

            ##start serial numbering



                $consetdata1 = $this->Coinset->find('first',array('fields' => array('MAX(Coinset.endserialnum) as max_ser'),'conditions'=>array("delete_status = '0' AND  project_id  ='".$projectid."'")));



                $sid=$consetdata1[0]['max_id'];



                //         $condition1 = "project_id = '".$projectid."'  AND id=$sid";



                ##check already exists company name

                //         $lastdata = $this->Coinset->find('all',array("conditions"=>$condition1));





                //         $condition1 = "project_id = '".$projectid."' AND  delete_status = '0' and Coinset.coinset_name like '$serialprefix%'";

                // 

                //         ##check already exists company name

                // 

                //         $lastdata = $this->Coinset->find('all',array("conditions"=>$condition1,'order'=>'id desc','limit'=>'1'));

                // 

                //         //print_r($lastdata);

                // 

                //         $lastserial="";



                /*    if($lastdata){//echo $lastdata[0]['Coinset']['endserialnum'];



                */    

                if($consetdata1){

                    $lastserno = ($consetdata1[0]['max_ser']+1);



                    $strlength = strlen($lastserno);



                    $looplen = (7 -  $strlength);



                    $finalres="";



                    for($i=0; $i < $looplen; $i++){



                        $finalres = "0".$finalres;



                    }



                    $lastserial = $finalres.$lastserno;



                    //echo $lastserial;



                }else{



                    $lastserial = "0000001";



                }

                $this->set('lastserno',$lastserial);

                $this->set('totalreccount',$totcount);

                

                if($coinsetid!=''){

                     // To edit coinset - get coinset details by $coinsetid

                     $coinsetData = $this->Coinset->find('first',array('conditions'=>array("delete_status = '0' AND  id  ='".$coinsetid."'")));

                     $this->set('',$lastserial);



                }

               



        }



        function get_pricing_details(){

            $this->session_check_admin();



            $units=$_POST['unit'];

            $op_id=$_POST['option'];

            if($units && $op_id)

            {

                $get_details=$this->PricingType->query("select * from price_type_options where id=$op_id");

                $product_id=$get_details[0][price_type_options][product_id];

                $pricing_id=$get_details[0][price_type_options][pricing_id];

                // "select * from pricing_coin_quantities where product_id=$product_id and pricing_id=$pricing_id and coin_quantity=$units"

                $queryCoinPricing="SELECT id, pricing_id, product_id, coin_quantity, price_per_unit, additional_options, 

                                    qr_per_unit, serial_per_unit, barcode_per_unit, uv_per_unit, photo_per_unit,rfid_per_unit 

                                    FROM pricing_coin_quantities 

                                    WHERE product_id='$product_id' and pricing_id='$pricing_id' and coin_quantity <= '$units'

                                    Order by coin_quantity desc limit 0,1";

                $get_pricing=$this->PricingType->query($queryCoinPricing); 

                if($get_pricing ==false) {

                    // if enterd untis are less than 1st qty set, 

                    //i.e. if pricing for QTY's are '50, 100, 200 etc 

                    //and enterd units are 20 then following query gets pricing of 5oqty

                    $queryCoinPricing="SELECT id, pricing_id, product_id, coin_quantity, price_per_unit, additional_options, 

                                    qr_per_unit, serial_per_unit, barcode_per_unit, uv_per_unit, photo_per_unit,rfid_per_unit 

                                    FROM pricing_coin_quantities 

                                    WHERE product_id='$product_id' and pricing_id='$pricing_id' and coin_quantity >= '$units' limit 0,1";

                     $get_pricing=$this->PricingType->query($queryCoinPricing);

                }

                if($get_pricing){

                   // $get_pricing[0][pricing_coin_quantities]['coin_quantity']=$get_pricing[0][0]['coin_quantity'];

                    $pricing_details[pricing_per_unit]=$get_pricing[0][pricing_coin_quantities];



                    $get_pricing_setup=$this->PricingType->query("select * from pricing_setups where product_id=$product_id and pricing_id=$pricing_id");  

                    $pricing_details[pricing_setup]=$get_pricing_setup[0][pricing_setups];

                    echo json_encode($pricing_details);

                }else{

                    echo json_encode(0);

                }

                



                



            }



            exit;             

        }



        /*

        * Function name   : editcoinset()

        * Description : This function used to edit coinset for related projects

        * Created On      : 24-02-11 (05:45am)

        *

        */ 

        function editcoinset($recid){

            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid=$project_id;

            

              $current_url= $_SERVER['HTTP_HOST'];

            $this->set('current_url',$current_url);

             //get project id

            $p_id = $this->Coinset->query("select project_id,ship_type_id,price_type_options_id,checked_pricing,serialdisplayside from coinsets where id=$recid");

            $projectid=$p_id[0][coinsets][project_id];

            $this->set('projectid',$projectid); 



            $this->set('recid',$recid);   

            

   ##import EmailTemplate  model for processing

            App::import("Model", "Coinset");

            $this->Coinset =   & new Coinset();    





            //for active menu display



            $this->set('page_url',"coinsetlist");







            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   





            $cont="ProductType.delete_status=0 and ProductType.active_status=1";



            $product_types=$this->ProductType->find('list',array('fields'=>array('id','product_type_name')));



            $this->set('product_types',$product_types);





            $projectDetails=$this->getprojectdetails($projectid);    



            $project_name=$projectDetails['Project']['project_name'];



            $this->set('project',$projectDetails);    



            $this->set('project_name',$projectDetails['Project']['project_name']);



            $consetdata = $this->Coinset->find('first',array('fields' => array('MAX(Coinset.id) as max_id'),'conditions'=>array("delete_status = '0' AND  project_id  ='".$projectid."'")));



            $sid=$consetdata[0]['max_id'];

            $singlearr = array("0","1","2","3","4","5","6","7","8","9");

            $condition1 = "project_id = '".$projectid."'  AND id=$sid";



            ##check already exists company name

            $consetdata1 = $this->Coinset->find('all',array("conditions"=>$condition1));

            $totcount = $consetdata1[0]['Coinset']['coinset_name'];



            if(preg_match('/[A-Z]{3}/', $totcount)==1){

                $coinsname= preg_split('/[A-Z]{3}/', $totcount);

                $totcount=$coinsname[1];

            }

            $nexval = ($totcount+1);

            if(in_array($nexval,$singlearr)){

                $newcoinsetname ='0'.$nexval;

            }else{

                $newcoinsetname = $nexval;

            }



            $this->set('coinsetname',$newcoinsetname);





            //get project type id

             $condition2 = "project_id = '".$projectid."'";

            $project_type = $this->Project->find('first',array("conditions"=>$condition2));

            $selectedprojecttype=$project_type['Project']['project_type_id'];

            $this->set('selectedprojecttype',$selectedprojecttype);

            

            //get previous artwork details

            $pre_artwork= $this->Coinset->query("select * from coinsets where project_id=$projectid order by id desc limit 1");



            $sidea_image=$pre_artwork[0][coinsets][sidea];

            $sideb_image=$pre_artwork[0][coinsets][sideb];

            $edge_image=$pre_artwork[0][coinsets][edge];



            $this->set("sidea_image",$sidea_image);

            $this->set("sideb_image",$sideb_image);

            $this->set("edge_image",$edge_image);





           

            if(!empty($this->data)){

            



                $condition3 = "id = '".$this->data['Coinset']['id']."'";

                $existing_coinset = $this->Coinset->find('first',array("conditions"=>$condition3));



               

                $this->Coinset->set($this->data);



                #check server side validation



                $errormsg = $this->Coinset->invalidFields();



                if(!is_numeric(trim($this->data['Coinset']['verifycode']))&& ($this->data['Coinset']['verifycode'] != ''))

                {

                    $errormsg="Verification Code should be numeric.";                

                    $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));

                }



                if($this->data['Coinset']['verifycode'] != '')

                {    

                    $verifycode = $this->Coinset->find('first',array("conditions"=>"Coinset.verifycode='".$this->data['Coinset']['verifycode']."' and Coinset.project_id='".$projectid."' and Coinset.delete_status='0'"));







                    if(is_array($verifycode) and !empty($verifycode))



                    {

                        if($verifycode[Coinset][id]!=$this->data['Coinset']['id'])

                        {



                            $errormsg="Verification Code is already used.";                



                            $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));

                        }



                    }





                }





                if(!$errormsg){

                



                    $this->File = & new FileComponent;

                    $filePath =  'img' . DS . $project_name . DS.'uploads' ;

                    $this->File->setDestPath($filePath);





                    $ch=$this->data['Coinset'];





                    $checked_pricing=array();



                    if($ch['check_qr']==1)

                    {

                        array_push($checked_pricing,"qr");  

                    }



                    if($ch['check_serial']==1)

                    {

                        array_push($checked_pricing,"serial");  

                    }

                    if($ch['check_barcode']==1)

                    {

                        array_push($checked_pricing,"barcode");  

                    }

                    if($ch['check_uv']==1)

                    {

                        array_push($checked_pricing,"uv");  

                    }

                    if($ch['check_photo']==1)

                    {

                        array_push($checked_pricing,"photo");  

                    }

                    if($ch['check_rfid']==1)

                    {

                        array_push($checked_pricing,"rfid");  

                    }



                    $checked_pricing=implode(",",$checked_pricing);



                    $this->data['Coinset']['checked_pricing']=$checked_pricing;



                   

                    if($this->data['Coinset']['use_pre_artwork']==1)        //if previous artwork selected

                    {

                        $this->data['Coinset']['sidea'] =$sidea_image;

                        $this->data['Coinset']['sideb'] =$sideb_image;

                        $this->data['Coinset']['edge'] =$edge_image;

                    }

                    else    //if no previous artwork selected

                    {

                        if($this->data['Coinset']['coinsidea']['name'] !=''){

                            $file_name1 = $this->File->setFileName($this->data['Coinset']['coinsidea']['name']); 

                            $tmp1 = $this->data['Coinset']['coinsidea']['tmp_name'];

                            $fileNamesidea = $this->File->uploadcoin($file_name1,$tmp1,true);

                            $this->data['Coinset']['sidea'] =$fileNamesidea;

                        }

                        if($this->data['Coinset']['coinsideb']['name'] !=''){

                            $file_name2 = $this->File->setFileName($this->data['Coinset']['coinsideb']['name']); 

                            $tmp2 = $this->data['Coinset']['coinsideb']['tmp_name'];

                            $file_namesideb = $this->File->uploadcoin($file_name2,$tmp2,true);

                            $this->data['Coinset']['sideb'] =$file_namesideb;

                        }

                        if($this->data['Coinset']['coinedge']['name'] !=''){

                            $file_name4 = $this->File->setFileName($this->data['Coinset']['coinedge']['name']); 

                            $tmp4 = $this->data['Coinset']['coinedge']['tmp_name'];

                            $file_nameedge = $this->File->uploadlogo($file_name4,$tmp4,true,'300x12');

                            $this->data['Coinset']['edge'] =$file_nameedge;

                        }

                        

                    }     



                        if($this->Coinset->Save($this->data['Coinset'])){



                            $this->Session->setFlash('Coinset added successfully.','default', array('class' => 'successmsg'));





                            if(isset($this->data['Action']['redirectpage'])){



                                //$sessdata=$this->Session->read('newsortingby');

                                $this->redirect('/companies/coinsetlist');



                            }else{



                                $this->redirect('/companies/editcoinset/'.$this->data['Coinset']['id']);



                            }







                        }else{



                            $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));



                        }



                    







                }









            }



            $this->shippingtypedropdown();



            if($p_id[0][coinsets][ship_type_id]){

                $selectedshippingtype=$p_id[0][coinsets][ship_type_id];

                $this->set("selectedshippingtype",$selectedshippingtype);



            }else{



                $this->set("selectedshippingtype","");



            }





            //get selected price type options

            $selectedpricetypeoptions =  $p_id[0][coinsets][price_type_options_id]; 



            if($selectedpricetypeoptions){

                $this->set("selectedpricetypeoptions",$selectedpricetypeoptions);



            }else{



                $this->set("selectedpricetypeoptions","");



            }



            //get checked pricing options

            $checkedpricing =  $p_id[0][coinsets][checked_pricing]; 

            if($checkedpricing){



                $this->set("checkedpricing",$checkedpricing);



            }else{



                $this->set("checkedpricing","");



            }



            $pricing_status[0]="Unapproved";

            $pricing_status[1]="Approved";





            $this->set("pricing_status",$pricing_status);





            $this->projecttypedropdown();



            //get product andd pricing details

            $getdetails = $this->ProductType->query("select * from price_type_options where project_id=$projectid");



            $product_pricing=array();

            for($i=0;$i<count($getdetails);$i++)

            {

                $rec_id=$getdetails[$i][price_type_options][id];

                $product_name=$this->getproductnamebyid($getdetails[$i][price_type_options][product_id]);

                $pricing_name=$this->getpricingnamebyid($getdetails[$i][price_type_options][pricing_id]);



                $name=$product_name;//." ----- ".$pricing_name;

                $product_pricing[$rec_id]=$name;



            }



            $this->set("product_pricing",$product_pricing);





            



            //======================================================//



            //======================================================//

            $condition = "project_id = '".$projectid."' AND  delete_status = '0' ";



            ##check already exists company name

            //$consetdata = $this->Coinset->find('all',array("conditions"=>$condition));





            $this->set('coinsetname',$newcoinsetname);

            $this->set('serialpre',$serialprefix);                        

            $this->set('lastserno',$lastserial);

            $this->set('totalreccount',$totcount);



            $this->Coinset->id = $recid;

            $this->data = $this->Coinset->read();

            $this->set("Coinset", $recid);





            if($this->data['Coinset']['pricing_status']){

                $selectedpricingstatus=$this->data['Coinset']['pricing_status'];    



                $this->set("selectedpricingstatus",$selectedpricingstatus);



            }else{

                $selectedpricingstatus=0;



                $this->set("selectedpricingstatus",$selectedpricingstatus);



            }

                    

            $sides=array();

            $sides['A']="A";

            $sides['B']="B";

            $this->set("sides",$sides);     

            

            //get  pricing serial on side

            $serialdisplayside =  $p_id[0][coinsets][serialdisplayside]; 

            if($serialdisplayside){



                $this->set("serialdisplayside",$serialdisplayside);



            }else{



                $this->set("serialdisplayside","");



            }

            

            



        }

        /*

        * Function name   : contactlist()

        * Description : This function used to list contacts of related companies

        * Created On      : 21-02-11 (10:00pm)

        *

        */ 

        function contactlist(){



            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid=$project_id;









            ##fetch data from Contact table for listing

            $field='';









            if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='company_name'){

                $this->Pagination->sortByClass    = 'Company'; ##initaite pagination

            }else if(isset($_REQUEST['sortBy']) && $_REQUEST['sortBy']=='contact_type_name'){

                    $this->Pagination->sortByClass    = 'ContactType'; ##initaite pagination

                }else{

                    $this->Pagination->sortByClass    = 'Contact'; ##initaite pagination 

            }



            ##checking search key

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                $searchkeyword = $this->data['Company']['searchkey'];



                $condition = "Contact.delete_status = '0' AND Contact.project_id = '$project_id' and (Contact.firstname LIKE '%".$searchkeyword."%' OR Contact.lastname  LIKE '%".$searchkeyword."%' OR Contact.mobile  LIKE '%".$searchkeyword."%' OR Contact.email LIKE '%".$searchkeyword."%' OR Company.company_name LIKE '%".$searchkeyword."%' OR ContactType.contact_type_name LIKE '%".$searchkeyword."%')";

            }else{

                $condition = "Contact.delete_status = '0' AND Contact.project_id = '$projectid'";

            }





            ##relation ship with contact type and company table with contacts

            $this->Contact->bindModel(array('belongsTo'=>array(

            'ContactType'=>array(

            'foreignKey'=>false,

            'conditions'=>'Contact.contact_type_id = ContactType.id'

            ),'Company'=>array(

            'foreignKey'=>false,

            'conditions'=>'Contact.company_id = Company.id'

            )

            )));



            $this->Pagination->total= count($this->Contact->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $this->Contact->bindModel(array('belongsTo'=>array(

            'ContactType'=>array(

            'foreignKey'=>false,

            'conditions'=>'Contact.contact_type_id = ContactType.id'

            ),'Company'=>array(

            'foreignKey'=>false,

            'conditions'=>'Contact.company_id = Company.id'

            )

            )));



            $contactdtlarr = $this->Contact->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            ##set project type data in variable



            $this->set("contactdata",$contactdtlarr);



        }    



        /*

        * Function name   : addcontacts()

        * Description : This function used to add contacts for companies

        * Created On      : 21-02-11 (10:25am)

        *

        */     

        function addcontacts($contactid='',$companyid=''){

			 ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition       



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid=$project_id;        





            $this->set("selectedcountry",'');

            $this->set("selectedstate",'');



            ##check empty data

            if(!empty($this->data)) {

                $this->data['Contact']['project_id'] = $projectid;



                #set the posted data

                $this->Contact->set($this->data);

                #check server side validation

                $errormsg = $this->Contact->invalidFields();

                if(!$errormsg){

                    $cid = "";

                    $fname = $this->data['Contact']['firstname'];

                    $lname = $this->data['Contact']['lastname'];

                    $jobtitle = $this->data['Contact']['jobtitle'];

                    $address1 = $this->data['Contact']['address1'];

                    $country = $this->data['Contact']['country'];

                    $state = $this->data['Contact']['state'];

                    $city = $this->data['Contact']['city'];

                    $zipcode = $this->data['Contact']['zipcode'];

                    

                    if($this->data['Contact']['id']){

                        $cid = $this->data['Contact']['id'];

                        // Check Contact already exists with same firstname, last name. title, address, city state, country, zip 

                        $condition = "firstname = '".$fname."' AND lastname = '".$lname."' AND jobtitle = '".$jobtitle."' AND address1 = '".$address1."' AND city = '".$city."'  

                        AND state = '".$state."'  AND country = '".$country."' AND zipcode = '".$zipcode."' AND project_id = '".$projectid."'    AND  delete_status = '0' AND id !='".$cid."'";



                    }else{

                        // Check Contact already exists with same firstname, last name. title, address, city state, country, zip 

                        $condition = "firstname = '".$fname."' AND lastname = '".$lname."' AND jobtitle = '".$jobtitle."' AND address1 = '".$address1."' AND city = '".$city."'  

                        AND state = '".$state."'  AND country = '".$country."' AND zipcode = '".$zipcode."' AND project_id = '".$projectid."' AND  delete_status = '0'";

                    }    

                    ##check already exists company name

                    $ctdata = $this->Contact->find('all',array("conditions"=>$condition));



                    if(!$ctdata){

                        //echo "<pre>";

                        //print_r($this->data); exit;

                        if($this->Contact->Save($this->data)){

                            if($cid){

                                $this->Session->setFlash('Contact updated Successfully.','default', array('class' => 'successmsg'));

                                if(isset($this->data['Action']['redirectpage'])){

                                    $sessdata=$this->Session->read('newsortingby');

                                    $this->redirect('/'.$sessdata);

                                }else{

                                    $this->redirect("/companies/addcontacts/$cid");

                                }

                            }else{

                                $this->Session->setFlash('Contact Added Successfully.','default', array('class' => 'successmsg'));

                                if(isset($this->data['Action']['redirectpage'])){

                                    $sessdata=$this->Session->read('newsortingby');

                                    $this->redirect('/'.$sessdata);

                                }else{

                                    $this->redirect("/companies/addcontacts");

                                }

                            }

                        }else{

                            $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));    

                        }

                        $this->redirect('/companies/contactlist');

                    }else{

                        $this->Session->setFlash('Contact with same name and location already exists.','default',array('class' => 'msgTXt'));

                    }

                }

            }





            if($contactid && $contactid !=='addcontact'){

                $this->Contact->id = $contactid;

                $this->data = $this->Contact->read();

            }

          if($companyid && $contactid =='addcontact'){

			 

				$this->set("selectedcompany",$companyid);

				$this->set("selectedcompany",$companyid);

            }else{

                $this->set("selectedcompany","");

                $this->set("selectedcompany",$this->data['Contact']['company_id']);

            }



            $this->set("selectedcontacttype","");



            $this->set("selectedcontacttype",$this->data['Contact']['contact_type_id']);



            $contacttypedropdown=$this->contacttypedropdown($projectid);

			$this->set('contacttypedropdown',$contacttypedropdown);

            $this->companydropdown($projectid);

            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



            ##check default dropdowns



            if($this->data['Contact']['country']){

                $conid = $this->data['Contact']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if($this->data['Contact']['state']){

                    $statid = $this->data['Contact']['state'];

                    $this->set("selectedstate",$statid);



                }

            }

        }

        

                 /*

        * Function name   : memberlist()

        * Description : This function used to list all types of members of related project

        * Created On      : 24th Feb 2012 (QUAD-UA)     - Member Type and Memebrs Enhancement

        *

        */ 



        function memberlist(){

        ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';

            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);

            }

            //for active menu display

            $this->set('page_url',"holderslist");

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");

			

			if(empty($project_name)) $this->redirect(array('controller'=>'companies','action'=>'session_expired'));



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '3'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition  





            $this->set('project_name',$project_name);

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $projectid=$project_id;  



            // STEP : GET ALL TYPES OF MEMBERS OF RELATED PROJECT

            $field='';

            $searchkey=""; 

            if(!empty($this->data))

            {        

             

			   $searchkey=$this->data['Companies']['searchkey'];

            }

            $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 

            $member_type="";  // get all members

            $this->Pagination->total= count($this->Holder->getMemberListByProject($project_id, $member_type,$searchkey));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

             if($order == "Holder.id ASC"){

                $order = "Holder.created DESC,Holder.lastnameshow ASC, Holder.firstname ASC";

            }

            $memberlist = $this->Holder->getMemberListByProject($project_id, "",$searchkey,$order, $limit, $page);

            $this->set("memberlist",$memberlist);



        }



        /*

        * Function name   : holderslist()

        * Description : This function used to list registered holders of related project

        * Created On      : 25-02-11 (02:18am)

        *

        */ 

        function holderslist(){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            //for active menu display

            $this->set('page_url',"holderslist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '3'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition  





            $this->set('project_name',$project_name);

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $projectid=$project_id;    

              // STEP : GET ALL Holders OF RELATED PROJECT

                     

            App::import("Model", "Holder");

            $this->Holder =   & new Holder();

            $field='';

            $searchkey=""; 

            if(!empty($this->data))

            {        

               $searchkey=$this->data['Companies']['searchkey'];

            }

            $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 

            $member_type="Holder";  // get all members

            $this->Pagination->total= count($this->Holder->getMemberListByProject($project_id, $member_type,$searchkey));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

             if($order == "Holder.id ASC"){

                $order = "Holder.created DESC,Holder.lastnameshow ASC, Holder.firstname ASC";

            }

            $holderlist = $this->Holder->getMemberListByProject($project_id, $member_type,$searchkey,$order, $limit, $page);

            $this->set("holderlist",$holderlist); 

        }    

        /*

        * Function name   : nonholderslist()

        * Description : This function used to list registered holders of related project

        * Created On      : 25-02-11 (02:18am)

        *

        */ 

        function nonholderslist(){

            ##Configure::write('debug',3);

            ##check user session live or not

            //         $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"nonholderslist");





            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '4'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid=$project_id;    

                // STEP : GET ALL Non Holders OF RELATED PROJECT

                    

            App::import("Model", "Holder");

            $this->Holder =   & new Holder();

            $field='';

            $searchkey=""; 

            if(!empty($this->data))

            {        

               $searchkey=$this->data['Companies']['searchkey'];

            }

            $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 

             App::import("Model", "MemberType");  

            $this->MemberType =  & new MemberType();

            $member_type=MemberType::MEMBER_TYPE_NON_HOLDER;  // get all non holders

            $this->Pagination->total= count($this->Holder->getMemberListByProject($project_id, $member_type,$searchkey));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

              if($order == "Holder.id ASC"){

                $order = "Holder.created DESC,Holder.lastnameshow ASC, Holder.firstname ASC";

            }

            $holderlist = $this->Holder->getMemberListByProject($project_id, $member_type,$searchkey,$order, $limit, $page);

            $this->set("holderlist",$holderlist); 

        }

        

        

          /*

        * Function name   : topdonatorslist()

        * Description : This function used to list all types of top donators memebrs of related project

        * Created On      : 24th Feb 2012 (QUAD-UA)     - Member Type and Memebrs Enhancement

        *

        */ 



        function topdonatorslist(){

             ##check user session live or not

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"topdonatorslist");





            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '4'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid=$project_id;    





            // STEP : GET ALL TYPES OF MEMBERS OF RELATED PROJECT

            $field='';

            $searchkey=""; 

            if(!empty($this->data))

            {        

               $searchkey=$this->data['Companies']['searchkey'];

            }

            $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 

            $member_type="";  // get all members

            $this->Pagination->total= count($this->Holder->getMemberListByProject($project_id, $member_type,$searchkey));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            if($order == "Holder.id ASC"){

                $order = "Holder.donation_level DESC,Holder.lastnameshow ASC, Holder.firstname ASC";

            }

            $memberlist = $this->Holder->getMemberListByProject($project_id, "",$searchkey,$order, $limit, $page);

            $this->set("memberlist",$memberlist);



        }



        /*

        * Function name   : addholder()

        * Description : This function used to add new holder

        * Created On      : 01-03-11 (09:08pm)

        *$fromwhere : calling form holderlist or nonholder list

        */

        function addholder($fromwhere=null){

            if($fromwhere){

                $this->set("redirectcancel","nonholderslist");

            }else{

                $this->set("redirectcancel","holderslist");

            }

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '5'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      





            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid=$project_id;    







            ##check empty data

            if(!empty($this->data)) {

				//echo '<pre>';print_r($this->data);die;



                $this->User->set($this->data);

                $usererrormsg = $this->User->invalidFields();

                $uniqueHolder = $this->Holder->isUniqueScreenName($this->data['Holder']['screenname'], $project_id);



                $this->Holder->set($this->data);



                $holdererrormsg = $this->Holder->invalidFields();

                if ($uniqueHolder == false) {

                    $holdererrormsg['screenname'] = 'Screen name already exists. Please provide another screen name.';

                    $this->Holder->validationErrors['screenname'] = 'Screen name already exists. Please provide another screen name.';

                }   

                    

                

                ##checking server validation

                if(!$usererrormsg && !$holdererrormsg){





                    $orgpassword="";

                    ##putting mandatory data

                    $this->data['User']['username'] = $this->data['Holder']['email'];

                    $this->data['User']['project_id'] = $projectid;

                    $orgpassword = $this->data['User']['password'];

                    $this->data['User']['password'] = md5($this->data['User']['password']);

                    $this->data['User']['usertype'] = 'holder';

                    $checkret = $this->checkuniqueuserid($this->data['User']['username'], $project_id);



                    if($checkret){



                        $condition = "email = '".$this->data['Holder']['email']."' and  project_id='".$projectid."' and delete_status='0'";

                        $usersession = $this->Holder->find('first', array('conditions' => $condition));

                        if(is_array($usersession) && !empty($usersession)) {

                            $this->Session->setFlash('Email id with same name already exists.','default',array('class' => 'errormsg'));        



                        } else {



                            //echo "<pre>";

                            //print_r($this->data); exit;

                            ##insert login details for spacific holder

                            if($this->User->Save($this->data['User'])){

                                $lastuserid = $this->User->getLastInsertId();

                                $this->data['Holder']['project_id'] = $projectid;

                                $this->data['Holder']['user_id'] = $lastuserid;

								if(!empty($this->data['Holder']['birthday'])){

									$dateFormat = explode('-',$this->data['Holder']['birthday']);	

		                            $birthDate = $dateFormat['2'].'-'.$dateFormat['0'].'-'.$dateFormat['1'];	

	                                $this->data['Holder']['birthday'] = $birthDate;

								}

                                

                                // Set default all subscription types check on for user  - Ref. 2-9-12 Critical Review Doc -Item # 232

                                $subscriptiontypes_checks=$this->getDefaultSubscriptionTypesChecks();

                                $this->data['Holder']['subscription_type_id']= $subscriptiontypes_checks;



                                    // Set default all subscription types check on for user  - Ref. 2-9-12 Critical Review Doc -Item # 232

                                $subscriptiontypes_checks=$this->getDefaultSubscriptionTypesChecks();

                                $this->data['Holder']['subscription_type_id']= $subscriptiontypes_checks;

                                

                                // SET "NON HOLDER" as a MEMBER TYPE TO MEMBER 

                                 App::import("Model", "MemberType");  

                                $this->MemberType =  & new MemberType();

                                $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_NON_HOLDER, $projectid);

                                if($member_type){

                                       $this->data['Holder']['member_type'] = $member_type['MemberType']['id']; 

                                }

                                

                                if($this->Holder->Save($this->data['Holder'])){



                                    ##sending registration mail

                                    $retmsg="";

                                    $tomailid = $this->data['Holder']['email'];

                                    $toname = $this->data['Holder']['firstname'];

                                    $holusername = $this->data['User']['username'];

                                    //$toname = $this->data['Holder']['lastnameshow'];



                                    ##project related information

                                    $projectarr = $this->projectdetailbyid($projectid);

                                    $projectname = $projectarr[0]['Project']['system_name'];

                                    //$sponsor_name = $projectarr[0]['Sponsor']['sponsor_name'];



                                    if(!empty($projectarr[0]['Project']['url']))

                                        $homepagepath=str_replace('http://', '', $projectarr[0]['Project']['url']);

                                    else

                                        $homepagepath=HTTP_PATH.'/'.$projectarr[0]['Project']['project_name'];



                                    // STEP : GET EMAIL TEMPLATE  DETAILS

                                    $holreg = "REGISTRATION CONFIRMATION";

                                    $conditiontemp = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0' AND EmailTemplate.email_template_name = '$holreg'";

                                    $templatearr = $this->EmailTemplate->find('all',array("conditions"=>$conditiontemp));

                                    if($templatearr){

                                            $subjectreg = $templatearr[0]['EmailTemplate']['subject'];

                                            //$subjectreg = str_replace('[[PROJECT_NAME]]',$projectname,$subjectreg);  

                                            $contentreg= $templatearr[0]['EmailTemplate']['content'];

                                            

                                     /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button         **/     

                                     ///////////////////////////////// append mail footer set by super admin -U /////////////////////////

                                        $condition = "id='1'";

                                        $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                        $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                        $contentreg.=$mailfooter;

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                   

                                    

                                // Set path to inserted image 

                                $contentreg = $this->replaceImgPathInEmailContent($contentreg);

                                            $fromemail =$templatearr[0]['EmailTemplate']['sender'];

                                            $ccemail =$templatearr[0]['EmailTemplate']['send_cc_email'];

                                            /**

                                            * OLD CODE

                                            * 

                                            

                                            $findarr = array("[[TO_FIRSTNAME]]","[[PROJECT_HOMEPAGE_URL]]","[[USER_NAME]]","[[PASSWORD]]","[[PROJECT_NAME]]");

                                            $replacearr = array($toname,$homepagepath,$holusername,$orgpassword,$projectname);

                                            ## replace content dynamically for path to image

                                            $message = str_replace($findarr, $replacearr, $contentreg);    

                                            **/    

                                            

                                            /**

                                              * New Email Temp replacement code for data Elements 

                                              */

                                            //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                            $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectDetails, $tomailid);

                                            //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                                $dataEleValuesArray[DATA_ELEMENT_USER_NAME]= $holusername;

                                                $dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= $orgpassword;

                                                $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                    

                                            //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 

                                            $subjectreg=$this->EmailTemplates->insertDataElementValuesToContent($subjectreg);

                                            $message=$this->EmailTemplates->insertDataElementValuesToContent($contentreg);

                            

                                            if($this->Sendemail->sendMailContentWithCC($tomailid,$fromemail,$subjectreg,$message,$fromemail, $templatearr[0]['EmailTemplate']['send_cc_email_to'])){ 

                                                $retmsg ="Also Registration confirmation email has been sent to Holder email $tomailid";

                                            }    



                                          /*   if($ccemail==1)

                                            {

                                                $to_cc_email=$fromemail;

                                                

                                                $this->Sendemail->sendMailContent($to_cc_email,$fromemail,$subjectreg,$message);

                                            }  */

                                    }else{

                                           $retmsg ="Registration confirmation email is not send!";    

                                    }

                                   



                                    $this->Session->setFlash("Registration Successfully. $retmsg",'default', array('class' => 'successmsg'));



                                    if(isset($this->data['Action']['redirectpage'])){

                                        $sessdata=$this->Session->read('newsortingby');

                                        $this->redirect('/'.$sessdata);

                                    }else{

                                        $this->redirect('/companies/addholder');

                                    }



                                }else{

                                    $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                               }    

                            }else{

                                $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                            }



                        }



                    }else{

                        $this->Session->setFlash('Email id with same name already exists.','default',array('class' => 'msgTXt'));        

                    }

                }

            }



            ##country state default selection

            $this->set("selectedcountry","");

            $this->set("selectedstate","");

            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



            ##check default dropdowns



            if($this->data['Holder']['country']){

                $conid = $this->data['Holder']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if(isset($this->data['Holder']['state'])){

                    $statid = $this->data['Holder']['state'];

                    $this->set("selectedstate",$statid);

                }

            }

            ##end country state default selection



        }

        /*

        * Function name   : editholder()

        * Description : This function used to edit holder information

        * Created On      : 01-03-11 (09:08pm)

        *

        */

        function editholder($holderid){

            ##check user session live or not

            $this->session_check_user();

            $this->set("recordid",$holderid);

            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      



            /**

            * Add member is holder or non holder at session for its other tabs 

            */

            $this->Session->delete('projecteditmember');

            $this->Session->write("projecteditmember","editholder"); 

            $projecteditmember = $this->Session->read("projecteditmember");        

            $this->set('projecteditmember',$projecteditmember);



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid=$project_id;    







            ##check empty data

            if(!empty($this->data)) {



                $uniqueHolder = $this->Holder->isUniqueScreenName($this->data['Holder']['screenname'], $project_id, $holderid);



                $this->Holder->set($this->data);



                $holdererrormsg = $this->Holder->invalidFields();

                if ($uniqueHolder == false) {

                    $holdererrormsg['screenname'] = 'Screen name already exists. Please provide another screen name.';

                }    

                ##checking server validation



                if(!$holdererrormsg){

                    $errormsg1='';

                    if($this->data['Holder']['id'] !=''){

                        if($this->data['User']['password']!='' && $this->data['User']['id'] !=''){

                            $this->data['User']['password'] = md5($this->data['User']['password']);



                            if($this->User->Save($this->data['User'])){

                                $errormsg1 = "and Password";

                            }

                        }



                        $dateFormat = explode('-',$this->data['Holder']['birthday']);

                        $birthDate = $dateFormat[2].'-'.$dateFormat[0].'-'.$dateFormat[1];

                        $this->data['Holder']['birthday'] = $birthDate;

                        

                        if($this->data['Holder']['subscription_type_id']){

                            //echo "<pre>"; print_r($this->data['Holder']['subscription_type_id']);  echo "</pre>";

                            $subscription_types=implode(",",$this->data['Holder']['subscription_type_id']);

                            $this->data['Holder']['subscription_type_id']=$subscription_types;

                        }else{

                            $this->data['Holder']['subscription_type_id']="";

                        }

                        



                        if($this->Holder->Save($this->data['Holder'])){



                              //STEP : Validate avtar image and upload             

                            if($_FILES["avatar"]["tmp_name"]!="")

                            {

                                if ((($_FILES["avatar"]["type"] == "image/gif") || ($_FILES["avatar"]["type"] == "image/jpeg") || ($_FILES["avatar"]["type"] == "image/png") || ($_FILES["avatar"]["type"] == "image/jpg") || ($_FILES["avatar"]["type"] == "image/pjpeg")) && ($_FILES["avatar"]["size"] < 2097152) )

                                {

                                    $ext=explode("/",$_FILES["avatar"]["type"]);

                                    if ($_FILES["avatar"]["error"] > 0)

                                    {

                                        $errorString .="Error in uploading avatar image file.Try again.";

                                    }

                                    else

                                    {   

                                         $user_avatar_folder="img/avatar/";

                                         $filePath =  $user_avatar_folder. DS . $project_id . DS;

                                         $this->File->setDestPath($filePath);

                                        // $file_name1 = $this->File->setFileName($_FILES["avatar"]["name"]); 

                                         $ext = explode(".",$_FILES["avatar"]["name"]);

                                          $ext=$ext[1];

                                         $tmp1 = $_FILES["avatar"]['tmp_name'];

                                         $width = 100;

                                         $height = 100;

                                         // Get new dimensions

                                         list($width_orig, $height_orig) = getimagesize($tmp1);

                                         $ratio_orig = $width_orig/$height_orig;



                                        if ($width/$height > $ratio_orig) {

                                            $width = $height*$ratio_orig;

                                        } else {

                                            $height = $width/$ratio_orig;

                                        }



                                        

                                      /*  $ext=explode(".",$_FILES["avatar"]["name"]);

                                        $ext=$ext[1];

                                        $up_dir="img/avatar/".$project_id."/"; */ 

                                        $filename=$userid.".".$ext;

                                        if (file_exists($filePath))

                                        {

                                           chmod($filePath,0777);

                                           $fileNamesidea = $this->File->uploadlogo($filename,$tmp1,true,$width."x".$height);  

                                         //   move_uploaded_file($_FILES["avatar"]["tmp_name"],$up_dir.$filename);

                                        }

                                        else

                                        {

                                            mkdir($filePath, 0777);

                                            $fileNamesidea = $this->File->uploadlogo($filename,$tmp1,true,$width."x".$height);  

                                         //   move_uploaded_file($_FILES["avatar"]["tmp_name"],$up_dir.$filename);



                                        }  

                                        $avatar_url=$user_avatar_folder.$project_id."/".$fileNamesidea;

                                        $this->Holder->id = $holderid;

                                        $this->data = $this->Holder->read();

                                        $userid = $this->data['Holder']['user_id'];

                                        if($userid){

                                            $user_arr['avatar_url']=$avatar_url; //upload image url 

                                            $user_arr['id']=$userid;

                                            $this->User->save($user_arr);

                                            $errorString=""; 

                                        }else{

                                             $errorString .="Error in uploading avatar image file.Try again."; 

                                        }

                                       

                                    }

                                   

                                }

                                else

                                {

                                    $errorString .="But Upload avatar images with jpg,jpeg,gif,png extensions and file size should be less than 2 MB";

                                    $avatar_url="";

                                }           

                            }



                            $this->Session->setFlash("Holder Information $errormsg1 updated successfully.$errorString",'default', array('class' => 'successmsg'));





                            if(isset($this->data['Action']['redirectpage'])){

                                $sessdata=$this->Session->read('newsortingby');

                                $this->redirect('/'.$sessdata);

                            }else{

                                $this->redirect("/companies/editholder/$holderid");

                            }

                        }else{

                            $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                        }        

                    }else{

                        $this->Session->setFlash('Invalid attempt to update holder information.','default',array('class' => 'msgTXt'));

                        $this->redirect('/companies/holderslist');

                    }



                }else

                {

                    $errmsg = (isset($holdererrormsg['screenname']) && count($holdererrormsg) == 1) ?$holdererrormsg['screenname'] : "Please Fills compulsory fields";

                    $this->Session->setFlash($errmsg,'default',array('class' => 'msgTXt'));

                }

            }





            $this->Holder->id = $holderid;

            $this->data = $this->Holder->read();

            $userid = $this->data['Holder']['user_id'];



            $condition = "id = '".$userid."'";

            $udata = $this->User->find('first',array("conditions"=>$condition));

            $this->set('avatarArray',$udata);  

            $username = $udata['User']['username'];

            $this->set("username",$username);

            $userid = $udata['User']['id'];

            $this->set("userid",$userid);



            # @@@@@@@@@@@@@@@@@@@@@@@@@@   Created by rajesh ganjeer @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#



            App::import("Model", "CoinsHolder");

            $this->CoinsHolder =   & new CoinsHolder();

            $condition_1 = "CoinsHolder.project_id = ".$projectid." AND CoinsHolder.holder_id = ".$this->Holder->id." and CoinsHolder.delete_status='0'";     

            $coindata= $this->CoinsHolder->find('list', array("conditions" => $condition_1,"fields"=>"serialnum",'order'=>'created'));

            $this->set("selectedxcoinsholder",$coindata);



            App::import("Model", "Comment");

            $this->Comment =   & new Comment();



            $this->Comment->bindModel(array('belongsTo'=>array(

            'CoinsHolder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Comment.coin_holder_id = CoinsHolder.id'

            )

            )));



            $condition_2 = "Comment.project_id = ".$projectid." AND Comment.holder_id = ".$this->Holder->id." and Comment.delete_status='0'";     

            $commentdata = $this->Comment->find('all', array("conditions" => $condition_2));              

            $j=0;

            foreach($commentdata as $commentdatavalues)

            {

                $var = explode(" ",$commentdatavalues['Comment']['created']);

                $commentvalue[$j]= date('m-d-Y', strtotime($var[0]))." ".$commentdatavalues['CoinsHolder']['serialnum'];

                $j++;

            }    

            $this->set("selectedxcomment",$commentvalue);



            # @@@@@@@@@@@@@@@@@@@@@@@@@@   finished by rajesh ganjeer @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#



            

            // STEP : GET HOLDER MESSAGE DROP DOWN LIST 

            $holderMessageList=$this->getMemberMessageDropDownList($this->Holder->id, $projectid);

            $this->set("holderMessageList",$holderMessageList);

            

            // STEP SUBSCRIPTION TYPE ARRAY

            $userSubscriptionTypes= $this->getSubscriptionTypesArray();

            $this->set("userSubscriptionTypes",$userSubscriptionTypes);



            ##country state default selection

            $this->set("selectedcountry","");

            $this->set("selectedstate","");

            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



            

               // STEP : GET Memebr TYpe DROP DOWN LIST 

            $projectmembertypes=$this->getMemberTypesListByProject($projectid);

            $this->set("projectmembertypes",$projectmembertypes);

             App::import("Model", "MemberType");  

            $this->MemberType =  & new MemberType();

            $membertypeforholder=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_HOLDER, $projectid);

            $sel_member_type= $membertypeforholder['MemberType']['id'];

             // STEP : GET Donation Level DROP DOWN LIST 

            $projectdonationlevel=$this->getDonationLevelsListByProject($projectid);

            $this->set("projectdonationlevel",$projectdonationlevel);

            ##check default dropdowns



            if($this->data['Holder']['country']){

                $conid = $this->data['Holder']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if($this->data['Holder']['state']){

                    $statid = $this->data['Holder']['state'];

                    $this->set("selectedstate",$statid);

                }

            }

            ##end country state default selection



        }

        /*

        * Function name   : editnonholder()

        * Description : This function used to edit holder information

        * Created On      : 01-03-11 (09:08pm)

        *

        */

        function editnonholder($holderid){

            ##check user session live or not

            $this->session_check_user();

            $this->set("recordid",$holderid);

            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '21'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      



             /**

            * Add member is holder or non holder at session for its other tabs 

            */

            $this->Session->delete('projecteditmember');

            $this->Session->write("projecteditmember","editnonholder");  

            $projecteditmember = $this->Session->read("projecteditmember");        

            $this->set('projecteditmember',$projecteditmember);

            

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid=$project_id;    







            ##check empty data

            if(!empty($this->data)) {

                $errorString='';

				$uniqueHolder = $this->Holder->isUniqueScreenName($this->data['Holder']['screenname'], $project_id, $holderid);

                $this->Holder->set($this->data);



                $holdererrormsg = $this->Holder->invalidFields();

                if ($uniqueHolder == false) {

                    $holdererrormsg['screenname'] = 'Screen name already exists. Please provide another screen name.';

                }



                ##checking server validation

                if(!$holdererrormsg){

                    $errormsg1='';

                    if($this->data['Holder']['id'] !=''){

                        if($this->data['User']['password']!='' && $this->data['User']['id'] !=''){

                            $this->data['User']['password'] = md5($this->data['User']['password']);



                            if($this->User->Save($this->data['User'])){

                                $errormsg1 = "and Password";

                            }

                        }

                        

                          if($this->data['Holder']['subscription_type_id']){

                            //echo "<pre>"; print_r($this->data['Holder']['subscription_type_id']);  echo "</pre>";

                            $subscription_types=implode(",",$this->data['Holder']['subscription_type_id']);

                            $this->data['Holder']['subscription_type_id']=$subscription_types;

                        }else{

                            $this->data['Holder']['subscription_type_id']="";

                        }

                        

                        $dateFormat = explode('-',$this->data['Holder']['birthday']);

                        $birthDate = $dateFormat[2].'-'.$dateFormat[0].'-'.$dateFormat[1];

                        $this->data['Holder']['birthday'] = $birthDate;

                        

                        

                        if($this->Holder->Save($this->data['Holder'])){



                              //STEP : Validate avtar image and upload             

                            if($_FILES["avatar"]["tmp_name"]!="")

                            {

                                if ((($_FILES["avatar"]["type"] == "image/gif") || ($_FILES["avatar"]["type"] == "image/jpeg") || ($_FILES["avatar"]["type"] == "image/png") || ($_FILES["avatar"]["type"] == "image/jpg") || ($_FILES["avatar"]["type"] == "image/pjpeg")) && ($_FILES["avatar"]["size"] < 2097152) )

                                {

                                    $ext=explode("/",$_FILES["avatar"]["type"]);

                                    if ($_FILES["avatar"]["error"] > 0)

                                    {

                                        $errorString .="Error in uploading avatar image file.Try again.";

                                    }

                                    else

                                    {   

                                         $user_avatar_folder="img/avatar/";

                                         $filePath =  $user_avatar_folder. DS . $project_id . DS;

                                         $this->File->setDestPath($filePath);

                                        // $file_name1 = $this->File->setFileName($_FILES["avatar"]["name"]); 

                                         $ext = explode(".",$_FILES["avatar"]["name"]);

                                          $ext=$ext[1];

                                         $tmp1 = $_FILES["avatar"]['tmp_name'];

                                         $width = 100;

                                         $height = 100;

                                         // Get new dimensions

                                         list($width_orig, $height_orig) = getimagesize($tmp1);

                                         $ratio_orig = $width_orig/$height_orig;



                                        if ($width/$height > $ratio_orig) {

                                            $width = $height*$ratio_orig;

                                        } else {

                                            $height = $width/$ratio_orig;

                                        }



                                        

                                      /*  $ext=explode(".",$_FILES["avatar"]["name"]);

                                        $ext=$ext[1];

                                        $up_dir="img/avatar/".$project_id."/"; */ 

                                        $filename=$userid.".".$ext;

                                        if (file_exists($filePath))

                                        {

                                           chmod($filePath,0777);

                                           $fileNamesidea = $this->File->uploadlogo($filename,$tmp1,true,$width."x".$height);  

                                         //   move_uploaded_file($_FILES["avatar"]["tmp_name"],$up_dir.$filename);

                                        }

                                        else

                                        {

                                            mkdir($filePath, 0777);

                                            $fileNamesidea = $this->File->uploadlogo($filename,$tmp1,true,$width."x".$height);  

                                         //   move_uploaded_file($_FILES["avatar"]["tmp_name"],$up_dir.$filename);



                                        }  

                                        $avatar_url=$user_avatar_folder.$project_id."/".$fileNamesidea;

                                        $this->Holder->id = $holderid;

                                        $this->data = $this->Holder->read();

                                        $userid = $this->data['Holder']['user_id'];

                                        if($userid){

                                            $user_arr['avatar_url']=$avatar_url; //upload image url 

                                            $user_arr['id']=$userid;

                                            $this->User->save($user_arr);

                                            $errorString=""; 

                                        }else{

                                             $errorString .="Error in uploading avatar image file.Try again."; 

                                        }

                                       

                                    }

                                   

                                }

                                else

                                {

                                    $errorString .="But Upload avatar images with jpg,jpeg,gif,png extensions and file size should be less than 2 MB";

                                    $avatar_url="";

                                }           

                            }



                            $this->Session->setFlash("Holder Information $errormsg1 updated successfully.$errorString",'default', array('class' => 'successmsg'));





                            if(isset($this->data['Action']['redirectpage'])){

                                $sessdata=$this->Session->read('newsortingby');

                                $this->redirect('/'.$sessdata);

                            }else{

                                $this->redirect("/companies/editnonholder/$holderid");

                            }

                        }else{

                            $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                            $this->redirect('/companies/nonholderslist');

                        }        

                    }else{

                        $this->Session->setFlash('Invalid attempt to update holder information.','default',array('class' => 'msgTXt'));

                        $this->redirect('/companies/nonholderslist');

                    }



                }else{

                    $errmsg = (isset($holdererrormsg['screenname']) && count($holdererrormsg) == 1) ?$holdererrormsg['screenname'] : "Please Fills compulsory fields";

                    $this->Session->setFlash($errmsg,'default',array('class' => 'msgTXt'));

                }

            }

			

			$this->Holder->id = $holderid;

            $this->data = $this->Holder->read();

			//pr($this->data);

            $userid = $this->data['Holder']['user_id'];



            $condition = "id = '".$userid."'";

            $udata = $this->User->find('first',array("conditions"=>$condition));

            $this->set('avatarArray',$udata);  

            $username = $udata['User']['username'];

			$password = $udata['User']['password'];

            $this->set("username",$username);

            $userid = $udata['User']['id'];

            $this->set("userid",$userid);

			$this->set("password",$password);



            

            // STEP : GET HOLDER MESSAGE DROP DOWN LIST 

            $holderMessageList=$this->getMemberMessageDropDownList($this->Holder->id, $projectid);

            $this->set("holderMessageList",$holderMessageList);

            

            // STEP SUBSCRIPTION TYPE ARRAY

            $userSubscriptionTypes= $this->getSubscriptionTypesArray();

            $this->set("userSubscriptionTypes",$userSubscriptionTypes);



            ##country state default selection

            $this->set("selectedcountry","");

            $this->set("selectedstate","");

            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



               // STEP : GET Memebr TYpe DROP DOWN LIST 

            $projectmembertypes=$this->getMemberTypesListByProject($projectid);

            $this->set("projectmembertypes",$projectmembertypes);

             App::import("Model", "MemberType");  

            $this->MemberType =  & new MemberType();

            $membertypeforholder=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_NON_HOLDER, $projectid);

            $sel_member_type= $membertypeforholder['MemberType']['id'];

             // STEP : GET Donation Level DROP DOWN LIST 

            $projectdonationlevel=$this->getDonationLevelsListByProject($projectid);

            $this->set("projectdonationlevel",$projectdonationlevel);

            

            ##check default dropdowns



            if($this->data['Holder']['country']){

                $conid = $this->data['Holder']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if($this->data['Holder']['state']){

                    $statid = $this->data['Holder']['state'];

                    $this->set("selectedstate",$statid);

                }

            }

            ##end country state default selection



        }

        

        

        /*

        * Function name   : membercomments()

        * Description : This function is used to show given holder comments list

        * Created On      : 8th Feb 2012

        *

        */



        function membercomments($holderid){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"membercomments");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $this->set('project_name',$project_name);   

            $this->set("recordid",$holderid);

            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '5'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      



             /* Project Details */

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    

            

             /* Get Session Member profile edit */

             $projecteditmember = $this->Session->read("projecteditmember");        

             $this->set('projecteditmember',$projecteditmember);

       

                      /**

           * Fetch Holder Comments Listing 

           */

            App::import("Model", "Comment");

            $this->Comment =  & new Comment();

             if(!empty($this->data))

            {      

                $searchkey=$this->data['Companies']['searchkey'];

            }else{

                $searchkey="";

            }

            $condHolderComments=''; //$this->Comment->getCommentsByHolderCondition($holderid, $project_id,$searchkey);

            $field='';

            $this->Pagination->sortByClass    = 'Comments'; ##initaite pagination 

          /*  if($_GET['sortBy']=="comment_type_name" || $_GET['sortBy']=="is_additional_allowed"){

               $this->Pagination->sortByClass    = 'CommentType';  

            }   */

            $this->Pagination->total= count($this->Comment->getCommentAndRepliesByHolder($holderid,$project_id, $searchkey));    

            list($order,$limit,$page) = $this->Pagination->init($condHolderComments,$field);            

            $holderCommentList = $this->Comment->getCommentAndRepliesByHolder($holderid, $project_id, $searchkey,$order, $limit, $page);



            ##set Coinset data in variable            

            $this->set("holdercommentlist",$holderCommentList);



          



          }

        

        

        /*

        * Function name   : memberemails()

        * Description : This function is used to show given holder comments list

        * Created On      : 8th Feb 2012

        *

        */



        function memberemails($holderid){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"memberemails");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $this->set('project_name',$project_name);   

            $this->set("recordid",$holderid);

            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '5'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      



             /* Project Details */

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    

            

             /* Get Session Member profile edit */

             $projecteditmember = $this->Session->read("projecteditmember");        

             $this->set('projecteditmember',$projecteditmember);

       

              /**

           * Fetch Holder Email Listing 

           */

            App::import("Model", "CommunicationTaskExecutionReport");

            $this->CommunicationTaskExecutionReport =  & new CommunicationTaskExecutionReport();

             if(!empty($this->data))

            {      

                $searchkey=$this->data['Companies']['searchkey'];

            }else{

                $searchkey="";

            }

            $condHolderEmails=$this->CommunicationTaskExecutionReport->getEmailsListByHolderCondition($holderid, $project_id,"", $searchkey);

            $field='';

            $this->Pagination->sortByClass    = 'CommunicationTaskExecutionReport'; ##initaite pagination 

            $this->Pagination->total= count($this->CommunicationTaskExecutionReport->getEmailsListByHolder($condHolderEmails));    

            list($order,$limit,$page) = $this->Pagination->init($condHolderEmails,$field);            

            $holderEmailList = $this->CommunicationTaskExecutionReport->getEmailsListByHolder($condHolderEmails,$order, $limit, $page);



            ##set Coinset data in variable            

            $this->set("holderemaillist",$holderEmailList);

           



          



          }

          

          

       /*

        * Function name   : membermessages()

        * Description : This function is used to show given holder comments list

        * Created On      : 8th Feb 2012

        *

        */



        function membermessages($holderid){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"membermessages");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $this->set('project_name',$project_name);   

            $this->set("recordid",$holderid);

            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '5'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      



             /* Project Details */

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    

            

             /* Get Session Member profile edit */

             $projecteditmember = $this->Session->read("projecteditmember");        

             $this->set('projecteditmember',$projecteditmember);

       

              /**

           * Fetch Holder Messages Listing 

           */

            App::import("Model", "MessageHolder");

            $this->MessageHolder =  & new MessageHolder();

             if(!empty($this->data))

            {      

                $searchkey=$this->data['Companies']['searchkey'];

            }else{

                $searchkey="";

            }

            $condHolderMessages=$this->MessageHolder->getMessagesByHolderCondition($holderid, $project_id,$searchkey);

            $field='';

            $this->Pagination->sortByClass    = 'Message'; ##initaite pagination 

            $this->Pagination->total= count($this->MessageHolder->getMessagesByHolder($condHolderMessages));    

            list($order,$limit,$page) = $this->Pagination->init($condHolderMessages,$field);            

            $holderMessageList = $this->MessageHolder->getMessagesByHolder($condHolderMessages,$order, $limit, $page);



            ##set Coinset data in variable            

            $this->set("holdermessagelist",$holderMessageList);



          



          } 

          

       /*

        * Function name   : memberevents()

        * Description : This function is used to show given holder comments list

        * Created On      : 8th Feb 2012

        *

        */



        function memberevents($holderid){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"memberevents");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $this->set('project_name',$project_name);   

            $this->set("recordid",$holderid);

            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '5'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      



             /* Project Details */

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    

            

             /* Get Session Member profile edit */

             $projecteditmember = $this->Session->read("projecteditmember");        

             $this->set('projecteditmember',$projecteditmember);

             

                    /**

           * Fetch Holder Events  Listing 

           */

            App::import("Model", "EventInvitation");

            $this->EventInvitation =  & new EventInvitation();

             if(!empty($this->data))

            {      

                $searchkey=$this->data['Companies']['searchkey'];

            }else{

                $searchkey="";

            }

            $condHolderEvents=$this->EventInvitation->getEventsByHolderCondition($holderid, $project_id,$searchkey);

            $field='';

            $this->Pagination->sortByClass    = 'RecurringEvent'; ##initaite pagination 

             if($_GET['sortBy']=="tickets_booked" || $_GET['sortBy']=="invite_status"  || $_GET['sortBy']=="member_price" ){

               $this->Pagination->sortByClass    = 'EventInvitation';  

            }

            $this->Pagination->total= count($this->EventInvitation->getEventsByHolder($condHolderEvents));    

            list($order,$limit,$page) = $this->Pagination->init($condHolderEvents,$field);            

            $holderEventList = $this->EventInvitation->getEventsByHolder($condHolderEvents,$order, $limit, $page);



            ##set Coinset data in variable            

            $this->set("holdereventlist",$holderEventList);

       

          }          

          

          /*

        * Function name   : memberevents()

        * Description : This function is used to show given holder comments list

        * Created On      : 8th Feb 2012

        *

        */



        function memberpoints($holderid){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"memberpoints");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $this->set('project_name',$project_name);   

            $this->set("recordid",$holderid);

            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '5'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      



             /* Project Details */

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    

            

             /* Get Session Member profile edit */

             $projecteditmember = $this->Session->read("projecteditmember");        

             $this->set('projecteditmember',$projecteditmember);

             

               

           /**

           * Fetch Holder Points and level  Listing 

           */

            App::import("Model", "PointArchiveUser");

            $this->PointArchiveUser =  & new PointArchiveUser();

             if(!empty($this->data))

            {      

                $searchkey=$this->data['Companies']['searchkey'];

            }else{

                $searchkey="";

            }

            $condHolderPoints=''; //$this->PointArchiveUser->getPointsByHolderCondition($holderid, $project_id,$searchkey);

            $field='';

            $this->Pagination->sortByClass    = 'PointArchiveUser'; ##initaite pagination 

            if($_GET['sortBy']=="point_name" || $_GET['sortBy']=="is_level"){

               $this->Pagination->sortByClass    = 'MasterPoint';  

            }

            $this->Pagination->total= count($this->PointArchiveUser->getPointsByHolder($holderid, $project_id,$searchkey));    

            list($order,$limit,$page) = $this->Pagination->init($condHolderPoints,$field); 

            if($_GET['sortBy']=="point_level"){

                  $order=" point_level ".$_GET['direction'];

             }

             

            $holderPointList = $this->PointArchiveUser->getPointsByHolder($holderid, $project_id,$searchkey,$order, $limit, $page);



            ##set Coinset data in variable            

            $this->set("holderpointlist",$holderPointList);   

       

          }   

          

       

        /*

        * Function name   : memberevents()

        * Description : This function is used to show given holder comments list

        * Created On      : 8th Feb 2012

        *

        */



        function memberpurchases($holderid){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"memberpurchases");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $this->set('project_name',$project_name);   

            $this->set("recordid",$holderid);

            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '5'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      



             /* Project Details */

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    

            

             /* Get Session Member profile edit */

             $projecteditmember = $this->Session->read("projecteditmember");        

             $this->set('projecteditmember',$projecteditmember);

       

                        

            /**

           * Fetch Holder Points and level  Listing 

           */

            App::import("Model", "CoinsHolder");

            $this->CoinsHolder =  & new CoinsHolder();

             if(!empty($this->data))

            {      

                $searchkey=$this->data['Companies']['searchkey'];

            }else{

                $searchkey="";

            }

            $condCoins=''; //$this->PointArchiveUser->getPointsByHolderCondition($holderid, $project_id,$searchkey);

            $field='';

            $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination 

            if($_GET['sortBy']=="coinset_name" ){

               $this->Pagination->sortByClass    = 'Coinset';  

            } 

               $this->Pagination->total= count($this->CoinsHolder->getAllRegisteredCoinsOfProject($project_id,$holderid, $searchkey));    

            list($order,$limit,$page) = $this->Pagination->init($condCoins,$field); 

             if($order == "CoinsHolder.id ASC"){

                $order = "CoinsHolder.id DESC";

            }

           /* if($_GET['sortBy']=="point_level"){

                  $order=" point_level ".$_GET['direction'];

             }    */

             

            $holderCoinstList = $this->CoinsHolder->getAllRegisteredCoinsOfProject($project_id, $holderid, $searchkey,$order, $limit, $page);



            ##set Coinset data in variable            

            $this->set("holdercoinlist",$holderCoinstList);   

          }   

          

                     

        

        /*

        * Function name   : memberhistory()

        * Description : This function is used to show given holder comments list

        * Created On      : 8th Feb 2012

        *

        */



        function memberhistory($holderid){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"memberhistory");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $this->set('project_name',$project_name);   

            $this->set("recordid",$holderid);

            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '5'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      



             /* Project Details */

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    

            

             /* Get Session Member profile edit */

             $projecteditmember = $this->Session->read("projecteditmember");        

             $this->set('projecteditmember',$projecteditmember);

       

          }   

          

                     

        

        /*******************************************************************

        * Function Name: register_coin

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 19 Feb, 2011

        ********************************************************************/

        function register_coin(){



            //Configure::write('debug', 2);        

            ##check user session live or not



            $this->session_check_user();

            

            if($this->Session->read("iframe_session"))

                $this->layout= 'iframelayout';

            else

                $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url',"register_coin");





            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            //echo $project_id; die;            



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);            



            $projectDetails=$this->getprojectdetails($project_id);    

            

           

            $numunites_count = $this->getcoinsetsunitbyprojectid($project_id);

            $this->set('numunites_count',$numunites_count);  

            

            if($numunites_count=="" || $numunites_count== 0 ) {

                 if($this->Session->read("iframe_session"))

                      $this->redirect('/companies/iframe_dashboard');

                 else

                    $this->redirect('/companies/dashboard');

            }



            $this->set('project',$projectDetails);



            $userid = $this->Session->read("User.User.id");

                       

            $conditioncoinset = "project_id = '".$projectDetails['Project']['id']."' and  active_status='1' and delete_status='0'";

            ##check already exists company name

            $consetdatacond = $this->Coinset->find('first',array("conditions"=>$conditioncoinset));

            $this->set('coinsdetail',$consetdatacond);







            if(isset($this->data)){                  

                $strcoin = $this->data['Coinset']['coinserial'];        

                $serz = $this->data['Coinset']['coinserial'];



                $serz=str_pad($serz,7,"0",STR_PAD_LEFT);



                $errorString ='';            



                if(trim($this->data['Coinset']['coinserial']) == ''){            

                    $errorString .="Please insert Coin Serial.<br/>";    

                }

                

                $verify_code = $this->data['Coinset']['code'];

                $coinserial = $this->data['Coinset']['coinserial'];

                

                $coin_verify_code = $this->Coinset->query("select CAST(startserialnum as SIGNED ) as startserialnum,CAST(endserialnum as SIGNED ) as endserialnum,verifycode from coinsets where (startserialnum >=$coinserial and endserialnum <=$coinserial) or (startserialnum <=$coinserial and endserialnum >=$coinserial) and project_id=$project_id");    

                                

                if($projectDetails['Project']['coins_verificationshow']==1){

                   

                   //$fetch_code=$coin_verify_code[0]['coinsets']['verifycode']; 



                    if(trim($this->data['Coinset']['code']) == '')

                    {

                        $errorString .="Please insert code.<br/>";

                    }

                   /* else

                    if(trim($this->data['Coinset']['code'])!=$fetch_code)

                    {

                        $errorString .="Incorrect Verification code.<br/>";

                    }

                    */

                } 

                else

                {

                    $coinserial = $this->data['Coinset']['coinserial'];



                    $conditions = array(

                    'Coinset.project_id' => $project_id,

                    "Coinset.startserialnum <= $coinserial",

                    "Coinset.endserialnum >= $coinserial",

                    );

                    $selecteddata = $this->Coinset->find('first', array('conditions' => $conditions));    

                    

                 /*   if(trim($this->data['Coinset']['code']) == '' && !empty($selecteddata['Coinset']['verifycode'] ))

                    {

                        $errorString .="Please insert code.<br/>";

                    }

                   */

                }

                               

                if(!in_array(strlen($this->data['Coinset']['coinserial']), array(3,7,10))) {

                    $errorString .="Please insert Correct Coin Serial.<br/>";    

                }



                if(trim($errorString) !=''){                                  

                    $this->Session->setFlash($errorString,'default',array('class' => 'errormsg1'));

                }

                else

                {    

                    $coinset_value1=$this->data['Coinset']['coinserial'];



                    $code = trim($this->data['Coinset']['code']);    

                

                    if(!is_numeric($coinset_value1)){

                        $coinset_value1=substr($coinset_value1, 3, (strlen($coinset_value1)-3)); 



                    }

                    if(!is_numeric(($strcoin)))

                    {

                        $strcoin=substr($strcoin, 3, (strlen($strcoin)-3)); 

                        $coinset_prefix=substr($this->data['Coinset']['coinserial'], 0, 3);

                    }

                    

                    

                   if(!empty($this->data['Coinset']['coinserial'])){







                        $conditions = array(

                        'CoinsHolder.project_id' => $project_id,

                        'CoinsHolder.serialnum' => $this->data['Coinset']['coinserial'],

                        'CoinsHolder.active_status' => '1',

                        'CoinsHolder.delete_status' => '0'

                        );    



                        if ($this->CoinsHolder->hasAny($conditions)) {

                                                                                                                                  

                            if($projectDetails['ProjectType']['istransferable']==0)

                            {                               

                                $this->Session->setFlash('This coin is already registered.This coin is not transferable.Please try another coin.','default',array('class' => 'errormsg1'));                                      

                                $this->redirect(array('controller' => 'companies', 'action' => 'register_coin'));

                            }

                            else

                            {

                                

                            //find all the coin holders holding the coin

                             $existing_coinholders = $this->CoinsHolder->find('all', array('conditions' => $conditions));    

                                

                            //find current login user holder details

                            $current_holder_info = $this->Holder->find('first', array('conditions' =>  "Holder.user_id  = '".$userid."' and Holder.project_id=".$project_id." and Holder.active_status='1' and Holder.delete_status='0'"));

                            

                                                            

                            $coinserial = $this->data['Coinset']['coinserial'];



                            //find the current coinset details

                            $conditions = array(

                            'Coinset.project_id' => $project_id,

                            "Coinset.startserialnum <= $coinserial",

                            "Coinset.endserialnum >= $coinserial",

                            );

                            $selectcoindata = $this->Coinset->find('first', array('conditions' => $conditions));    

                            

                             //see if the current user is again registering the same coin

                            $already_register_coin = $this->CoinsHolder->find('first', array('conditions' =>  "CoinsHolder.holder_id  = '".$current_holder_info['Holder']['id']."' and CoinsHolder.coinset_id='".$selectcoindata['Coinset']['id']."' and CoinsHolder.project_id=".$project_id." and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0' and CoinsHolder.serialnum='".$coinserial."'"));

                            

                            if(!empty($already_register_coin))      //do not allow him to register again

                            {

                                $this->Session->setFlash("You have already register ".$coinserial." coin",'default',array('class' => 'errormsg1'));

                                

                                $this->redirect('/companies/register_coin');    

                            }

                                

                            //register the coin which is already register to new coin register member

                            $this->data['CoinsHolder']['project_id']=$project_id;

                            $this->data['CoinsHolder']['coinset_id']=$selectcoindata['Coinset']['id'];

                            $this->data['CoinsHolder']['is_current_holder']='1';



                            $this->data['CoinsHolder']['holder_id']=$current_holder_info['Holder']['id'];

                            $this->data['CoinsHolder']['serialnum']=$coinserial;

                            

                            $this->CoinsHolder->save($this->data['CoinsHolder']);     

                                

                             // Update Holder member type as 'Holder' after registing coin  

                              App::import("Model", "MemberType");  

                             $this->MemberType =  & new MemberType();                

                            $holderarr['Holder']['id']=$current_holder_info['Holder']['id'];

                            $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_HOLDER, $project_id);

                            $holderarr['Holder']['member_type']= $member_type['MemberType']['id']; 

                            $this->Holder->save($holderarr);               

                                

                            $conditioninfo = " EmailTemplate.email_template_name= 'COIN HAS BEEN REGISTERED BY ANOTHER MEMBER' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                            $mailMessageinfo = $this->EmailTemplate->find('first',array('conditions' => $conditioninfo));

                                

                                

                            if(!empty($projectDetails['Project']['url']))

                                $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                            else

                                $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];      

                                

                             $conditions = array(

                            'CoinsHolder.project_id' => $project_id,

                            'CoinsHolder.serialnum' => $this->data['Coinset']['coinserial'],

                            'CoinsHolder.active_status' => '1',

                            'CoinsHolder.delete_status' => '0'

                            );                      

                  

                             

                             for($i=0;$i<count($existing_coinholders);$i++)

                             {

                                 

                                 //update the coin holder current_holder status to 0 , as it is being tranfer

                                 $coin_holder=array();

                                 $coin_holder['CoinsHolder']['id']=$existing_coinholders[$i]['CoinsHolder']['id'];

                                 $coin_holder['CoinsHolder']['is_current_holder']='0';

                                 

                                 $this->CoinsHolder->save($coin_holder['CoinsHolder']);     

                                 

                                 //find the holder currently holding coin to send him update that this coin is register by another                                 

                                 $holder_details_info = $this->Holder->find('first', array('conditions' =>  "Holder.id  = '".$existing_coinholders[$i]['CoinsHolder']['holder_id']."' and Holder.active_status='1' and Holder.delete_status='0'"));

                                 

                                 

                                 

                                 if(is_array($mailMessageinfo) && !empty($mailMessageinfo)) 

                                 {



                                    if(!empty($projectDetails['Project']['system_name']))

                                        $pt_new_name=$projectDetails['Project']['system_name'];

                                    else

                                        $pt_new_name=$projectDetails['Project']['project_name'];





                                    $keyStringArray = array('[[EMAIL_ADDRESS]]'=> $holder_details_info['Holder']['email'],

                                    '[[COIN_SERIAL]]'=>$this->data['CoinsHolder']['serialnum'],

                                    '[[COIN_REG_DATE]]'=>Date('Y-m-d'),

                                    '[[PROJECT_NAME]]'=>$pt_new_name,

                                    '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);





                                    $mailBody=$mailMessageinfo['EmailTemplate']['content'];

                                    

                                     /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/   

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    $mailBody.=$mailfooter;

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    

                                    

                                       // Set path to inserted image 

                                       $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                                

                                 /*   if(!empty($keyStringArray)){

                                        foreach($keyStringArray as $key=>$val){

                                            $mailBody = str_replace($key,$val,$mailBody);

                                        }

                                    }  */



                                    $subject  = $mailMessageinfo['EmailTemplate']['subject'];              

                                    $from = $mailMessageinfo['EmailTemplate']['sender']; //$projectDetails['Project']['fromemail'];

                                    $fromname = $mailMessageinfo['EmailTemplate']['sender'];

                                    $to = $holder_details_info['Holder']['email'];



                                     /**

                                        * New Email Temp replacement code for data Elements 

                                        */

                                        //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                                $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                         //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                                 $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $this->data['CoinsHolder']['serialnum'];

                                                 $dataEleValuesArray[DATA_ELEMENT_COIN_REGISTRATION_DATE]= date('m-d-Y');

                                                 $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                            

                                         //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 

                                                 $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                                 $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                        

                                        $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname,$mailMessageinfo['EmailTemplate']['send_cc_email_to']);

                                  

                            }

                                 

                      }

                                

                                $this->Session->setFlash('Thanks for registering coin.','default',array('class' => 'successmsg'));

                                    

                                $this->Point->triggerPoints(REGISTER_COIN,$project_id,$userid);  //trigger for coin register

                                

                                $this->redirect('/companies/view_registeredcoins');



                        }

                            

                        }







                    }

 

                    

                 

                    $isvalid=false;

                    if(!empty($this->data['Coinset']['code'])){

                        $condition = " Coinset.project_id='".$project_id."' and Coinset.verifycode='".$code."' and '".$strcoin."'>=Coinset.startserialnum and '".$strcoin."'<=Coinset.endserialnum and  Coinset.active_status='1' and Coinset.delete_status='0'";

                        $coinsets = $this->Coinset->find('all', array('conditions' => $condition));    

                    }

                    else{

                        $condition = " Coinset.project_id='".$project_id."' and Coinset.active_status='1' and

                        '".$strcoin."'>=CAST(Coinset.startserialnum as SIGNED ) and '".$strcoin."'<=CAST(Coinset.endserialnum as SIGNED ) and     Coinset.delete_status='0'";



                        $coinsets = $this->Coinset->find('all', array('conditions' => $condition));    

                    }

                   

                   

                    if($projectDetails['Project']['coins_verificationshow']==1){



                        if(is_array($coinsets) and !empty($coinsets)){



                            foreach ($coinsets as $coinset) {



                                $coinset_id=$coinset['Coinset']['id'];

                                $verifycode=trim($coinset['Coinset']['verifycode']);

                                $startserialnum=$coinset['Coinset']['startserialnum'];

                                $endserialnum=$coinset['Coinset']['endserialnum'];

                                //echo $coinset_value1; echo "start".$startserialnum;



                                if($coinset_value1 >= $startserialnum && $coinset_value1 <= $endserialnum) 

                                {



                                    $coinset= $this->Coinset->findById($coinset_id);

                                    if($coinset['Coinset']['serialprefix']!=$coinset_prefix && !empty($coinset_prefix))

                                    {

                                        $this->Session->setFlash('Coinset Prefix does not match with serial range','default',array('class' => 'errormsg1'));



                                        $this->redirect('/companies/register_coin');



                                    } 

                                    //if($verifycode==$code)

                                    //{

                                    $isvalid=true;



                                    $holder_details = $this->Holder->find('first', array('conditions' =>  "Holder.user_id  = '".$userid."' and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'"));



                                    //checking whether it is already registered or not

                                    $condition1 = "CoinsHolder.coinset_id  = '".$coinset_id."' and  CoinsHolder.serialnum='".$coinset_value1."' and CoinsHolder.is_current_holder  = '1' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";



                                    $coinset_alregistered = $this->CoinsHolder->find('first', array('conditions' => $condition1));

                                    if(is_array($coinset_alregistered) && !empty($coinset_alregistered)) {



                                        if($projectDetails['ProjectType']['istransferable']==0){                        

                                            $this->Session->setFlash('This coin is already registered.This coin is not transferable.Please try another coin.','default',array('class' => 'errormsg1'));

                                            $this->redirect('/companies/register_coin');

                                        }



                                        if($projectDetails['ProjectType']['simple_cointransfer']==0){

                                            $this->Session->setFlash('This coin is already registered.Please send coin transfer request.','default',array('class' => 'errormsg1'));

                                            $this->redirect('/companies/transfer_request');

                                        }



                                        if($projectDetails['ProjectType']['simple_cointransfer']==1){                

                                            $condition2 = "CoinsHolder.holder_id   = '".$coinset_alregistered['CoinsHolder']['holder_id']."' and CoinsHolder.serialnum = '".$coinset_alregistered['CoinsHolder']['serialnum']."' " ;

                                            $oldcoinholder = $this->CoinsHolder->find('first', array('conditions' => $condition2));



                                            $this->data['CoinsHolder1']['id']=$oldcoinholder['CoinsHolder']['id'];

                                            $this->data['CoinsHolder1']['is_current_holder']='0';

                                            $this->CoinsHolder->save($this->data['CoinsHolder1']);    

                                        }

                                    }



                                    $this->data['CoinsHolder']['project_id']=$project_id;

                                    $this->data['CoinsHolder']['coinset_id']=$coinset_id;

                                    $this->data['CoinsHolder']['is_current_holder']='1';



                                    $this->data['CoinsHolder']['holder_id']=$holder_details['Holder']['id'];

                                    $this->data['CoinsHolder']['serialnum']=$serz;

                                    //$this->data['CoinsHolder']['serialnum']=$coinset_value1;



                                    $this->CoinsHolder->save($this->data['CoinsHolder']);                    

                                  

                                    // Update Holder member type as 'Holder' after registing coin

                                     App::import("Model", "MemberType");  

                                    $this->MemberType =  & new MemberType();                  

                                    $holderarr['Holder']['id']=$holder_details['Holder']['id']; 

                                    $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_HOLDER, $project_id);

                                    $holderarr['Holder']['member_type']= $member_type['MemberType']['id']; 

                                    $this->Holder->save($holderarr);               

                                

                                

                                    $condition = " EmailTemplate.email_template_name= 'COIN REGISTER CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                                    $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                                    if(is_array($mailMessage) && !empty($mailMessage)) 

                                    {   

                                        $mailBody=$mailMessage['EmailTemplate']['content'];

                                         /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button    **/      

                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                        $condition = "id='1'";

                                        $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                        $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                        $mailBody.=$mailfooter;

                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                       

                                        

                                                                               // Set path to inserted image 

                                        $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                                        $subject  = $mailMessage['EmailTemplate']['subject'];              

                                        $from = $mailMessage['EmailTemplate']['sender'];        //$projectDetails['Project']['fromemail'];

                                        $fromname = $mailMessage['EmailTemplate']['sender'];        //$projectDetails['Project']['fromname'];

                                        $to = $holder_details['Holder']['email'];

                                        

                                        /**

                                        *   OLD CODE

                                        if(!empty($projectDetails['Project']['system_name']))

                                            $pt_new_name=$projectDetails['Project']['system_name'];

                                        else

                                            $pt_new_name=$projectDetails['Project']['project_name'];



                                         if(!empty($projectDetails['Project']['url']))

                                             $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                         else

                                            $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];                        

                                          $keyStringArray = array('[[HOLDER_FIRSTNAME]]'=> $this->data['Holder']['screenname'],

                                        '[[COIN_SERIAL]]'=>$this->data['CoinsHolder']['serialnum'],

                                        '[[COIN_REG_DATE]]'=>Date('Y-m-d'),

                                        '[[PROJECT_NAME]]'=>$pt_new_name,

                                        '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                                        

                                         if(!empty($keyStringArray)){

                                            foreach($keyStringArray as $key=>$val){

                                                $mailBody = str_replace($key,$val,$mailBody);

                                            }

                                        }

                                        */

                                        

                                       /**

                                        * New Email Temp replacement code for data Elements 

                                        */

                                        //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                                $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                         //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                                 $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $this->data['CoinsHolder']['serialnum'];

                                                 $dataEleValuesArray[DATA_ELEMENT_COIN_REGISTRATION_DATE]= date('m-d-Y');

                                                 $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                            

                                         //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 

                                                 $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                                 $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                        

                                        $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                                        

                                       /** $ccemail  = $mailMessage['EmailTemplate']['send_cc_email'];

                                        

                                        if($ccemail==1)

                                        {

                                            $toccemail=$from;

                                            $this->Sendemail->sendMailContent($toccemail,$from,$subject,$mailBody,$fromname);

                                        }    */

                                        

                                        

                                    }



                                    $this->Session->setFlash('Thanks for registering coin.','default',array('class' => 'successmsg'));

                                    

                                    $this->Point->triggerPoints(REGISTER_COIN,$project_id,$userid);  //trigger for coin register

                                    

                                    $this->redirect('/companies/view_registeredcoins');



                                    /*}

                                    else

                                    {

                                    $this->Session->setFlash('Incorrect verification code.',null,null,'error'); 

                                    $this->redirect('/companies/register_coin');

                                    }*/



                                }





                            }



                            $this->Session->setFlash('Invalid verification Code.','default',array('class' => 'errormsg1'));        

                            $this->redirect('/companies/register_coin');



                        }

                        else

                        {

                            $this->Session->setFlash('Invalid verification Code.','default',array('class' => 'errormsg1'));

                            $this->redirect('/companies/register_coin');

                        }



                    }



                    else{













                        if(is_array($coinsets) and !empty($coinsets)){



                            //foreach ($coinsets as $coinset) {

                            $coinset_id=$coinsets[0]['Coinset']['id'];

                            $verifycode=trim($coinsets[0]['Coinset']['verifycode']);

                            $startserialnum=$coinsets[0]['Coinset']['startserialnum'];

                            $endserialnum=$coinsets[0]['Coinset']['endserialnum'];

                            if($coinset_value1 >= $startserialnum && $coinset_value1 <= $endserialnum) 

                            {





                                //if($verifycode==$code)

                                //{

                                $isvalid=true;



                                $holder_details = $this->Holder->find('first', array('conditions' =>  "Holder.user_id  = '".$userid."' and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'"));



                                //checking whether it is already registered or not

                                $condition1 = "CoinsHolder.coinset_id  = '".$coinset_id."' and  CoinsHolder.serialnum='".$coinset_value1."' and CoinsHolder.is_current_holder  = '1' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";



                                $coinset_alregistered = $this->CoinsHolder->find('first', array('conditions' => $condition1));

                                if(is_array($coinset_alregistered) && !empty($coinset_alregistered)) {



                                    if($projectDetails['ProjectType']['istransferable']==0){                        

                                        $this->Session->setFlash('This coin is already registered.This coin is not transferable.Please try another coin.','default',array('class' => 'errormsg1'));

                                        $this->redirect('/companies/register_coin');

                                    }



                                    if($projectDetails['ProjectType']['simple_cointransfer']==0){

                                        $this->Session->setFlash('This coin is already registered.Please send coin transfer request.','default',array('class' => 'errormsg1'));

                                        $this->redirect('/companies/transfer_request');

                                    }



                                    if($projectDetails['ProjectType']['simple_cointransfer']==1){                

                                        $condition2 = "CoinsHolder.holder_id   = '".$coinset_alregistered['CoinsHolder']['holder_id']."' and CoinsHolder.serialnum = '".$coinset_alregistered['CoinsHolder']['serialnum']."' " ;

                                        $oldcoinholder = $this->CoinsHolder->find('first', array('conditions' => $condition2));



                                        $this->data['CoinsHolder1']['id']=$oldcoinholder['CoinsHolder']['id'];

                                        $this->data['CoinsHolder1']['is_current_holder']='0';

                                        $this->CoinsHolder->save($this->data['CoinsHolder1']);    

                                    }

                                }



                                $this->data['CoinsHolder']['project_id']=$project_id;

                                $this->data['CoinsHolder']['coinset_id']=$coinset_id;

                                $this->data['CoinsHolder']['is_current_holder']='1';



                                $this->data['CoinsHolder']['holder_id']=$holder_details['Holder']['id'];

                                $this->data['CoinsHolder']['serialnum']=$serz;

                                //$this->data['CoinsHolder']['serialnum']=$coinset_value1;



                                $this->CoinsHolder->save($this->data['CoinsHolder']);    



                                 // Update Holder member type as 'Holder' after registing coin   

                                     App::import("Model", "MemberType");  

                                    $this->MemberType =  & new MemberType();               

                                    $holderarr['Holder']['id']=$holder_details['Holder']['id']; 

                                    $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_HOLDER, $project_id);

                                    $holderarr['Holder']['member_type']= $member_type['MemberType']['id']; 

                                    $this->Holder->save($holderarr);  



                                $condition = " EmailTemplate.email_template_name= 'COIN REGISTER CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                                $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                                if(is_array($mailMessage) && !empty($mailMessage)) 

                                {

                                   



                                    $mailBody=$mailMessage['EmailTemplate']['content'];

                                    /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button      **/    

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    $mailBody.=$mailfooter;

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                   

                                    

                                    // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                                    

                                    $subject  = $mailMessage['EmailTemplate']['subject'];              

                                    $from = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromemail'];

                                    $fromname =$mailMessage['EmailTemplate']['sender'];              // $projectDetails['Project']['fromname'];

                                    $to = $holder_details['Holder']['email'];



                                    /**

                                    *  OLD CODE

                                    *  if(!empty($projectDetails['Project']['system_name']))

                                        $pt_new_name=$projectDetails['Project']['system_name'];

                                    else

                                        $pt_new_name=$projectDetails['Project']['project_name'];



                                    if(!empty($projectDetails['Project']['url']))

                                         $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                    else

                                         $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];    



                                    $keyStringArray = array('[[HOLDER_FIRSTNAME]]'=> $holder_details['Holder']['screenname'],

                                    '[[COIN_SERIAL]]'=>$this->data['CoinsHolder']['serialnum'],

                                    '[[COIN_REG_DATE]]'=>Date('Y-m-d'),

                                    '[[PROJECT_NAME]]'=>$pt_new_name,

                                    '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

   

                                    if(!empty($keyStringArray)){

                                        foreach($keyStringArray as $key=>$val){

                                            $mailBody = str_replace($key,$val,$mailBody);

                                        }

                                    }



                                    */

                                    

                                    /**

                                        * New Email Temp replacement code for data Elements 

                                        */

                                        //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                                $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                         //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                                 $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $this->data['CoinsHolder']['serialnum'];

                                                 $dataEleValuesArray[DATA_ELEMENT_COIN_REGISTRATION_DATE]= date('m-d-Y');

                                                 $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                            

                                         //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 

                                                 $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                                 $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                                 

                                    $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname,$mailMessage['EmailTemplate']['send_cc_email_to'] );

                                    

                                  /*  $ccemail  = $mailMessage['EmailTemplate']['send_cc_email'];

                                        

                                    if($ccemail==1)

                                    {

                                        $toccemail=$from;

                                        $this->Sendemail->sendMailContent($toccemail,$from,$subject,$mailBody,$fromname);

                                    }  */

                                }



                                $this->Session->setFlash('Thanks for registering coin.','default',array('class' => 'successmsg'));

                                

                                $this->Point->triggerPoints(REGISTER_COIN,$project_id,$userid);  //trigger for coin register

                                

                                $this->redirect('/companies/view_registeredcoins');



                                /*}

                                else

                                {



                                $this->Session->setFlash('Incorrect verification code.',null,null,'error'); 

                                $this->redirect('/companies/register_coin');

                                }*/

                            }

                            else

                            {

                                $this->Session->setFlash('Invalid verification Code','default',array('class' => 'errormsg1'));        

                                $this->redirect('/companies/register_coin');

                            }            

                        }

                        else

                        {

                            $this->Session->setFlash('Invalid verification Code','default',array('class' => 'errormsg1'));

                            $this->redirect('/companies/register_coin');

                        }

                    }            



                }

            }

        }

        /*******************************************************************

        * Function Name: transfer_request

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 4 Mar, 2011

        ********************************************************************/

        function transfer_request(){



            //Configure::write('debug', 2);        

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url',"register_coin");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);            



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);





            $userid = $this->Session->read("User.User.id");



            if(isset($this->data)){            



                $errorString ='';            



                if(trim($this->data['Coinset']['coinserial']) == ''){            

                    $errorString .="Please insert Coin Serial.<br/>";    

                }



                if(trim($this->data['Coinset']['code']) == ''){            

                    $errorString .="Please insert code.<br/>";    

                }



                if(trim($errorString) !=''){                                  

                    $this->Session->setFlash($errorString,'default',array('class' => 'errormsg'));

                }

                else

                {    

                    $coinset_value=$this->data['Coinset']['coinserial'];

                    $code = trim($this->data['Coinset']['code']);        



                    $coinset_value1=substr($coinset_value, 3, (strlen($coinset_value)-3)); 



                    $coinset_prefix=substr($coinset_value, 0, 3);  



                    if($coinset_prefix!=$projectDetails['Project']['serialprefix']) {                    

                        $this->Session->setFlash('Serial is not valid.','default',array('class' => 'errormsg'));

                        $this->redirect('/companies/register_coin');

                    }



                    if(!is_numeric($coinset_value1)) {                    

                        $this->Session->setFlash('Serial is not valid.','default',array('class' => 'errormsg'));

                        $this->redirect('/companies/transfer_request');

                    }



                    $isvalid=false;    



                    $condition = " Coinset.project_id='".$project_id."' and Coinset.verifycode='".$code."' and Coinset.active_status='1' and Coinset.delete_status='0'";



                    $coinsets = $this->Coinset->find('first', array('conditions' => $condition));                    



                    if(is_array($coinsets) and !empty($coinsets))    {        



                        $coinset_id=$coinsets['Coinset']['id'];                    

                        $verifycode=trim($coinsets['Coinset']['verifycode']);                    

                        $startserialnum=$coinsets['Coinset']['startserialnum'];

                        $endserialnum=$coinsets['Coinset']['endserialnum'];                    



                        if($coinset_value1 >= $startserialnum && $coinset_value1 <= $endserialnum) 

                        {



                            $isvalid=true;



                            $holder_details = $this->Holder->find('first', array('conditions' =>  "Holder.user_id  = '".$userid."' and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'"));



                            //checking whether it is already registered or not

                            $condition1 = "CoinsHolder.coinset_id  = '".$coinset_id."' and  CoinsHolder.serialnum='".$coinset_value."' and CoinsHolder.holder_id  != '".$holder_details['Holder']['id']."' and CoinsHolder.is_current_holder  = '1' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";



                            $old_holder_id= $this->CoinsHolder->find('first', array('conditions' => $condition1));



                            $old_holder_details = $this->Holder->find('first', array('conditions' =>  "Holder.id  = '".$old_holder_id['CoinsHolder']['holder_id']."'"));



                            if(is_array($old_holder_details) && !empty($old_holder_details))

                            {                        



                                $this->data['CoinTransferRequest']['project_id']=$project_id;

                                $this->data['CoinTransferRequest']['coinset_id']=$coinset_id;                    

                                $this->data['CoinTransferRequest']['from_holder_id']=$holder_details['Holder']['id'];

                                $this->data['CoinTransferRequest']['to_holder_id']=$old_holder_id['CoinsHolder']['holder_id'];

                                $this->data['CoinTransferRequest']['serialnum']=$coinset_value;    



                                $this->CoinTransferRequest->save($this->data['CoinTransferRequest']);    

                                if(!empty($projectDetails['Project']['url']))

                                    $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                else

                                    $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];





                                $condition = " EmailTemplate.email_template_name= 'COIN TRANSFER REQUEST' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                                $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                                if(is_array($mailMessage) && !empty($mailMessage)) 

                                {



                                    if(!empty($projectDetails['Project']['system_name']))

                                        $pt_new_name=$projectDetails['Project']['system_name'];

                                    else

                                        $pt_new_name=$projectDetails['Project']['project_name'];



                                    $keyStringArray = array('[[TO_NAME]]'=> $old_holder_details['Holder']['firstname'],

                                    '[[FROM_NAME]]'=> $holder_details['Holder']['firstname']." ".$holder_details['Holder']['lastnameshow'],

                                    '[[COIN_SERIAL]]'=>$coinset_value,

                                    '[[MESSAGE]]'=>trim($this->data['Coinset']['message']),

                                    '[[PROJECT_NAME]]'=>$pt_new_name,

                                    '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);



                                    $mailBody=$mailMessage['EmailTemplate']['content'];

                                      /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button  **/   

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    $mailBody.=$mailfooter;

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    

                                    

                                     // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                                       

                                    if(!empty($keyStringArray)){

                                        foreach($keyStringArray as $key=>$val){

                                            $mailBody = str_replace($key,$val,$mailBody);

                                        }

                                    }



                                    $subject  = $mailMessage['EmailTemplate']['subject'];              

                                    $from = $mailMessage['EmailTemplate']['sender'];

                                    $to =$old_holder_details['Holder']['email'];



                                    $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody, $from, $mailMessage['EmailTemplate']['send_cc_email_to']);

                                }                            



                                $this->Session->setFlash('Your request has been sent.','default',array('class' => 'errormsg'));

                                $this->redirect('/companies/transfer_request');

                            }

                            else

                            {    

                                $this->Session->setFlash('This coin serial is not registered.','default',array('class' => 'errormsg'));                            

                                $this->redirect('/companies/transfer_request');

                            }                        

                        }

                        else

                        {                        

                            $this->Session->setFlash('Invalid Serial and Code.','default',array('class' => 'errormsg'));

                            $this->redirect('/companies/transfer_request');

                        }            

                    }

                    else

                    {

                        $this->Session->setFlash('No Serial available.','default',array('class' => 'errormsg'));        

                        $this->redirect('/companies/transfer_request');

                    }            



                }

            }

        }



     



        /*******************************************************************

        * Function Name: add_comments

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 19 Feb, 2011

        ********************************************************************/

        function add_comments($coinholderid, $type=null){



            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();

            $this->layout= 'internal_layout';

            if(!empty($this->data['Coinset']['id'])){

                  $coinholderid=$this->data['Coinset']['id'];

             }



            //for active menu display

            $this->set('page_url',"register_coin");

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            

            if(empty($project_name)) $this->redirect('/companies/session_expired');

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project_name',$project_name);

            $this->set('coin_holder_id',$coinholderid);

            $this->set('project',$projectDetails);    

            

            $conditioncoinset = "project_id = '".$projectDetails['Project']['id']."' and  active_status='1' and delete_status='0'";

            ##check already exists company name

            $consetdata1 = $this->Coinset->find('first',array("conditions"=>$conditioncoinset));

            $this->set('coinsdetail',$consetdata1);                

            $comment_type_id=0;

            $condition = "CoinsHolder.id  = '".$coinholderid."' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";

            $coinholder_details = $this->CoinsHolder->find('first', array('conditions' => $condition));

            

             if($type)

            {

                $cndn = "CoinsHolder.holder_id  = '".$coinholder_details['CoinsHolder']['holder_id']."' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";

                $allcoin_details = $this->CoinsHolder->find('all', array('conditions' => $cndn));

                $this->set('allcoin_details',$allcoin_details);

            }



            //redirecting to view_registeredcoins page if anybody tried to add comment more than allowed limit

            if($type!="multi"){

                $commentcount = $this->Comment->find('count', array('conditions' => "Comment.coin_holder_id = '".$coinholderid."' and  Comment.project_id='".$project_id."' ",'fields'=>'id'));

                if($projectDetails['ProjectType']['additional_comment']==0){

                    if($projectDetails['ProjectType']['maxnumbercomment']<= $commentcount) $this->redirect('/companies/view_registeredcoins');



                } 

            }



            if($projectDetails['ProjectType']['maxnumbercomment']>=1){

                 $this->commenttypelisting($projectDetails['Project']['id']);

                 $this->set('maxnumbercomment',$projectDetails['ProjectType']['maxnumbercomment']);

            }

            

            $this->set('comment_type_id',$comment_type_id);

            if(is_array($coinholder_details) && !empty($coinholder_details)) {

                $this->set('coinserial',$coinholder_details['CoinsHolder']['serialnum']);

                $this->set('coinset',$coinholder_details['CoinsHolder']['coinset_id']);

                $this->set('coinholderid',$coinholderid);

           }

            else{

                $this->redirect('/companies/view_registeredcoins');

            }



            $userid = $this->Session->read("User.User.id");        

            if(isset($this->data['Coinset'])){        

                $errorString ='';            

                if(trim($this->data['Coinset']['comments']) == ''){            

                    $errorString .="Please insert Comments.<br/>";    

                }

                if(trim($errorString) !=''){    

                    $this->Session->setFlash($errorString,'default',array('class' => 'errormsg'));                  

                }

                else

                { 

                   // login user holder details

                   $holder_details = $this->Holder->find('first', array('conditions' =>  "Holder.user_id  = '".$userid."' and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'"));

                    $commentposted=0;

                    if($projectDetails['ProjectType']['maxnumbercomment']==1){

                        $this->data['Comment']['project_id']=$project_id;

                        $this->data['Comment']['coinset_id']=$this->data['Coinset']['coinset'];

                        $this->data['Comment']['coin_holder_id']=$this->data['Coinset']['coin_holder_id'];

                        $this->data['Comment']['comment_type_id']=0;

                        $this->data['Comment']['holder_id']=$holder_details['Holder']['id'];

                        $this->data['Comment']['comment']=trim($this->data['Coinset']['comments']) ;

                        if($projectDetails['ProjectType']['is_rsvp']==1){

                            $this->data['Comment']['rsvp']=$this->data['Coinset']['rsvp'] ;

                        }                

                        $this->data['Comment']['active_status']=1 ;    





                        if($this->Comment->save($this->data['Comment'])){      $commentposted=1;

                         $newid=$this->Comment->getLastInsertId();

                               /*  if(!empty($projectDetails['Project']['url']))

                                        $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                 else

                                    $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];     */

                                    $condition = " EmailTemplate.email_template_name= 'COMMENT BY MEMBER RELATED TO COIN SERIAL #' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                                    $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                                if(is_array($mailMessage) && !empty($mailMessage)) 

                                {



                                    $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$this->data['Coinset']['coin_holder_id']."'"));

                                    $mailBody=$mailMessage['EmailTemplate']['content'];    

                                    /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/   

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    $mailBody.=$mailfooter;

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    

                                    

                                    // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                                       

                                    $subject  = $mailMessage['EmailTemplate']['subject'];              

                                    $from = $mailMessage['EmailTemplate']['sender'];   

                                    $mailBody1 = str_replace("[[TO_NAME]]","Sponsor",$mailBody);

                                    $to = $projectDetails['Sponsor']['email'];         

                                    

                                  /*

                                  *   OLD CODE

                                  *   if(!empty($projectDetails['Project']['system_name']))

                                        $pt_new_name=$projectDetails['Project']['system_name'];

                                    else

                                        $pt_new_name=$projectDetails['Project']['project_name'];





                                    $keyStringArray = array('[[EMAIL_ADDRESS]]'=>$holder_details['Holder']['email']." ".$holder_details['Holder']['lastnameshow'],                        

                                    '[[COIN_SERIAL]]'=>$coinholder_details['CoinsHolder']['serialnum'],

                                    '[[PROJECT_NAME]]'=>$pt_new_name,

                                    '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                                     

                                    if(!empty($keyStringArray)){

                                        foreach($keyStringArray as $key=>$val){

                                            $mailBody = str_replace($key,$val,$mailBody);

                                        }

                                    }    

                                     */

                                   



                                    //Send Mail to sponsor

                                   //  $result = $this->Sendemail->sendMailContent($to,$from,$subject,$mailBody1);



                                    $allholder_details = $this->Holder->find('all', array('conditions' =>  " Holder.id in (Select CoinsHolder.holder_id from coins_holders as CoinsHolder where coins_holder.serialnum='".$coinholder_details['CoinsHolder']['serialnum']."') and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'"));



                                    if(is_array($allholder_details) && !empty($allholder_details)) 

                                    {

                                        // old code : $mailBody2 = str_replace("[[TO_NAME]]",$convalue['Holder']['firstname'],$mailBody); 

                                        /**

                                          * New Email Temp replacement code for data Elements 

                                          */

                                       //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                             $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails);

                                             

                                        //To all previous coin holder

                                        foreach($allholder_details as $convalue){

                                              $to = $convalue['Holder']['email'];                        

                                                

                                                 //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                                         $dataEleValuesArray[DATA_ELEMENT_TO_MEMBER_NAME]= $convalue['Holder']['screenname'];      

                                                         $dataEleValuesArray[DATA_ELEMENT_TO_MEMEBR_EMAIL]=$convalue['Holder']['email'];      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_FIRSTNAME]=$convalue['Holder']['firstname'];      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_LASTNAME]=$convalue['Holder']['lastnameshow'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS1]=$convalue['Holder']['address1'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS2]=$convalue['Holder']['address2'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_CITY]=$convalue['Holder']['city'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_STATE]=$convalue['Holder']['state'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_COUNTRY]=$convalue['Holder']['country'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_PHONE]=$convalue['Holder']['phone'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ZIP]=$convalue['Holder']['zipcode'];

                                                         $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                                    

                                                 //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 

                                                         $subject2=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                                         $mailBody2=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                            

                                                 // STEP: SEND EMAIL TO USER AND ALSO TO CC EMAILS 

                                                     $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject2,$mailBody2, $from, $mailMessage['EmailTemplate']['send_cc_email_to']);

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMBER_NAME]= '';      

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMEBR_EMAIL]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_FIRSTNAME]='';            

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_LASTNAME]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS1]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS2]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_CITY]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_STATE]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_COUNTRY]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_PHONE]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ZIP]='';      

                                        }

                                    }



                                }

                        }else{

                             $commentposted=0;

                        }

                     //    $this->Session->setFlash('Thanks for adding comments.','default',array('class' => 'successmsg'));              

                     //   $this->redirect('/companies/view_comments/'.$this->data['Coinset']['coin_holder_id']);

                    }else

                    {

                        if($type=="multi")

                            $commentcount = $this->Comment->find('count', array('conditions' => "Comment.coin_holder_id = '".$this->data['Coinset']['coin_holder_id']."' and Comment.coinset_id = '".$coinholderid."' and Comment.comment_type_id = '".$this->data['Coinset']['comment_type_id']."' and Comment.holder_id = '".$holder_details['Holder']['id']."' and  Comment.project_id='".$project_id."' ",'fields'=>'id'));

                        else



                            $commentcount = $this->Comment->find('count', array('conditions' => "Comment.coin_holder_id = '".$this->data['Coinset']['coin_holder_id']."' and Comment.coinset_id = '".$this->data['Coinset']['coinset']."' and Comment.comment_type_id = '".$this->data['Coinset']['comment_type_id']."' and Comment.holder_id = '".$holder_details['Holder']['id']."' and  Comment.project_id='".$project_id."' ",'fields'=>'id'));



                        if($this->data['Coinset']['comment_type_id']==0) $commentcount=0;



                        if($commentcount==0)

                        {



                            $this->data['Comment']['project_id']=$project_id;

                            $this->data['Comment']['coinset_id']=$this->data['Coinset']['coinset'];

                            if($type=="multi")

                                $this->data['Comment']['coin_holder_id']=$coinholderid;

                            else

                                $this->data['Comment']['coin_holder_id']=$this->data['Coinset']['coin_holder_id'];

                            $this->data['Comment']['comment_type_id']=$this->data['Coinset']['comment_type_id'];

                            $this->data['Comment']['holder_id']=$holder_details['Holder']['id'];

                            $this->data['Comment']['comment']=trim($this->data['Coinset']['comments']) ;

                            if ($projectDetails['ProjectType']['is_rsvp']==1){

                                $this->data['Comment']['rsvp'] = $this->data['Coinset']['rsvp'] ;

                            }    



                            $this->data['Comment']['active_status']=1 ;    

                           if( $this->Comment->save($this->data['Comment'])){      $commentposted=1;

                                  $newid=$this->Comment->getLastInsertId();



                                // Send Comments to Members who Hold or previously held a Coin Serial #

                                $condition = " EmailTemplate.email_template_name= 'COMMENT BY MEMBER RELATED TO COIN SERIAL #' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                                $mailMessageholder = $this->EmailTemplate->find('first',array('conditions' => $condition));

                           

                                if(is_array($mailMessageholder) && !empty($mailMessageholder)) 

                                {

                                    if($type=='multi')

                                        $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$coinholderid."'"));

                                    else

                                        $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$this->data['Coinset']['coin_holder_id']."'"));



                                    $mailBody=$mailMessageholder['EmailTemplate']['content'];    

                                    $subject  = $mailMessageholder['EmailTemplate']['subject'];              

                                    $from = $mailMessageholder['EmailTemplate']['sender'];              //$projectDetails['Project']['fromemail'];

                                    $fromname = $mailMessageholder['EmailTemplate']['sender'];              //$projectDetails['Project']['fromname'];

                                     /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button      **/ 

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                   

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    $mailBody.=$mailfooter;                                            

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                   

                                    // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                                                      

                                   /*  if(!empty($projectDetails['Project']['url']))

                                        $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                    else

                                        $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];





                                    if(!empty($projectDetails['Project']['system_name']))

                                        $pt_new_name=$projectDetails['Project']['system_name'];

                                    else

                                        $pt_new_name=$projectDetails['Project']['project_name'];



                                    $keyStringArray = array('[[USER_NAME]]'=>$holder_details['Holder']['firstname']." ".$holder_details['Holder']['lastnameshow'],                        

                                    '[[COIN_SERIAL]]'=>$coinholder_details['CoinsHolder']['serialnum'],

                                    '[[PROJECT_NAME]]'=>$pt_new_name,

                                    '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);    

                                     if(!empty($keyStringArray)){

                                        foreach($keyStringArray as $key=>$val){

                                            $mailBody = str_replace($key,$val,$mailBody);

                                        }

                                    }    

                                       //to sponsor

                                    $mailBody1 = str_replace("[[TO_NAME]]","Sponsor",$mailBody);

                                    $to = $projectDetails['Sponsor']['email'];        

                                    //$result = $this->Sendemail->sendMailContent($to,$from,$subject,$mailBody1,$fromname);

                                    */ 

                                    $allholder_details = $this->Holder->find('all', array('conditions' =>  " Holder.id in (Select CoinsHolder.holder_id from coins_holders as CoinsHolder where CoinsHolder.serialnum='".$coinholder_details['CoinsHolder']['serialnum']."') and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'"));

                                    if(is_array($allholder_details) && !empty($allholder_details)) 

                                    {

                                         // old code :  $mailBody2 = str_replace("[[TO_NAME]]",$convalue['Holder']['firstname'],$mailBody);       

                                        /**

                                          * New Email Temp replacement code for data Elements 

                                          */

                                        

                                          //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                          $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails);

                                          

                                        //To all previous coin holder

                                        foreach($allholder_details as $convalue){

                                          $to = $convalue['Holder']['email'];                        

                                             //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMBER_NAME]= $convalue['Holder']['screenname'];      

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMEBR_EMAIL]=$convalue['Holder']['email'];      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_FIRSTNAME]=$convalue['Holder']['firstname'];      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_LASTNAME]=$convalue['Holder']['lastnameshow'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS1]=$convalue['Holder']['address1'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS2]=$convalue['Holder']['address2'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_CITY]=$convalue['Holder']['city'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_STATE]=$convalue['Holder']['state'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_COUNTRY]=$convalue['Holder']['country'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_PHONE]=$convalue['Holder']['phone'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ZIP]=$convalue['Holder']['zipcode'];

                                                     $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                                

                                             //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 

                                                     $subject2=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                                     $mailBody2=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                        

                                      

                                                     $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject2,$mailBody2, $from,$mailMessageholder['EmailTemplate']['send_cc_email_to']);

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMBER_NAME]= '';      

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMEBR_EMAIL]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_FIRSTNAME]='';            

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_LASTNAME]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS1]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS2]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_CITY]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_STATE]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_COUNTRY]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_PHONE]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ZIP]='';       

                                                               

                                            //    $result = $this->Sendemail->sendMailContent($to,$from,$subject,$mailBody2);



                                        }

                                    }



                                }



                           }else{

                               $commentposted=0;

                           }

                                               

                        }

                        else

                        {   $commentposted=2;

                           // $this->Session->setFlash('You have added comment for this type.Please select another comment type. ','default',array('class' => 'successmsg'));      

                        }



                    }



                    if($commentposted==1){

                    // SEND THANK YOU MAIL TO COMMENTER

                            $conditioncomment = " EmailTemplate.email_template_name= 'THANKYOU FOR COMMENT' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                            $mailMessagecomment = $this->EmailTemplate->find('first',array('conditions' => $conditioncomment));

                            if(is_array($mailMessagecomment) && !empty($mailMessagecomment)) 

                            {

                                if($type=='multi')

                                    $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$coinholderid."'"));

                                else

                                    $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$this->data['Coinset']['coin_holder_id']."'"));



                                $commentdata=$this->Comment->findByid($newid);

                                

                                $subject  = $mailMessagecomment['EmailTemplate']['subject'];              

                                $from = $mailMessagecomment['EmailTemplate']['sender'];        //$projectDetails['Project']['fromemail'];

                                $fromname =$mailMessagecomment['EmailTemplate']['sender'];     // $projectDetails['Project']['fromname'];

                                $mailBody=$mailMessagecomment['EmailTemplate']['content'];    

                                 /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button      **/  

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                

                                $condition = "id='1'";

                                $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                $mailBody.=$mailfooter;

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                 

                                  

                                // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                     

                               /* OLD CODE 

                               if(!empty($projectDetails['Project']['url']))

                                    $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                else

                                   $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                              

                                 if(!empty($projectDetails['Project']['system_name']))

                                    $pt_new_name=$projectDetails['Project']['system_name'];

                                else

                                    $pt_new_name=$projectDetails['Project']['project_name'];

                           

                                $keyStringArray = array('[[EMAIL_ADDRESS]]'=>$holder_details['Holder']['email'],

                                '[[COMMENT]]'=>$commentdata['Comment']['comment'],

                                '[[PROJECT_NAME]]'=>$pt_new_name,

                                '[[COMMENT_POST_DATE]]'=>date("Y-m-d",$commentdata['Comment']['created']),

                                '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                               

                                if(!empty($keyStringArray)){

                                    foreach($keyStringArray as $key=>$val){

                                        $mailBody = str_replace($key,$val,$mailBody);

                                    }

                                }  */  

                                $to=$holder_details['Holder']['email'];

                                  /**

                                  * New Email Temp replacement code for data Elements 

                                   */

                                //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectDetails, $to);

                               //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                    $dataEleValuesArray[DATA_ELEMENT_COMMENT]= $commentdata['Comment']['comment'];

                                    $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                    $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                    $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                            

                                //to sponsor

                                $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessagecomment['EmailTemplate']['send_cc_email_to']);



                                //mail to another holder



                                $this->CoinTransferRequest->bindModel(array('belongsTo'=>array(

                                'Holder'=>array(

                                'foreignKey'=>false,

                                'conditions'=>'Holder.id = CoinTransferRequest.from_holder_id')

                                )));

                                $coinserial=$coinholder_details['CoinsHolder']['serialnum'];

                                $condiotns="serialnum='".$coinserial."'";    

                                $holddata=$this->CoinTransferRequest->find("first",array("conditions"=>$condiotns));

                              

                                if(!empty($holddata)){

                                    // SEND MAIL PREVIOUS COIN HOLDER

                                    $conditioncomment1 = " EmailTemplate.email_template_name= 'COMMENT BY MEMBER RELATED TO COIN SERIAL #' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                                    $mailMessagecomment1 = $this->EmailTemplate->find('first',array('conditions' => $conditioncomment1));                        

                                   

                                    if(!empty($mailMessagecomment1)){

                                          /*  OLD CODE

                                          if(!empty($projectDetails['Project']['system_name']))

                                        $pt_new_name=$projectDetails['Project']['system_name'];

                                    else

                                        $pt_new_name=$projectDetails['Project']['project_name'];    

                                        $keyStringArray1 = array('[[EMAIL_ADDRESS]]'=>$holddata['Holder']['email'],

                                        '[[COMMENT]]'=>$commentdata['Comment']['comment'],

                                        '[[PROJECT_NAME]]'=>$pt_new_name,

                                        '[[COMMENT_POST_DATE]]'=>date("Y-m-d",$commentdata['Comment']['created']),

                                        '[[COIN_SERIAL]]'=>$coinholder_details['CoinsHolder']['serialnum'],

                                        '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);   

                                         if(!empty($keyStringArray1)){

                                            foreach($keyStringArray1 as $key=>$val){

                                                $mailBody = str_replace($key,$val,$mailBody);

                                            }

                                        } */    

                                       

                                        $subject  = $mailMessagecomment1['EmailTemplate']['subject'];              

                                        $from = $mailMessagecomment1['EmailTemplate']['sender'];        //$projectDetails['Project']['fromemail'];

                                        $fromname = $mailMessagecomment1['EmailTemplate']['sender'];        //$projectDetails['Project']['fromname'];

                                        $mailBody=$mailMessagecomment1['EmailTemplate']['content'];    

                                         /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button  **/    

                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                        $condition = "id='1'";

                                        $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                        $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                        $mailBody.=$mailfooter;

                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                       

                                       

                                        // Set path to inserted image 

                                        $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                                       $to=$holddata['Holder']['email'];

                                        /**

                                        * New Email Temp replacement code for data Elements 

                                       */

                                       //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                            $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($projectid, $projectDetails, $to);

                                       //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                            $dataEleValuesArray[DATA_ELEMENT_COMMENT]= $commentdata['Comment']['comment'];

                                            $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $coinholder_details['CoinsHolder']['serialnum'];

                                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                       //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                            $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                            $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                        //to all

                                        $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessagecomment1['EmailTemplate']['send_cc_email_to']);                



                                    }

                                }

                            }    

                            

                            $this->Session->setFlash('Thanks for adding comments.','default',array('class' => 'successmsg'));

                          

                    }else if($commentposted==2)

                    {

                        $this->Session->setFlash('You have added comment for this type.Please select another comment type. ','default',array('class' => 'successmsg'));

                    }else

                    if($commentposted==0){

                           $this->Session->setFlash('Error in processing.Please try after some time. ','default',array('class' => 'errormsg'));

                    }  

                    

                      if($type=="multi")

                                $this->redirect('/companies/view_comments/'.$this->data['Coinset']['id']);

                            else              

                                $this->redirect('/companies/view_comments/'.$this->data['Coinset']['coin_holder_id']);

                }



            }

        }







        function commenttypedropdown($coinHolderId)

        {

            $this->layout = '';



            $project_id = $this->Session->read("projectwebsite_id");



            // Find all the comment types for this project

            $conditions  = array('CommentType.project_id' => $project_id, 'CommentType.active_status' => '1', 'CommentType.delete_status' => '0');

            $commTypes   = ClassRegistry::init('CommentType')->find('list', array('conditions' => $conditions, 'fields' => array('comment_type_name')));

            $commtypeIds = array_keys($commTypes);



            $conditions = array('Comment.coin_holder_id' => $coinHolderId, 'Comment.comment_type_id' => $commtypeIds);

            $fields     = array('comment_type_id');

            $commented = ClassRegistry::init('Comment')->find('list', compact('conditions', 'fields'));



            $conditions = array('ProjectType.project_id' => $project_id, 'ProjectType.active_status' => '1', 'ProjectType.delete_status' => '0');

            $additionalComment = ClassRegistry::init('ProjectType')->find('first', compact('conditions'));

            if ($additionalComment['ProjectType']['additional_comment'] == '1') {

                $addComm = $additionalComment['ProjectType']['additionalcomment'];

            }

            else {

                $addComm = 0;

            }



            foreach ($commented as $commtypeid) {

                if ($commtypeid != $addComm) {

                    unset($commTypes[$commtypeid]);

                }

            }



            $this->set(compact('commTypes'));

        }//end commenttypedropdown()







        function addnew_commens($coinholderid=null){



            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();

            $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url',"register_coin");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);

            $this->set('coin_holder_id',$coinholderid);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $comment_type_id=0;



            if($coinholderid != null)

            {

                $condition = "CoinsHolder.id  = '".$coinholderid."' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";

                $coinholder_details = $this->CoinsHolder->find('all', array('conditions' => $condition));

            }

            else

            {

                $condition = "CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";

                $coinholder_details = $this->CoinsHolder->find('all', array('conditions' => $condition));

            }



            //$coinholder_details = $this->CoinsHolder->find('first', array('conditions' => $condition));

            //redirecting to view_registeredcoins page if anybody tried to add comment more than allowed limit



            if($coinholderid != null)

            {

                $commentcount = $this->Comment->find('count', array('conditions' => "Comment.coin_holder_id = '".$coinholderid."' and  Comment.project_id='".$project_id."' ",'fields'=>'id'));

                if($projectDetails['ProjectType']['additional_comment']==0){

                    if($projectDetails['ProjectType']['maxnumbercomment']<= $commentcount) $this->redirect('/companies/view_registeredcoins');

                }

            }



            if($projectDetails['ProjectType']['maxnumbercomment']>1){        



                //$commenttypes = $this->ProjectCommentType->find('all', array('conditions' => "ProjectCommentType.project_type_id='".$projectDetails['ProjectType']['id']."'"));

                $this->commenttypelisting($projectDetails['Project']['id']);



                /*$comment_type_id=$commenttypeid['ProjectCommentType']['comment_type_id'];            

                $comment_type_name=$this->getcommenttypename($comment_type_id);

                $comment_type_purpose=$this->getcommenttypepurpose($comment_type_id);

                */



                $this->set('maxnumbercomment',$projectDetails['ProjectType']['maxnumbercomment']);

                //$this->set('commenttypename',$comment_type_name);

                //$this->set('commenttypepurpose',$comment_type_purpose);    



            }

            $this->set('comment_type_id',$comment_type_id);







            if(is_array($coinholder_details) && !empty($coinholder_details)) {



                $this->set('coinserial',$coinholder_details['0']['CoinsHolder']['serialnum']);

                $this->set('coinset',$coinholder_details['CoinsHolder']['coinset_id']);

                $this->set('coinholderid',$coinholderid);



            }

            else{

                $this->redirect('/companies/view_registeredcoins');

            }



            $userid = $this->Session->read("User.User.id");        



            if(isset($this->data['Coinset'])){        



                $errorString ='';            



                if(trim($this->data['Coinset']['comments']) == ''){            

                    $errorString .="Please insert Comments.<br/>";    

                }



                if(trim($errorString) !=''){    

                    $this->Session->setFlash($errorString,'default',array('class' => 'errormsg'));                  

                }

                else

                {    



                    if($projectDetails['ProjectType']['maxnumbercomment']==1){





                        $holder_details = $this->Holder->find('first', array('conditions' =>  "Holder.user_id  = '".$userid."' and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'"));





                        $this->data['Comment']['project_id']=$project_id;

                        $this->data['Comment']['coinset_id']=$this->data['Coinset']['coinset'];

                        $this->data['Comment']['coin_holder_id']=$this->data['Coinset']['coin_holder_id'];

                        $this->data['Comment']['comment_type_id']=0;

                        $this->data['Comment']['holder_id']=$holder_details['Holder']['id'];

                        $this->data['Comment']['comment']=trim($this->data['Coinset']['comments']) ;

                        if($projectDetails['ProjectType']['is_rsvp']==1){

                            $this->data['Comment']['rsvp']=$this->data['Coinset']['rsvp'] ;

                        }                

                        $this->data['Comment']['active_status']=1 ;    

                        $this->Comment->save($this->data['Comment']);



                        $condition = " EmailTemplate.email_template_name= 'COMMENT BY MEMBER RELATED TO COIN SERIAL #' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                        $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                        if(is_array($mailMessage) && !empty($mailMessage)) 

                        {

                            

                            $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$this->data['Coinset']['coin_holder_id']."'"));

                            /**

                            * OLD CODE

                            *  if(!empty($projectDetails['Project']['url']))

                                $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                            else

                                $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];





                            if(!empty($projectDetails['Project']['system_name']))

                                $pt_new_name=$projectDetails['Project']['system_name'];

                            else

                                $pt_new_name=$projectDetails['Project']['project_name']; 

                            $keyStringArray = array('[[USER_NAME]]'=>$holder_details['Holder']['firstname']." ".$holder_details['Holder']['lastnameshow'],                        

                            '[[COIN_SERIAL]]'=>$coinholder_details['CoinsHolder']['serialnum'],

                            '[[PROJECT_NAME]]'=>$pt_new_name,

                            '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                              if(!empty($keyStringArray)){

                                foreach($keyStringArray as $key=>$val){

                                    $mailBody = str_replace($key,$val,$mailBody);

                                }

                            }    



                            */

                            $subject  = $mailMessage['EmailTemplate']['subject'];              

                            $from = $mailMessage['EmailTemplate']['sender']; 

                            $mailBody=$mailMessage['EmailTemplate']['content'];    

                              /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button    **/ 

                            ///////////////////////////////// append mail footer set by super admin /////////////////////////

                            $condition = "id='1'";

                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                            $mailBody.=$mailfooter;

                            ///////////////////////////////// append mail footer set by super admin /////////////////////////

                           

                            

                            // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                            //to sponsor

                            $mailBody1 = str_replace("[[TO_NAME]]","Sponsor",$mailBody);

                            $to = $projectDetails['Sponsor']['email'];        



                            $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody1, $from, $mailMessage['EmailTemplate']['send_cc_email_to']);



                            $allholder_details = $this->Holder->find('all', array('conditions' =>  " Holder.id in (Select CoinsHolder.holder_id from CoinsHolder where CoinsHolder.serialnum='".$coinholder_details['CoinsHolder']['serialnum']."') and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'"));



                            if(is_array($allholder_details) && !empty($allholder_details)) 

                            {

                                /**

                                 * New Email Temp replacement code for data Elements 

                                 */

                                        

                                 //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                          $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails);

                                //To all previous coin holder

                                foreach($allholder_details as $convalue){



                                   // $mailBody2 = str_replace("[[TO_NAME]]",$convalue['Holder']['firstname'],$mailBody);

                                    $to = $convalue['Holder']['email']; 

                                 

                                             //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMBER_NAME]= $convalue['Holder']['screenname'];      

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMEBR_EMAIL]=$convalue['Holder']['email'];      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_FIRSTNAME]=$convalue['Holder']['firstname'];      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_LASTNAME]=$convalue['Holder']['lastnameshow'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS1]=$convalue['Holder']['address1'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS2]=$convalue['Holder']['address2'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_CITY]=$convalue['Holder']['city'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_STATE]=$convalue['Holder']['state'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_COUNTRY]=$convalue['Holder']['country'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_PHONE]=$convalue['Holder']['phone'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ZIP]=$convalue['Holder']['zipcode'];

                                                     $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                                

                                             //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 

                                                     $subject2=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                                     $mailBody2=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                        

                                      

                                                     $result = $this->Sendemail->sendMailContent($to,$from,$subject2,$mailBody2);

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMBER_NAME]= '';      

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMEBR_EMAIL]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_FIRSTNAME]='';            

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_LASTNAME]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS1]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS2]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_CITY]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_STATE]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_COUNTRY]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_PHONE]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ZIP]='';       

                                              //  $result = $this->Sendemail->sendMailContent($to,$from,$subject,$mailBody2);



                                }

                            }



                        }



                        $this->Session->setFlash('Thanks for adding comments.','default',array('class' => 'successmsg'));              

                        $this->redirect('/companies/view_comments/'.$this->data['Coinset']['coin_holder_id']);

                    }else{



                        $holder_details = $this->Holder->find('first', array('conditions' =>  "Holder.user_id  = '".$userid."' and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'"));



                        $commentcount = $this->Comment->find('count', array('conditions' => "Comment.coin_holder_id = '".$this->data['Coinset']['coin_holder_id']."' and Comment.coinset_id = '".$this->data['Coinset']['coinset']."' and Comment.comment_type_id = '".$this->data['Coinset']['comment_type_id']."' and Comment.holder_id = '".$holder_details['Holder']['id']."' and  Comment.project_id='".$project_id."' ",'fields'=>'id'));



                        if($this->data['Coinset']['comment_type_id']==0) $commentcount=0;



                        if($commentcount==0)

                        {



                            $this->data['Comment']['project_id']=$project_id;

                            $this->data['Comment']['coinset_id']=$this->data['Coinset']['coinset'];

                            $this->data['Comment']['coin_holder_id']=$this->data['Coinset']['coin_holder_id'];

                            $this->data['Comment']['comment_type_id']=$this->data['Coinset']['comment_type_id'];

                            $this->data['Comment']['holder_id']=$holder_details['Holder']['id'];

                            $this->data['Comment']['comment']=trim($this->data['Coinset']['comments']) ;

                            $this->data['Comment']['rsvp']=$this->data['Coinset']['rsvp'] ;                

                            $this->data['Comment']['active_status']=1 ;    

                            $this->Comment->save($this->data['Comment']);



                            $condition = " EmailTemplate.email_template_name= 'COMMENT BY MEMBER RELATED TO COIN SERIAL #' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                            $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                            if(is_array($mailMessage) && !empty($mailMessage)) 

                            {



                                $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$this->data['Coinset']['coin_holder_id']."'"));

                                /**

                                * OLD CODE

                                *   if(!empty($projectDetails['Project']['url']))

                                    $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                else

                                    $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                                   if(!empty($projectDetails['Project']['system_name']))

                                    $pt_new_name=$projectDetails['Project']['system_name'];

                                else

                                    $pt_new_name=$projectDetails['Project']['project_name'];

                                  $keyStringArray = array('[[USER_NAME]]'=>$holder_details['Holder']['firstname']." ".$holder_details['Holder']['lastnameshow'],                        

                                '[[COIN_SERIAL]]'=>$coinholder_details['CoinsHolder']['serialnum'],

                                '[[PROJECT_NAME]]'=>$pt_new_name,

                                '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                                 if(!empty($keyStringArray)){

                                    foreach($keyStringArray as $key=>$val){

                                        $mailBody = str_replace($key,$val,$mailBody);

                                    }

                                }          

                                */

                                

                                $subject  = $mailMessage['EmailTemplate']['subject'];              

                                $from = $mailMessage['EmailTemplate']['sender']; 

                                $mailBody=$mailMessage['EmailTemplate']['content'];    

                                /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/  

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                $condition = "id='1'";

                                $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                $mailBody.=$mailfooter;

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                               

                                

                                // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                                //to sponsor

                                $mailBody1 = str_replace("[[TO_NAME]]","Sponsor",$mailBody);

                                $to = $projectDetails['Sponsor']['email'];        



                                $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody1, $from, $mailMessage['EmailTemplate']['send_cc_email_to']);



                                $allholder_details = $this->Holder->find('all', array('conditions' =>  " Holder.id in (Select CoinsHolder.holder_id from CoinsHolder where CoinsHolder.serialnum='".$coinholder_details['CoinsHolder']['serialnum']."') and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'"));



                                if(is_array($allholder_details) && !empty($allholder_details)) 

                                {

                                     /**

                                      * New Email Temp replacement code for data Elements 

                                      */

                                        

                                      //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                          $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails);

                                          

                                    //To all previous coin holder

                                    foreach($allholder_details as $convalue){



                                        $mailBody2 = str_replace("[[TO_NAME]]",$convalue['Holder']['firstname'],$mailBody);

                                        $to = $convalue['Holder']['email'];               

                

                                             //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMBER_NAME]= $convalue['Holder']['screenname'];      

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMEBR_EMAIL]=$convalue['Holder']['email'];      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_FIRSTNAME]=$convalue['Holder']['firstname'];      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_LASTNAME]=$convalue['Holder']['lastnameshow'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS1]=$convalue['Holder']['address1'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS2]=$convalue['Holder']['address2'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_CITY]=$convalue['Holder']['city'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_STATE]=$convalue['Holder']['state'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_COUNTRY]=$convalue['Holder']['country'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_PHONE]=$convalue['Holder']['phone'];

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ZIP]=$convalue['Holder']['zipcode'];

                                                     $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                                

                                             //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 

                                                     $subject2=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                                     $mailBody2=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                        

                                      

                                                     $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject2,$mailBody2, $from,$mailMessage['EmailTemplate']['send_cc_email_to'] );

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMBER_NAME]= '';      

                                                     $dataEleValuesArray[DATA_ELEMENT_TO_MEMEBR_EMAIL]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_FIRSTNAME]='';            

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_LASTNAME]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS1]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS2]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_CITY]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_STATE]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_COUNTRY]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_PHONE]='';      

                                                     $dataEleValuesArray[DATA_ELEMENT_MEMBER_ZIP]='';       

                                              //    $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody2);



                                    }

                                }



                            }



                            $this->Session->setFlash('Thanks for adding comments.','default',array('class' => 'successmsg'));              

                            $this->redirect('/companies/view_comments/'.$this->data['Coinset']['coin_holder_id']);

                        }

                        else

                        {

                            $this->Session->setFlash('You have added comment for this type.Please select another comment type. ','default',array('class' => 'successmsg'));      

                        }



                    }





                }



            }

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $userid = $this->Session->read("User.User.id");



            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));



            $this->set('holder_id',$holderArray['Holder']['id']);





            # Setting Pagination modelclass

            $this->Pagination->modelClass = 'CoinsHolder';



            $field      = '';    



            $condition = " CoinsHolder.holder_id  = '".$holderArray['Holder']['id']."' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";



            $this->Pagination->total        = count( $this->CoinsHolder->find('all', array('conditions' => $condition, 'fields' => $field )));

            list($order,$limit,$page)       = $this->Pagination->init($condition,$field);   



            $sortBy =$this->params['url']['sortBy']." ".$this->params['url']['direction'];



            ;

            if(!empty($this->params['url']['sortBy'])) 

                $order=$sortBy;

            else

                $order      = array('CoinsHolder.created DESC');



            $coinholderArray = $this->CoinsHolder->find('all',array('conditions' => $condition, 'fields' => $field, 'order' =>$order, 'limit' =>$limit, 'page' => $page ));



            $this->set('coinholderArray',$coinholderArray);



        }









        /*******************************************************************

        * Function Name: update_comments

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 23 Feb, 2011

        ********************************************************************/

        function update_comments($commentid){



            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url',"register_coin");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    





            $condition = "Comment.id  = '".$commentid."' and  Comment.project_id='".$project_id."' and  Comment.delete_status='0'";



            $comment_details = $this->Comment->find('first', array('conditions' => $condition));



            if(is_array($comment_details) && !empty($comment_details)) {



                $this->set('rsvp',$comment_details['Comment']['rsvp']);

                $this->set('comment',$comment_details['Comment']['comment']);        

                $this->set('comment_id',$comment_details['Comment']['id']);

                $this->set('coin_holder_id',$comment_details['Comment']['coin_holder_id']);



            }

            else{

                $this->redirect('/companies/view_registeredcoins');

            }





            $userid = $this->Session->read("User.User.id");





            if($projectDetails['ProjectType']['maxnumbercomment']>1){        



                if($comment_details['Comment']['comment_type_id']==0)

                {

                    $comment_type_name="Misc. Additional Comment";

                    $comment_type_purpose="";



                }else{        

                    $comment_type_name=$this->getcommenttypename($comment_details['Comment']['comment_type_id']);

                    $comment_type_purpose=$this->getcommenttypepurpose($comment_details['Comment']['comment_type_id']);

                }





                $this->set('maxnumbercomment',$projectDetails['ProjectType']['maxnumbercomment']);

                $this->set('commenttypename',$comment_type_name);

                $this->set('commenttypepurpose',$comment_type_purpose);    



            }



            if(isset($this->data)){



                $errorString ='';            



                if(trim($this->data['Coinset']['comments']) == ''){            

                    $errorString .="Please insert Comments.<br/>";    

                }



                if(trim($errorString) !=''){                                  

                    $this->Session->setFlash($errorString,'default',array('class' => 'errormsg')); 

                }

                else

                {    

                    $this->data['Comment']['id']=$this->data['Coinset']['comment_id'];

                    $this->data['Comment']['comment']=$this->data['Coinset']['comments'] ;                

                    $this->Comment->save($this->data['Comment']);                    

                    $this->Session->setFlash('Comments has been updated.','default',array('class' => 'successmsg')); 

                    $this->redirect('/companies/view_comments/'.$this->data['Coinset']['coin_holder_id']);

                }



            }

        }

        /*******************************************************************

        * Function Name: comments

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function comments() {



            //Configure::write('debug', 2);   



            $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url','comments');

            

            $current_domain= $_SERVER['HTTP_HOST'];

            $this->set('current_domain',$current_domain);



            $project_id=$this->Session->read("projectwebsite_id");   

            $project_name=$this->Session->read("projectwebsite_name");   



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            //STEP : GET PAGE CONTENT

            $condition="Content.alias='comments' and Content.project_id=".$project_id." and Content.active_status='1' and Content.delete_status='0' ";

            $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);     

            $this->set('meta_description',$page_content['Content']['metadescription']);

            $this->set('meta_keyword',$page_content['Content']['metakeyword']);

            $this->set('meta_title',$page_content['Content']['metatitle']);

            $this->set('meta_isindex',$page_content['Content']['meta_isindex']);

            $this->set('meta_isfollow',$page_content['Content']['meta_isfollow']);

            $this->set('page_title',$page_content['Content']['title']);

            $this->set('page_content',$page_content);

            

            $this->set('project_name',$project_name);

            $this->set('project_id',$project_id);



            $projectDetails=$this->getprojectdetails($project_id);   

            $this->set('project',$projectDetails);

            if($_SERVER['HTTP_HOST']=="192.168.1.225:8219")

                $gmapapi="ABQIAAAAG9lOO_euEJeiZ69PkboU1xSOmCQh5bx71JQK74sG7wZ4eJrCjhQC6CmXjC2HZwl7dKR4G71xu3p-qQ";

            else

                if($_SERVER['HTTP_HOST']=="75.125.190.162:9085")

                    $gmapapi ="ABQIAAAAG9lOO_euEJeiZ69PkboU1xQS7PAHfPFNfuyLJ21IhiM4-TUrkRSkk4S5WCyv5oLQZlQ21uKrmLDq3Q";

                else

                    $gmapapi = $projectDetails['Project']['googlemapskey'];



            $this->set('gmap',$gmapapi);



            $this->set('searchresult',"");



            if(isset($this->data)){              



                /*if(trim($this->data['Company']['coinset'])=="")

                {

                $condition="Comment.project_id='".$project_id."' and Comment.offensive='0' and Comment.offensiveedit='0' and Comment.active_status='1' and Comment.delete_status='0'";

                $field      = '';                       

                $order      = array('Comment.created DESC');

                $comments = $this->Comment->find('all',array('conditions' => $condition, 'fields' => $field, 'order' =>$order));   

                $this->set('comments',$comments);

                }*/



                $coinholder_ids= $this->CoinsHolder->find('all', array('conditions' => "CoinsHolder.serialnum  ='".trim($this->data['Company']['coinset'])."'",'fields'=>'id'));



                if(is_array($coinholder_ids) && !empty($coinholder_ids)) {

                    $coinholder_ids1="";

                    foreach ($coinholder_ids as $coinholder_id){

                        if($coinholder_ids1=="")

                            $coinholder_ids1=$coinholder_id['CoinsHolder']['id'];

                        else

                            $coinholder_ids1.=",".$coinholder_id['CoinsHolder']['id'];

                    }           



                    $condition1="Comment.project_id='".$project_id."' and Comment.coin_holder_id in (".$coinholder_ids1.")  and Comment.offensive='0' and Comment.active_status='1' and Comment.delete_status='0'";



                    //$condition="Comment.project_id='".$project_id."' and Comment.offensive='0' and Comment.offensiveedit='0' and Comment.active_status='1' and Comment.delete_status='0'";

                    $field      = '';       

                    $order      = array('Comment.created DESC');

                    $comments = $this->Comment->find('all',array('conditions' => $condition1, 'fields' => $field, 'order' =>$order));

                    



                    $this->set('comments',$comments);           

                }

                $this->set('searchresult',"yes");

                $this->set('coinserial',$this->data['Company']['coinset']);



            }else

            {





                /*$condition="Comment.project_id='".$project_id."' and Comment.offensive='0' and Comment.offensiveedit='0' and Comment.active_status='1' and Comment.delete_status='0'";

                $field      = '';   





                $order      = array('Comment.created DESC');

                $comments = $this->Comment->find('all',array('conditions' => $condition, 'fields' => $field, 'order' =>$order));



                $this->set('comments',$comments);

                */

            }

            



        }





        function send_invites()

        {

                 

            $project_id=$this->Session->read("projectwebsite_id");   

            $project_name=$this->Session->read("projectwebsite_name");

            $projectDetails=$this->getprojectdetails($project_id);   

            $userdata=$this->Session->read("User");  

            $user_id=$this->Session->read("User.User.id"); 

            $username=$this->Session->read("User.User.username"); 



            $condition = "user_id=$user_id ";

            $holder_data = $this->Holder->find('first',array('conditions' => $condition));

            $sender_name=$holder_data['Holder']['firstname']." ".$holder_data['Holder']['lastnameshow'];

            

            if($sender_name=="")

                $sender_name=$holder_data['Holder']['screenname'];



            if($this->data)

            {

               



                //$condition = " EmailTemplate.email_template_name= 'FRIEND INVITATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                //$mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                foreach ($this->data['send_invite'] as $name=>$emailwithname)

                {



                    if($emailwithname!="0")

                    {

                        $email=end(explode("##",$emailwithname));

                        

                        $this->Invitation->query("insert into invitations values('',$user_id,$project_id,'$username','$email',0)");

                        $invite_id = $this->Invitation->getLastInsertId();



                        if($projectDetails['Project']['url']!="")

                            $project_home_url=$projectDetails['Project']['url'];

                        else

                            $project_home_url="http://".HTTP_PATH."/".$projectDetails['Project']['project_name'];

                       

                            $mailBody=nl2br($this->data['send_invite']['user_msg']);

                            if($_POST['invite_content']) {

                                $mailBody.=$_POST['invite_content'];

                                $mailBody.=$_POST['invite_mailfooter'];

                             }



                            if($_POST['invite_subject']) {

                                $subject  = $_POST['invite_subject'];

                            } else{

                                 $subject  = "Invitation"; //$mailMessage['EmailTemplate']['subject'];

                            }

                                         

                            $from = $username;

                            $fromname = $sender_name;

                            $to = $email;



                            $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname);





                        //} 

                        



                    }     



                }



                $this->Session->setFlash('Invitation successfully send to your friends','default',array('class' => 'successmsg'));                           

                $this->redirect('/companies/invite_friends');



                

            }



        }



        /*******************************************************************

        * Function Name: invite_friends

        * Function Arguments: None

        * Function Return: (array)



        ********************************************************************/



        function invite_friends()

        {

            ##check user session live or not

            $this->session_check_user();



            $usertype = $this->Session->read("User.User.usertype");

            $userid = $this->Session->read("User.User.id");

            $username=$this->Session->read("User.User.username");   



            $this->layout= 'internal_layout';

            



            //for active menu display

            $this->set('page_url',"invite");

            

            $current_domain= $_SERVER['HTTP_HOST'];

            $this->set('current_domain',$current_domain);



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)){ if(!empty($this->Cookie)){

                    $pname= $this->Cookie->read('name'); 

                    $project_id= $this->Cookie->read('id'); 



                    $projectDetails=$this->getprojectdetails($project_id);    

                    if($projectDetails['Project']['project_name']==$pname){

                        $logout_redirect=$projectDetails['Project']['logoutredirect'];



                        $condition="Content.id='".$logout_redirect." and Content.active_status='1' and Content.delete_status='0' ";



                        $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);

                        $page=$page_content['Content']['title'];

                    }    



                    if(!empty($page))

                        $this->redirect('/companies/'.$page);



                }else{



                    $this->redirect('/companies/session_expired');

                }

            }





            //print_r($holderdata);

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);



            $usermodified = $this->Session->read("User.User.modified");

            

            

            $condition = "user_id=$userid ";

            $holder_data = $this->Holder->find('first',array('conditions' => $condition));

            $sender_name=$holder_data['Holder']['firstname']." ".$holder_data['Holder']['lastnameshow'];

            

            if($sender_name=="")

                $sender_name=$holder_data['Holder']['screenname'];

            

             

            if(!empty($projectDetails['Project']['url'])) {

                             $pos = strpos($projectDetails['Project']['url'],"http://");

                             if ($pos === false) {

                                 $project_home_url="http://".$projectDetails['Project']['url'];

                             }else{

                                 $project_home_url=$projectDetails['Project']['url'];

                             }

                              

           }else {

                             $project_home_url='http://'.HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

             }

          $this->set('project_home_url',$project_home_url);

          $invitelink=$project_home_url."?register_redirect=1&invite_id=".$userid;       

          $invitelinkback= '<a href="'.$invitelink.'"> View Invitation </a> ';             

          $invite_subject="Invitation";

          $invite_content="This is a invitaion to join our project ".$project_name;

          $invite_mailfooter="";

            //get default send invite msg

            //$condition = " EmailTemplate.email_template_name= 'FRIEND INVITATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

            //$mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



            //$msgbody=$mailMessage['EmailTemplate']['content'];  INVITE_LINK_BACK

            

                    /**

                    * Get Project INVITE EMAIL TEMPLATE content and subject to send invitiation

                    * 

                    */

                        $invitename = "MEMBER INVITE EMAIL";

                        $conditiontemp = "EmailTemplate.project_id = '".$project_id."' AND EmailTemplate.delete_status='0' AND EmailTemplate.email_template_name = '".$invitename."'";

                        $templatearr = $this->EmailTemplate->find('all',array("conditions"=>$conditiontemp));

                        if($templatearr)  {

                              $invite_subject = $templatearr[0]['EmailTemplate']['subject'];

                              $invite_content= $templatearr[0]['EmailTemplate']['content'];

                              

                               /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/

                               ///////////////////////////////// append mail footer set by super admin -U /////////////////////////

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    //$invite_content.=$mailfooter;

                               ///////////////////////////////// append mail footer set by super admin /////////////////////////

                               

                                // Set path to inserted image 

                                $invite_content = $this->replaceImgPathInEmailContent($invite_content); 

                                

                                /**

                                * New Email Temp replacement code for data Elements 

                                */

                                //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails);

                               //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                    $dataEleValuesArray[DATA_ELEMENT_INVITE_LINK_BACK]= $invitelinkback;

                                    $dataEleValuesArray[DATA_ELEMENT_INVITE_SENDER_NAME]= $sender_name;

                                    //$dataEleValuesArray[DATA_ELEMENT_INVITE_SENDER_NAME]= $sender_name;

                                    $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                    $invite_subject=$this->EmailTemplates->insertDataElementValuesToContent($invite_subject);

                                    $invite_content=$this->EmailTemplates->insertDataElementValuesToContent($invite_content);

                                    $invite_mailfooter=$this->EmailTemplates->insertDataElementValuesToContent($mailfooter);

                        }

              

            

            $msgbody="Dear Friend,\n Please visit and join.";

            $this->set('msgbody',$msgbody);

            $this->set('invite_subject',$invite_subject);

            $this->set('invite_content',$invite_content);

            $this->set('invite_mailfooter',$invite_mailfooter);



            if($this->data)

            {



                

                $email_id=$this->data['invite']['email_id'];

                $email_password=$this->data['invite']['email_password'];

                $email_provider=$this->data['invite']['email_provider'];



                $_SESSION['email_provider']=$email_provider;

                

                // thi line is important.  this will work just like import in core php

                App::import('Vendor', 'openinviter', array('file' => 'openinviter'.DS.'openinviter.php'));

                

                              

                 if($email_provider!="Yahoo" && $email_provider!="yahoo")

                 {               



                    $inviter = new openinviter();

                    $oi_services = $inviter->getPlugins();





                    $inviter->startPlugin($email_provider); 

                    // supply a file name with ought .php in the parameter. you will fine the files in the "vendors/openinviter/plugins/" In the Plugins you will find all the files which communicate with the respected services to fatch data. you will pass google, yahoo etc.



                    

                    // it will return error if any

                    $internal = $inviter->getInternalError();



                    if($internal!="")

                    {

                        $this->Session->setFlash($internal,'default',array('class' => 'errormsg1'));    

                        $this->redirect('/companies/invite_friends');

                    }

                    else

                    {



                        // this is use for login in to services just like gmail.com account 1st. parameter take login id and 2nd. parameter takes password

                        $check_login=$inviter->login($email_id,$email_password);

                                           

                        if($check_login)

                        {

                            

                            // this will return the array which contain all the email address from the account you want to fetch.

                            $contacts = $inviter->getMyContacts();



                            $this->set("contacts",$contacts); 

                            

                            

                            if(empty($contacts))

                                $this->Session->setFlash("No contacts are found.",'default',array('class' => 'errormsg1'));

                        }

                        else

                        {

                            $this->Session->setFlash("Email or Password are incorrect.Try Again",'default',array('class' => 'errormsg1'));    

                            $this->redirect('/companies/invite_friends');

                        }

                    }

                

                }

                else

                 if($email_provider=="Yahoo" || $email_provider=="yahoo")

                 {

                     

                     require_once('class.GrabYahoo.php');

                     // Initializing Class

                     $yahoo  = new GrabYahoo;

                     

                     /* 

                    Setting the desired Service 

                      1. addressbook => Used to grab Yahoo! Address Book

                      2. messenger => Used to grab Yahoo! Messenger List

                      3. newmail => Used to grab number of new Yahoo! mails

                      4. calendar => Used to grab Yahoo! Calendar entries 

                    */

                    $yahoo->service = "addressbook";

                    /*

                    Set to true if HTTP proxy is required to browse net

                      - Setting it to true will require to provide Proxy Host Name and Port number

                    */

                    $yahoo->isUsingProxy = false;

                    

                    // Set the Proxy Host Name, isUsingProxy is set to true

                    $yahoo->proxyHost = "";



                    // Set the Proxy Port Number

                    $yahoo->proxyPort = "";



                    // Set the location to save the Cookie Jar File

                    $yahoo->cookieJarPath = $_SERVER['DOCUMENT_ROOT'] . "/";



                    /* 

                    Execute the Service 

                      - Require to pass Yahoo! Account Username and Password

                    */

                    $yahooList = $yahoo->execService($email_id, $email_password);

                  



                    // Use this line to figure out any error generated during the process

                    //echo $yahoo->errorInfo;

                     

                                          

                     if(!$yahoo->errorInfo)

                     {

                                                  

                         if(!empty($yahooList))

                         {      

                            $contacts=array() ;

                            foreach($yahooList as $email['email_1']=>$email['first_name'])

                            {

                                if($email['first_name']['first_name']=="")

                                    $email['first_name']['first_name']=$email['email_1'];

                                    

                                $contacts[$email['email_1']]=$email['first_name']['first_name'];

                            }

                                               

                            $this->set("contacts",$contacts); 

                         }

                         else

                         {

                             $this->Session->setFlash("No contacts are found.(yahoo)",'default',array('class' => 'errormsg1'));

                         }

                     }

                     else

                     {

                         $this->Session->setFlash($yahoo->errorInfo,'default',array('class' => 'errormsg1'));    

                         $this->redirect('/companies/invite_friends');

                     }

                 }



            }

            

            

            //handle twitter request//

            include 'twitter_tweet_lib/EpiCurl.php';

            include 'twitter_tweet_lib/EpiOAuth.php';

            include 'twitter_tweet_lib/EpiTwitter.php';

            include 'twitter_tweet_lib/secret.php';

            

            $twitterObj = new EpiTwitter($consumer_key, $consumer_secret);

			if(isset($_GET['oauth_token'])){

	            $oauth_token = $_GET['oauth_token'];

				$this->set("oauth_token",$oauth_token);

			}

            

            $this->set("twitterObj",$twitterObj);

            

            

            if(isset($oauth_token) == '')

                { 

                                  

                    $server_name=$_SERVER['HTTP_HOST'];

                    $server_path=$_SERVER['REQUEST_URI'];

                    $twitter_redirect=$server_name.$server_path;

                    

                    $this->set('twitter_redirect',$twitter_redirect);

                                     

             } 

            else

              {

                  

                $twitterObj->setToken($_GET['oauth_token']);

                $token = $twitterObj->getAccessToken();

                $twitterObj->setToken($token->oauth_token, $token->oauth_token_secret);          

                //$_SESSION['ot'] = $token->oauth_token;

                //$_SESSION['ots'] = $token->oauth_token_secret;

                

                $this->Session->write('ot',$token->oauth_token);

                $this->set("twitter_ot",$token->oauth_token);

                $this->Session->write('ots',$token->oauth_token_secret);

                $this->set("twitter_ots",$token->oauth_token_secret);

                

                $twitterInfo= $twitterObj->get_accountVerify_credentials();

                $twitterInfo->response;

                

                $t_username = $twitterInfo->screen_name;

                $this->set("t_username",$t_username);

                $profilepic = $twitterInfo->profile_image_url;

                $this->set("profilepic",$profilepic);



                //include 'update.php';

                $this->set("twitterInfo",$twitterInfo);

                

                //create a invitation instance

                $invite_arr=array();

                $invite_arr['user_id']=$userid;

                $invite_arr['project_id']=$project_id;

                $invite_arr['from']=$this->Session->read("User.Holder.email");

                $this->Invitation->Save($invite_arr);

                $invite_id = $this->Invitation->getLastInsertId();

                $this->set("invite_id",$invite_id);

                

                

             } 

                          

             

             if(isset($_POST['submit']) && $_REQUEST['tweet'])

             {

                $msg = $_REQUEST['tweet'];

               

                $ot = $_REQUEST['twitter_ot'];

                $ots = $_REQUEST['twitter_ots'];

                $twitterObj->setToken($ot, $ots);

                $update_status = $twitterObj->post_statusesUpdate(array('status' => $msg));

                $temp = $update_status->response;

                

                        

                //echo "<div align='center'>Updated your Timeline Successfully .</div>";

                $this->Session->setFlash('Updated your Twitter Timeline Successfully','default',array('class' => 'successmsg')); 

                $this->redirect('/companies/invite_friends');

        

            }

        }

        

        



        function invite_fbfriends()

        {

            ##check user session live or not

            $this->session_check_user();



            $usertype = $this->Session->read("User.User.usertype");

            $userid = $this->Session->read("User.User.id");





            $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url',"invite");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)){ if(!empty($this->Cookie)){

                    $pname= $this->Cookie->read('name'); 

                    $project_id= $this->Cookie->read('id'); 



                    $projectDetails=$this->getprojectdetails($project_id); 

                    if(!empty( $projectDetails['Project']['facebookappkey'])&& !empty($projectDetails['Project']['facebooksecretkey']))

                    {

                       

                    if($projectDetails['Project']['project_name']==$pname){

                        $logout_redirect=$projectDetails['Project']['logoutredirect'];



                        $condition="Content.id='".$logout_redirect." and Content.active_status='1' and Content.delete_status='0' ";



                        $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);

                        $page=$page_content['Content']['title'];

                    }    



                    if(!empty($page))

                        $this->redirect('/companies/'.$page);

                    }else{

                         $this->redirect('/companies/invite_friends');

                    }    

                }else{



                    $this->redirect('/companies/session_expired');

                }

            }





            //print_r($holderdata);

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);



            $usermodified = $this->Session->read("User.User.modified");







            if($this->data)

            {



          

                $email_id=$this->data['invite']['email_id'];

                $email_password=$this->data['invite']['email_password'];

                $email_provider=$this->data['invite']['email_provider'];





            }







        }



        /*******************************************************************

        * Function Name: openinvitor_contacts

        * Function Arguments: None

        * Function Return: (array)



        ********************************************************************/



        function openinvitor_contacts()

        {



            /* if($this->data)

            {

            $email_provider=$this->data['email_provider'];

            $email_id=$this->data['email_id'];

            $email_password=$this->data['email_password'];

            */   



            // thi line is important.  this will work just like import in core php

            App::import('Vendor', 'openinviter', array('file' => 'openinviter'.DS.'postinstall.php'));





            $inviter = new openinviter();

            $oi_services = $inviter->getPlugins();





            $inviter->startPlugin('gmail'); 

            // supply a file name with ought .php in the parameter. you will fine the files in the "vendors/openinviter/plugins/" In the Plugins you will find all the files which communicate with the respected services to fatch data. you will pass google, yahoo etc.



            // it will return error if any

            $internal = $inviter->getInternalError();





            // this is use for login in to services just like gmail.com account 1st. parameter take login id and 2nd. parameter takes password

            $inviter->login('useremail_id','password');



            // this will return the array which contain all the email address from the account you want to fetch.

            $contacts = $inviter->getMyContacts(); 



            // }

        }





        /*******************************************************************

        * Function Name: google_login

        * Function Arguments: None

        * Function Return: (array)



        ********************************************************************/



        function google_login()

        {

            require 'openid.php';

            try {

                $openid = new LightOpenID;

                if(!$openid->mode) {

                    if(isset($_GET['login'])) {

                        $openid->identity = 'https://www.google.com/accounts/o8/id';

                        $openid->required = array('namePerson/first', 'namePerson/last', 'contact/email');

                        //header('Location: ' . $openid->authUrl());

                        $this->redirect($openid->authUrl());



                    }



                } elseif($openid->mode == 'cancel') {

                    //echo 'User has canceled authentication!';

                    $this->Session->setFlash('User has canceled authentication!','default',array('class' => 'errormsg1')); 

                    $this->redirect('/companies/registeruser');

                } else {

                    if($openid->validate())

                    {     



                        $project_id=$this->Session->read("projectwebsite_id");

                        $identity = $openid->identity;

                        $attributes = $openid->getAttributes();

                        $email = $attributes['contact/email'];

                        $first_name = $attributes['namePerson/first'];

                        $last_name = $attributes['namePerson/last'];

                        

                        $conditions="username='$email' and project_id='$project_id'";

                        $user_data=$this->User->find("first",array("conditions"=>$conditions));

						//echo '<pre>';print_r()



                        if(!empty($user_data))       // if exists then user is already register and forward user to dashboard

                        {

                            //$user_data=$user_data['User'];

                            $this->Session->write('User', $user_data);

                        

                        $daily_visit_check=$this->Point->query("select * from point_archive_users where point_id=10 and member_id='".$user_data['User']['id']."' and project_id='$project_id'");

                        



                            if(empty($daily_visit_check))

                            {

                                $this->Point->triggerPoints(DAILY_VISIT,$project_id,$user_data['User']['id']);        //trigger for daily visit

                            }

                            else

                            {

                                $old_created_date=$daily_visit_check[0]['point_archive_users']['created'];

                                $current_date=date("Y-m-d");

                                $diff = abs(strtotime($current_date) - strtotime($old_created_date));

                                $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));



                                if($days>=1)

                                    $this->Point->triggerPoints(DAILY_VISIT,$project_id,$user_data['User']['id']);        //trigger for daily visit

                            }



                        }

                        else         //// if user comming first time i.e user is registering using google a/c

                        {

                            $user_data['User']['project_id']= $project_id;   

                            $user_data['User']['username']= $email;  

                            $user_data['User']['password']= md5("google_password"); 

                            $user_data['User']['active_status']=1; 

                            $user_data['User']['usertype']= "holder"; 

                            $user_data['User']['delete_status']= 0; 

                            $user_data['User']['created']= date("Y-m-d H:m:s");  

                            $user_data['User']['avatar_url']= "";

                            $this->User->save($user_data['User']);



                            $user_id=$this->User->getLastInsertId();

                            $user_data['User']['id']=$user_id;

                            $new_member_id=$user_id;



                            $holder['project_id']=$project_id;

                            $holder['user_id']=$user_id;

                            $holder['firstname']=$first_name;

                            $holder['lastnameshow']=$last_name;

                            $holder['email']=$email;

                            $holder['screenname']=$first_name;

                            $holder['google_userid']=$email;



                            $this->Holder->save($holder);



                            //$new_member_id = $this->User->getLastInsertId();

                            

                            //triggered points setup for user

                            $this->Point->triggerPoints(REGISTER,$project_id,$new_member_id);        //trigger for register

                            

                            if($this->Session->read("invite_id"))    //user came through twitter invitation and use google login for registration

                            {

                                $invitation_details=$this->Invitation->find("first",array('conditions' => "invite_id=".$this->Session->read("invite_id")));

                                $invite_user_id=$invitation_details['Invitation']['user_id'];

                                $invite_project_id=$invitation_details['Invitation']['project_id'];

                                

                                //triggered points setup for user

                                $this->Point->triggerPoints(POINTS_PER_FRIEND_JOIN,$invite_project_id,$invite_user_id);        //trigger for invitation

                                $this->Point->triggerPoints("FRIEND_JOIN_BONUS_CHECK",$invite_project_id,$invite_user_id);        //trigger for no of invitation check                  

                                $this->Session->write("invite_id","");

                            }



                            //since he is registering update profile points for register

                            $this->User->query("insert into user_profile_completions(user_id,register,avatar) values($new_member_id,30,10)");







                            $this->Session->write('User', $user_data);



                        }





                        $this->Session->write('CurrentProject', $project_id);



                        $this->redirect('/companies/dashboard');



                    }

                    else

                    {

                        //echo 'User ' . $openid->identity . 'has not logged in.';

                        $this->Session->setFlash("Error while login with google",'default',array('class' => 'errormsg1')); 

                    }

                }

            } catch(ErrorException $e) {

                //echo $e->getMessage();

                $this->Session->setFlash($e->getMessage(),'default',array('class' => 'errormsg1')); 

                $this->redirect('/companies/registeruser');

            }

        }

        

        

         

        /*******************************************************************

         * Function Name: Google Plus Login

        * Function Arguments: array

        * Function Return: (array)

        

        ********************************************************************/

        

        

        function googleplus_login()

        {



        	if(isset($_GET['error']) && $_GET['error']=='access_denied'){

        		$this->Session->setFlash('User has canceled authentication!','default',array('class' => 'errormsg1'));

        		$this->redirect('/companies/registeruser');

			}			

        	App::import('Vendor', 'google', array('file' => 'Google_Client.php'));

        	App::import('Vendor', 'google/contrib', array('file' => 'Google_PlusService.php'));

			$project_id = '1';

			$projectDetails = $this->getprojectdetails($project_id);

			$googleplusclientid  = $projectDetails['Project']['googleplusclientid'];

			$googleplussecretkey   = $projectDetails['Project']['googleplussecretkey'];

			

        	$client = new Google_Client();

        	if (isset($_REQUEST['logout'])) {

        		unset($_SESSION['access_token']);

        	}

        	if (isset($_GET['code'])) {

        		$client->authenticate($_GET['code']);

        		$_SESSION['access_token'] = $client->getAccessToken();

        		$params = json_decode($_SESSION['access_token']);

        		$acces_token = $params->access_token;

        		$url = 'https://www.googleapis.com/oauth2/v1/userinfo?access_token='.$acces_token;

        		$ch = curl_init();

        		curl_setopt($ch, CURLOPT_URL,$url);

        		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);

        		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2);

        		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);  //to suppress the curl output

        		$result = curl_exec($ch);

        		$googleuser = json_decode($result);

				//$this->pl($googleuser);

				 curl_close ($ch);

				$project_id = $this->Session->read("projectwebsite_id");

				$oauthGpluseId = $googleuser->id;

				$email = $googleuser->email;

				$first_name = $googleuser->given_name;

				$last_name =  $googleuser->family_name;

        				//$conditions="username='$email' and project_id='$project_id'";

						 $conditions='google_userid="'.$oauthGpluseId.'" AND project_id="'.$project_id.'"';

        				$holder_data = $this->Holder->find("first",array("conditions"=>$conditions));	

						//$this->pl($holder_data);

						$user_data = $this->User->findById($holder_data['Holder']['user_id']);

	

        				if(!empty($user_data))       // if exists then user is already register and forward user to dashboard



        				{

							

        					$this->Session->write('User', $user_data);

							$this->redirect(array('controller'=>'companies','action'=>'dashboard'));

					}else{

						

						$gplus = array(

								'oauth_provider' => 'Gplus',	

								'oauth_uid' => $googleuser->id,	

								'screen_name' =>$googleuser->given_name,

								'first_name' => $googleuser->name,								

								'email'	=>$googleuser->email,

								'project_id' =>$project_id

								);

					$this->Session->write('gplus', $gplus);		

					$this->redirect(array('controller'=>'companies','action'=>'registeruser'));	

			} 

		}		

	}

        /*******************************************************************

        * Function Name: twitter login

        * Function Arguments: None

        * Function Return: (array)



        ********************************************************************/



        function twitter_login()

        {

		

			Configure::write('debug','2');

			require 'twitter/EpiCurl.php'; 

            require 'twitter/EpiOAuth.php';

            require 'twitter/EpiTwitter.php';

           //	$consumer_key = '6pfGRRAR6ys7DwTRFfQ9EQ';

		//	$consumer_secret = 'bpq5gQ8bixT7gYxmMk0FIlsLCZT55r0HZ2A127Ftd0';

		//	$token = '748855514-lBxk6tUr1IODJKlgbMnfnXAzNw1PZQfapTD9hBLq';

		//	$secret = 'qMLEGEH8nVI1gGsPOmrhAXrcUxmRrxbXff8GvrN5oE';						

			$project_id = '1';

			$projectDetails = $this->getprojectdetails($project_id);



			$consumer_key = $projectDetails['Project']['twitterkey'];

			$consumer_secret = $projectDetails['Project']['twittersecretkey'];

			$token = $projectDetails['Project']['twittertoken'];

			$secret = $projectDetails['Project']['twitterSecret'];



            if(isset($_GET['oauth_token']))

            {				

				$twitterObj = new EpiTwitter($consumer_key, $consumer_secret,$token,$secret);

				$twitterObj->setToken($_GET['oauth_token']);

				$token = $twitterObj->getAccessToken();

				$twitterObj->setToken($token->oauth_token, $token->oauth_token_secret);

				$twitterInfo= $twitterObj->get_accountVerify_credentials();

				$twitterId = $twitterInfo->id;

				$screenName = $twitterInfo->screen_name;				

                $profilepic = $twitterInfo->profile_image_url;

				$username = $twitterInfo->name;

				$usernameArr = explode(" ",$username);

                /* Check if a value is present in db for this user */

                $conditions='screenname="'.$screenName.'" and twitter_userid="'.$twitterId.'"';

                $holder_data = $this->Holder->find("first",array("conditions"=>$conditions));	

				

				$user_data = $this->User->findById($holder_data['Holder']['user_id']);	

				//print_r($user_data);die;			

                if(empty($user_data))

                {

				   	 //$password = ra  

                    $project_id= '1';

                   // $new_password = $this->Sendemail->genratepassword();

                  //	$new_password_md5 = md5($this->Sendemail->genratepassword());

                    //$user_data['User']['project_id']= $project_id;

                  //  $user_data['User']['password']=$new_password_md5;

                   // $user_data['User']['username']=$username;

                    //$user_data['User']['usertype']='holder';

                    //$user_data['User']['avatar_url'] = $profilepic;

					//$this->pl($user_data);

                    //$this->User->save($user_data['User']);

                   // $last_inserted_id  = $this->User->getLastInsertId();

                   // $user_data['User']['id']=$last_inserted_id;

                    //$new_member_id=$last_inserted_id;



                   // $holder['project_id']=$project_id;

                    //$holder['user_id']=$last_inserted_id;

                    //$holder['firstname']=$usernameArr['0'];

                    //$holder['lastnameshow']=$usernameArr['1'];

                    //$holder['email']=$email;

                    //$holder['screenname']=$screenName;

                    //$holder['twitter_userid']=$twitterId;

                    //$this->Holder->save($holder);

					

					$twitterSesion = array(

								'oauth_provider' => 'Twitter',	

								'oauth_uid' => $twitterId,	

								'first_name' => $usernameArr['0'],

								'last_name' => $usernameArr['1'],

								'screenName'	=>$screenName,

								'profilepic' => $profilepic

								);

								//print_r($twitterSesion);die("hi");

					$this->Session->write('twitterSesion', $twitterSesion);		

					$this->redirect(array('controller'=>'companies','action'=>'registeruser'));	



                    //triggered points setup for user

                    /*$this->Point->triggerPoints(REGISTER,$project_id,$new_member_id);        //trigger for register

                    

                    

                    if($this->Session->read("invite_id"))    //user came through twitter invitation and use twitter login for registration

                    {

                        $invitation_details=$this->Invitation->find("first",array('conditions' => "invite_id=".$this->Session->read("invite_id")));

                        $invite_user_id=$invitation_details['Invitation']['user_id'];

                        $invite_project_id=$invitation_details['Invitation']['project_id'];

                        

                        //triggered points setup for user

                        $this->Point->triggerPoints(POINTS_PER_FRIEND_JOIN,$invite_project_id,$invite_user_id);        //trigger for invitation

                        $this->Point->triggerPoints("FRIEND_JOIN_BONUS_CHECK",$invite_project_id,$invite_user_id);        //trigger for no of invitation check                  

                        $this->Session->write("invite_id","");

                    }





                    //since he is registering update profile points for register

                    $this->User->query("insert into user_profile_completions(user_id,register,avatar) values($new_member_id,30,10)");



                    $this->Session->write('User', $user_data);*/



                }

                else

                {

                     $this->Session->write('User', $user_data);

					 $this->Session->write('CurrentProject', $project_id);

                $daily_visit_check=$this->Point->query("select * from point_archive_users where point_id=10 and member_id='".$user_data['User']['id']."' and project_id='$project_id'");

                

                if(empty($daily_visit_check))

                {

                    $this->Point->triggerPoints(DAILY_VISIT,$project_id,$user_data['User']['id']);        //trigger for daily visit

                }

                else

                {

                    $old_created_date=$daily_visit_check[0]['point_archive_users']['created'];

                    $current_date=date("Y-m-d");

                    $diff = abs(strtotime($current_date) - strtotime($old_created_date));

                    $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                    

                    if($days>=1)

                        $this->Point->triggerPoints(DAILY_VISIT,$project_id,$user_data['User']['id']);        //trigger for daily visit

                }

                                            

                $this->redirect(array('controller'=>'companies','action'=>'dashboard'));

                }



               

            }

        }







        /*******************************************************************

        * Function Name: login

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/





        function login($facebook=''){

		   if($facebook!='') {

               $this->set('getfacebook_login',"$facebook");   

           }               

            ##check user session live or not

			$usersession   = $this->Session->read('User');

			

            if(!empty($usersession)){

                if(isset($_GET['show_comment_link'])){

                    $this->redirect(array('controller'=>'companies','action'=>'view_registeredcoins'));    

                }

                

                 if(isset($_GET['redirecttopage'])){

                    $this->redirect(array('controller'=>'companies','action'=>$_GET['redirecttopage']));    

                }    

              $this->redirect(array('controller'=>'companies','action'=>'dashboard')); 

               

            }

            $datastyle=$this->getstyles();

            $this->Session->delete('styledata');

            $this->set('styledata',$datastyle);

            $this->Session->write("styledata",$datastyle);

            $this->layout= 'internal_layout';



            // //for active menu display



          //  $this->set('page_url',$page_name);

            if(isset($_GET['show_comment_link'])){

                $this->set('show_comment',$_GET['show_comment_link']);

            }

              

            if(isset($_GET['redirecttopage'])){

                $this->set('redirecttopage',$_GET['redirecttopage']); 

            }    



			$project_id = '1';    

            $project_name = '';    

           // if(empty($project_name)) $this->redirect(array('controller'=>'companies','action' =>'session_expired'));

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);

            $this->set('project',$projectDetails);

            $loutouturl = $this->getlogouturl($projectDetails['Project']['logoutredirect']);

            $this->Session->write('logouturl', $loutouturl);





            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $this->set('meta_title',$projectDetails['Project']['sitename']);

            $this->set('page_title',$projectDetails['Project']['sitename']);



            $page_content=$this->getcontents("login");

			

            $this->set('page_content',$page_content);



            if(isset($this->data)){


                //...This if for login purpose



                $username = $this->data['User']['username'];

                $password = $this->data['User']['password'];



                if($username=="" ||$password=="" )

                {                    

                    $this->Session->setFlash('Username or Password is empty!','default',array('class' => 'errormsg1')); 

                }

                else

                {

                    $condition = " User.username = '".$username."' and User.project_id='".$project_id."'  and User.delete_status='0'";

                    $userpresent = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));

					

					if(is_array($userpresent) && !empty($userpresent)) {     

                        $username = $this->data['User']['username'];

                        $password = $this->data['User']['password'];

                        $this->User->bindModel(array('hasOne' => array('Holder' => array('foreignKey' => false,'conditions' => array(' Holder.user_id=User.id' )))));    

                        $condition = " User.username = '".$username."' AND User.password = '".md5($password)."' and User.project_id='".$project_id."' and User.delete_status='0' ";

                        $userDetails = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));    



                        if(is_array($userDetails) && !empty($userDetails)) {



                            if($userDetails['User']['active_status'] == '1'){     

                                    

									// By Suman

									$agreeCheck = $this->licenseAgreementCheck($userDetails['User']['project_id'], $userDetails['User']['id'],$userDetails['User']['last_login']);

									//var_dump($agreeCheck);

									//print_r($userDetails);

									//die("need to agree again with changed licence");

									if($agreeCheck && $userDetails['User']['usertype'] == 'sponsor') {

									$this->Session->delete('Agreeemnt_project');

									$this->Session->write('Agreeemnt_project.pid', $userDetails['User']['project_id']);

									$this->Session->write('Agreeemnt_project.uid', $userDetails['User']['id']);

									$this->redirect(array('controller'=>'companies','action'=>'agreement'));

									}

									

									//die("test here");

									//pr($userDetails);die;

									$this->Session->write('User', $userDetails);

                                    $userDetails['User']['last_login']=date("Y-m-d H:i:s");

                                    $userDetails['User']['is_loggedin']='1';

                                    $this->User->save($userDetails);

                                    $this->Session->write('CurrentProject', $project_id);

                                    $s_URL = $this->Session->read('URL'); //    

                                  

                                    $daily_visit_check=$this->Point->query("select * from point_archive_users where point_id='10' and member_id='".$userDetails['User']['id']."' and project_id='$project_id' order by id desc limit 1");

                                    

                                    if($s_URL != ''){

                                        if($userDetails['User']['usertype']=="holder")

                                        {

                                            if(empty($daily_visit_check))

                                            {

                                                $this->Point->triggerPoints(DAILY_VISIT,$project_id,$userDetails['User']['id']);        //trigger for daily visit

                                            }

                                            else

                                            {

                                                $old_created_date=$daily_visit_check[0]['point_archive_users']['created'];

                                                $current_date=date("Y-m-d");

                                                $diff = abs(strtotime($current_date) - strtotime($old_created_date));

                                                $years = floor($diff / (365*60*60*24));

                                                $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));

                                                $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                                                

                                                if($days>=1)

                                                    $this->Point->triggerPoints(DAILY_VISIT,$project_id,$userDetails['User']['id']);        //trigger for daily visit

                                            }



                                             

                                        }

                                         if($_GET['show_comment_link']){

                                            $this->redirect('/companies/view_registeredcoins');    

                                            }

                                        // redirect to email_subscription page , if un-subscription link clicks from m email 

                                         if($_GET['redirecttopage']){

                                              $this->redirect('/companies/'.$_GET['redirecttopage']);    

                                         }

                                                        

                                            $this->redirect($s_URL);  

                                    }else{    

                                        

                                    if($userDetails['User']['usertype']=="holder")

                                    {                                   

                                        if(empty($daily_visit_check))

                                        {

                                            $this->Point->triggerPoints(DAILY_VISIT,$project_id,$userDetails['User']['id']);        //trigger for daily visit

                                        }

                                        else

                                        {

                                            $old_created_date=$daily_visit_check[0]['point_archive_users']['created'];

                                            $current_date=date("Y-m-d");

                                            $diff = abs(strtotime($current_date) - strtotime($old_created_date));

                                            $years = floor($diff / (365*60*60*24));

                                            $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));

                                            $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                                            

                                            if($days>=1)

                                                $this->Point->triggerPoints(DAILY_VISIT,$project_id,$userDetails['User']['id']);        //trigger for daily visit

                                        } 

                                        

                                      /*  if($projectDetails['ProjectType']['show_top10']==0)

                                         {

                                             $this->redirect('/companies/showtop10points');

                                         }*/   

                                         

                                        

                                    }

                                     if(isset($_GET['show_comment_link'])){

                                        $this->redirect(array('controller'=>'companies','view_registeredcoins'));    

                                     }

                                     

                                             // redirect to email_subscription page , if un-subscription link clicks from m email 

                                         if(isset($_GET['redirecttopage'])){

                                              $this->redirect(array('controller'=>'companies','action'=>$_GET['redirecttopage']));         

											  }                                                                      

										$this->redirect(array('controller'=>'companies','action'=>'dashboard')); 

                                        

                                    }

                                }elseif($userDetails['User']['active_status'] == '0'){                 



                                    if($projectDetails['Project']['registration_confirmation']==1)



                                    {            $this->Session->setFlash('Account not activated,you must check your e-mail for a Confirmation e-mail from us and to finish the Activation.','default',array('class' => 'errormsg')); }

                                    else{

                                        $this->Session->setFlash('This Account has been deactivated.','default',array('class' => 'errormsg1')); 

										}

									$this->redirect(array('controller'=>'companies','action'=>'login')); 								

                                }

                         //   }

                        }else{    

                            $this->Session->setFlash('Username and Password mismatched.','default',array('class' => 'errormsg1'));                                        

							$this->redirect(array('controller'=>'companies','action'=>'login')); 								

                        }



                    }else{

                        $this->Session->setFlash('Invalid username!','default',array('class' => 'errormsg1'));    

                        $this->redirect(array('controller'=>'companies','action'=>'login')); 								                     

                    }

                }

            }

        }





        /*******************************************************************

        * Function Name: login1

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function login1(){



            $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url',$page_name);



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    





            if(isset($this->data)){

                //...This if for login purpose



                $errorMessage = "";



                $username = $this->data['Company']['username'];

                $password = $this->data['Company']['password'];



                if($username=="" ||$password=="" )

                {

                    $this->Session->setFlash('Username or Password is empty!',null,null,'error');  

                    $this->redirect('/'.$project_name);

                }

                else

                {



                    $condition = " User.username = '".$username."' and User.project_id='".$project_id."'";

                    $userpresent = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));



                    if(is_array($userpresent) && !empty($userpresent)) {                

                        $username = $this->data['Company']['username'];

                        $password = $this->data['Company']['password'];



                        $condition = " User.username = '".$username."' AND User.password = '".md5($password)."' and User.project_id='".$project_id."' ";

                        $userDetails = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));    



                        if(is_array($userDetails) && !empty($userDetails)) {

                            if($userDetails['User']['active_status'] == '1'){

                                $this->Session->write('User', $userDetails);

                                $s_URL = $this->Session->read('URL'); //    

                                if($s_URL != ''){

                                    $this->redirect($s_URL);

                                }else{        

                                    $this->redirect('/companies/dashboard');

                                }

                            }elseif($userDetails['User']['active_status'] == '0'){                        

                                $this->Session->setFlash('Account not activated.',null,null,'error');                 

                                $this->redirect('/'.$project_name);

                            }                            

                        }else{                    

                            $this->Session->setFlash('Username and Password mismatched.',null,null,'error');  

                            $this->redirect('/'.$project_name);

                        }



                    }else{

                        $this->Session->setFlash('Invalid username!',null,null,'error');                  

                        $this->redirect('/'.$project_name);

                    }

                }



            }

        }

        /*******************************************************************

        * Function Name: logout

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/



        function logout($pageaction=''){



            $project_id=$this->Session->read("projectwebsite_id");    

            $projectDetails=$this->getprojectdetails($project_id);    



            $userid = $this->Session->read("User.User.id");

           

            //set login date

            $login_date=date('m-d-Y H:m:s');

            $user['User']['id']=$userid;

            //$user['User']['last_login']=$login_date;

            $user['User']['is_loggedin']='0';

            $user['User']['is_chatjoined']='0';

            

            $this->User->Save($user['User']);



            unset($_SESSION['FacebookUser']);





            $_SESSION['facbooklogoutcheck']=1;



            $usrdtl = $this->Session->read('User');

            $this->Session->delete('User');

            $this->Cookie->destroy('UserId');

            //$this->Session->delete('CurrentProject');

            //$this->Session->setFlash('You\'ve successfully logged out.',null,null,'error'); 

            $project_name=$this->Session->read("projectwebsite_name");

            //         if(isset($usrdtl['User']['fbid']) && $usrdtl['User']['fbid'] != '')

            //             $facebook->logout(array('redirect' => '/'.$project_name));

            //         else



            if($projectDetails['Project']['logoutredirect']!=0)        //if logout redirect is defined by prject manager

            {

                $this->redirect('redirlogout');

            }

            else

            {



                if($pageaction !=""){

                    $this->redirect('/'.$pageaction);

                }else{

                    $this->redirect('/'.$project_name);

                }    

            }



        }







        /*******************************************************************

        * Function Name: redirect logout

        * Function Arguments: None

        * Purpose:if from admin section Logout Redirect is change by user 

        ********************************************************************/



        function redirlogout()

        {

            

            

            $this->Session->delete('User');

            //$this->Session->delete('CurrentProject');

            //$this->Session->delete();





            //***** code for issue logout redirecrt  *********//     



            if(!empty($this->Cookie)){

                $pname= $this->Cookie->read('name'); 

                $project_id= $this->Cookie->read('id'); 



                $projectDetails=$this->getprojectdetails($project_id);    

                if($projectDetails['Project']['project_name']==$pname){

                    $logout_redirect=$projectDetails['Project']['logoutredirect'];



                    //                                             echo    $condition="Content.id=".$logout_redirect." and Content.active_status='1' and Content.delete_status='0' and  Content.project_id=".$project_id;



                    $page_content= $this->Content->findById($logout_redirect);

         

                    $current_domain= $_SERVER['HTTP_HOST'];

                    



                    $page=$page_content['Content']['internal_alias'];



                    /* added laer for login redirect */

                    if($page_content['Content']['internal_alias']=='home-page' || $page_content['Content']['internal_alias']=='home_page')

                    {

                        $this->redirect('/');



                    }





                    if( $page=='logout' || $page=='login' )

                    {



                        $this->redirect('/companies/'.$page_content['Content']['alias']);



                    }



                    if( $page=='register' )

                    {



                        $this->redirect('/companies/registeruser');



                    }





                    /*for content pages*/

                    if($page!='home_page' &&  $page!='register' && $page!='logout' && $page!='login' && $page!='dashboard' && !empty($page) )

                    {

                        $this->redirect('http://'.$current_domain.'/'.$page);



                    }



                    /* content*/









                }    







            }else{



                $this->redirect('/companies/session_expired');

            }



            //*****************code end  here******************/





        }    











        /*******************************************************************

        * Function Name: forgot_password

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function forgot_password() {



            //Configure::write('debug', 2);    

            $this->layout= 'internal_layout';        



            //for active menu display

            $this->set('page_url','forgot_password');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $sponsor  = false;

            $noterror = true;

            $errorMessage = "";



            if (!empty($this->data)) {

                // check first for valid user.     

                if ($this->data['User']['email']=="") {

                    $errorMessage ="Please enter email.<br/>";

                    $this->data['User']['email'] = "";

                    $noterror = false;

                } elseif (!eregi("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$", trim($this->data['User']['email']))) {

                    $errorMessage ="Please enter valid email.<br/>";

                    $this->data['User']['email'] = "";

                    $noterror = false;

                }

                else {

                    // Check for Sponsor email

                    $condition = "Sponsor.email = '".trim($this->data['User']['email'])."' and  Sponsor.project_id='".$project_id."' and Sponsor.active_status='1' and Sponsor.delete_status='0'";

                    $siteuser  = $this->Sponsor->find('first', array('conditions' => $condition));



                    // not registered user display message.

                    if(sizeof($siteuser['Sponsor']) == 0) {



                        // Check for Holder

                        $condition = "Holder.email = '".trim($this->data['User']['email'])."' and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'";

                        $siteuser = $this->Holder->find('first', array('conditions' => $condition));

                        // not registered user display message.

                        if (sizeof($siteuser['Holder']) == 0) {

                            $errorMessage = "This email address is not registered!";

                            $this->data['User']['email'] = "";

                            $noterror = false; 

                        }

                        else {

                            $siteusername = $siteuser['Holder']['screenname']; //$siteuser['Holder']['firstname']." ".$siteuser['Holder']['lastnameshow'];

                            $siteuserid   = $siteuser['Holder']['user_id'];

                        }



                    }

                    else {

                        $sponsor = true;

                        $siteusername = $siteuser['Sponsor']['sponsor_name'];

                        $siteuserid   = $siteuser['Sponsor']['user_id'];

                    }



                }



                if ($noterror == true) {

                    $userdata = $this->User->find('first', array('conditions' =>  "User.id = '". $siteuserid ."' AND User.project_id = $project_id"));



                    // get new password for user. 

                    $new_password        = $this->Sendemail->genratepassword();

                    $protcted_password  = md5($new_password);

                    $this->data['User']['password'] = $protcted_password;

                    $this->data['User']['id'] = $userdata['User']['id'];

                    if($this->User->save($this->data['User'])){

                        $userEmail = $this->data['User']['email'];

                    



                        $condition = " EmailTemplate.email_template_name= 'FORGOT PASSWORD' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                        $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));

                        //print_r($mailMessage);exit;

                        if(is_array($mailMessage) && !empty($mailMessage))

                        {

                            /**

                            * OLD CODE

                            * if(!empty($projectDetails['Project']['url']))

                                $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                            else

                                $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                            if(!empty($projectDetails['Project']['system_name']))

                                $pt_new_name=$projectDetails['Project']['system_name'];

                            else

                                $pt_new_name=$projectDetails['Project']['project_name'];    



                            $keyStringArray = array('[[EMAIL_ADDRESS]]'=>$siteuser['Holder']['email'],

                            '[[USER_NAME]]'=>$userdata['User']['username'],

                            '[[TO_NAME]]'=>$siteusername,

                            '[[USER_PASSWORD]]'=>$new_password,

                            '[[PROJECT_NAME]]'=>$pt_new_name,

                            '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                            if(!empty($keyStringArray)){

                                foreach($keyStringArray as $key=>$val){

                                    $mailBody = str_replace($key,$val,$mailBody);

                                }

                            }

                            */

                            $subject  = $mailMessage['EmailTemplate']['subject'];

                            $from = $mailMessage['EmailTemplate']['sender'];      //$projectDetails['Project']['fromemail'];

                            $fromname = $mailMessage['EmailTemplate']['sender'];      //$projectDetails['Project']['fromname'];

                            $mailBody=$mailMessage['EmailTemplate']['content'];

                            

                             /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button **/   

                            ///////////////////////////////// append mail footer set by super admin /////////////////////////

                            $condition = "id='1'";

                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                            $mailBody.=$mailfooter;

                            ///////////////////////////////// append mail footer set by super admin /////////////////////////

                            

                            

                            // Set path to inserted image 

                            $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                    

                            $to = $userEmail;

                             /**

                              * New Email Temp replacement code for data Elements 

                              */

                            //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                           //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                $dataEleValuesArray[DATA_ELEMENT_USER_NAME]= $userdata['User']['username'];

                                $dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= $new_password;

                                $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                            //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                

                               $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                        }



                        if($result == true) {    

                            //$this->Session->setFlash('Your new password has been sent to your e-mail address.','default',array('class' => 'successmsg'));                 

                            $this->Session->write('user_mail',$userEmail);

                            $this->redirect('/companies/temporary_password');



                        }else{

                            $this->Session->setFlash('Unable to send mail. Please try again.','default',array('class' => 'errormsg')); 

                        }

                    } 

                }else{

                    $this->Session->setFlash($errorMessage,'default',array('class' => 'errormsg'));                 

                } 

            }

        }



        function temporary_password()

        {





            //Configure::write('debug', 2);    

            $this->layout= 'internal_layout';        



            //for active menu display

            $this->set('page_url','temporary_password');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $usermail = $this->Session->read("user_mail");



            $noterror = true; 

            $errorMessage = "";



            if(!empty($this->data)) 

            {



                $condition = " Holder.email = '".$usermail."' and Holder.project_id='".$project_id."'";

                $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

                $this->set('holderArray',$holderArray);



                $userid=$holderArray['Holder']['user_id'] ;



                $condition = " User.id = '".$userid."' and User.project_id='".$project_id."'";

                $userArray = $this->User->find('first',array('conditions' => $condition ));

                $this->set('userArray',$userArray);

                //$errorString ='';





                if(!empty($this->data['temp_pass']['new_pass']))

                {    

                    if(trim($this->data['temp_pass']['new_pass']) == '')

                    {            

                        $errorString .="Please set new password.<br/>";    

                    }

                    if(trim($this->data['temp_pass']['new_pass']) == '' || (strlen($this->data['temp_pass']['new_pass']) < 6 ) )

                    {            

                        $errorString .="New Password must have atleast 6 character.<br/>";    

                    }



                    if(trim($this->data['temp_pass']['new_pass']) != '' || trim($this->data['temp_pass']['confirm_pass']) != '')

                    {

                        if(trim($this->data['temp_pass']['new_pass']) != trim($this->data['temp_pass']['confirm_pass']))

                        {

                            $errorString .="New Password & confirm password must be same<br/>";                

                        }

                        else

                        {

                            $password =$this->data['temp_pass']['new_pass'];

                            $this->data['temp_pass']['password'] = md5($password);

                        }    

                    }

                    else

                    {

                        $this->data['temp_pass']['password'] = $userArray['User']['password'] ;

                    }    

                }







                if(trim($this->data['temp_pass']['cur_pass']) == ''){            

                    $errorString .="Please insert current password.<br/>";    

                }



                if(trim($this->data['temp_pass']['new_pass']) == ''){            

                    $errorString .="Please set new password.<br/>";    

                }



                if( ($userArray['User']['password']!=md5($this->data['temp_pass']['cur_pass'])) )

                {

                    $errorString .="Incorrect Current Password.<br/>"; 

                }





                if(trim($errorString) !='')                                

                    $this->Session->setFlash($errorString,'default',array('class' => 'errormsg'));

                else

                {



                    $pass_arr=array();

                    $pass_arr['id']=$userid;

                    $pass_arr['password']=$this->data['temp_pass']['password'];                 

                    $this->User->save($pass_arr);



                    $this->Session->setFlash('Password has been updated.','default',array('class' => 'successmsg'));

                    $this->redirect('/companies/login');



                } 





            }//end password check









        }









        /*******************************************************************

        * Function Name: change_password

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This function is used to change password.

        * Created By      : SDN

        * Created: 19 Feb, 2011

        ********************************************************************/

        function  change_password(){



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','forgot_password');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '18'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    





            $userid = $this->Session->read("User.User.id");

            //............



            $condition = " User.id = '".$userid."' and User.project_id='".$project_id."'";

            $userArray = $this->User->find('first',array('conditions' => $condition ));

            $this->set('userArray',$userArray);



            if(!empty($this->data)) {

                $errorString ='';



                if(trim($this->data['User']['oldpassword']) == ''){            

                    $errorString .="Please insert old password.<br/>";    

                }

                if(md5(trim($this->data['User']['oldpassword'])) != $userArray['User']['password']){            

                    $errorString .="Please insert correct old password.<br/>";    

                }



                if(trim($this->data['User']['password']) == ''){            

                    $errorString .="Password must have atleast 6 character.<br/>";    

                }





                if(trim($this->data['User']['password']) != '' || trim($this->data['User']['confirm_password']) != ''){

                    if(trim($this->data['User']['password']) != trim($this->data['User']['confirm_password'])){

                        $errorString .="Password & confirm password must be same<br/>";                

                    }else{

                        if(strlen($this->data['User']['password']) < 6 ){

                            $errorString .="Password must have atleast 6 character.";    

                        }else{

                            $password =$this->data['User']['password'];

                            $this->data['User']['password'] = md5($password);

                        }

                    }    

                }else{

                    $this->data['User']['password'] = $userArray['User']['password'] ;

                }



                if(trim($errorString) !=''){                              

                    $this->Session->setFlash($errorString,'default',array('class' => 'msgTXt'));

                }else{

                    $this->data['User']['id']=$userid;                

                    $this->User->save($this->data);

                    $this->data['User']['oldpassword']="";

                    $this->data['User']['password']="";

                    $this->data['User']['confirm_password']="";                

                    $this->Session->setFlash("Password has been changed.",'default',array('class' => 'successmsg'));

                    if(isset($this->data['Action']['redirectpage'])){

                        $this->redirect('/companies/dashboard');

                    }else{

                        $this->redirect('/companies/change_password');

                    }



                }



            }else{

                $this->data = $userArray;

            }

        }



        /*******************************************************************

        * Function Name: changeuserpassword

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This function is used to change password.

        * Created By      : SDN

        * Created: 19 Feb, 2011

        ********************************************************************/



        function  changeuserpassword(){



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';        



            //for active menu display

            $this->set('page_url','forgot_password');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '18'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    





            $userid = $this->Session->read("User.User.id");

            //............



            $condition = " User.id = '".$userid."' and User.project_id='".$project_id."'";

            $userArray = $this->User->find('first',array('conditions' => $condition ));

            $this->set('userArray',$userArray);



            if(!empty($this->data)) {



                //print_r($this->data);die;

                $errorString ='';

                if(!empty($this->data['User']['setpassword']))

                {    

                    if(trim($this->data['User']['setpassword']) == ''){            

                        $errorString .="Please set new password.<br/>";    

                    }

                    if(trim($this->data['User']['setpassword']) == ''){            

                        $errorString .="Password must have atleast 6 character.<br/>";    

                    }

                    if(trim($this->data['User']['setpassword']) != '' || trim($this->data['User']['confirm_password']) != ''){

                        if(trim($this->data['User']['setpassword']) != trim($this->data['User']['confirm_password'])){

                            $errorString .="Password & confirm password must be same<br/>";                

                        }else{

                            if(strlen($this->data['User']['setpassword']) < 6 ){

                                $errorString .="Password must have atleast 6 character.";    

                            }else{

                                $password =$this->data['User']['setpassword'];

                                $this->data['User']['password'] = md5($password);

                            }

                        }    

                    }else{

                        $this->data['User']['password'] = $userArray['User']['password'] ;

                    }    

                }

                else

                {

                    if(trim($this->data['User']['oldpassword']) == ''){            

                        $errorString .="Please insert old password.<br/>";    

                    }



                    if(trim($this->data['User']['setpassword']) == ''){            

                        $errorString .="Please set new password.<br/>";    

                    }



                    if(md5(trim($this->data['User']['oldpassword'])) != $userArray['User']['password']){            

                        $errorString .="Please insert correct old password.<br/>";    

                    }



                    if(trim($this->data['User']['password']) == ''){            

                        $errorString .="Password must have atleast 6 character.<br/>";    

                    }







                    if(trim($this->data['User']['password']) != '' || trim($this->data['User']['confirm_password']) != ''){

                        if(trim($this->data['User']['password']) != trim($this->data['User']['confirm_password'])){

                            $errorString .="Password & confirm password must be same<br/>";                

                        }else{

                            if(strlen($this->data['User']['password']) < 6 ){

                                $errorString .="Password must have atleast 6 character.";    

                            }else{

                                $password =$this->data['User']['password'];

                                $this->data['User']['password'] = md5($password);

                            }

                        }    

                    }else{

                        $this->data['User']['password'] = $userArray['User']['password'] ;

                    }

                }    











                if(trim($errorString) !=''){                              

                    $this->Session->setFlash($errorString,'default',array('class' => 'errormsg_changepass'));

                }else{

                    $this->data['User']['id']=$userid;                

                    $this->User->save($this->data);

                    $this->data['User']['oldpassword']="";

                    $this->data['User']['password']="";

                    $this->data['User']['confirm_password']="";                

                    $this->Session->setFlash("Password has been changed.",'default',array('class' => 'successmsg'));

                    if(isset($this->data['Action']['redirectpage'])){

                        $this->redirect('/companies/dashboard');

                    }else{

                        $this->redirect('/companies/changeuserpassword');

                    }



                }



            }else{

                $this->data = $userArray;

            }

        }





        function update_profile() {

            $this->session_check_user();

            $this->layout= 'internal_layout';    

            //for active menu display

            $this->set('page_url','update_profile');

            $project_id = '1';    

            $projectDetails = $this->getprojectdetails($project_id);    

			$this->set('project',$projectDetails);    

            $userid=$this->Session->read("User.User.id");

            $this->set("selectedcountry",'');

            $this->set("selectedstate",'');

            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

            $this->set('holderArray',$holderArray);

            $condition = "id = '".$userid."' and project_id='".$project_id."' ";

            $avatarArray = $this->User->find('first',array('conditions' => $condition ));

            $this->set('avatarArray',$avatarArray);



            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



            ##check default dropdowns



            if($holderArray){

                $conid = $holderArray['Holder']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if($holderArray['Holder']['state']>0){

                    $statid = $holderArray['Holder']['state'];

                    $this->set("selectedstate",$statid);



                }

            }

            

            

              //show badge

            

             $total_points = $this->PointArchiveUser->query("select sum(points) as total_points from point_archive_users where member_id='$userid' and project_id='$project_id'");

            $total_points= $total_points[0][0]['total_points'];

            $this->set("total_points",$total_points);

            

            $points_awards = $this->PointArchiveUser->query("select points_required,related_image from points_awards where project_id='$project_id' and is_active=1");

             $badge=array();

            for($g=0;$g<count($points_awards);$g++)

            {

                if($total_points>=$points_awards[$g]['points_awards']['points_required'] && $points_awards[$g]['points_awards']['points_required']!=0)

                {

                    $badge=$points_awards[$g]['points_awards']['related_image'];

                    $this->set("badge",$badge);

                }

			}

               

            $b=$badge;

            

            //show badge





            if(!empty($this->data)) {

				$errorString ='';            

                $pass_arr=array(); 

                // STEP : Check Validations 

               if(trim($this->data['Holder']['screenname'])==""){

                    $errorString .="Screen Name is required.<br/>";   

               }

             //  $uniqueHolder = $this->Holder->isUniqueScreenName($this->data['Holder']['screenname'], $project_id, $holderArray['Holder']['id']);

               //if ($uniqueHolder == false) {

                    //$errorString .="Screen name already exists. Please provide another screen name.<br/>";

            //   }    

               if(trim($this->data['Holder']['firstname'])=="")  {

                   $errorString .="First Name is required.<br/>";         

               }

               if(trim($this->data['Holder']['lastnameshow'])==""){

                     $errorString .="Lastname is required.<br/>";

               }

               if(trim($this->data['Holder']['zipcode'])==""){

                     $errorString .="Zip is required.<br/>";            

               }

               if(trim($this->data['Holder']['country'])==""){

                     $errorString .="Country is required.<br/>";

               }

                   

               //STEP : Validate avtar image and upload             

                if($_FILES["avatar"]["tmp_name"]!="")

                {

                    if ((($_FILES["avatar"]["type"] == "image/gif") || ($_FILES["avatar"]["type"] == "image/jpeg") || ($_FILES["avatar"]["type"] == "image/png") || ($_FILES["avatar"]["type"] == "image/jpg") || ($_FILES["avatar"]["type"] == "image/pjpeg")) && ($_FILES["avatar"]["size"] < 200000) )

                    {

                        $ext=explode("/",$_FILES["avatar"]["type"]);

                        if ($_FILES["avatar"]["error"] > 0)

                        {

                            $errorString .="Error in uploading avatar image file.Try again.";

                        }

                        else

                        {   

                             $user_avatar_folder="img/avatar/";

                             $filePath =  $user_avatar_folder. DS . $project_id . DS;

                             $this->File->setDestPath($filePath);

                            // $file_name1 = $this->File->setFileName($_FILES["avatar"]["name"]); 

                             $ext = explode(".",$_FILES["avatar"]["name"]);

                              $ext=$ext[1];

                             $tmp1 = $_FILES["avatar"]['tmp_name'];

                             $width = 100;

                             $height = 100;

                             // Get new dimensions

                             list($width_orig, $height_orig) = getimagesize($tmp1);

                             $ratio_orig = $width_orig/$height_orig;



                            if ($width/$height > $ratio_orig) {

                                $width = $height*$ratio_orig;

                            } else {

                                $height = $width/$ratio_orig;

                            }



                            

                          /*  $ext=explode(".",$_FILES["avatar"]["name"]);

                            $ext=$ext[1];

                            $up_dir="img/avatar/".$project_id."/"; */ 

                            $filename=$userid.".".$ext;

                            if (file_exists($filePath))

                            {

                               chmod($filePath,0777);

                               $fileNamesidea = $this->File->uploadlogo($filename,$tmp1,true,$width."x".$height);  

                             //   move_uploaded_file($_FILES["avatar"]["tmp_name"],$up_dir.$filename);

                            }

                            else

                            {

                                mkdir($filePath, 0777);

                                $fileNamesidea = $this->File->uploadlogo($filename,$tmp1,true,$width."x".$height);  

                             //   move_uploaded_file($_FILES["avatar"]["tmp_name"],$up_dir.$filename);



                            }  

                            $avatar_url=$user_avatar_folder.$project_id."/".$fileNamesidea;

                            $pass_arr['avatar_url']=$avatar_url; //upload image url 

                        }

                       

                    }

                    else

                    {

                        $errorString .="Upload avatar images with jpg,jpeg,gif,png extensions and file size should be less than 2 MB";

                        $avatar_url="";

                    }           

                }

              

              // STEP : Set new passowrd if new password is given 

              if( (trim($this->data['Holder']['cur_pass'])!="") || (trim($this->data['Holder']['new_pass'])!="") || (trim($this->data['Holder']['confirm_pass'])!="")  )

              {

                  $condition = " User.id = '".$userid."' and User.project_id='".$project_id."'";

                  $userArray = $this->User->find('first',array('conditions' => $condition ));

                  $this->set('userArray',$userArray);

                  if(!empty($this->data['Holder']['new_pass']))

                    {    

                       

						if(trim($this->data['Holder']['new_pass']) == '')

                        {            

                            $errorString .="Please set new password.<br/>";    

                        }

                        if(trim($this->data['Holder']['new_pass']) == '' || (strlen($this->data['Holder']['new_pass']) < 6 ) )

                        {            

                            $errorString .="New Password must have atleast 6 character.<br/>";    

                        }



                        if(trim($this->data['Holder']['new_pass']) != '' || trim($this->data['Holder']['confirm_pass']) != '')

                        {

                            if(trim($this->data['Holder']['new_pass']) != trim($this->data['Holder']['confirm_pass']))

                            {

                                $errorString .="New Password & confirm password must be same<br/>";                

                            }

                            else

                            {

                                $password =$this->data['Holder']['new_pass'];

                                $this->data['Holder']['password'] = md5($password);

                            }    

                        }

                        else

                        {

                            $this->data['Holder']['password'] = $userArray['User']['password'] ;

                        }    

                    }







                    if(trim($this->data['Holder']['cur_pass']) == ''){            

                        $errorString .="Please insert current password.<br/>";    

                    }



                    if(trim($this->data['Holder']['new_pass']) == ''){            

                        $errorString .="Please set new password.<br/>";    

                    }



                    if( ($userArray['User']['password']!=md5($this->data['Holder']['cur_pass'])) )

                    {

                        $errorString .="Incorrect Current Password.<br/>"; 

                    }

            }//end password check



                // If user email set then check to already exists at another user for this same project

                $condition = "email = '".$this->data['Holder']['email']."' and  project_id='".$project_id."' and delete_status='0' and id!='".$holderArray['Holder']['id']."'";

                $existsuser = $this->Holder->find('first', array('conditions' => $condition));

                if(is_array($existsuser) && !empty($existsuser)) {

                    $errorString .="Entered Preferred Email is already used by other member. Please try another email address.";

                }



                if(trim($errorString) !=''){                                  

                    $this->Session->setFlash($errorString,'default',array('class' => 'errormsg'));

                }else{

                    $this->data['Holder']['project_id']=$project_id;

                    $this->data['Holder']['user_id']=$userid;

                    $this->data['Holder']['id']=$holderArray['Holder']['id'];



                    if(isset($this->data['Holder']['show_lastname']))

                        $this->data['Holder']['shownamelast']=1;

                    if(isset($this->data['Holder']['show_city']))

                        $this->data['Holder']['showcity']=1;  

                    if(isset($this->data['Holder']['show_address1']))

                        $this->data['Holder']['showaddress1']=1;    

                    if(isset($this->data['Holder']['show_address2']))

                        $this->data['Holder']['showaddress2']=1;  





                    if(isset($this->data['Holder']['newsletter'])=="Y")

                        $this->data['Holder']['newsletter_subscription']=1;   

                    else

                        $this->data['Holder']['newsletter_subscription']=0;    







                    if($this->data['Holder']['screenname'] && $this->data['Holder']['firstname'] && $this->data['Holder']['lastnameshow'] && $this->data['Holder']['zipcode'] && $this->data['Holder']['country'])

                    {

                        $profile=10;

                    }

                    else

                        $profile=0;

                     

                    $birthday=0;     

                    if($this->data['Holder']['birthday'])

                    {

                        if($this->data['Holder']['birthday']!="00-00-0000"){

                             $dateFormat = explode('-',$this->data['Holder']['birthday']);

                             $birthDate = $dateFormat[2].'-'.$dateFormat[0].'-'.$dateFormat[1];

                             $this->data['Holder']['birthday'] = $birthDate;

                             $birthday=10; 

                        }                            

                    }

                    if(isset($this->data['Holder']['avatar']))

                        $avatar=10;

                    else

                        $avatar=0;



                    if($this->data['Holder']['gender'])

                        $gender=10;

                    else

                        $gender=0;



                     $this->User->query("UPDATE user_profile_completions SET profile=$profile,birthday=$birthday,avatar=$avatar,gender=$gender WHERE user_id = $userid");



                    $this->Holder->save($this->data['Holder']);                



                    $pass_arr['id']=$userid;



                    if($this->data['Holder']['new_pass']!="" && $this->data['Holder']['cur_pass']!="" && $this->data['Holder']['confirm_pass']!="" )

                    {



                        //array_push($pass_arr,$this->data['Holder']['cur_pass']);

                        //array_push($pass_arr,$this->data['Holder']['new_pass']);

                        //array_push($pass_arr,$this->data['Holder']['confirm_pass']);

                        $pass_arr['password']=$this->data['Holder']['password'];                 

                        //$this->User->save($pass_arr);

                    }



                    $pass_arr['username']=$this->data['Holder']['email'];

                    $pass_arr['username']=$this->data['Holder']['email'];

                    $this->User->save($pass_arr);



                    $this->data['Holder']['cur_pass']="";

                    $this->data['Holder']['password']="";

                    $this->data['Holder']['confirm_pass']="";                



                    $this->Session->setFlash('Profile has been updated.','default',array('class' => 'successmsg'));

                    

                    if($this->data['Holder']['submittype']=="save")

                    {

                        $this->redirect(array('controller'=>'companies','action'=>'dashboard'));    

                    }

                    else

                        $this->redirect(array('controller'=>'companies','action'=>'update_profile'));

					}



            }else{

                $this->data = $holderArray;

            }

        }

        

        function email_subscriptions(){

            $this->session_check_user();



            $this->layout= 'internal_layout';    



            //for active menu display

            $this->set('page_url','email_subscriptions');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);

            $this->set('project_id',$project_id);

            

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            

            $userid=$this->Session->read("User.User.id");

            $pagetype="emailsetting";

            if(!empty($this->data)) { 

                                     //  echo "<pre>"; print_r($this->data); echo "</pre>";

            $holderUpdateArray['Holder']['id']= $this->data['Holder']['id'];

            $holderUpdateArray['Holder']['is_direct_email']="0";

            $holderUpdateArray['Holder']['subscription_type_id']="";

              

              

                 if($this->data['Holder']['is_direct_email']){ 

                      $holderUpdateArray['Holder']['is_direct_email']=$this->data['Holder']['is_direct_email']; 

                 }else if($this->data['Holder']['subscription_type_id']){

                            //echo "<pre>"; print_r($this->data['Holder']['subscription_type_id']);  echo "</pre>";

                            $subscription_types=implode(",",$this->data['Holder']['subscription_type_id']);

                            $holderUpdateArray['Holder']['subscription_type_id']=$subscription_types;

                 }

               $is_email_change= $this->data['Holder']['is_email_change'];

               $holder_email=$this->data['Holder']['email'];

               $flag_emailupdate=false;  

               if($is_email_change=="1"){

                    // If user email set then check to already exists at another user for this same project

                    $condition = "email = '".$holder_email."' and  project_id='".$project_id."' and delete_status='0' and id!='".$holderUpdateArray['Holder']['id']."'";

                    $existsuser = $this->Holder->find('first', array('conditions' => $condition));

                    if(is_array($existsuser) && !empty($existsuser)) {

                         $errorString ="Entered Email address is already used by other member. Please try another email address.";

                         $this->Session->setFlash($errorString,'default',array('class' => 'errormsg'));  

                    }else{

                          $holderUpdateArray['Holder']['email']=$holder_email; 

                          $flag_emailupdate=true;  

                    }

               }

                

                 

                 // echo "<pre>"; print_r($holderUpdateArray); echo "</pre>"; // exit;        

                 if($this->Holder->Save($holderUpdateArray['Holder'])){  

                        if($holderUpdateArray['Holder']['email'] && $flag_emailupdate) {

                               $userArray['User']['id']=$userid;  

                               $userArray['User']['username']=$holderUpdateArray['Holder']['email'];

                               $this->User->save($userArray['User']);

                        }

                        $pagetype="thankyou";   

                       

                 }else{

                        $this->Session->setFlash('Error in process.Please try after sometime.','default',array('class' => 'errormsg'));

                      

                 }     

              //  exit;

            }

            

            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));



            $this->set('holderArray',$holderArray);

                    

            $userSubscriptionTypes=$this->getSubscriptionTypesArray($allfields=true);

            $this->set('userSubscriptionTypes',$userSubscriptionTypes); 

            

            $this->set('pagetype',$pagetype); 

            

        }

        

        

        

        function view_points(){



            ##Configure::write('debug',3);



            ##check user session live or not



            ##check user session live or not

            

            

            

            $this->session_check_user();



            $this->layout= 'internal_layout';    



            //for active menu display

            $this->set('page_url','view_points');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);

            $this->set('project_id',$project_id);

            

            $userid=$this->Session->read("User.User.id");



           

            ##import  Holder  model for processing

            App::import("Model", "Holder");

            $this->Holder =   & new Holder();    



            //for active menu display



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '3'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition  



            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);    



            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;

            

           

            $field='';



            $condition = "PointArchiveUser.project_id = '$projectid' and PointArchiveUser.member_id ='$userid'";

                                 

            $this->Pagination->sortByClass    = 'PointArchiveUser'; ##initaite pagination 

            



            $this->Pagination->total= count($this->PointArchiveUser->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            

            $order = "PointArchiveUser.id DESC";

            

            //not neccessary

            //$limit=1;

            

            $points_arr = $this->PointArchiveUser->find('all',array("conditions"=>$condition,'order' =>$order,'limit' => $limit, 'page' => $page));



            ##set Coinset data in variable



            $this->set("points_arr",$points_arr);

            

            $total_points = $this->PointArchiveUser->query("select sum(points) as total_points from point_archive_users where member_id='$userid' and project_id='$projectid'");

            $total_points= $total_points[0][0]['total_points'];

            $this->set("total_points",$total_points);

            



        }

        

        

        

        

        

        

        /*******************************************************************

        * Function Name: view_comments

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This function is used to list comments.

        * Created By      : SDN

        * Created: 19 Feb, 2011

        ********************************************************************/

        function view_comments($coinholderid){



            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';    



            //for active menu display

            $this->set('page_url','view_comments');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);        



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $userid = $this->Session->read("User.User.id");



            $holderArray = $this->Holder->find('first',array('conditions' =>  " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' " ));



            $condition = "Comment.coin_holder_id = '".$coinholderid."' and  Comment.holder_id = '".$holderArray['Holder']['id']."' and  Comment.project_id='".$project_id."'  and Comment.locked='0' and Comment.offensive='0' and Comment.offensiveedit='0' and  Comment.delete_status='0'";        



            $this->Comment->bindModel(array('hasOne' => array('CoinsHolder' => array('foreignKey' => false,'conditions' => array('CoinsHolder.id = Comment.coin_holder_id' )))));

            $this->Comment->bindModel(array('belongsTo' => array('CommentType' => array('foreignKey' => 'comment_type_id'))));







            $order      = array('Comment.created DESC');



            $commentArray = $this->Comment->find('all',array('conditions' => $condition,'order' =>$order));

            //11-05-11    

            //         $cid=$commentArray['Comment']['comment_type_id'];

            //         $condition2="CommentType.id='$cid' and CommentType.delete_status='0'";

            //         $commentArray2 = $this->CommentType->find('all',array('conditions' => $condition2,'order' =>$order));

            //         print_r($commentArray2);

            //         $this->set('commentArray2',$commentArray2);

            //11-05-11

            $this->set('commentArray',$commentArray);





        }      



         function  view_registeredcoins(){

           

            //Configure::write('debug', 2);    



            ##check user session live or not

            $this->session_check_user();

            

            if($this->Session->read("iframe_session")){

                $this->layout= 'iframelayout';

            }else{

                $this->layout= 'internal_layout';

            }

                

            

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain);

              

            //for active menu display

            $this->set('page_url','update_profile');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $userid = $this->Session->read("User.User.id");



            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));



            $this->set('holder_id',$holderArray['Holder']['id']);

            

           

              $this->set('comment_offset',5);  

          

          // Select loged in user's  registered coins  for selected project

            $condition = " CoinsHolder.holder_id  = '".$holderArray['Holder']['id']."' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";

			//$sortBy =$this->params['url']['sortBy']." ".$this->params['url']['direction'];

            if(!empty($this->params['url']['sortBy'])) 

                //$order=$sortBy;

				$order=$this->params['url']['sortBy']." ".$this->params['url']['direction'];

            else

                $order      = array('CoinsHolder.created DESC');

			$field='';

			$limit='';

			$page='';

            $coinholderArray = $this->CoinsHolder->find('all',array('conditions' => $condition, 'fields' => $field, 'order' =>$order, 'limit' =>$limit, 'page' => $page ));

            $this->set('coinholderArray',$coinholderArray);

         

         // Select other member's  registered coins  for selected project  

            $condition = " CoinsHolder.holder_id  != '".$holderArray['Holder']['id']."' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";

            //$sortBy =$this->params['url']['sortBy']." ".$this->params['url']['direction'];

            if(!empty($this->params['url']['sortBy'])) 

              //  $order=$sortBy;

				$order=$this->params['url']['sortBy']." ".$this->params['url']['direction'];

            else

                $order      = array('CoinsHolder.created DESC');

            $otherCoinsArray = $this->CoinsHolder->find('all',array('conditions' => $condition, 'fields' => $field, 'order' =>$order, 'limit' =>$limit, 'page' => $page ));

            $this->set('otherCoinsArray',$otherCoinsArray);



        }

        

        function  get_registeredcoin_comments_by_ajax($comment_start='', $comment_offset='', $coinholderid='', $comment_type_id=''){ 

            //Configure::write('debug', 2);    

            $this->layout = 'ajax';

            ##check user session live or not

            $this->session_check_user();



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");                



            if(empty($project_name)) $this->redirect(array('controller'=>'companies','action'=>'session_expired'));



            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));



            $this->set('holder_id',$holderArray['Holder']['id']);



            $commentcondition = " Comment.project_id='".$project_id."' and Comment.active_status='1' and Comment.delete_status='0' and CommentType.sequence_id > 0 and CommentType.active_status='1' and CommentType.delete_status='0' ";

            if($coinholderid!=""){

                $commentcondition.= " and   Comment.coin_holder_id='".$coinholderid."'";

            }

            if($comment_start==""){

                $comment_start=0;

            }



            if($comment_offset==""){

                $comment_offset=5;

            }

            $query="SELECT Comment.*,Holder.screenname, CommentType.comment_type_name , CoinHolder.serialnum as coin , NOW() as currentdate 

            from comments Comment

            LEFT JOIN holders Holder ON Holder.id = Comment.holder_id

            LEFT JOIN coins_holders CoinHolder ON CoinHolder.id = Comment.coin_holder_id

            LEFT JOIN comment_types CommentType ON CommentType.id = Comment.comment_type_id

            where  ".$commentcondition."

            Order by  Comment.created desc 

            Limit ".$comment_start.", ".$comment_offset;



            $commentArray = $this->User->query($query); 



            //    echo "<pre>"; print_r($commentArray); echo "</pre>"; exit;     

            $this->set('commentArray',$commentArray);     



            // Import model to get all comment replies by given comment id

            App::import('Model','CommentFollower');

            $this->CommentFollower = new CommentFollower();

            $conditionfollow="CommentFollower.project_id='".$project_id."' and CommentFollower.follower_id='".$holderArray['Holder']['id']."'";

            $followingCommnetArray = $this->CommentFollower->find('all',array('conditions' => $conditionfollow, 'fields' => 'comment_id' )); 

            $followArray =array();

            foreach($followingCommnetArray as $follow){

                $followArray[]= $follow['CommentFollower']['comment_id'];

            }

            $this->set('followingCommnets',$followArray);   

        }





        function view_registercoin_comment_follow(){

            $this->layout = 'ajax'; 



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $userid = $this->Session->read("User.User.id");

            $commentid=$_REQUEST['commentid'];

            //   print_r($_REQUEST);   

            if($commentid){

                $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

                $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

                $followerid=   $holderArray['Holder']['id'];



                App::import('Model','CommentFollower');

                $this->CommentFollower = new CommentFollower();

                $conditionfollow = "project_id = '".$project_id."' and  comment_id='".$commentid."' and follower_id='".$followerid."'";

                ##check already logged in holder folllows this comment 

                $followdata = $this->Coinset->find('first',array("conditions"=>$conditionfollow));

                if($followdata==false){

                    $this->data['CommentFollower']['project_id']=$project_id;

                    $this->data['CommentFollower']['comment_id']=$commentid;

                    $this->data['CommentFollower']['follower_id']=$followerid;

                    $this->CommentFollower->save($this->data['CommentFollower']);

                    echo json_encode(1);   exit;      

                }else{

                    echo json_encode(0);   exit;      

                }

            }else{

                echo json_encode(0);   exit;      

            }

        }



        function view_registercoin_comment_unfollow(){

            $this->layout = 'ajax'; 

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $userid = $this->Session->read("User.User.id");

            $commentid=$_REQUEST['commentid'];

            //   print_r($_REQUEST);   

            if($commentid){

                $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

                $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

                $followerid=   $holderArray['Holder']['id'];



                App::import('Model','CommentFollower');

                $this->CommentFollower = new CommentFollower();

                $conditionfollow = "project_id = '".$project_id."' and  comment_id='".$commentid."' and follower_id='".$followerid."'";

                ##check already logged in holder folllows this comment 

                $followdata = $this->CommentFollower->find('first',array("conditions"=>$conditionfollow));

                if($followdata){

                    $followcommentid= $followdata['CommentFollower']['id'];

                    $this->CommentFollower->delete($followcommentid);

                    echo json_encode(1);   exit;    

                }else{

                    echo json_encode(0);   exit;       

                }





            }else{

                echo json_encode(0);   exit;      

            }

        }



        /**

        * Fuction to get registered coin comment types details by coin holder id         

        *  

        * @param mixed $coinholderid

        * Created: 4 Aug, 2011

        */

        function  view_registeredcoin_commenttypes($coinholderid){ 

            //Configure::write('debug', 2);    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';    



            //for active menu display

            $this->set('page_url','update_profile');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $userid = $this->Session->read("User.User.id");



            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));



            $this->set('holder_id',$holderArray['Holder']['id']);



            $query="SELECT CommentType.*  

            from comment_types CommentType

            where  CommentType.project_id='".$project_id."'";

            $commentTypeArray = $this->User->query($query); 

            $this->set('commentTypeArray',$commentTypeArray);  



            if (!empty($this->params['requested'])) {            

                return $commentTypeArray;        

            } else {            

                $this->set('commentTypeArray',$commentTypeArray);      

            }   



        }



        /**

        * Fuction to get registered coin comments details by coin holder id  and comment type id

        * 

        * @param mixed $coinholderid

        * @param mixed $comment_type_id

        * Created: 4 Aug, 2011

        */



        function  view_registeredcoin_comments($coinholderid, $comment_type_id){ 

            //Configure::write('debug', 2);    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';    



            //for active menu display

            $this->set('page_url','update_profile');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $userid = $this->Session->read("User.User.id");



            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));



            $field      = '';    

            $condition = " Comment.project_id='".$project_id."' and Comment.coin_holder_id='".$coinholderid."' 

            and holder_id='".$holderArray['Holder']['id']."' and comment_type_id= '".$comment_type_id."'";      



            $commentArray = $this->Comment->find('first',array('conditions' => $condition, 'fields' => $field, 'order' =>$order, 'limit' =>$limit, 'page' => $page ));





            if (!empty($this->params['requested'])) {            

                return $commentArray;        

            } else {            

                $this->set('commentArray',$commentArray);      

            }   







        }







        /**

        * Fuction to get registered coin comments details by coin holder id  and comment type id

        * 

        * @param mixed $coinholderid

        * @param mixed $comment_type_id

        * Created: 4 Aug, 2011

        */



        function  view_registeredcoin_commentreplies($coinholderid, $comment_id, $reply_id=0){ 

            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';    



            //for active menu display

            $this->set('page_url','update_profile');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $userid = $this->Session->read("User.User.id");



            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));



            // Import model to get all comment replies by given comment id

            App::import('Model','CommentReply');

            $this->CommentReply = new CommentReply();



            /*  $field='';

            $condition = " CommentReply.project_id='".$project_id."' and CommentReply.comment_id='".$comment_id."' and CommentReply.reply_id='".$reply_id."'";      

            $commentReplyArray = $this->CommentReply->find('all',array('conditions' => $condition, 'fields' => $field, 'order' =>$order, 'limit' =>$limit, 'page' => $page ));



            */

            $condition = " CommentReply.project_id='".$project_id."' and CommentReply.comment_id='".$comment_id."' and CommentReply.reply_id='".$reply_id."'";      

            $query="SELECT CommentReply.*,Holder.screenname, CommentType.comment_type_name , CoinHolder.serialnum as coin ,  NOW() as currentdate

            from comment_replies CommentReply

            LEFT JOIN holders Holder ON Holder.id = CommentReply.holder_id

            LEFT JOIN coins_holders CoinHolder ON CoinHolder.id = CommentReply.coin_holder_id

            LEFT JOIN comment_types CommentType ON CommentType.id = CommentReply.comment_type_id

            where  ".$condition."

            Order by  CommentReply.created desc ";



            $commentReplyArray = $this->User->query($query); 



            if (!empty($this->params['requested'])) {            

                return $commentReplyArray;        

            } else {            

                $this->set('commentReplyArray',$commentReplyArray);      

            }   







        }





        /**

        * Fuction to get coin details by coin holder id

        * 

        * @param mixed $coinholderid

        * Created: 4 Aug, 2011

        */

        function get_coindetails($coinholderid){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';    



            //for active menu display

            $this->set('page_url','update_profile');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            $condition = " CoinsHolder.id  = '".$coinholderid."' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";



            $coinholderArray = $this->CoinsHolder->find('first',array('conditions' => $condition, 'fields' => $field, 'order' =>$order, 'limit' =>$limit, 'page' => $page ));

            if (!empty($this->params['requested'])) {            

                return $coinholderArray;        

            } else {            

                $this->set('coinholderArray',$coinholderArray);

            }   

        }





        /**

        * Fucntion to save and update the registered coins's comments

        * 

        * @param mixed $coinholderid

        * @param mixed $comment_type_id

        * @param mixed $comment

        */



        function save_comment($coinholderid, $comment_type_id, $comment){

            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();



            $userid = $this->Session->read("User.User.id");



            $this->layout= 'ajax';

             /*  if(!empty($this->data['Coinset']['id'])){

                $coinholderid=$this->data['Coinset']['id'];

            }*/



            //   echo "<pre>"; print_r($_REQUEST); echo "</pre>"; exit;

            $comment_id=$_REQUEST['comment_id']; 

            $coinholderid=  $_REQUEST['coin_holder_id'];     

            $comment_type_id= $_REQUEST['comment_type_id'];     

            $comment=$_REQUEST['comment'];

            

            

            //for active menu display

            $this->set('page_url',"register_coin");

            

            ## Session Project details

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            if(empty($project_name)) $this->redirect('/companies/session_expired');

            $this->set('project_name',$project_name);

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            

            ##Get project coinset data

            $conditioncoinset = "project_id = '".$projectDetails['Project']['id']."' and  active_status='1' and delete_status='0'";

            $consetdata1 = $this->Coinset->find('first',array("conditions"=>$conditioncoinset));

            $this->set('coinsdetail',$consetdata1); 

            ## Coin holders details if coin holder id set

            $coinholder_details=null;  

             if($coinholderid > 0){

                 $condition = "CoinsHolder.id  = '".$coinholderid."' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";

              $coinholder_details = $this->CoinsHolder->find('first', array('conditions' => $condition));

             }



            ## Save comment if comment text is not null

            if($comment!=""){ 

                ## If comment id exists - EDIT comment oterhwise ADD comment

                if($comment_id > 0){

                    // Update comment to specific commnet id

                    $this->data['Comment']['id']=$comment_id;

                    $this->data['Comment']['comment']=$comment;                

                    $this->Comment->save($this->data['Comment']);                    

                    echo json_encode(1);   exit;       

                }else{



                        ## Get Holder data of logged in users

                        $holder_details = $this->Holder->find('first', array('conditions' =>  "Holder.user_id  = '".$userid."' and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'"));

                        if($coinholderid >0){

                       //      $this->data['Comment']['coinset_id']=$coinholder_details['CoinsHolder']['coinset_id'];

                       //         $this->data['Comment']['coin_holder_id']=$coinholder_details['CoinsHolder']['id'];

                        $coin_holder_id=$coinholder_details['CoinsHolder']['id'];

                        $coinset_id=$coinholder_details['CoinsHolder']['coinset_id'];

                        $coin_project_id=$coinholder_details['CoinsHolder']['project_id'];

                        

                        }else{

                            $coin_project_id=$project_id;

                             $coin_holder_id=$coinholderid;

                             $coinset_id=0;

                        }

                          

                           $commentcount = $this->Comment->find('count', array('conditions' => "Comment.coin_holder_id = '".$coin_holder_id."' and Comment.coinset_id = '".$coinset_id."' and Comment.comment_type_id = '".$comment_type_id."' and Comment.holder_id = '".$holder_details['Holder']['id']."' and  Comment.project_id='".$project_id."' ",'fields'=>'id'));

                           

                           

                          // Check selected comment type is allowed additional  comments, if yes then count is 0 

                           App::import("Model", "CommentType");

                           $this->CommentType =   & new CommentType();

                           $condition = "CommentType.project_id ='$project_id' AND  CommentType.is_additional_allowed = '1'";

                           $commenttypedata = $this->CommentType->find('first',array("conditions"=>$condition));

                           

                           if($commenttypedata){

                                         $allowed_comment_type_id =$commenttypedata['CommentType']['id'];

                                          if($comment_type_id==$allowed_comment_type_id) { $commentcount=0; }

                           }

                           // if comment type  id id Misc. COmment then user can add multiple colors , so count is 0

                           if($comment_type_id==0) $commentcount=0;



                        if($commentcount==0)

                        {

                            $this->data['Comment']['project_id']=$coin_project_id; //$coinholder_details['CoinsHolder']['project_id'];

                            $this->data['Comment']['coinset_id']=$coinset_id; //$coinholder_details['CoinsHolder']['coinset_id'];

                            $this->data['Comment']['coin_holder_id']=$coin_holder_id; //$coinholder_details['CoinsHolder']['id'];

                            $this->data['Comment']['comment_type_id']=$comment_type_id;

                            $this->data['Comment']['holder_id']=$holder_details['Holder']['id'];

                            $this->data['Comment']['comment']=trim($comment) ;  

                            if ($projectDetails['ProjectType']['is_rsvp']==1){

                                $this->data['Comment']['rsvp'] = $projectDetails['ProjectType']['is_rsvp']; // $this->data['Coinset']['rsvp'] ;

                            }    



                            $this->data['Comment']['active_status']=1 ;    

                           

                            if($this->Comment->save($this->data['Comment'])){

                                    $newid=$this->Comment->getLastInsertId();            

                            //triggered points setup for user

                            $this->Point->triggerPoints(COMMENTS,$project_id,$userid);        //trigger for each comment

                            if($coinholderid > 0) {

                                $condition = " EmailTemplate.email_template_name= 'COMMENT BY HOLDER' and  EmailTemplate.project_id='".$project_id."' 

                                                and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                                $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                                if(is_array($mailMessage) && !empty($mailMessage)) 

                                {

                                    if($type=='multi')

                                        $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$coinholderid."'"));

                                    else

                                        $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$this->data['Coinset']['coin_holder_id']."'"));

                                   /**

                                   * OLD CODE

                                   *    $keyStringArray = array('[[USER_NAME]]'=>$holder_details['Holder']['firstname']." ".$holder_details['Holder']['lastnameshow'],                        

                                    '[[COIN_SERIAL]]'=>$coinholder_details['CoinsHolder']['serialnum'],

                                    '[[PROJECT_NAME]]'=>$projectDetails['Project']['system_name'],

                                    '[[PROJECT_HOMEPAGE_URL]]'=>'http://'.HTTP_PATH.'/'.$projectDetails['Project']['project_name']);

                                    if(!empty($keyStringArray)){

                                        foreach($keyStringArray as $key=>$val){

                                            $mailBody = str_replace($key,$val,$mailBody);

                                        }

                                    }    

                                   */

                                    $subject  = $mailMessage['EmailTemplate']['subject'];              

                                    $from = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromemail'];

                                    $fromname = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromname'];

                                    $mailBody=$mailMessage['EmailTemplate']['content'];    

                                                                                                                                      

                                    /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    $mailBody.=$mailfooter;

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                   

                                    

                                    // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                                    //to sponsor

                                    $mailBody1 = str_replace("[[TO_NAME]]","Sponsor",$mailBody);

                                    $to = $projectDetails['Sponsor']['email'];        



                                    $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody1,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);



                                    $allholder_details = $this->Holder->find('all', array('conditions' =>  " Holder.id in (Select CoinsHolder.holder_id from coins_holders as CoinsHolder where CoinsHolder.serialnum='".$coinholder_details['CoinsHolder']['serialnum']."') and  Holder.project_id='".$project_id."' and Holder.active_status='1' and Holder.delete_status='0'"));



                                    if(is_array($allholder_details) && !empty($allholder_details)) 

                                    {

                                         // old code : $mailBody2 = str_replace("[[TO_NAME]]",$convalue['Holder']['firstname'],$mailBody); 

                                        /**

                                          * New Email Temp replacement code for data Elements 

                                          */

                                       //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                             $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails);

                                             $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]=$coinholder_details['CoinsHolder']['serialnum'];

                                             $dataEleValuesArray[DATA_ELEMENT_COIN_REGISTRATION_DATE]=date("m-d-Y", strtotime($coinholder_details['CoinsHolder']['serialnum']));

                                             $dataEleValuesArray[DATA_ELEMENT_COMMENT]= $commentdata['Comment']['comment'];  

                                            //To all previous coin holder

                                            foreach($allholder_details as $convalue){

                                                  $to = $convalue['Holder']['email'];                        

                                                

                                                 //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                                         $dataEleValuesArray[DATA_ELEMENT_TO_MEMBER_NAME]= $convalue['Holder']['screenname'];      

                                                         $dataEleValuesArray[DATA_ELEMENT_TO_MEMEBR_EMAIL]=$convalue['Holder']['email'];      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_FIRSTNAME]=$convalue['Holder']['firstname'];      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_LASTNAME]=$convalue['Holder']['lastnameshow'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS1]=$convalue['Holder']['address1'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS2]=$convalue['Holder']['address2'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_CITY]=$convalue['Holder']['city'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_STATE]=$convalue['Holder']['state'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_COUNTRY]=$convalue['Holder']['country'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_PHONE]=$convalue['Holder']['phone'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ZIP]=$convalue['Holder']['zipcode'];

                                                         $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                                    

                                                 //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 

                                                         $subject2=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                                         $mailBody2=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                                         $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject2,$mailBody2, $from, $mailMessage['EmailTemplate']['send_cc_email_to']);

                                                         $dataEleValuesArray[DATA_ELEMENT_TO_MEMBER_NAME]= '';      

                                                         $dataEleValuesArray[DATA_ELEMENT_TO_MEMEBR_EMAIL]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_FIRSTNAME]='';            

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_LASTNAME]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS1]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS2]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_CITY]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_STATE]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_COUNTRY]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_PHONE]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ZIP]='';      

                                        }

                                        

                             

                                    }



                                }

                            }

                            

                              // SEND THANK YOU MAIL TO COMMENTER

                            $conditioncomment = " EmailTemplate.email_template_name= 'THANKYOU FOR COMMENT' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                            $mailMessagecomment = $this->EmailTemplate->find('first',array('conditions' => $conditioncomment));

                            if(is_array($mailMessagecomment) && !empty($mailMessagecomment)) 

                            {

                                if($type=='multi')

                                    $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$coinholderid."'"));

                                else

                                    $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$this->data['Coinset']['coin_holder_id']."'"));



                                $commentdata=$this->Comment->findByid($newid);

                                

                                $subject  = $mailMessagecomment['EmailTemplate']['subject'];              

                                $from = $mailMessagecomment['EmailTemplate']['sender'];        //$projectDetails['Project']['fromemail'];

                                $fromname =$mailMessagecomment['EmailTemplate']['sender'];     // $projectDetails['Project']['fromname'];

                                $mailBody=$mailMessagecomment['EmailTemplate']['content'];    

                                /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/  

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                $condition = "id='1'";

                                $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                $mailBody.=$mailfooter;

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                

                               

                                // Set path to inserted image 

                                $mailBody = $this->replaceImgPathInEmailContent($mailBody);  

                                $to=$holder_details['Holder']['email'];

                                

                                if(!empty($projectDetails['Project']['url'])) {

                                     $pos = strpos($projectDetails['Project']['url'],"http://");

                                     if ($pos === false) {

                                         $show_comment_link="http://".$projectDetails['Project']['url']."?show_comment_link=1";

                                     }else{

                                         $show_comment_link=$projectDetails['Project']['url']."?show_comment_link=1"; 

                                     }

                                      

                                }else {

                                     $show_comment_link='http://'.HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                                }

                                  /**

                                  * New Email Temp replacement code for data Elements 

                                   */

                                //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                               //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                    $dataEleValuesArray[DATA_ELEMENT_COMMENT]= $commentdata['Comment']['comment'];

                                    $dataEleValuesArray[DATA_ELEMENT_COMMENT_LINK]= $show_comment_link;

                                    $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $coinholder_details['CoinsHolder']['serialnum'];

                                    $dataEleValuesArray[DATA_ELEMENT_COIN_REGISTRATION_DATE]=date("m-d-Y", strtotime($coinholder_details['CoinsHolder']['serialnum']));

                                    $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                    $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                    $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                            

                                //to sponsor

                                $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessagecomment['EmailTemplate']['send_cc_email_to']);



                                //mail to another holder  i.e previous coin holder



                                $this->CoinTransferRequest->bindModel(array('belongsTo'=>array(

                                'Holder'=>array(

                                'foreignKey'=>false,

                                'conditions'=>'Holder.id = CoinTransferRequest.from_holder_id')

                                )));

                                $coinserial=$coinholder_details['CoinsHolder']['serialnum'];

                                $condiotns="serialnum='".$coinserial."'";    

                                $holddata=$this->CoinTransferRequest->find("first",array("conditions"=>$condiotns));

                              

                                if(!empty($holddata)){

                                    // SEND MAIL PREVIOUS COIN HOLDER

                                    $conditioncomment1 = " EmailTemplate.email_template_name= 'COMMENT BY MEMBER RELATED TO COIN SERIAL #' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                                    $mailMessagecomment1 = $this->EmailTemplate->find('first',array('conditions' => $conditioncomment1));                        

                                   

                                    if(!empty($mailMessagecomment1)){

                                       

                                        $subject  = $mailMessagecomment1['EmailTemplate']['subject'];              

                                        $from = $mailMessagecomment1['EmailTemplate']['sender'];        //$projectDetails['Project']['fromemail'];

                                        $fromname = $mailMessagecomment1['EmailTemplate']['sender'];        //$projectDetails['Project']['fromname'];

                                        $mailBody=$mailMessagecomment1['EmailTemplate']['content'];    

                                        /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button    **/  

                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                        $condition = "id='1'";

                                        $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                        $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                        $mailBody.=$mailfooter;

                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                       

                                        

                                        // Set path to inserted image 

                                           $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                           $to=$holddata['Holder']['email'];

                                        /**

                                        * New Email Temp replacement code for data Elements 

                                       */

                                       //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                            $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                       //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                            $dataEleValuesArray[DATA_ELEMENT_COMMENT]= $commentdata['Comment']['comment'];

                                            $dataEleValuesArray[DATA_ELEMENT_COMMENT_LINK]= $show_comment_link;   

                                            $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $coinholder_details['CoinsHolder']['serialnum'];

                                            $dataEleValuesArray[DATA_ELEMENT_COIN_REGISTRATION_DATE]=date("m-d-Y", strtotime($coinholder_details['CoinsHolder']['serialnum']));

                                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                       //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                            $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                            $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                        //to all

                                        $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessagecomment1['EmailTemplate']['send_cc_email_to']);                



                                    }

                                }

                            }    

                            echo json_encode(1);   exit;        

                           //  $this->Session->setFlash('Thanks for adding comments.','default',array('class' => 'successmsg'));

                           

                            }else

                            {     echo json_encode(0);   exit;

                                // $this->Session->setFlash('You have added comment for this type.Please select another comment type. ','default',array('class' => 'successmsg'));      

                            }

                        }

                        else

                        {     echo json_encode(2);   exit;

                            // $this->Session->setFlash('You have added comment for this type.Please select another comment type. ','default',array('class' => 'successmsg'));      

                        }



                   // }





                } 



            }

            echo json_encode(0);    exit;

        }





        function save_comment_reply(){

            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $userid = $this->Session->read("User.User.id");   



            $this->layout= 'ajax';

            if(!empty($this->data['Coinset']['id'])){



                $coinholderid=$this->data['Coinset']['id'];



            }



            // echo "<pre>"; print_r($_REQUEST); echo "</pre>"; exit;

            $rid=$_REQUEST['rid']; 

            $coinholderid=  $_REQUEST['coin_holder_id'];     

            $comment_type_id= $_REQUEST['comment_type_id'];     

            $comment_id= $_REQUEST['comment_id'];     

            $reply=$_REQUEST['reply'];

            $reply_id=$_REQUEST['reply_id'];

            

                //for active menu display

            $this->set('page_url',"register_coin");



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $conditioncoinset = "project_id = '".$projectDetails['Project']['id']."' and  active_status='1' and delete_status='0'";

            $consetdata1 = $this->Coinset->find('first',array("conditions"=>$conditioncoinset));

            $this->set('coinsdetail',$consetdata1);  

            $coinholder_details=null;

            if($coinholderid > 0){

                $condition = "CoinsHolder.id  = '".$coinholderid."' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";

            $coinholder_details = $this->CoinsHolder->find('first', array('conditions' => $condition));

            }

            





            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));



            



            if($reply!=""){ 

                // Import model to get all comment replies by given comment id

                App::import('Model','CommentReply');

                $this->CommentReply = new CommentReply();



                if($rid > 0){

                    // Update comment to specific commnet id

                    $this->data['CommentReply']['id']=$rid;

                    $this->data['CommentReply']['reply']=$reply;                

                    $this->CommentReply->save($this->data['CommentReply']);                    

                   // $this->Session->setFlash('Reply has been updated.','default',array('class' => 'successmsg')); 

                    //$this->redirect('/companies/view_registeredcoins/');

                    echo json_encode(1);   exit;      

                }else{

                    // ADD NEW Comment reply

                    if($coinholderid > 0 && !empty($coinholder_details)){

                        $this->data['CommentReply']['project_id']=$coinholder_details['CoinsHolder']['project_id'];

                        $this->data['CommentReply']['coinset_id']=$coinholder_details['CoinsHolder']['coinset_id'];

                        $this->data['CommentReply']['coin_holder_id']=$coinholder_details['CoinsHolder']['id'];

                    }else{

                        $this->data['CommentReply']['project_id']=$project_id;

                        $this->data['CommentReply']['coinset_id']=0;

                        $this->data['CommentReply']['coin_holder_id']=0;

                    }

                    

                    $this->data['CommentReply']['comment_type_id']=$comment_type_id;

                    $this->data['CommentReply']['holder_id']=$holderArray['Holder']['id'];

                    $this->data['CommentReply']['reply']=trim($reply);

                    $this->data['CommentReply']['reply_id']=trim($reply_id);

                    $this->data['CommentReply']['comment_id']=trim($comment_id);;

                    if($projectDetails['ProjectType']['is_rsvp']==1){

                        $this->data['CommentReply']['rsvp']=$this->data['Coinset']['rsvp'] ;

                    }                

                    $this->data['CommentReply']['active_status']=1 ; 



                    if($this->CommentReply->save($this->data['CommentReply'])) {

                        //  $this->Session->setFlash('Thanks for adding comment reply.','default',array('class' => 'successmsg'));   

                        if($reply_id==0)

                        {

                            //triggered points setup for user

                            $this->Point->triggerPoints(REPLY_TO_COMMNET,$project_id,$userid);        //trigger for reply to comment once

                            App::import('Model','Comment');

                            $this->Comment = new Comment();

                            $this->Comment->id = $comment_id;

                            $this->data = $this->Comment->read();

                            

                            //SETP : SEND THANK YOU EMAIL TO REPLIER 

                            $cond_to_replier = " EmailTemplate.email_template_name= 'EMAIL TO A MEMBER WHO REPLY TO A COMMENT' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                            $replierMailMessage= $this->EmailTemplate->find('first',array('conditions' => $cond_to_replier));                        

                            if(!empty($replierMailMessage)){

                                        $subject  = $replierMailMessage['EmailTemplate']['subject'];              

                                        $from = $replierMailMessage['EmailTemplate']['sender'];        //$projectDetails['Project']['fromemail'];

                                        $fromname = $replierMailMessage['EmailTemplate']['sender'];        //$projectDetails['Project']['fromname'];

                                        $mailBody=$replierMailMessage['EmailTemplate']['content'];

                                            

                                        /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/   

                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                        $condition = "id='1'";

                                        $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                        $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                        $mailBody.=$mailfooter;

                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                        

                                        

                                        // Set path to inserted image 

                                            $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                                        $toreplieremail=$holderArray['Holder']['email'];

                                        /**

                                        * New Email Temp replacement code for data Elements 

                                       */

                                       //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                            $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $toreplieremail);

                                       //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                            $dataEleValuesArray[DATA_ELEMENT_REPLY]= $this->data['CommentReply']['reply'];

                                            $dataEleValuesArray[DATA_ELEMENT_COMMENT]= $this->data['Comment']['commnet'];

                                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                       //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                            $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                            $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                        //to all

                                        $result = $this->Sendemail->sendMailContentWithCC($toreplieremail,$from,$subject,$mailBody,$fromname, $replierMailMessage['EmailTemplate']['send_cc_email_to']);                



                                    }

                                    

                            //SETP : SEND EMAIL TO NOTIFY COMMENT POSTER

                            $cond_to_commenter = " EmailTemplate.email_template_name= 'A REPLY TO YOUR COMMENT' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                            $commenterMailMessage= $this->EmailTemplate->find('first',array('conditions' => $cond_to_commenter));                        

                            if(!empty($commenterMailMessage)){

                                        $subject  = $commenterMailMessage['EmailTemplate']['subject'];              

                                        $from = $commenterMailMessage['EmailTemplate']['sender'];        //$projectDetails['Project']['fromemail'];

                                        $fromname = $commenterMailMessage['EmailTemplate']['sender'];        //$projectDetails['Project']['fromname'];

                                        $mailBody=$commenterMailMessage['EmailTemplate']['content'];    

                                        

                                        /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/

                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                        $condition = "id='1'";

                                        $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                        $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                        $mailBody.=$mailfooter;

                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                      

                                        

                                        // Set path to inserted image 

                                            $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                                   

                                         $condition = " Holder.id = '".$this->data['Comment']['holder_id']."' and  Holder.project_id='".$project_id."' ";

                                         $commenterArray = $this->Holder->find('first',array('conditions' => $condition ));

                                         $tocommenteremail=$commenterArray['Holder']['email'];

                                        /**

                                        * New Email Temp replacement code for data Elements 

                                       */

                                       //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                            $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $tocommenteremail);

                                       //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                            $dataEleValuesArray[DATA_ELEMENT_REPLY]= $this->data['CommentReply']['reply'];

                                            $dataEleValuesArray[DATA_ELEMENT_COMMENT]= $this->data['Comment']['commnet'];

                                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                       //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                            $subject1=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                            $mailBody1=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                        //to all

                                        $result = $this->Sendemail->sendMailContentWithCC($tocommenteremail,$from,$subject1,$mailBody1,$fromname, $commenterMailMessage['EmailTemplate']['send_cc_email_to']); 

                                        

                                         //SETP : SEND MAIL AND INTERNAL MESSAGE TO ALL HOLDERS WHO FOLLOWS THIS COMMENT                      

                                         // get follower id for this comment

                                            $followerCond=" CommentFollower.project_id='".$project_id."' and CommentFollower.comment_id='".$comment_id."'";

                                            $queryFollow="SELECT Holder.id, Holder.email, Holder.screenname from comment_followers  CommentFollower

                                            Left Join holders Holder on Holder.id=CommentFollower.follower_id

                                            Where ".$followerCond;

                                            App::import('Model','CommentFollower');

                                            $this->CommentFollower = new CommentFollower();

                                            $followerlist=$this->CommentFollower->query($queryFollow);

                                            if($followerlist){

                                                    // From Project sponsor 

                                                      /**

                                                       * New Email Temp replacement code for data Elements 

                                                       */

                                                       //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                                       $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails);

                                                       $dataEleValuesArray[DATA_ELEMENT_REPLY]= $this->data['CommentReply']['reply'];

                                                       $dataEleValuesArray[DATA_ELEMENT_COMMENT]= $this->data['Comment']['commnet'];

                                                        

                                                  /*  App::import('Model','Sponsor');

                                                    $this->Sponsor = new Sponsor();

                                                    $sponsorCond=" project_id='".$project_id."' and id='".$projectDetails['Project']['sponsor_id']."'"; 

                                                    $sponsorDetails=$this->Sponsor->find('first', array('conditions'=>$sponsorCond, 'field' => 'sponsor_name, email')) ;

                                                    $formid= $sponsorDetails['Sponsor']['id']; 

                                                    $frommail = $sponsorDetails['Sponsor']['email'];   

                                                    $fromname = $sponsorDetails['Sponsor']['sponsor_name'];  



                                                    $mailsubject = 'New comment updated';

                                                    $msgcontent = 'Dear <HOLDERNAME>,<br/><br/> 

                                                    New comment reply posted by '.$holderArray['Holder']['screenname'].'<br/>

                                                    '.trim($reply).' <br/>  <br/>

                                                    <strong>Wondering why you got this email?  </strong><br/>

                                                    It is sent when someone chooses to follow a comment on site.

                                                    <br/>   <br/> 

                                                    Thanks again!<br/>'.$fromname;



                                                    $msgcontent='Dear,<br/><br/> 

                                                    New comment reply posted by '.$holderArray['Holder']['screenname'].'<br/>

                                                    '.trim($reply).' <br/>  <br/> Thanks again!<br/>'.$fromname;    */



                                                    $sendflag=true;

                                                    $errorwith="";

                                                    $to_holderid.=",".$rarr[0];

                                                    $to_holdername.=",".$rarr[1]; 

                                                    $receiver_id=array();

                                                    foreach($followerlist as $folllower){

                                                        $toemail=$folllower['Holder']['email'];       

                                                        $toname=$folllower['Holder']['screenname'];

                                                        $receiver_id[]=$folllower['Holder']['id']."-".$toname."-holder";     

                                                    //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                                         $dataEleValuesArray[DATA_ELEMENT_TO_MEMBER_NAME]= $folllower['Holder']['screenname'];      

                                                         $dataEleValuesArray[DATA_ELEMENT_TO_MEMEBR_EMAIL]=$folllower['Holder']['email'];      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_FIRSTNAME]=$folllower['Holder']['firstname'];      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_LASTNAME]=$folllower['Holder']['lastnameshow'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS1]=$folllower['Holder']['address1'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS2]=$folllower['Holder']['address2'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_CITY]=$folllower['Holder']['city'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_STATE]=$folllower['Holder']['state'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_COUNTRY]=$folllower['Holder']['country'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_PHONE]=$folllower['Holder']['phone'];

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ZIP]=$folllower['Holder']['zipcode'];

                                                         $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                                    

                                                 //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE 

                                                         $subject2=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                                         $mailBody2=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                                         if(!$this->Sendemail->sendMailContentWithCC($toemail,$frommail,$subject2,$mailBody2,$fromname, $commenterMailMessage['EmailTemplate']['send_cc_email_to'])){

                                                            $sendflag = false;

                                                            $errorwith = $toemail.','.$errorwith;

                                                        }

                                                         $dataEleValuesArray[DATA_ELEMENT_TO_MEMBER_NAME]= '';      

                                                         $dataEleValuesArray[DATA_ELEMENT_TO_MEMEBR_EMAIL]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_FIRSTNAME]='';            

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_LASTNAME]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS1]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ADDRESS2]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_CITY]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_STATE]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_COUNTRY]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_PHONE]='';      

                                                         $dataEleValuesArray[DATA_ELEMENT_MEMBER_ZIP]='';      

                                                         $errorwith = substr($errorwith,0,-1);   

                                                    }   

                                                    // Send internal emssage to all follower                                   

                                                    $issuccess= $this->sendMessageToHolders($receiver_id, $mailsubject, $msgcontent, $formid, $fromname,'sponsor');

                                            }

                                    }

                           }

                        //    $this->redirect('/companies/view_registeredcoins/');  

                        echo json_encode(1);   exit;                

                    }   







                } 



            }



        }



        function get_commenttypes_by_ajax($coin_holder_id = null){   

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $userid = $this->Session->read("User.User.id");



            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));



            $this->layout = 'ajax';

            $query="SELECT CommentType.*  

            from comment_types CommentType

            where  CommentType.sequence_id >0 and  CommentType.project_id='".$project_id."'

            and  (id NOT IN(select comment_type_id from comments 

            where  holder_id  = '".$holderArray['Holder']['id']."' and coin_holder_id='".$coin_holder_id."' and project_id='".$project_id."' and active_status='1' and delete_status='0') or is_additional_allowed='1') 

            and CommentType.active_status='1' and CommentType.delete_status='0' order by is_additional_allowed desc, sequence_id asc";

            

            $commentTypeArray = $this->User->query($query); 

            $this->set('commentTypeArray',$commentTypeArray);  



            //  $this->set('comment_types',$this->NameOfYourControllerModelGoesHere->State->find('list',array('conditions'=>array('State.country_id' => $country_id))));

        }









        /*******************************************************************

        * Function Name: select_coin

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This function is used to list registered coins.

        * Created By      : SDN

        * Created: 23 Feb, 2011

        ********************************************************************/

        function  select_coin(){



            //Configure::write('debug', 2);    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';    



            //for active menu display

            $this->set('page_url','update_profile');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $userid = $this->Session->read("User.User.id");



            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));



            $this->set('holder_id',$holderArray['Holder']['id']);



            # Setting Pagination modelclass

            $this->Pagination->modelClass = 'CoinsHolder';



            $field      = '';    



            $condition = " CoinsHolder.holder_id  = '".$holderArray['Holder']['id']."' and CoinsHolder.is_current_holder='1'  and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";



            $this->Pagination->total        = count( $this->CoinsHolder->find('all', array('conditions' => $condition, 'fields' => $field )));

            list($order,$limit,$page)       = $this->Pagination->init($condition,$field);   



            $sortBy =$this->params['url']['sortBy']." ".$this->params['url']['direction'];



            ;

            if(!empty($this->params['url']['sortBy'])) 

                $order=$sortBy;

            else

                $order      = array('CoinsHolder.created DESC');



            $coinholderArray = $this->CoinsHolder->find('all',array('conditions' => $condition, 'fields' => $field, 'order' =>$order, 'limit' =>$limit, 'page' => $page ));



            $this->set('coinholderArray',$coinholderArray);





        }

        /*******************************************************************

        * Function Name: edit_project_detail

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 24 Feb, 2011

        ********************************************************************/

        function edit_project_detail(){

            //Configure::write('debug', 2);    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';    



            //for active menu display

            $this->set('page_url','edit_project_detail');



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $userid = $this->Session->read("User.User.id");





            ##import Project  model for processing

            App::import("Model", "Project");

            $this->Project =   & new Project();    

            ##code for selected tab

            $this->set('selectedtab','0');



            ##check empty data

            if(!empty($this->data)) {

                ##code for selected tab

                if(isset($this->data['Company']['selectedtab']) && $this->data['Company']['selectedtab'] !=''){

                    $this->set('selectedtab',$this->data['Company']['selectedtab']);

                }

                #set the posted data

                $this->Project->set($this->data);

                #check server side validation

                $errormsg = $this->Project->invalidFields();



                if(!$errormsg){

                    $ptname = $this->data['Project']['project_name'];

                    $sername = $this->data['Project']['serialprefix'];



                    $condition = "project_name = '".$ptname."'    AND  delete_status = '0' AND id !='".$projectid."'";

                    $ptdata = $this->Project->find('all',array("conditions"=>$condition));

                    if(!$ptdata){

                        $condition1 = "serialprefix = '".$sername."'    AND  delete_status = '0' AND id !='".$projectid."'";

                        $spdata = $this->Project->find('all',array("conditions"=>$condition1));

                        if(!$spdata){

                            $this->data['Project']['id'] = $projectid;

                            //first upload images linke side A side B and logo

                            $this->File = & new FileComponent;

                            $filePath =  'img' . DS . $ptname . DS.'uploads' ;

                            $this->File->setDestPath($filePath);



                            if($this->data['Project']['coinsidea']['name'] !=''){

                                $file_name1 = $this->File->setFileName($this->data['Project']['coinsidea']['name']); 

                                $tmp1 = $this->data['Project']['coinsidea']['tmp_name'];

                                $fileNamesidea = $this->File->uploadcoin($file_name1,$tmp1,true);

                                $this->data['Project']['sidea'] = $fileNamesidea;

                            }

                            if($this->data['Project']['coinsideb']['name'] !=''){

                                $file_name2 = $this->File->setFileName($this->data['Project']['coinsideb']['name']); 

                                $tmp2 = $this->data['Project']['coinsideb']['tmp_name'];

                                $file_namesideb = $this->File->uploadcoin($file_name2,$tmp2,true);

                                $this->data['Project']['sideb'] = $file_namesideb;

                            }

                            if($this->data['Project']['coinlogo']['name'] !=''){

                                $file_name3 = $this->File->setFileName($this->data['Project']['coinlogo']['name']); 

                                $tmp3 = $this->data['Project']['coinlogo']['tmp_name'];

                                $file_namelogo = $this->File->uploadlogo($file_name3,$tmp3,true);

                                $this->data['Project']['logo'] = $file_namelogo;

                            }



                            if($this->Project->Save($this->data)){

                                $this->Session->setFlash('Project Details updated Successfully.','default', array('class' => 'successmsg'));

                            }else{

                                $this->Session->setFlash('Error in processing.','default',array('class' => 'errormsg'));

                            }

                            //End upload images linke side A side B and logo





                        }else{

                            $this->Session->setFlash('Serial Prefix with same name already exists.','default',array('class' => 'errormsg'));

                        }

                    }else{

                        $this->Session->setFlash('Project with same name already exists.','default',array('class' => 'errormsg'));





                    }

                } 

                $this->data1['ProjectType'] = $this->data['ProjectType'];



                $projectid = $this->data['Project']['id'];



            }





            $this->Project->id = $projectid;

            $this->data = $this->Project->read();

            $this->set("selectedprojecttype",$this->data['Project']['project_type_id']);

            $this->set("projectname",$this->data['Project']['project_name']);

            $this->projecttypedropdown();



            $companyname = $this->getcompaniesbyprojectid($projectid,'yes');



            $this->set('companies',$companyname);



            $sponsorname = $this->getsponsornamebyprojectid($projectid);

            if(!$sponsorname){

                $sponsorname = "Sponsor not added yet.";

            }

            $this->data['Company']['sponsorname'] = $sponsorname ;



            $contactname = $this->getcontactsbyprojectid($projectid,'yes');

            //$this->data['Company']['contacts'] = $contactname ;

            $this->set('contacts',$contactname);

            $coinsetname = $this->getcoinsetsbyprojectid($projectid,'yes');

            $unitcount = $this->getcoinsetsunitbyprojectid($projectid);



            $this->set('totalnumunits',$unitcount);

            $this->set('coinsetsdisplay',$coinsetname);

            //$this->data['Company']['coinsetsdisplay'] = $coinsetname ;









        }

        /*

        * Function name   : editprojectdtl()

        * Description : This function used to edit information related projects

        * Created On      : 17-02-11 (08:15pm)

        *

        */ 







        function downloadholder(){



            ##Configure::write('debug',3);

            ##check admin session live or not

            $this->layout = null;

            $this->autoLayout = false; 

            Configure::write('debug', '0');

            $this->session_check_user();

            $projectid = $this->Session->read("projectwebsite_id");

            ##import  Holder  model for processing

            App::import("Model", "Holder");

            $this->Holder =   & new Holder();    

            $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and Holder.id  IN (SELECT DISTINCT holder_id FROM coins_holders)";





            $holderarr = $this->Holder->find('all',array("conditions"=>$condition));





            //echo $csv->render('HoldersList.csv'); 



            ##set Coinset data in variable



            $this->set("dholderlists",$holderarr);    

        }

        

        function downloadrsvp($event_id=null){

            

                        

            $this->layout = null;

            $this->autoLayout = false; 

            //Configure::write('debug', '0');

            $this->session_check_user();

            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");

            $this->set('current_project_name',$project_name);

            

            App::import("Model", "Event");

            $this->Event =   & new Event();



            App::import("Model", "EventInvitation");

            $this->EventInvitation =   & new EventInvitation();

           

            $condition = "EventInvitation.delete_status = '0' AND EventInvitation.project_id = '".$projectid."' and EventInvitation.event_id='".$event_id."' and EventInvitation.in_waitlist='0'";

                      

                       

            $this->Event->bindModel(array('belongsTo'=>array(

            'EventInvitation'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.event_id = Event.id'

            )

            )));



            $eventArray = $this->Event->find('all',array("conditions"=>$condition));          

            $this->set("eventdata",$eventArray);

            

        }    





        function downloadnonholderlist(){



            $this->layout = null;

            $this->autoLayout = false; 

            Configure::write('debug', '0');



            ##Configure::write('debug',3);

            ##check admin session live or not

            $this->session_check_user();

            $projectid = $this->Session->read("projectwebsite_id");

            ##import  Holder  model for processing

            App::import("Model", "Holder");

            $this->Holder =   & new Holder();





            $field='';

            $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and Holder.id NOT IN (SELECT DISTINCT holder_id FROM coins_holders)";

            ##initaite pagination 

            $this->Pagination->sortByClass    = 'Holder'; 

            ##initaite pagination 

            $this->Pagination->total= count($this->Holder->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            if($order == "Holder.id ASC"){

                $order = "Holder.id DESC";

            }    

            $holderarr = $this->Holder->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            ##set Coinset data in variable        

            $this->set("dholderlists",$holderarr);        

        }









        function downloadcoinslist(){





            $this->layout = null;

            $this->autoLayout = false; 

            Configure::write('debug', '0');

            $this->session_check_user();

            $projectid = $this->Session->read("projectwebsite_id");

            ##import Coins Holder  model for processing

            App::import("Model", "CoinsHolder");

            $this->CoinsHolder =   & new CoinsHolder();    





            ##fetch data from CoinsHolder table for listing



            $this->CoinsHolder->bindModel(array('belongsTo'=>array(

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = CoinsHolder.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'

            )

            )));



            $field='';

            $condition = "CoinsHolder.project_id = '$projectid' AND CoinsHolder.delete_status='0'";

            $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination 



            $this->Pagination->total= count($this->CoinsHolder->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $this->CoinsHolder->bindModel(array('belongsTo'=>array(

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'Holder.id = CoinsHolder.holder_id'

            ),'Coinset'=>array(

            'foreignKey'=>false,

            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'

            )

            )));

            if($order == "CoinsHolder.id ASC"){

                $order = "CoinsHolder.id DESC";

            }

            $coinscoinlistdtlarr = $this->CoinsHolder->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));



            ##set Coinset data in variable



            $this->set("coinlist",$coinscoinlistdtlarr);

        }    











        function editprojectdtl(){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','edit_project_detail');



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");



            App::import("Model", "Project");

            $this->Project =   & new Project();

            App::import("Model", "Sponsor");

            $sponsor =   & new Sponsor();

            App::import("Model", "User");

            $user =   & new User();





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '2'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition





            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($projectid);



            $sponserid=$projectDetails['Project']['sponsor_id'];    



            $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid));

            $this->set('project',$projectDetails);    

            $this->set('sponsor',$sponsordetails);

            $userid = $this->Session->read("User.User.id");





            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set("current_domain",$current_domain);



            ##check empty data

            if(!empty($this->data)) {



                #set the posted data



                $this->Project->set($this->data);

                #check server side validation

                $errormsg = $this->Project->invalidFields();



                if(!$errormsg){

                    if($this->data['Project']['relation_type']=="3rd Party")

                    {

                        if($this->data['Project']['distributor'])

                            $this->data['Project']['distributor']=$this->data['Project']['distributor'];



                    }

                    else

                        $this->data['Project']['distributor']="";

                    

                    $ptname = $this->data['Project']['project_name'];

                    //$sername = $this->data['Project']['serialprefix'];



                    $condition = "project_name = '".$ptname."'    AND  Project.delete_status = '0' AND Project.id !='".$projectid."'";

                    $ptdata = $this->Project->find('all',array("conditions"=>$condition));

                    if(!$ptdata){

                        //$condition1 = "serialprefix = '".$sername."'    AND  Project.delete_status = '0' AND Project.id !='".$projectid."'";

                        //$spdata = $this->Project->find('all',array("conditions"=>$condition1));

                        //if(!$spdata){

                        $this->data['Project']['id'] = $projectid;

                        $this->data['Project']['system_name'] = $this->data['Project']['detail_project_name']; 

                        

                        if($this->data['price_type_options'])

                        {

                            $rel_type=$this->data['Project']['relation_type'];



                            //delete prvious entries in price type options

                            $this->ProductType->query("delete from price_type_options where project_id=$projectid");



                            $get_ids=$this->ProductType->query("select distinct pricing_coin_quantities.pricing_id,pricing_coin_quantities.product_id from pricing_coin_quantities,pricing_types where pricing_types.id=pricing_coin_quantities.pricing_id 

                            and pricing_types.product_id=pricing_coin_quantities.product_id and pricing_types.relation_type='$rel_type' and pricing_types.delete_status=0 and pricing_types.active_status=1");

                            for($i=0;$i<count($get_ids);$i++)

                            {

                                if($this->data['price_type_options'][$i]==1)

                                {

                                    $this->ProductType->query("insert into price_type_options values('',$projectid,".$get_ids[$i]['pricing_coin_quantities']['product_id'].",".$get_ids[$i]['pricing_coin_quantities']['pricing_id'].")");

                                }

                            }

                        }

                       

                       $get_site_type_name=$this->Project->query("select project_type_name from site_types where id=".$this->data['Project']['site_type_id']);

                       $site_type_name=$get_site_type_name[0]['site_types']['project_type_name'];

                       

                        $this->Project->query("update project_types set project_type_name='".$site_type_name."' , site_type_id=".$this->data['Project']['site_type_id']." where id=".$this->data['Project']['project_type_id']);    

                        

                        

                        if($this->Project->Save($this->data)){



                            $this->Session->setFlash('Project Details updated Successfully.','default', array('class' => 'successmsg'));



                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect('/companies/editprojectdtl');

                            }else{

                                $this->redirect('/companies/editprojectdtl');

                            }



                        }

                        //End upload images linke side A side B and logo



                        /*    

                        }else{

                        $this->Session->setFlash('Serial Prefix with same name already exists.','default',array('class' => 'errormsg'));

                        }*/

                    }else{

                        $this->Session->setFlash('Project with same name already exists.','default',array('class' => 'errormsg'));

                    }

                }



            }



            //for theme details



            $projectid = $this->Session->read("projectwebsite_id");



            $this->Project->id = $projectid;

            $this->data = $this->Project->read();

            

            $get_site_type_id=$this->Project->query("select site_type_id from project_types where id=".$this->data['Project']['project_type_id']);

            $site_type_id=$get_site_type_id[0]['project_types']['site_type_id'];



            // print_r($this->data);

            $this->set("selectedprojecttype",$site_type_id);

            $this->set("project_type_id",$this->data['Project']['project_type_id']);

            

            $this->projecttypedropdown();          

            $rel_type=$this->data['Project']['relation_type'];



            if($rel_type=="")

                $rel_type="Direct";       



            $get_ids=$this->ProductType->query("select distinct pricing_coin_quantities.pricing_id,pricing_coin_quantities.product_id from pricing_coin_quantities,pricing_types where pricing_types.id=pricing_coin_quantities.pricing_id 

            and pricing_types.product_id=pricing_coin_quantities.product_id and pricing_types.relation_type='$rel_type' and pricing_types.delete_status=0 and pricing_types.active_status=1");



            $sel_opts=$this->ProductType->query("select * from price_type_options where project_id='$projectid'");







            $product_type_names=array();

            $pricing_type_names=array();

            $selected_options=array();



            for($i=0;$i<count($get_ids);$i++)

            {

                for($j=0;$j<count($sel_opts);$j++)

                {

                    $flag=0;

                    if($sel_opts[$j]['price_type_options']['product_id']==$get_ids[$i]['pricing_coin_quantities']['product_id'] && $sel_opts[$j]['price_type_options']['pricing_id']==$get_ids[$i]['pricing_coin_quantities']['pricing_id'])

                    {

                        $flag=1;

                        break;

                    }



                }



                array_push($selected_options,$flag);

                array_push($product_type_names,$this->getproductnamebyid($get_ids[$i]['pricing_coin_quantities']['product_id']));

                array_push($pricing_type_names,$this->getpricingnamebyid($get_ids[$i]['pricing_coin_quantities']['pricing_id']));



            }



            $this->set('selected_options',$selected_options);

            $this->set('product_type_names',$product_type_names);

            $this->set('pricing_type_names',$pricing_type_names);



            $companyname = $this->getcompaniesbyprojectid($projectid,'yes');

            //$this->data['Company']['companies'] = $companyname ;

            $this->set('companies',$companyname);



            $sponsorname = $this->getsponsornamebyprojectid($projectid);

            if(!$sponsorname){

                $sponsorname = "Sponsor not added yet.";

            }

            $this->data['Company']['sponsorname'] = $sponsorname ;



            $contactname = $this->getcontactsbyprojectid($projectid,'yes');

            //$this->data['Company']['contacts'] = $contactname ;

            $this->set('contacts',$contactname);

            $coinsetname = $this->getcoinsetsbyprojectid($projectid,'yes');

            $unitcount = $this->getcoinsetsunitbyprojectid($projectid);



            $this->set('totalnumunits',$unitcount);

            $this->set('coinsetsdisplay',$coinsetname);



            $this->data = array_merge($this->data);

            

            

            //get system pricing list

            $cont="SystemPricing.delete_status='0' and SystemPricing.active_status='1'";           

            $sys_pri_data=$this->SystemPricing->find('list',array('conditions'=>$cont,'fields'=>array('id','system_pricing_name')));        

            $this->set('sys_pri_data',$sys_pri_data);

            //debugbreak();

            //get no of memebrs and non members

            $holders_id=$this->getMemberTypeIdByTypeName("Holder",$projectid);

            $holders_id=$holders_id['MemberType']['id'];

            $non_holders_id=$this->getMemberTypeIdByTypeName("Non Holder",$projectid);

            $non_holders_id=$non_holders_id['MemberType']['id'];

            $non_members_id=$this->getMemberTypeIdByTypeName("Non Member",$projectid);

            $non_members_id=$non_members_id['MemberType']['id'];

            

            $members_cnt=$this->Holder->query("select count(*) as cnt from holders where (member_type=$holders_id || member_type=$non_holders_id)");

            $members_cnt=$members_cnt[0][0]['cnt'];

            

            $non_members_cnt=$this->Holder->query("select count(*) as cnt from holders where member_type=$non_members_id ");

            $non_members_cnt=$non_members_cnt[0][0]['cnt'];

            

             $this->set('members_cnt',$members_cnt);

             $this->set('non_members_cnt',$non_members_cnt);

             

             $this->getuseragreementlist($projectid);



        }

        

        

        function get_sys_pricing_charge(){

            

            $this->session_check_user();



            $syspricingid=$_POST['id'];

            $mem=$_POST['mem'];

            $non_mem=$_POST['non_mem'];

            $check=$_POST['check'];

           

            if($syspricingid)

            {

                

                $sys_pri_info=$this->SystemPricing->query("select * from system_pricings where id=$syspricingid");

                

                $inc_non_members=$sys_pri_info[0]['system_pricings']['inc_non_members'];

                $shopping_cart=$sys_pri_info[0]['system_pricings']['shopping_cart'];

                

                if($check!=NULL)

                {

                    if($check==1)

                    {

                        $total_billing=$mem+$non_mem;    

                    }

                    else

                        $total_billing=$mem;

                        

                    $pricing_details['sys_pri_info']="";

                    $pricing_details['shopping_cart']=$shopping_cart;

                }

                else

                {

                    if($inc_non_members==1)

                    {

                        $total_billing=$mem+$non_mem;

                    }

                    else

                        $total_billing=$mem;

                        

                    $pricing_details['sys_pri_info']=$inc_non_members;

                    $pricing_details['shopping_cart']=$shopping_cart;

                }

               

                //$monthly_charge=$this->SystemPricing->query("SELECT monthly_price FROM system_monthly_pricings where system_pricing_id=$syspricingid ORDER BY ABS( no_of_members - $total_billing )LIMIT 1");

                

                $monthly_charge=$this->SystemPricing->query("SELECT monthly_price FROM system_monthly_pricings where system_pricing_id=$syspricingid and no_of_members>='$total_billing' order by monthly_price asc LIMIT 1");

                

                $monthly_charge=$monthly_charge[0]['system_monthly_pricings']['monthly_price'];

                

                if($monthly_charge=="" || $monthly_charge==NULL)

                {

                    $monthly_charge=$this->SystemPricing->query("select max(monthly_price) as monthly_price from system_monthly_pricings where system_pricing_id=$syspricingid");

                    $monthly_charge=$monthly_charge[0]['system_monthly_pricings']['monthly_price'];

                }

                

                if($sys_pri_info){



                    $pricing_details['monthly_charge']=$monthly_charge;

                    $pricing_details['total_billing']=$total_billing;

                    

                    echo json_encode($pricing_details);

                }else{

                    echo json_encode(0);

                }



            }



            exit;             

        }

        

        

        function get_product_details($rel_type){

            $this->layout="ajax"; 

            $this->session_check_user();

            $projectid=$this->Session->read("projectwebsite_id");   



            if($rel_type==1)

                $rel_type="Direct";

            else

                $rel_type="3rd Party";





            if($rel_type)

            {





                $get_ids=$this->ProductType->query("select distinct pricing_coin_quantities.pricing_id,pricing_coin_quantities.product_id from pricing_coin_quantities,pricing_types where pricing_types.id=pricing_coin_quantities.pricing_id and pricing_types.product_id=pricing_coin_quantities.product_id and pricing_types.relation_type='$rel_type' and pricing_types.delete_status=0 and pricing_types.active_status=1");



                $sel_opts=$this->ProductType->query("select * from price_type_options where project_id='$projectid'");







                $product_type_names=array();

                $pricing_type_names=array();

                $selected_options=array();



                for($i=0;$i<count($get_ids);$i++)

                {

                    for($j=0;$j<count($sel_opts);$j++)

                    {

                        $flag=0;

                        if($sel_opts[$j]['price_type_options']['product_id']==$get_ids[$i]['pricing_coin_quantities']['product_id'] && $sel_opts[$j]['price_type_options']['pricing_id']==$get_ids[$i]['pricing_coin_quantities']['pricing_id'])

                        {

                            $flag=1;

                            break;

                        }



                    }



                    array_push($selected_options,$flag);

                    array_push($product_type_names,$this->getproductnamebyid($get_ids[$i]['pricing_coin_quantities']['product_id']));

                    array_push($pricing_type_names,$this->getpricingnamebyid($get_ids[$i]['pricing_coin_quantities']['pricing_id']));



                }



                $this->set('selected_options',$selected_options);

                $this->set('product_type_names',$product_type_names);

                $this->set('pricing_type_names',$pricing_type_names);



            }                   





        }

        

        

        function get_distributorcompanytype()

        {

            $this->layout = ''; 

            $search_from =  strtolower($_GET["q"]);//$_REQUEST['term'];



            ##import Company  model for processing

            App::import("Model", "Company");

            $this->Company =   & new Company();    

            ##fetch data from Company table for listing

            $field='';

            //$condition = "Company.delete_status = '0' AND Company.project_id = '0'";

            $condition = "Company.delete_status = '0'  and   Company.company_name like '".$search_from."%'  AND

            CompanyType.delete_status = '0' and CompanyType.is_3rdparty='1' ";





            $this->Company->bindModel(array('belongsTo'=>array(

            'CompanyType'=>array(

            'foreignKey'=>false,

            'conditions'=>'Company.company_type_id = CompanyType.id'

            )

            )));





            $companydata = $this->Company->find('all',array("conditions"=>$condition, 'order' =>$order));

            ##set project type data in variable



            // $this->set("companytypedata",$companytypedata);



            //  $search_suggestions = $this->contactlist_model->serach_suggestions($search_from);

            if($companydata!= false)

            {

                foreach($companydata as $value)

                {   

                    echo $value['Company']['company_name']."\n";

                }



            }

            else

            {

                echo "No Match Found";

            }





            exit;

        } 

        



        function settings(){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','edit_project_detail');



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");



            App::import("Model", "Project");

            $this->Project =   & new Project();

            App::import("Model", "Sponsor");

            $sponsor =   & new Sponsor();

            App::import("Model", "User");

            $user =   & new User();





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '53'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition





            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($projectid);



            $sponserid=$projectDetails['Project']['sponsor_id'];    



            $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid));

            $this->set('project',$projectDetails);    

            $this->set('sponsor',$sponsordetails);

            $userid = $this->Session->read("User.User.id");











            ##check empty data

            if(!empty($this->data)) {



                #set the posted data

                $this->data['Project']['facebookkey']=trim($this->data['Project']['facebookkey']);            

                $this->data['Project']['facebookappkey']=trim($this->data['Project']['facebookappkey']);

                $this->data['Project']['facebooksecretkey']=trim($this->data['Project']['facebooksecretkey']);



                $this->Project->set($this->data);

                #check server side validation

                $errormsg = $this->Project->invalidFields();



                if(!$errormsg){



                    $this->File = & new FileComponent;

                    $filePath =  'img' . DS . $project_name . DS.'uploads' ;

                    $this->File->setDestPath($filePath);



                    if($this->data['Project']['favoriteicon']['name'] !=''){

                        $file_name1 = $this->File->setFileName($this->data['Project']['favoriteicon']['name']); 

                        $tmp1 = $this->data['Project']['favoriteicon']['tmp_name'];

                        $fileNamefavicon = $this->File->uploadfavicon($file_name1,$tmp1,true);

                        if(!empty($fileNamefavicon)){

                            $this->data['Project']['favicon'] = $fileNamefavicon;

                        }

                        else{    

                            unset($this->data['Project']['favicon']);    

                        }

                    }                            





                    $this->data['Project']['id'] = $projectid;



                    if($this->Project->Save($this->data)){



                        $this->Session->setFlash('Setting has been modified.','default', array('class' => 'successmsg'));



                        if(isset($this->data['Action']['redirectpage'])){

                            $this->redirect('/companies/dashboard');

                        }else{

                            $this->redirect('/companies/settings');

                        }



                    }

                    //End upload images linke side A side B and logo







                }



            }



            //for theme details





            App::import("Model", "Content");

            $this->Content =   & new Content();

            $valofdd = $this->Content->find('all',array('conditions'=>array('project_id'=>$projectid,'active_status'=>'1','delete_status'=>'0'),'fields'=>array('Content.title,Content.id')));

            $this->set("valofdd",$valofdd);







            $this->Project->id = $projectid;

            $this->data = $this->Project->read();



            $this->data = array_merge($this->data);

        }

        /*******************************************************************

        * Function Name: projectimages

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 4 Mar, 2011

        * Modified: 4 June, 2011

        ********************************************************************/





        function projectimages(){

            ##Configure::write('debug', 3);    

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','edit_project_detail');



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");



            App::import("Model", "Project");

            $this->Project =   & new Project();

            App::import("Model", "Sponsor");

            $sponsor =   & new Sponsor();

            App::import("Model", "User");

            $user =   & new User();





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '2'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition





            App::import("Model", "ProjectType");

            $this->ProjectType =   & new ProjectType();



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($projectid);



            $this->set('project',$projectDetails);    

            $userid = $this->Session->read("User.User.id");

            ##check empty data

            if(!empty($this->data)) {



                #set the posted data

                $this->Project->set($this->data);

                #check server side validation

                $errormsg = $this->Project->invalidFields();



                if(!$errormsg){



                    $this->data['Project']['id'] = $projectid;

                    //first upload images linke side A side B and logo

                    $this->File = & new FileComponent;

                    $filePath =  'img' . DS . $project_name . DS.'uploads' ;



                    $this->File->setDestPath($filePath);



                    if($this->data['Project']['coinsidea']['name'] !=''){



                        $file_name1 = $this->File->setFileName($this->data['Project']['coinsidea']['name']); 

                        $tmp1 = $this->data['Project']['coinsidea']['tmp_name'];

                        $fileNamesidea = $this->File->uploadcoin($file_name1,$tmp1,true);

                        $this->data['Project']['sidea'] = $fileNamesidea;



                    }

                    if($this->data['Project']['coinsideb']['name'] !=''){

                        $file_name2 = $this->File->setFileName($this->data['Project']['coinsideb']['name']); 

                        $tmp2 = $this->data['Project']['coinsideb']['tmp_name'];

                        $file_namesideb = $this->File->uploadcoin($file_name2,$tmp2,true);

                        $this->data['Project']['sideb'] = $file_namesideb;

                    }

                    if($this->data['Project']['coinlogo']['name'] !=''){

                        ##upload image

                        $file_name3 = $this->File->setFileName($this->data['Project']['coinlogo']['name']); 

                        $tmp3 = $this->data['Project']['coinlogo']['tmp_name'];

                        $file_namelogo = $this->File->uploadlogo($file_name3,$tmp3,true);

                        $uploadedfilepath = 'img' . DS . $project_name . DS.'uploads/'. $file_namelogo ;



                        $setnewdiamentions = $this->checkmaxfilesize($uploadedfilepath);

                        unlink($uploadedfilepath);

                        $file_name3 = $this->File->setFileName($this->data['Project']['coinlogo']['name']); 

                        $tmp3 = $this->data['Project']['coinlogo']['tmp_name'];

                        $file_namelogo = $this->File->uploadlogo($file_name3,$tmp3,true,$setnewdiamentions);



                        $this->data['Project']['logo'] = $file_namelogo;

                    }

                    if($this->data['Project']['coinedge']['name'] !=''){

                        $file_name4 = $this->File->setFileName($this->data['Project']['coinedge']['name']); 

                        $tmp4 = $this->data['Project']['coinedge']['tmp_name'];

                        $file_nameedge = $this->File->uploadlogo($file_name4,$tmp4,true,'300x12');

                        $this->data['Project']['edge'] = $file_nameedge;

                    }

                    if($this->data['Sponsor']['sponlogo']['name'] !=''){





                        $filePath =  'img' . DS . $project_name . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name5 = $this->File->setFileName($this->data['Sponsor']['sponlogo']['name']); 

                        $tmp5 = $this->data['Sponsor']['sponlogo']['tmp_name'];

                        $fileNamesidea5 = $this->File->uploadlogo($file_name5,$tmp5,true,'250x250');



                        $this->data['Sponsor']['logo'] = $fileNamesidea5;

                    }



                    $this->data['Sponsor']['user_id']=$userid;







                    // for Sponsor details

                    //Save Sponsor Data



                    if($sponsor->save($this->data)){}

                    if($this->Project->Save($this->data)){

                        $this->Session->setFlash('Project images information has been saved.','default', array('class' => 'successmsg'));



                        if(isset($this->data['Action']['redirectpage'])){

                            $this->redirect('/companies/editprojectdtl');

                        }else{

                            $this->redirect('/companies/projectimages');

                        }

                    }

                    //End upload images linke side A side B and logo

                }



            }





            $this->Project->id = $projectid;

            $this->data = $this->Project->read();

            $this->set("projectname",$this->data['Project']['project_name']);

            $this->set("serialdisplayside",$this->data['Project']['serialdisplayside']);

            $this->data = array_merge($this->data);

        }



        function projecttracking(){



            ##Configure::write('debug', 3);    

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','edit_project_detail');



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");



            App::import("Model", "Project");

            $this->Project =   & new Project();

            App::import("Model", "Sponsor");

            $sponsor =   & new Sponsor();

            App::import("Model", "User");

            $user =   & new User();





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '2'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition





            App::import("Model", "ProjectType");

            $this->ProjectType =   & new ProjectType();



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($projectid);



            $this->set('project',$projectDetails);    

            $userid = $this->Session->read("User.User.id");

            ##check empty data

            if(!empty($this->data)) {



                #set the posted data

                $this->Project->set($this->data);

                #check server side validation

                $errormsg = $this->Project->invalidFields();



                if(!$errormsg){



                    $this->data['Project']['id'] = $projectid;



                    $data = explode("-", $this->data['Project']['dateartrecieved']);

                    $time = explode(" ", $this->data['Project']['dateartrecieved']);

                    $time1[1] = explode(":", $time[1]);

                    $date = new DateTime();//print_r($time);

                    $date->setTime($time1[1][0],$time1[1][1]);

                    $date->setDate($data[2], $data[0], $data[1]);

                    $this->data['Project']['dateartrecieved']= $date->format("Y-m-d h:i:s");



                    $data = explode("-", $this->data['Project']['dateartapproval']);

                    $time = explode(" ", $this->data['Project']['dateartapproval']);

                    $time1[1] = explode(":", $time[1]);

                    $date = new DateTime();//print_r($time);

                    $date->setTime($time1[1][0],$time1[1][1]);

                    $date->setDate($data[2], $data[0], $data[1]);

                    $this->data['Project']['dateartapproval']= $date->format("Y-m-d h:i:s");



                    $data = explode("-", $this->data['Project']['datearttochipco']);

                    $time = explode(" ", $this->data['Project']['datearttochipco']);

                    $time1[1] = explode(":", $time[1]);

                    $date = new DateTime();//print_r($time);

                    $date->setTime($time1[1][0],$time1[1][1]);

                    $date->setDate($data[2], $data[0], $data[1]);

                    $this->data['Project']['datearttochipco']= $date->format("Y-m-d h:i:s");



                    $data = explode("-", $this->data['Project']['dateartproofsponsor']);

                    $time = explode(" ", $this->data['Project']['dateartproofsponsor']);

                    $time1[1] = explode(":", $time[1]);

                    $date = new DateTime();//print_r($time);

                    $date->setTime($time1[1][0],$time1[1][1]);

                    $date->setDate($data[2], $data[0], $data[1]);

                    $this->data['Project']['dateartproofsponsor']= $date->format("Y-m-d h:i:s");





                    if($this->Project->Save($this->data)){

                        $this->Session->setFlash('Tracking information has been saved.','default', array('class' => 'successmsg'));



                        if(isset($this->data['Action']['redirectpage'])){

                            $this->redirect('/companies/editprojectdtl');

                        }else{

                            $this->redirect('/companies/projecttracking');

                        }

                    }

                    //End upload images linke side A side B and logo

                }



            }





            $this->Project->id = $projectid;

            $this->data = $this->Project->read();



            $this->data = array_merge($this->data);



        }



        function projectcontrols(){

            ##Configure::write('debug', 3);    

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','edit_project_detail');



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");



            App::import("Model", "Project");

            $this->Project =   & new Project();

            App::import("Model", "Sponsor");

            $sponsor =   & new Sponsor();

            App::import("Model", "User");

            $user =   & new User();





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '2'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition





            App::import("Model", "ProjectType");

            $this->ProjectType =   & new ProjectType();



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);

            $this->set('project_id',$projectid);

            $projectDetails=$this->getprojectdetails($projectid);



            $this->set('project',$projectDetails);    

            $userid = $this->Session->read("User.User.id");

            ##check empty data

            if(!empty($this->data)) {

                

                $this->data['Project']['id']=$projectid;

                if($this->Project->Save($this->data['Project']))

                {

                    $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));

                } 



                #set the posted data

                $this->Project->set($this->data);

                #check server side validation

                $errormsg = $this->Project->invalidFields();



                if(!$errormsg){





                    if(!empty($this->data['ProjectType'])) {

                        #set the posted data

                        $this->ProjectType->set($this->data['ProjectType']);

                        #check server side validation

                        $this->ProjectType->invalidFields();

                        #save data in project type table

                        $recid  = $this->data['ProjectType']['id'];

                        $ptname  = $this->data['ProjectType']['project_type_name'];

                        $condition = "project_type_name = '".$ptname."' AND id !=$recid AND  delete_status = '0'";

                        $ptdata = $this->ProjectType->find('all',array("conditions"=>$condition));

                        //if(!$ptdata){

                            if($recid !=''){



                                if($this->ProjectType->Save($this->data['ProjectType'])){



                                    $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));



                                    if($this->data['ProjectType']['maxnumbercomment']>1)

                                    {



                                        App::import("Model", "ProjectCommentType");

                                        $this->ProjectCommentType =   & new ProjectCommentType();





                                        for($i=0;$i<=$this->data['ProjectType']['maxnumbercomment'];$i++){



                                            if($this->data['ProjectType']['commenttypeoption'.$i]>0){

                                                unset($this->data['ProjectCommentType']);

                                                $this->ProjectCommentType->create();



                                                $comment_type_id = $this->ProjectCommentType->find('first',array("conditions"=>"ProjectCommentType.project_type_id=$recid and ProjectCommentType.sequence_id=".$i." and ProjectCommentType.active_status='1' and ProjectCommentType.delete_status='0'", 'fields' =>"id"));

                                                if(is_array($comment_type_id) && !empty($comment_type_id))

                                                {

                                                    $this->data['ProjectCommentType']['id']=$comment_type_id['ProjectCommentType']['id'];

                                                }

                                                $this->data['ProjectCommentType']['sequence_id']=$i;

                                                $this->data['ProjectCommentType']['comment_type_id']=$this->data['ProjectType']['commenttypeoption'.$i];

                                                $this->data['ProjectCommentType']['project_type_id']=$this->data['ProjectType']['id'];



                                                if($this->ProjectCommentType->Save($this->data['ProjectCommentType'])){    

                                                    $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));

                                                }

                                            }

                                        }



                                    }

                                    //$this->Session->setFlash('Project Type updated Successfully.','default', array('class' => 'successmsg'));



                                }else{

                                    $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));



                                }

                            }else{

                                $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));

                            }

                       /*}

                        else{



                            $this->Session->setFlash('Project Type with same name already exists.','default',array('class' => 'msgTXt'));

                        }*/



                        //$this->redirect("/companies/editprojectdtl");

                    }

                    else{



                        $recid = $this->data['Project']['project_type_id'];

                        $this->ProjectType->id = $recid;

                        //$this->data = $this->ProjectType->read();

                        $this->set("ProjectTypeId", $recid);

                    }                



                    if(isset($this->data['Action']['redirectpage'])){

                        $this->redirect('/companies/settingthemes');

                    }else{

                        $this->redirect('/companies/projectcontrols');

                    }



                    //End upload images linke side A side B and logo

                }



            }





            $this->Project->id = $projectid;

            $this->data = $this->Project->read();



            $project_type_id=$this->data['Project']['project_type_id'];

            App::import("Model", "ProjectType");

            $this->ProjectType =   & new ProjectType();

            $projecttypedetails=$this->ProjectType->find('first',array('conditions'=>"ProjectType.id=$project_type_id")); 





            $this->set('ProjectTypeId',$project_type_id);

            $this->data = array_merge($this->data,$projecttypedetails);

        }



        function projectsponsor(){





            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','projectsponsor');



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");



            App::import("Model", "Project");

            $this->Project =   & new Project();

            App::import("Model", "Sponsor");

            $sponsor =   & new Sponsor();

            App::import("Model", "User");

            $user =   & new User();





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '2'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition







            $this->countrydroupdown();



            $this->statedroupdown();





            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($projectid);



            $sponserid=$projectDetails['Project']['sponsor_id'];    



            $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid));

            $this->set('project',$projectDetails);    

            $this->set('spondtl',$sponsordetails);

            $userid = $this->Session->read("User.User.id");

            $field='';

            

            $sponsor_user_id=$sponsordetails['Sponsor']['user_id'];

            $condition = "User.id = '$sponsor_user_id' and usertype='sponsor'";  

            $user_data= $this->User->find('first',array("conditions"=>$condition));

            

            $sponsor_login_id=$user_data['User']['username'];

            $this->set('sponsor_login_id',$sponsor_login_id);



            ##check empty data

            if(!empty($this->data)) {

                

                if($this->data['Sponsor']['sponsor_login_id'])

                {

                    

                    $user_arr['id']=$sponsor_user_id;

                    $user_arr['username']=$this->data['Sponsor']['sponsor_login_id'];

                    

                    $this->User->Save($user_arr);

                }  



                if ($this->data['Sponsor']['newstate'] == "" && $this->data['Sponsor']['state'] == '')

                {

                    $this->Session->setFlash('Please select state.','default',array('class' => 'msgTXt'));

                    $this->redirect("/companies/projectsponsor");

                }

                if ($this->data['Sponsor']['newstate'] != "" && $this->data['Sponsor']['state'] == '')

                {

                    $this->data['Sponsor']['state'] = $this->data['Sponsor']['newstate'];

                }

                $this->Project->set($this->data);

                #check server side validation

                $errormsg = $this->Project->invalidFields();



                if(!$errormsg){





                    $this->data['Project']['id'] = $projectid;

                    //first upload images linke side A side B and logo



                    if($this->data['Sponsor']['sponlogo']['name'] !=''){





                        $filePath =  'img' . DS . $project_name . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name5 = $this->File->setFileName($this->data['Sponsor']['sponlogo']['name']); 

                        $tmp5 = $this->data['Sponsor']['sponlogo']['tmp_name'];

                        $fileNamesidea5 = $this->File->uploadlogo($file_name5,$tmp5,true,'250x250');



                        $this->data['Sponsor']['logo'] = $fileNamesidea5;

                    }



                    $this->data['Sponsor']['user_id']=$userid;

                    // for Sponsor details

                    //Save Sponsor Data

                    $this->data['Sponsor']['project_id'] = $projectid;



                    if($sponsor->save($this->data)){



                        $this->Session->setFlash('Sponsor information has been saved.','default', array('class' => 'successmsg'));



                        if(isset($this->data['Action']['redirectpage'])){

                            $this->redirect('/companies/editprojectdtl');

                        }else{

                            $this->redirect('/companies/projectsponsor');

                        }

                    }

                }



            }

            //for theme details



            $projectid = $this->Session->read("projectwebsite_id");



            $this->Project->id = $projectid;

            $this->data = $this->Project->read();



            $this->set("projectname",$this->data['Project']['project_name']);



            $companyname = $this->getcompaniesbyprojectid($projectid,'yes');



            //$this->data['Company']['companies'] = $companyname ;

            $this->set('companies',$companyname);



            $sponsorname = $this->getsponsornamebyprojectid($projectid);

            if(!$sponsorname){

                $sponsorname = "Sponsor not added yet.";

            }

            $this->data['Company']['sponsorname'] = $sponsorname ;



            $contactname = $this->getcontactsbyprojectid($projectid,'yes');

            //$this->data['Company']['contacts'] = $contactname ;

            $this->set('contacts',$contactname);





            $this->data = array_merge($this->data);





        }

        /*******************************************************************

        * Function Name: edit_project_desc

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 4 Mar, 2011

        ********************************************************************/

        function edit_project_desc(){

            //Configure::write('debug', 2);    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';    



            //for active menu display

            $this->set('page_url','edit_project_detail');



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $this->Project->bindModel(array('belongsTo'=>array(

            'ProjectType'=>array(

            'foreignKey'=>false,

            'conditions'=>'Project.project_type_id = ProjectType.id'

            ),

            'Sponsor'=>array(

            'foreignKey'=>false,

            'conditions'=>'Project.sponsor_id = Sponsor.id'

            ),

            )));

            $sponsor->bindModel(array('belongsTo'=>array(

            'User'=>array(

            'foreignKey'=>false,

            'conditions'=>'Sponsor.user_id = User.id'

            )

            )));

            $projectDetails=$this->getprojectdetails($projectid);    

            $this->set('project',$projectDetails);    



            $userid = $this->Session->read("User.User.id");



            ##check empty data

            if(!empty($this->data)) {

                $this->data['Project']['id'] = $projectid;

                if($this->Project->Save($this->data)){

                    $this->Session->setFlash('Project Description updated Successfully.','default', array('class' => 'successmsg'));

                }else{

                    $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                }

            }





            $this->Project->id = $projectid;

            $this->data = $this->Project->read();

        }



        /*

        * Function name   : editsponsordtl()

        * Description : This function used to edit information related projects

        * Created On      : 17-02-11 (08:15pm)

        *

        */ 

        function editsponsordtl(){

            //Configure::write('debug', 2);    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';    



            //for active menu display

            $this->set('page_url','edit_project_detail');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid = $project_id;



            ##check empty data

            if(!empty($this->data)) {

                $updateflag = true;

                ##check server checking for user

                if(!$this->data['User']['id']){

                    $this->User->set($this->data);

                    $usererrormsg = $this->User->invalidFields();

                }

                #set the posted data

                $this->Sponsor->set($this->data);

                #check server side validation

                $errormsg = $this->Sponsor->invalidFields();



                if(!$errormsg){



                    $errormsg1 = "";

                    ##uploading Sponsor logo

                    if($this->data['Sponsor']['sponlogo']['name'] !=''){

                        $ptname = $this->data['Company']['projectname'];



                        $filePath =  'img' . DS . $ptname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Sponsor']['sponlogo']['name']); 

                        $tmp1 = $this->data['Sponsor']['sponlogo']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'250x250');



                        $this->data['Sponsor']['logo'] = $fileNamesidea;

                    }



                    ##update for password

                    if($this->data['User']['password']!='' && $this->data['User']['id'] !=''){

                        $this->data['User']['password'] = md5($this->data['User']['password']);



                        if($this->User->Save($this->data['User'])){

                            $errormsg1 = "Password Updated successfully. <br>";

                        }

                    }else{

                        if($this->data['User']['password'] !="" && $this->data['User']['username'] !=""){

                            $this->data['User']['project_id'] = $projectid;

                            $this->data['User']['password'] = md5($this->data['User']['password']);

                            $checkret = $this->checkuniqueuserid($this->data['User']['username']);

                            if($checkret){

                                if($this->User->Save($this->data['User'])){

                                    $lastuserid = $this->User->getLastInsertId();

                                }

                            }else{

                                $errormsg1 = "Username with same name already exists.";

                                $updateflag=false;

                            }



                        }            

                    }



                    ##saving Sponsor detail

                    if($this->data['Sponsor']['id']){



                        if($this->Sponsor->Save($this->data['Sponsor'])){

                            $errormsg1 .= "Sponsor detail updated successfully. <br>";

                        }



                    }else{

                        if($updateflag==true){

                            $this->data['Sponsor']['project_id'] = $projectid;

                            $this->data['Sponsor']['user_id'] = $lastuserid;

                            if($this->Sponsor->Save($this->data['Sponsor'])){

                                $lastsponid = $this->Sponsor->getLastInsertId();

                                $this->data['Project']['id'] = $projectid;

                                $this->data['Project']['sponsor_id'] = $lastsponid;

                                $this->Project->Save($this->data['Project']);

                                $errormsg1 = "Sponsor added successfully.";

                            }

                        }



                    }





                    $this->Session->setFlash($errormsg1,'default', array('class' => 'successmsg'));





                }



            }





            ##check exist sponsor for particular project

            $condition = "Project.id = '".$projectid."'";

            $ptdata = $this->Project->find('all',array("conditions"=>$condition));

            $this->set("username","");

            $this->set("userid","");

            if($ptdata){

                if($ptdata[0]['Project']['sponsor_id'] !='' && $ptdata[0]['Project']['sponsor_id'] !='0'){



                    $spid = $ptdata[0]['Project']['sponsor_id'];

                    $condition = "id = '".$spid."'";

                    $spondata = $this->Sponsor->find('all',array("conditions"=>$condition));



                    if($spondata){

                        $userid = $spondata[0]['Sponsor']['user_id'];

                        $condition = "id = '".$userid."'";

                        $udata = $this->User->find('all',array("conditions"=>$condition));



                        $username = $udata[0]['User']['username'];



                        $this->set("username",$username);

                        $userid = $udata[0]['User']['id'];

                        $this->set("userid",$userid);



                    }



                    $this->Sponsor->id = $spid;

                    $this->data = $this->Sponsor->read();



                }



                $proname = $ptdata[0]['Project']['project_name'];

                $this->set("projectname",$proname);

            }





            $this->set("selectedcountry","");

            $this->set("selectedstate","");

            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



            ##check default dropdowns



            if($this->data['Sponsor']['country']){

                $conid = $this->data['Sponsor']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if($this->data['Sponsor']['state']){

                    $statid = $this->data['Sponsor']['state'];

                    $this->set("selectedstate",$statid);



                }

            }





            $companyname="";













            ##display companys in a company box

            ##import Company  model for processing

            $companyname = $this->getcompaniesbyprojectid($projectid,'yes');

            //$this->data['Company']['companies'] = $companyname ;

            $this->set('companies',$companyname);





            $contactname = $this->getcontactsbyprojectid($projectid,'yes');

            //$this->data['Company']['contacts'] = $contactname ;

            $this->set('contacts',$contactname);



            $this->set('sid',$spid);

        }    





        /*

        * Function name   : editsponsordesc()

        * Description : This function used to edit information related sponsor

        * Created On      : 22-02-11 (03:20am)

        *

        */ 

        function editsponsordesc($sponsid){



            //Configure::write('debug', 2);    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';    



            //for active menu display

            $this->set('page_url','editsponsordesc');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;    



            ##check empty data

            if(!empty($this->data)) {



                if($this->Sponsor->Save($this->data)){

                    $this->Session->setFlash('Sponsor Description updated Successfully.','default', array('class' => 'successmsg'));

                    $this->redirect('/companies/editsponsordesc');

                }else{

                    $this->Session->setFlash('Error in processing.','default',array('class' => 'errormsg'));

                }

            }



            if($sponsid){

                ##sponsor comming by id



                $this->Sponsor->id = $sponsid;

                $this->data = $this->Sponsor->read();    



            }else{

                ##sponsor comming by project id



                ##check exist sponsor for particular project

                $condition = "Project.id = '".$projectid."'";

                $ptdata = $this->Project->find('all',array("conditions"=>$condition));



                if($ptdata){

                    if($ptdata[0]['Project']['sponsor_id'] !='' && $ptdata[0]['Project']['sponsor_id'] !='0'){



                        $spid = $ptdata[0]['Project']['sponsor_id'];

                        $this->Sponsor->id = $spid;

                        $this->data = $this->Sponsor->read();



                    }else{

                        $this->Session->setFlash('First you need to add sponsor before adding description.','default',array('class' => 'errormsg'));

                        $this->redirect('/companies/editsponsordtl');

                    }

                }





            }



        } 







        function suggestionbox($recid)

        {

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    

            //for active menu display

            $this->set('page_url','editsponsordesc');

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '19'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            $this->set('project_name',$project_name);

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            





            App::import("Model", "Suggestion");

            $this->Suggestion =   & new Suggestion();

            ##check empty data



            if(!empty($this->data)) 

            {



                //$this->data['Suggestion']['project_id'] = $projectid;







                #check server side validation

                // $this->Suggestion->invalidFields();



                #save data in project type table

                if($this->Suggestion->Save($this->data))

                {

                    $this->Session->setFlash('Suggestion added Successfully.','default', array('class' => 'successmsg'));

                    $this->redirect('/companies/editprojectdtl/');

                }

                else

                {

                    $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'errormsg'));     

                }









            }





        }





        /*

        * Function name   : addcommtask()

        * Description : This function used to add commom task

        * Created On      : 16-02-11 (01:45am)

        *

        */     

        function addcommtask($opr='',$recid=''){

            //Configure::write('debug', 2);

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout'; 

            //for active menu display

            $this->set('page_url','editsponsordesc');

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $this->set('projectid',$project_id);  

            if(empty($project_name)) $this->redirect(array('controller'=>'companies','action'=>'session_expired'));



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '14'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition

            

            ##import communication Task model for processing

            App::import("Model", "CommunicationTask");

            $this->CommunicationTask =   & new CommunicationTask();



            ##check empty data

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set("current_domain",$current_domain);



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails); 

            $this->set('fromemail',$projectDetails['Sponsor']['email']);

                       

            $projectid = $project_id;

            ##import project type model for processing

            App::import("Model", "CommunicationTask");

            $this->CommunicationTask =   & new CommunicationTask();

            ##check empty data



            if(!empty($this->data)) {  

                $task_id=null;

				//pr($this->data);

                if(!empty($this->data['CommunicationTask']['id'])){

                    $task_id=$this->data['CommunicationTask']['id']; 

                }



                $uniqueTaskName = $this->CommunicationTask->isUniqueTaskName($this->data['CommunicationTask']['task_name'],$projectid,$task_id );  

                if ($uniqueTaskName == false) {

                    $this->Session->setFlash('Communication Task  with same name already exists.','default',array('class' => 'msgTXt'));

                }else{

                    // STEP : SAVE COMMUNICATION TASK   

                    $rec_id = $this->CommunicationTask->saveEmailTask($this->data['CommunicationTask'], $projectid, '0');



                    if($rec_id > 0 ){

                        $this->Session->setFlash('Communication Task added Successfully.','default', array('class' => 'successmsg'));



                        if(isset($this->data['Action']['redirectpage'])){

							$this->redirect(array('controller'=>'companies','action'=>'commtasklist'));

                        }else

                        {

							$this->redirect(array('controller'=>'companies','action'=>'commtasklist',$rec_id));



                        }



                    }else{

                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));     

                    }

                }



            }

            

            $this->customtemplatelisting($projectid);

            $this->commenttypelisting($projectid);  

			

            if($recid!=''){

                $this->CommunicationTask->id = $recid;

                $this->set('taskrecid', $recid);   

                $this->data = $this->CommunicationTask->read();

			

                $this->data['CommunicationTask']['task_startdate']=date("m-d-Y", strtotime($this->data['CommunicationTask']['task_startdate']));

                if($this->data['CommunicationTask']['task_end_by_date']!="" && $this->data['CommunicationTask']['task_end']=="by_date"){

                    $this->data['CommunicationTask']['task_end_by_date']=date("m-d-Y", strtotime($this->data['CommunicationTask']['task_end_by_date']));

                }

                

                 if($this->data['CommunicationTask']['company_type']=="" && $this->data['CommunicationTask']['contact_type']==""){

                    $is_contactdisabled="1";

                    $is_memebrdisabled="0";

                }else{

                    $is_contactdisabled="0";

                    $is_memebrdisabled="0";

                }

                

                $sel_email_temp=$this->data['CommunicationTask']['email_template_id'];

                $sel_subscription_types=$this->data['CommunicationTask']['subscription_type'];

                $sel_member_types=$this->data['CommunicationTask']['member_type'];

                $sel_donation_levels=$this->data['CommunicationTask']['donation_level'];  

                $sel_days_since=$this->data['CommunicationTask']['member_days_since'];

                $sel_country=$this->data['CommunicationTask']['member_country'];

                $sel_state=$this->data['CommunicationTask']['member_state'];

                $sel_event=$this->data['CommunicationTask']['event_id'];

                $sel_event_rsvp=$this->data['CommunicationTask']['event_rsvp_type'];

                $sel_comment_typeid=$this->data['CommunicationTask']['relatesto_commenttype_id'];

                $sel_social_networks=$this->data['CommunicationTask']['social_network_members'];

                $sel_non_networks=$this->data['CommunicationTask']['non_network_members'];

                $sel_companytypeid=$this->data['CommunicationTask']['company_type'];

                $sel_contactypeid=$this->data['CommunicationTask']['contact_type'];

                $sel_recur_pattern=$this->data['CommunicationTask']['recur_pattern'];

                

            }else{

                $sel_email_temp="";

                $sel_subscription_types="0";

                $sel_member_types="";

                $sel_donation_levels="";       

                $sel_days_since="";

                $sel_country="254";

                $sel_state="";

                $sel_event="";

                $sel_event_rsvp="";

                $sel_comment_typeid="0";

                $sel_social_networks="";

                $sel_non_networks="";

                $sel_companytypeid="";

                $sel_contactypeid="";                

                $sel_recur_pattern="Daily";

                

                $is_contactdisabled="0";

                $is_memebrdisabled="0";

                

            }

            $this->set('sel_email_temp',$sel_email_temp);

            $this->set('sel_subscription_types',$sel_subscription_types);

            $this->set('sel_member_types',$sel_member_types);

            $this->set('sel_donation_levels',$sel_donation_levels); 

            $this->set('sel_days_since',$sel_days_since);

            $this->set('sel_country',$sel_country);

            $this->set('sel_state',$sel_state);

            $this->set('sel_event',$sel_event);

            $this->set('sel_event_rsvp',$sel_event_rsvp);

            $this->set('sel_comment_typeid',$sel_comment_typeid);

            $this->set('sel_social_networks',$sel_social_networks);

            $this->set('sel_non_networks',$sel_non_networks);

            $this->set('sel_companytypeid',$sel_companytypeid);

            $this->set('sel_contactypeid',$sel_contactypeid);

            $this->set('sel_recur_pattern',$sel_recur_pattern);

            

             $this->set('is_contactdisabled',$is_contactdisabled);

            $this->set('is_memebrdisabled',$is_memebrdisabled);

            

            # set help condition   

            // Set memeber types array

            $this->set('member_types',$this->getMemberTypesListByProject($projectid));

            

            //Set donation levles array 

            $this->set('donation_levels',$this->getDonationLevelsListByProject($projectid));

            

            // Set Subscription Type array

            $this->set('subscription_types',$this->getSubscriptionTypesArray());

            

           // Set Dasy Since  array

            $this->set('days_since',$this->getDaysSinceArray());       

            

            // Set Event RSVP array

            $this->set('event_rsvp',$this->getEventRSVPArray());  

            //Set Social Naetworks Array     

            $this->set('social_networks',$this->getSocialNetworkArray());       



            //Set Recur Pattern Array     

            $this->set('recur_pattern',$this->getRecurPatternkArray());  

            

             //Get Event Drop Down

            $this->getEventDropDownListByProjetcID($projectid); 

            

            //Get Company Type Drop Down

            $this->companytypedropdown($projectid); 

            

            //Get Contact Type Drop Down   

            $contacttypedropdown=$this->contacttypedropdown($projectid);    

             $this->set('contacttypedropdown',$contacttypedropdown) ;

           ##country drop down



            $this->countrydroupdown();



            $this->statedroupdown();     



        }

        

        

         function event_task($rec_event_id=null,$recid=''){

            //Configure::write('debug', 2);

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    

            

            $this->set('rec_event_id',$rec_event_id);  



            //for active menu display

            $this->set('page_url','editsponsordesc');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $this->set('projectid',$project_id);  

            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '14'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition

            

            ##import communication Task model for processing

            App::import("Model", "CommunicationTask");

            $this->CommunicationTask =   & new CommunicationTask();



            ##check empty data

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set("current_domain",$current_domain);



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails); 

            $this->set('fromemail',$projectDetails['Sponsor']['email']);

                       

            $projectid = $project_id;

            ##import project type model for processing

            App::import("Model", "CommunicationTask");

            $this->CommunicationTask =   & new CommunicationTask();

            ##check empty data



            if(!empty($this->data)) {  

                $task_id=null;

                if($this->data['CommunicationTask']['id']){

                    $task_id=$this->data['CommunicationTask']['id']; 

                }



                $uniqueTaskName = $this->CommunicationTask->isUniqueTaskName($this->data['CommunicationTask']['task_name'],$projectid,$task_id );  

                if ($uniqueTaskName == false) {

                    $this->Session->setFlash('Task  with same name already exists.','default',array('class' => 'msgTXt'));

                }else{

                    // STEP : SAVE COMMUNICATION TASK   

                    

                     //$this->data['CommunicationTask']['start_date']="";

                  $this->data['CommunicationTask']['recur_pattern']="Daily";

                  $this->data['CommunicationTask']['daily_pattern']="everyday";

                  $this->data['CommunicationTask']['daily_every_noof_days']="1";

                  $this->data['CommunicationTask']['task_end']="after_accurrences";

                  $this->data['CommunicationTask']['task_end_after_occurrences']="1";

                  if($this->data['CommunicationTask']['rec_event_id']=="")

                    $this->data['CommunicationTask']['rec_event_id']=$rec_event_id;

                  $this->data['CommunicationTask']['send_event_invitation']="1";

                    

                    

                    $rec_id = $this->CommunicationTask->saveEmailTask($this->data['CommunicationTask'], $projectid, '0');



                    if($rec_id > 0 ){

                        $this->Session->setFlash('Event Task added Successfully.','default', array('class' => 'successmsg'));



                        if(isset($this->data['Action']['redirectpage'])){

                            $this->redirect('/companies/eventtasklist/'.$rec_event_id); 

                        }else

                        {

                            $this->redirect('/companies/event_task/'.$rec_event_id.'/'.$rec_id);

                        }



                    }else{

                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));     

                    }

                }



            }

            

            $this->customtemplatelisting($projectid);

            $this->commenttypelisting($projectid);   

            

           

            if($recid!=''){

                $this->CommunicationTask->id = $recid;

                $this->set('taskrecid', $recid);   

                $this->data = $this->CommunicationTask->read();

                $this->set("tdata",$this->data);

                $this->data['CommunicationTask']['task_startdate']=date("m-d-Y", strtotime($this->data['CommunicationTask']['task_startdate']));

                if($this->data['CommunicationTask']['task_end_by_date']!="" && $this->data['CommunicationTask']['task_end']=="by_date"){

                    $this->data['CommunicationTask']['task_end_by_date']=date("m-d-Y", strtotime($this->data['CommunicationTask']['task_end_by_date']));

                }

                

                 if($this->data['CommunicationTask']['company_type']=="" && $this->data['CommunicationTask']['contact_type']==""){

                    $is_contactdisabled="1";

                    $is_memebrdisabled="0";

                }else{

                    $is_contactdisabled="0";

                    $is_memebrdisabled="0";

                }

                

                $sel_email_temp=$this->data['CommunicationTask']['email_template_id'];

                $sel_subscription_types=$this->data['CommunicationTask']['subscription_type'];

                $sel_member_types=$this->data['CommunicationTask']['member_type'];

                $sel_donation_level=$this->data['CommunicationTask']['donation_level'];

                $sel_days_since=$this->data['CommunicationTask']['member_days_since'];

                $sel_country=$this->data['CommunicationTask']['member_country'];

                $sel_state=$this->data['CommunicationTask']['member_state'];

                $sel_event=$this->data['CommunicationTask']['event_id'];

                $sel_event_rsvp=$this->data['CommunicationTask']['event_rsvp_type'];

                $sel_comment_typeid=$this->data['CommunicationTask']['relatesto_commenttype_id'];

                $sel_social_networks=$this->data['CommunicationTask']['social_network_members'];

                $sel_non_networks=$this->data['CommunicationTask']['non_network_members'];

                $sel_companytypeid=$this->data['CommunicationTask']['company_type'];

                $sel_contactypeid=$this->data['CommunicationTask']['contact_type'];

                $sel_recur_pattern=$this->data['CommunicationTask']['recur_pattern'];

                

            }else

            {

                $sel_email_temp="";

                $sel_subscription_types="0";

                $sel_member_types="";

                $sel_donation_level="";

                $sel_days_since="";

                $sel_country="254";

                $sel_state="";

                $sel_event="";

                $sel_event_rsvp="";

                $sel_comment_typeid="0";

                $sel_social_networks="";

                $sel_non_networks="";

                $sel_companytypeid="";

                $sel_contactypeid="";                

                $sel_recur_pattern="Daily";

                

                $is_contactdisabled="0";

                $is_memebrdisabled="0";

                

            }

            $this->set('sel_email_temp',$sel_email_temp);

            $this->set('sel_subscription_types',$sel_subscription_types);

            $this->set('sel_member_types',$sel_member_types);

            $this->set('sel_donation_level',$sel_donation_level);

            $this->set('sel_days_since',$sel_days_since);

            $this->set('sel_country',$sel_country);

            $this->set('sel_state',$sel_state);

            $this->set('sel_event',$sel_event);

            $this->set('sel_event_rsvp',$sel_event_rsvp);

            $this->set('sel_comment_typeid',$sel_comment_typeid);

            $this->set('sel_social_networks',$sel_social_networks);

            $this->set('sel_non_networks',$sel_non_networks);

            $this->set('sel_companytypeid',$sel_companytypeid);

            $this->set('sel_contactypeid',$sel_contactypeid);

            $this->set('sel_recur_pattern',$sel_recur_pattern);

            

             $this->set('is_contactdisabled',$is_contactdisabled);

            $this->set('is_memebrdisabled',$is_memebrdisabled);

            

            # set help condition   

            // Set memeber types array

            $this->set('member_types',$this->getMemberTypesListByProject($projectid,true));

            

            $this->set('donation_levels',$this->getDonationLevelsListByProject($projectid));

            

            // Set Subscription Type array

            $this->set('subscription_types',$this->getSubscriptionTypesArray());

            

           // Set Dasy Since  array

            $this->set('days_since',$this->getDaysSinceArray());       

            

            // Set Event RSVP array

            $this->set('event_rsvp',$this->getEventRSVPArray());  

            //Set Social Naetworks Array     

            $this->set('social_networks',$this->getSocialNetworkArray());       



            //Set Recur Pattern Array     

            $this->set('recur_pattern',$this->getRecurPatternkArray());  

            

             //Get Event Drop Down

            $this->getRecEventDropDownListByProjetcID($projectid); 

            

            //Get Company Type Drop Down

            $this->companytypedropdown($projectid); 

            

            //Get Company Type Drop Down   

            $this->contacttypedropdown($projectid);    

              

           ##country drop down



            $this->countrydroupdown();



            $this->statedroupdown();  

            

            App::import("Model", "EventInvitation");

            $this->EventInvitation =  & new EventInvitation();

            

            $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.in_waitlist='1'";

                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    

                

                if(empty($check_waiting_list))            

                    $waiting_list=0;

                else

                    $waiting_list=1;

             

                $this->set('waiting_list', $waiting_list);    



        }

        

        

         function event_donations($rec_event_id=null,$recid=''){

            //Configure::write('debug', 2);

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    

            

            $this->set('rec_event_id',$rec_event_id);  



            //for active menu display

            $this->set('page_url','event_donations');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $this->set('projectid',$project_id);  

            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '14'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition

            

            ##import communication Task model for processing

            App::import("Model", "CommunicationTask");

            $this->CommunicationTask =   & new CommunicationTask();



            ##check empty data

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set("current_domain",$current_domain);



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails); 

            $this->set('fromemail',$projectDetails['Sponsor']['email']);

                       

            $projectid = $project_id;

            ##import project type model for processing

            App::import("Model", "CommunicationTask");

            $this->CommunicationTask =   & new CommunicationTask();

            ##check empty data



            if(!empty($this->data)) {  

                $task_id=null;

                if($this->data['CommunicationTask']['id']){

                    $task_id=$this->data['CommunicationTask']['id']; 

                }



                $uniqueTaskName = $this->CommunicationTask->isUniqueTaskName($this->data['CommunicationTask']['task_name'],$projectid,$task_id );  

                if ($uniqueTaskName == false) {

                    $this->Session->setFlash('Task  with same name already exists.','default',array('class' => 'msgTXt'));

                }else{

                    // STEP : SAVE COMMUNICATION TASK   

                    

                     //$this->data['CommunicationTask']['start_date']="";

                  $this->data['CommunicationTask']['recur_pattern']="Daily";

                  $this->data['CommunicationTask']['daily_pattern']="everyday";

                  $this->data['CommunicationTask']['daily_every_noof_days']="1";

                  $this->data['CommunicationTask']['task_end']="after_accurrences";

                  $this->data['CommunicationTask']['task_end_after_occurrences']="1";

                  if($this->data['CommunicationTask']['rec_event_id']=="")

                    $this->data['CommunicationTask']['rec_event_id']=$rec_event_id;

                  $this->data['CommunicationTask']['send_event_invitation']="1";

                    

                    

                    $rec_id = $this->CommunicationTask->saveEmailTask($this->data['CommunicationTask'], $projectid, '0');



                    if($rec_id > 0 ){

                        $this->Session->setFlash('Event Task added Successfully.','default', array('class' => 'successmsg'));



                        if(isset($this->data['Action']['redirectpage'])){

                            $this->redirect('/companies/eventtasklist/'.$rec_event_id); 

                        }else

                        {

                            $this->redirect('/companies/event_task/'.$rec_event_id.'/'.$rec_id);

                        }



                    }else{

                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));     

                    }

                }



            }

            

            $this->customtemplatelisting($projectid);

            $this->commenttypelisting($projectid);   

            

           

            if($recid!=''){

                $this->CommunicationTask->id = $recid;

                $this->set('taskrecid', $recid);   

                $this->data = $this->CommunicationTask->read();

                $this->set("tdata",$this->data);

                $this->data['CommunicationTask']['task_startdate']=date("m-d-Y", strtotime($this->data['CommunicationTask']['task_startdate']));

                if($this->data['CommunicationTask']['task_end_by_date']!="" && $this->data['CommunicationTask']['task_end']=="by_date"){

                    $this->data['CommunicationTask']['task_end_by_date']=date("m-d-Y", strtotime($this->data['CommunicationTask']['task_end_by_date']));

                }

                

                 if($this->data['CommunicationTask']['company_type']=="" && $this->data['CommunicationTask']['contact_type']==""){

                    $is_contactdisabled="1";

                    $is_memebrdisabled="0";

                }else{

                    $is_contactdisabled="0";

                    $is_memebrdisabled="0";

                }

             

                

            }else

            {

                

            }

          

            

            App::import("Model", "EventInvitation");

            $this->EventInvitation =  & new EventInvitation();

            

            $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.in_waitlist='1'";

                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    

                

                if(empty($check_waiting_list))            

                    $waiting_list=0;

                else

                    $waiting_list=1;

             

                $this->set('waiting_list', $waiting_list);    



        }

        

        

         function event_volunteers($rec_event_id=null,$recid=''){

            //Configure::write('debug', 2);

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    

            

            $this->set('rec_event_id',$rec_event_id);  



            //for active menu display

            $this->set('page_url','event_donations');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $this->set('projectid',$project_id);  

            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '14'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition

            

            ##import communication Task model for processing

            App::import("Model", "CommunicationTask");

            $this->CommunicationTask =   & new CommunicationTask();



            ##check empty data

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set("current_domain",$current_domain);



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails); 

            $this->set('fromemail',$projectDetails['Sponsor']['email']);

                       

            $projectid = $project_id;

            ##import project type model for processing

            App::import("Model", "CommunicationTask");

            $this->CommunicationTask =   & new CommunicationTask();

            ##check empty data



            if(!empty($this->data)) {  

                $task_id=null;

                if($this->data['CommunicationTask']['id']){

                    $task_id=$this->data['CommunicationTask']['id']; 

                }



                $uniqueTaskName = $this->CommunicationTask->isUniqueTaskName($this->data['CommunicationTask']['task_name'],$projectid,$task_id );  

                if ($uniqueTaskName == false) {

                    $this->Session->setFlash('Task  with same name already exists.','default',array('class' => 'msgTXt'));

                }else{

                    // STEP : SAVE COMMUNICATION TASK   

                    

                     //$this->data['CommunicationTask']['start_date']="";

                  $this->data['CommunicationTask']['recur_pattern']="Daily";

                  $this->data['CommunicationTask']['daily_pattern']="everyday";

                  $this->data['CommunicationTask']['daily_every_noof_days']="1";

                  $this->data['CommunicationTask']['task_end']="after_accurrences";

                  $this->data['CommunicationTask']['task_end_after_occurrences']="1";

                  if($this->data['CommunicationTask']['rec_event_id']=="")

                    $this->data['CommunicationTask']['rec_event_id']=$rec_event_id;

                  $this->data['CommunicationTask']['send_event_invitation']="1";

                    

                    

                    $rec_id = $this->CommunicationTask->saveEmailTask($this->data['CommunicationTask'], $projectid, '0');



                    if($rec_id > 0 ){

                        $this->Session->setFlash('Event Task added Successfully.','default', array('class' => 'successmsg'));



                        if(isset($this->data['Action']['redirectpage'])){

                            $this->redirect('/companies/eventtasklist/'.$rec_event_id); 

                        }else

                        {

                            $this->redirect('/companies/event_task/'.$rec_event_id.'/'.$rec_id);

                        }



                    }else{

                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));     

                    }

                }



            }

            

            $this->customtemplatelisting($projectid);

            $this->commenttypelisting($projectid);   

            

           

            if($recid!=''){

                $this->CommunicationTask->id = $recid;

                $this->set('taskrecid', $recid);   

                $this->data = $this->CommunicationTask->read();

                $this->set("tdata",$this->data);

                $this->data['CommunicationTask']['task_startdate']=date("m-d-Y", strtotime($this->data['CommunicationTask']['task_startdate']));

                if($this->data['CommunicationTask']['task_end_by_date']!="" && $this->data['CommunicationTask']['task_end']=="by_date"){

                    $this->data['CommunicationTask']['task_end_by_date']=date("m-d-Y", strtotime($this->data['CommunicationTask']['task_end_by_date']));

                }

                

                 if($this->data['CommunicationTask']['company_type']=="" && $this->data['CommunicationTask']['contact_type']==""){

                    $is_contactdisabled="1";

                    $is_memebrdisabled="0";

                }else{

                    $is_contactdisabled="0";

                    $is_memebrdisabled="0";

                }

             

                

            }else

            {

                

            }

          

            

            App::import("Model", "EventInvitation");

            $this->EventInvitation =  & new EventInvitation();

            

            $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.in_waitlist='1'";

                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    

                

                if(empty($check_waiting_list))            

                    $waiting_list=0;

                else

                    $waiting_list=1;

             

                $this->set('waiting_list', $waiting_list);    



        }

         

        /**

        * Function to get all comment types dorpdown bty ajax call 

        * 

        * @param mixed $project_id  - 

        * @param mixed $selectedid

        */

        function getcommenttypesbyajax($projectid, $selectedid=''){        

            $this->layout = false;

                         

            $this->set("selectedid",$selectedid);

            // GET ALL Cumment Types

            $this->commenttypelisting($projectid); 

           

        }

        

        /**

       * Function to show list of Members or contacts who falls within given communication task set-up parametes

       * This function is called at addcommtask 

       *  

       */

        function commtask_get_report_list_by_ajax(){

                        #get record from global funtion for ajax calling

            $this->layout="ajax";

            

            $this->session_check_user();

            

            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");   

              

            ##import communication Task model for processing

            App::import("Model", "CommunicationTask");

            $this->CommunicationTask =   & new CommunicationTask();    



            

            if($projectid)

            {      

                $taskArray=$_POST['data']['CommunicationTask']; 

            //     DebugBreak();

               if($taskArray['id']){

                    //STEP : Task is talready saved so 

                     $is_temp=1;

                     $taskArray['id']="";

                     $taskArray['task_name']= trim($taskArray['task_name'])."_temp";

                }else{

                     //STEP : Task is temporary so 

                     $is_temp=1; 

                     $taskArray['task_name']= trim($taskArray['task_name'])."_temp"; 

                }





                // STEP : Save Task Temporary  & get temp  Task id

                $tempTaskId= $this->CommunicationTask->saveEmailTask($taskArray,$projectid, $is_temp);  

               // STEP : Call Stored Procedure to get matching members or contacts list records 

               if($tempTaskId > 0){ 

                         

                           $result= $this->CommunicationTask->getEmailTaskMatchingMembersOrContacts($tempTaskId, $projectid);

                        if(isset($result['0']['Contact']) ){

                           $this->set('showlist',"contact");  

                           $this->set('contactdetails',$result);        

                        }else{

                            $this->set('showlist',"member");  

                            $this->set('userdetails',$result);

                        }

                        

               }else{

                    $this->set('userdetails',false); 

               }

               

            

            }else{

                 $this->set('userdetails',false);

            }

            

             



        }

        

        

        /*

        * Function name   : editcommtask()

        * Description : This function used to add commom task

        * Created On      : 16-02-11 (01:45am)

        *

        */     

        function editcommtask($recid){



            //Configure::write('debug', 2);

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','editsponsordesc');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');







            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '23'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);







            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;

            ##import project type model for processing

            App::import("Model", "CommunicationTask");

            $this->CommunicationTask =   & new CommunicationTask();

            ##check empty data



            if(!empty($this->data)) {

                $recid = $this->data['CommunicationTask']['id'];



                //echo "<pre>";    

                //print_r($this->data); exit;



                if($this->data['CommunicationTask']['recur_pattern']=="W")

                {

                    $this->data['CommunicationTask']['monday']=0;

                    $this->data['CommunicationTask']['tuesday']=0;

                    $this->data['CommunicationTask']['wednesday']=0;

                    $this->data['CommunicationTask']['thursday']=0;

                    $this->data['CommunicationTask']['friday']=0;

                    $this->data['CommunicationTask']['saturday']=0;

                    $this->data['CommunicationTask']['sunday']=0;

                }

                if($this->data['CommunicationTask']['end_after']=="O")

                    $this->data['CommunicationTask']['enddate']='0000-00-00';



                if($this->data['CommunicationTask']['end_after']=="E"){



                    if($this->data['CommunicationTask']['enddate']=="0000-00-00")

                    {

                        $this->Session->setFlash('Please enter end date','default',array('class' => 'msgTXt'));     

                        $this->redirect('/companies/editcommtask/'.$recid);    

                    }

                }

                $this->data['CommunicationTask']['project_id']=$projectid;

                #set the posted data

                $this->CommunicationTask->set($this->data);

                #check server side validation

                $this->CommunicationTask->invalidFields();





                #save data in project type table

                if($this->CommunicationTask->Save($this->data)){

                    $this->Session->setFlash('Communication Task updated Successfully.','default', array('class' => 'successmsg'));

                    if(isset($this->data['Action']['redirectpage'])){

                        $sessdata=$this->Session->read('newsortingby');

                        $this->redirect('/'.$sessdata);

                    }else{

                        $this->redirect("/companies/editcommtask/$recid");

                    }

                }else{

                    $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt')); $this->redirect('/companies/commtasklist/');    

                }







                $this->redirect('/companies/commtasklist/');

            }

            function suggestionbox()

            {

                $this->session_check_user();



                $this->layout= 'new_sponsor_layout';    



                //for active menu display

                $this->set('page_url','editsponsordesc');





            }



            $this->customtemplatelisting($projectid);

            $this->commenttypelisting($projectid);



            if($recid){

                $this->CommunicationTask->id = $recid;

                $this->data = $this->CommunicationTask->read();

                $this->set("recid",$recid);

            }

            if($this->data['CommunicationTask']['email_template_id'])

                $this->set("selectedtemplate",$this->data['CommunicationTask']['email_template_id']);

            else

                $this->set("selectedtemplate",0);



            if($this->data['CommunicationTask']['comment_type_id'])

                $this->set("selectedcommenttype",$this->data['CommunicationTask']['comment_type_id']);

            else

                $this->set("selectedcommenttype",0);



            if($this->data['CommunicationTask']['recur_pattern'])

                $this->set("selectedrecpattern",$this->data['CommunicationTask']['recur_pattern']);

            else

                $this->set("selectedrecpattern",0);        



            if($this->data['CommunicationTask']['occurrences'])

                $this->set("selectedoccurrences",$this->data['CommunicationTask']['occurrences']);

            else

                $this->set("selectedoccurrences",0);



        }

        /*

        * Function name   : commtasklist()

        * Description : This function used to view commtask list

        * Created On      : 16-02-11 (02:45am)

        *

        */ 

        function commtasklist(){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','commtasklist');





            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect(array('controller'=>'companies','action'=>'session_expired'));





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '13'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;

            

            ##import project type model for processing

            App::import("Model", "CommunicationTask");

            $this->CommunicationTask =   & new CommunicationTask();    



            

            $this->CommunicationTask->bindModel(array('belongsTo'=>array(

            'EmailTemplate'=>array(

            'foreignKey'=>false,

            'conditions'=>'EmailTemplate.id = CommunicationTask.email_template_id'

            ))));

            ##fetch data from project type table for listing

            $field='';

            ##checking search key

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                $searchkeyword = $this->data['Company']['searchkey'];

                $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."' AND CommunicationTask.is_temp = '0'  AND CommunicationTask.send_event_invitation != '1' AND (CommunicationTask.task_name LIKE '%".$searchkeyword."%')";

            }else{

                 $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."' AND CommunicationTask.is_temp = '0'  AND CommunicationTask.send_event_invitation != '1'";

            }

            



            $this->Pagination->sortByClass    = 'CommunicationTask'; ##initaite pagination 



            $this->Pagination->total= count($this->CommunicationTask->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $this->CommunicationTask->bindModel(array('belongsTo'=>array(

            'EmailTemplate'=>array(

            'foreignKey'=>false,

            'conditions'=>'EmailTemplate.id = CommunicationTask.email_template_id'

            ))));

            

            $taskdata = $this->CommunicationTask->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            ##set project type data in variable



            $this->set("taskdata",$taskdata);

        }

        

        

        function eventtasklist($rec_event_id=''){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','eventtasklist');

            

            $this->set('rec_event_id',$rec_event_id);





            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '13'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;

            

            ##import project type model for processing

            App::import("Model", "CommunicationTask");

            $this->CommunicationTask =   & new CommunicationTask();    



            

            $this->CommunicationTask->bindModel(array('belongsTo'=>array(

            'EmailTemplate'=>array(

            'foreignKey'=>false,

            'conditions'=>'EmailTemplate.id = CommunicationTask.email_template_id'

            ),

            'RecurringEvent'=>array(

            'foreignKey'=>false,

            'conditions'=>'RecurringEvent.id = CommunicationTask.rec_event_id'

            )

            )));

            

            ##fetch data from project type table for listing

            $field='';

            ##checking search key

            if(isset($this->data['Companies']['searchkey']) && $this->data['Admins']['searchkey']){

                $searchkeyword = $this->data['Companies']['searchkey'];

                $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."' AND CommunicationTask.is_temp = '0'  AND CommunicationTask.send_event_invitation = '1' and CommunicationTask.rec_event_id = '".$rec_event_id."' AND (CommunicationTask.task_name LIKE '%".$searchkeyword."%' OR CommunicationTask.notes LIKE '%".$searchkeyword."%')";

            }else{

                 $condition = "CommunicationTask.delete_status = '0' and CommunicationTask.project_id='".$projectid."' AND CommunicationTask.is_temp = '0'  AND CommunicationTask.send_event_invitation = '1' and CommunicationTask.rec_event_id = '".$rec_event_id."'";

            }

            



            $this->Pagination->sortByClass    = 'CommunicationTask'; ##initaite pagination 



            $this->Pagination->total= count($this->CommunicationTask->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $this->CommunicationTask->bindModel(array('belongsTo'=>array(

            'EmailTemplate'=>array(

            'foreignKey'=>false,

            'conditions'=>'EmailTemplate.id = CommunicationTask.email_template_id'

            ),

            'RecurringEvent'=>array(

            'foreignKey'=>false,

            'conditions'=>'RecurringEvent.id = CommunicationTask.rec_event_id'

            )

            )));

            

            $taskdata = $this->CommunicationTask->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            ##set project type data in variable



            $this->set("taskdata",$taskdata);

            

            

            App::import("Model", "EventInvitation");

            $this->EventInvitation =   & new EventInvitation();    

            

            $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.in_waitlist='1'";

            $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    

            

            if(empty($check_waiting_list))            

                $waiting_list=0;

            else

                $waiting_list=1;

         

            $this->set('waiting_list', $waiting_list); 



        }

        

        

        

        /*

        * Function name   : commtaskhistorylist()

        * Description : This function used to view communication task execution history list

        * Created On      : 25-Jan-2012 

        * 

        */ 

        function commtaskhistorylist(){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','commtasklist');





            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            ##set current domain

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set("current_domain",$current_domain);

            

            ##import project type model for processing

            App::import("Model", "CommunicationTaskHistory");

            $this->CommunicationTaskHistory =   & new CommunicationTaskHistory();    



             

            $this->CommunicationTaskHistory->bindModel(array('belongsTo'=>array(

            'EmailTemplate'=>array(

            'foreignKey'=>false,

            'conditions'=>'EmailTemplate.id = CommunicationTaskHistory.email_template_id'

            ))));

            ##fetch data from project type table for listing

            $field='';

              ##checking search key

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                $searchkeyword = $this->data['Company']['searchkey'];

                $condition = "CommunicationTaskHistory.delete_status = '0' and CommunicationTaskHistory.project_id='".$projectid."' AND (CommunicationTaskHistory.task_name LIKE '%".$searchkeyword."%' OR CommunicationTaskHistory.notes LIKE '%".$searchkeyword."%')";

            }else{

                 $condition = "CommunicationTaskHistory.delete_status = '0' and CommunicationTaskHistory.project_id='".$projectid."'";

            }

            $this->Pagination->sortByClass    = 'CommunicationTaskHistory'; ##initaite pagination 



            $this->Pagination->total= count($this->CommunicationTaskHistory->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $this->CommunicationTaskHistory->bindModel(array('belongsTo'=>array(

            'EmailTemplate'=>array(

            'foreignKey'=>false,

            'conditions'=>'EmailTemplate.id = CommunicationTaskHistory.email_template_id'

            ))));

            

            $taskdata = $this->CommunicationTaskHistory->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));



            ##set project type data in variable



            $this->set("taskdata",$taskdata);



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '13'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   





        }

        

        function eventinvitationhistory($rec_event_id){

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','commtasklist');





            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }

            

            $this->set('rec_event_id',$rec_event_id);



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            ##set current domain

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set("current_domain",$current_domain);

            

            ##import project type model for processing

            App::import("Model", "CommunicationTaskHistory");

            $this->CommunicationTaskHistory =   & new CommunicationTaskHistory(); 

            

            App::import("Model", "Holder");

            $this->Holder =   & new Holder();

            

            App::import("Model", "EventInvitation");

            $this->EventInvitation =   & new EventInvitation();

            $field='';

               ##checking search key

            if(isset($this->data['Companies']['searchkey']) && $this->data['Companies']['searchkey']){

                $searchkeyword = $this->data['Companies']['searchkey'];

                $condition = "EventInvitation.delete_status = '0' and EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.invitation='1'";

            }else{

                $condition = "EventInvitation.delete_status = '0' and EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.invitation='1'";

            }

            

            $this->RecurringEvent->bindModel(array('belongsTo'=>array(

            'EventInvitation'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.rec_event_id = RecurringEvent.id'

            ),

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.invite_to_holder_id = Holder.id'

            ),

            'MemberType'=>array(

            'foreignKey'=>false,

            'conditions'=>'MemberType.id = Holder.member_type'

            ), 

            'DonationLevel'=>array(

            'foreignKey'=>false,

            'conditions'=>'DonationLevel.id = Holder.donation_level'

            )

            )));

            

           

            $this->Pagination->sortByClass    = 'RecurringEvent'; ##initaite pagination 



            $this->Pagination->total= count($this->RecurringEvent->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            

            $this->RecurringEvent->bindModel(array('belongsTo'=>array(

            'EventInvitation'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.rec_event_id = RecurringEvent.id'

            ),

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.invite_to_holder_id = Holder.id'

            ),

            'MemberType'=>array(

            'foreignKey'=>false,

            'conditions'=>'MemberType.id = Holder.member_type'

            ), 

            'DonationLevel'=>array(

            'foreignKey'=>false,

            'conditions'=>'DonationLevel.id = Holder.donation_level'

            )

            )));

            

            $taskdata = $this->RecurringEvent->find('all',array("conditions"=>$condition,'order' =>$order, 'limit' => $limit, 'page' => $page));

            ##set project type data in variable

       

       

            //$taskdata = $this->CommunicationTaskHistory->query("select * from communication_task_histories as cth,communication_task_execution_reports as cter,holders where cth.rec_event_id='".$rec_event_id."' and cth.delete_status = '0' and cth.id = cter.task_execution_id and cter.sent_to_email=holders.email and holders.project_id='".$projectid."'");

            

            $this->set("taskdata",$taskdata);



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '13'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   

          

                

                $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.in_waitlist='1'";

                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    

                

                if(empty($check_waiting_list))            

                    $waiting_list=0;

                else

                    $waiting_list=1;

             

                $this->set('waiting_list', $waiting_list); 





        }

        

        

        

      /**

       * Function to show list of Members or contacts to whom task email is sent 

       * This function is called at commtaskhistorylist 

       *  

       */

        function commtask_get_history_sentitem_list_by_ajax($task_execution_id, $task_id){

            #get record from global funtion for ajax calling

            $this->layout="ajax";

            ##check user session live or not

            $this->session_check_user();



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



          

              

            ##import communication Task model for processing

            App::import("Model", "CommunicationTaskExecutionReport");

            $this->CommunicationTaskExecutionReport =   & new CommunicationTaskExecutionReport();    

             



            if($task_execution_id && $task_id!="" && $projectid)

            {      

                  $taskExeCond=" CommunicationTaskExecutionReport.task_execution_id='".$task_execution_id."' AND CommunicationTaskExecutionReport.task_id='".$task_id."' AND CommunicationTaskExecutionReport.project_id='".$projectid."' ";

                  $taskExeSentItemData  =  $this->CommunicationTaskExecutionReport->find("all", array('conditions' => $taskExeCond,'order'=>'CommunicationTaskExecutionReport.created ASC')); 

                  $this->set('taskExeSentItemData',$taskExeSentItemData);   

            }else{

                 $this->set('taskExeSentItemData',false);

            }

            

             



        }

        

        

        



        /*

        * Function name   : companylist()

        * Description : This function used to list companies of related project

        * Created On      : 19-02-11 (04:40am)

        *

        */ 

        function companylist(){



            //Configure::write('debug', 2);    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            //for active menu display

            $this->set('page_url','editsponsordesc');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;



            ##fetch data from Company table for listing

            $field='';





            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                $searchkeyword = $this->data['Company']['searchkey'];



                $condition = "Company.delete_status = '0' AND Company.project_id = '$project_id' and (Company.company_name LIKE '%".$searchkeyword."%' OR CompanyType.company_type_name  LIKE '%".$searchkeyword."%' OR Company.website  LIKE '%".$searchkeyword."%' OR Company.email LIKE '%".$searchkeyword."%' OR Company.phone LIKE '%".$searchkeyword."%')";

            }else{

                $condition = "Company.delete_status = '0' AND Company.project_id = '$projectid'";

            }



            $this->Pagination->sortByClass    = 'Company'; ##initaite pagination 



            $this->Company->bindModel(array('belongsTo'=>array(

            'CompanyType'=>array(

            'foreignKey'=>false,

            'conditions'=>'Company.company_type_id = CompanyType.id'

            )

            )));



            $this->Pagination->total= count($this->Company->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $this->Company->bindModel(array('belongsTo'=>array(

            'CompanyType'=>array(

            'foreignKey'=>false,

            'conditions'=>'Company.company_type_id = CompanyType.id'

            )

            )));



            $companydtlarr = $this->Company->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            ##set project type data in variable



            $this->set("companydata",$companydtlarr);



        }

        /*

        * Function name   : addcompany()

        * Description : This function used to add company for project

        * Created On      : 18-02-11 (02:20am)

        *

        */     

        function addcompany($companyid=''){

            //Configure::write('debug', 2);    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','editsponsordesc');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '46'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition   



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;





            $this->set("selectedcountry",'');

            $this->set("selectedstate",'');



            ##check empty data

            if(!empty($this->data)) {

                $this->data['Company']['project_id'] = $projectid;

                #set the posted data

                $this->Company->set($this->data);

                #check server side validation

                $errormsg = $this->Company->invalidFields();

                if(!$errormsg){



                    ##uploading Sponsor logo

                    if($this->data['Company']['complogo']['name'] !=''){

                        $ptname =$projectDetails['Project']['project_name'];   // $this->data['Company']['projectname'];



                        $filePath =  'img' . DS . $ptname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Company']['complogo']['name']); 

                        $tmp1 = $this->data['Company']['complogo']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'250x250');



                        $this->data['Company']['logo'] = $fileNamesidea;

                    }





                    $cid = "";

                    $cname = $this->data['Company']['company_name'];

                    $address1 = $this->data['Company']['address1'];

                    $country = $this->data['Company']['country'];

                    $state = $this->data['Company']['state'];

                    $city = $this->data['Company']['city'];

                    $zipcode = $this->data['Company']['zipcode'];

                    

                    if($this->data['Company']['id']){

                        $cid = $this->data['Company']['id'];

                         // for update - check company already exist with same company name & same address, city ,state, country , zip

                        $condition = "company_name = '".$cname."' AND address1 = '".$address1."'  AND city = '".$city."' AND state = '".$state."'

                        AND country = '".$country."' AND zipcode = '".$zipcode."' AND project_id = '".$projectid."'    AND  delete_status = '0' AND id !='".$cid."'";



                    }else{

                        // check company already exist with same company name & same address, city ,state, country , zip  

                        $condition = "company_name = '".$cname."' AND address1 = '".$address1."'  AND city = '".$city."' AND state = '".$state."'

                        AND country = '".$country."' AND zipcode = '".$zipcode."' AND project_id = '".$projectid."' AND  delete_status = '0'";

                    }    

                    ##check already exists company name

                    $ctdata = $this->Company->find('all',array("conditions"=>$condition));

                    if(!$ctdata){

                        if($this->Company->Save($this->data)){

                            if($cid){

                                $this->Session->setFlash('Company updated Successfully.','default', array('class' => 'successmsg'));

                                if(isset($this->data['Action']['redirectpage'])){

                                    $sessdata=$this->Session->read('newsortingby');

                                    $this->redirect('/'.$sessdata);

                                }else{

                                    $this->redirect("/companies/addcompany/$cid");

                                }

                            }else{

                                $this->Session->setFlash('Company Added Successfully.','default', array('class' => 'successmsg'));

                                if(isset($this->data['Action']['redirectpage'])){

                                    $sessdata=$this->Session->read('newsortingby');

                                    $this->redirect('/'.$sessdata);            

                                }else{

                                    $this->redirect('/companies/addcompany');

                                }

                            }

                        }else{

                            $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));    

                        }



                    }else{

                        $this->Session->setFlash('Company with same name and location already exists.','default',array('class' => 'msgTXt'));

                    }

                }

            }





            if($companyid){

                $this->Company->id = $companyid;

                $this->data = $this->Company->read();

                $contactname="";







                ##import Contacts  model for processing

                App::import("Model", "Contact");

                $this->Contact =   & new Contact();    

                //contact box

                ##relation with company

                $this->Contact->bindModel(array('belongsTo'=>array(

                'ContactType'=>array(

                'foreignKey'=>false,

                'conditions'=>'Contact.contact_type_id = ContactType.id'

                ),'Company'=>array(

                'foreignKey'=>false,

                'conditions'=>'Contact.company_id = Company.id'

                )

                )));



                $condition2 = "Contact.company_id = '".$companyid."' AND  Contact.delete_status = '0'";

                $condata = $this->Contact->find('all',array("conditions"=>$condition2));

                //print_r($condata); exit;

                if($condata){

                    $contactname = Set::combine($condata, '{n}.Contact.id', array('%s %s','{n}.Contact.firstname', '{n}.Contact.lastname')); 



                    /*foreach ($condata as $eachcontact){

                    $contactname = $eachcontact['Contact']['firstname'].' '.$eachcontact['Contact']['lastname'].' ['.$eachcontact['Company']['company_name'].'] ('.$eachcontact['ContactType']['contact_type_name'].'),'.$contactname;

                    }

                    $contactname = substr($contactname,0,-1);*/

                }



                //$this->data['Company']['contacts'] = $contactname ;

                $this->set('contacts',$contactname);



            }        



            $this->set("selectedcompanytype","");



            $this->set("selectedcompanytype",$this->data['Company']['company_type_id']);

            $this->companytypedropdown($project_id);



            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



            ##check default dropdowns



            if($this->data['Company']['country']){

                $conid = $this->data['Company']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if($this->data['Company']['state']){

                    $statid = $this->data['Company']['state'];

                    $this->set("selectedstate",$statid);



                }

            }



            $prodtl = $this->projectdetailbyid($projectid);

            $sponname = $this->getsponsornamebyprojectid($projectid);

            $this->set('sponorname',$sponname);

            $projectname = $prodtl[0]['Project']['project_name'];

            $this->set('projectname',$projectname);





        }

        /*******************************************************************

        * Function Name: signup

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function signup(){



            //Configure::write('debug', 2);    







            $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url','signup');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);    



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $_SESSION['facbooklogoutduesignup']=1;



            if($projectDetails['ProjectType']['coin_verification']=="0")    {

                $this->set('status',"Verified");

            }



            $this->set("selectedcountry",'');

            $this->set("selectedstate",'');



            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $this->set('meta_title',$projectDetails['Project']['sitename']);

            $this->set('page_title',$projectDetails['Project']['sitename']);



            if(isset($this->data['Company'])){



                if(trim($this->data['Company']['coinset'])=="")

                {

                    $status="Empty coin serial";

                }else{

                    if($this->verify(trim($this->data['Company']['coinset']),trim($this->data['Company']['code']))==true)

                    {

                        //checking whether it is already registered or not

                        $condition1 = "CoinsHolder.serialnum='".trim($this->data['Company']['coinset'])."' and CoinsHolder.is_current_holder  = '1' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";



                        $coinset_alregistered = $this->CoinsHolder->find('count', array('conditions' => $condition1));

                        if($coinset_alregistered>0) {

                            if($projectDetails['ProjectType']['istransferable']==1){                        

                                $status="Verified";

                                $this->set('tempserial',trim($this->data['Company']['coinset']));

                                $this->set('tempkey',trim($this->data['Company']['code']));

                            }

                            else

                            {

                                $status="Not Verified";

                                $this->Session->setFlash("This coin is already registered.As coin is not transferable,you can not register it again.",'default',array('class' => 'errormsg'));

                                if($projectDetails['ProjectType']['coin_verification']=="0")    {

                                    $this->redirect("http://".HTTP_PATH."/".$project_name);

                                }

                            }                                                

                        }

                        else

                        {                             

                            $status="Verified";    

                            $this->set('tempserial',trim($this->data['Company']['coinset']));

                            $this->set('tempkey',trim($this->data['Company']['code']));                

                        }

                    }

                    else{

                        $status="Not Verified";

                        $this->Session->setFlash("Not Verified",'default',array('class' => 'errormsg'));

                        if($projectDetails['ProjectType']['coin_verification']=="0")    {

                            $this->redirect("http://".HTTP_PATH."/".$project_name);

                        }

                    }

                }            

                $this->set('status',$status);

            }

            if(isset($this->data['Holder'])){        





                $this->set('status',trim($this->data['Holder']['coinstatus']));

                $errorString ='';    



                //coinset verification

                if(trim($this->data['Holder']['coinstatus'])!="Verified")

                    $errorString .="Serial is not verified.<br/>";



                //screenname checking            

                if(trim($this->data['Holder']['screenname'])=="")

                {

                    $errorString .="Screen Name is required.<br/>";

                }





                //password checking            

                if(trim($this->data['Holder']['password']) == ''){

                    $errorString .="Please enter password<br/>";                

                }else{

                    if(strlen(trim($this->data['Holder']['password'])) < 6 ){

                        $errorString .="Password must have atleast 6 character.<br/>";    

                    }else{

                        if(trim($this->data['Holder']['password']) != trim($this->data['Holder']['password_confirm'])){

                            $errorString .="Password & confirm password must be same<br/>";                

                        }

                    }

                }



                //email checking

                if(trim($this->data['Holder']['email']) == '' ){

                    $errorString .="Please enter email address<br/>";                

                }else{

                    if(!eregi("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$", trim($this->data['Holder']['email']))){

                        $errorString .="Please enter valid email address.<br/>";                

                    }

                    else{

                        $condition = "email = '".$this->data['Holder']['email']."' and  project_id='".$project_id."' and delete_status='0'";

                        $usersession = $this->Holder->find('first', array('conditions' => $condition));

                        if(is_array($usersession) && !empty($usersession)) {

                            $errorString .=" If you have already Registered and want to Register a New Coin, please Login and Add the Coin in Your Dashboard";

                        }

                    }

                }



                if(trim($this->data['Holder']['firstname'])=="")

                    $errorString .="First Name is required.<br/>";



                if(trim($this->data['Holder']['lastnameshow'])=="")

                    $errorString .="Lastname is required.<br/>";



                if(trim($this->data['Holder']['zipcode'])=="")

                    $errorString .="Zip is required.<br/>";    



                if(trim($this->data['Holder']['country'])=="")

                    $errorString .="Country is required.<br/>";        



                if(trim($errorString) !=''){                

                    $this->Session->setFlash($errorString,'default',array('class' => 'errormsg'));

                }else{



                    $tempserial='';

                    if($projectDetails['Project']['registration_confirmation']=="0")

                    {    

                        $tempserial=$this->data['Holder']['tempserial'];

                        $tempkey=$this->data['Holder']['tempkey'];

                        $this->data['Holder']['tempkey']=0;

                        $this->data['Holder']['tempserial']='';

                        $active_status='1';

                    }

                    else $active_status='0';



                    $this->data['User']['project_id']=$project_id;

                    $this->data['User']['active_status']=$active_status;

                    $this->data['User']['username']=$this->data['Holder']['email'];

                    $this->data['User']['password']=md5($this->data['Holder']['password']);

                    $this->data['User']['usertype']='holder';



                    $this->User->save($this->data['User']);    



                    $new_member_id = $this->User->getLastInsertId();



                    $startdate1=explode("/",$this->data['Holder']['birthday']);

                    $birthdate=$startdate1[2]."-".$startdate1[0]."-".$startdate1[1];



                    $this->data['Holder']['birthday']=$birthdate;

                    $this->data['Holder']['project_id']=$project_id;

                    $this->data['Holder']['user_id']=$new_member_id;    

                    $this->data['Holder']['active_status']=$active_status;        



                    $this->Holder->save($this->data['Holder']);



                    $new_holder_id = $this->Holder->getLastInsertId();    



                    if($projectDetails['Project']['registration_confirmation']=="1")

                    {

                        $condition = " EmailTemplate.email_template_name= 'SIGN UP CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                        $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));

                        if(is_array($mailMessage) && !empty($mailMessage)) 

                        {

                            $confirm_signup_link ="<a href='http://".HTTP_PATH."/companies/update_confirmation/".base64_encode($new_holder_id)."' target='_blank'>Confirm Sign up</a>";



                            /**

                            * OLD CODE

                            * if(!empty($projectDetails['Project']['url']))

                                $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                            else

                                $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                            if(!empty($projectDetails['Project']['system_name']))

                                $pt_new_name=$projectDetails['Project']['system_name'];

                            else

                                $pt_new_name=$projectDetails['Project']['project_name'];

                            $keyStringArray = array('[[HOLDER_FIRSTNAME]]'=>trim($this->data['Holder']['firstname']),                

                            '[[CONFIRM_SIGN_UP_LINK]]'=>$confirm_signup_link,

                            '[[PROJECT_NAME]]'=>$pt_new_name,

                            '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                            if(!empty($keyStringArray)){

                                foreach($keyStringArray as $key=>$val){

                                    $mailBody = str_replace($key,$val,$mailBody);

                                }

                            }        

                            */

                           $subject  = $mailMessage['EmailTemplate']['subject'];              

                           $from = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromemail'];

                           $fromname = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromname']; 

                           $mailBody=$mailMessage['EmailTemplate']['content'];

                           /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button  **/  

                            ///////////////////////////////// append mail footer set by super admin /////////////////////////

                            $condition = "id='1'";

                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                            $mailBody.=$mailfooter;

                            ///////////////////////////////// append mail footer set by super admin /////////////////////////

                            

                            

                            // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                            $toemail = trim($this->data['Holder']['email']);

                             /**

                             * New Email Temp replacement code for data Elements 

                             */

                             //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $toemail);

                             //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                $dataEleValuesArray[DATA_ELEMENT_CONFIRM_SIGN_UP_LINK]= $confirm_signup_link;

                                $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                             //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                $result = $this->Sendemail->sendMailContentWithCC($toemail,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);



                        }        

                        //             $status="ok";

                        //             $this->set("status1",$status);

                        //             $condition = " User.id = ".$new_member_id;

                        //             $userDetails = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));    

                        // 

                        //             $this->Session->write('User', $userDetails);

                        $this->Session->setFlash('Thanks for registering. Your registration is NOT complete until you Verify your e-mail address.We have sent you an email, please click the link in the e-mail to complete the Verify process. After you have Verified you will be able to Login.','default',array('class' => 'successmsg'));





                    }else{



                        $condition = " EmailTemplate.email_template_name= 'REGISTRATION CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                        $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                        if(is_array($mailMessage) && !empty($mailMessage)) 

                        {   

                            $userpass= base64_decode($this->Session->read("keypass"));  

                           /**

                           * OLD CODE

                           * if(!empty($projectDetails['Project']['url']))

                                $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                            else

                                $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                                                        if(!empty($projectDetails['Project']['system_name']))

                                $pt_new_name=$projectDetails['Project']['system_name'];

                            else

                                $pt_new_name=$projectDetails['Project']['project_name']; 

                             $keyStringArray = array('[[USER_NAME]]'=>trim($this->data['Holder']['email']),

                        '[[TO_FIRSTNAME]]'=>trim($this->data['Holder']['screenname']),  

                        '[[EMAIL_ADDRESS]]'=>trim($this->data['Holder']['email']),

                            '[[PASSWORD]]'=>trim($userpass),

                            '[[PROJECT_NAME]]'=>$pt_new_name,

                            '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                             if(!empty($keyStringArray)){

                                foreach($keyStringArray as $key=>$val){

                                    $mailBody = str_replace($key,$val,$mailBody);

                                }

                            }

                                 

                           */

                            $subject  = $mailMessage['EmailTemplate']['subject'];              

                            $subject = str_replace('[[PROJECT_NAME]]',$pt_new_name,$subject);          

                            $from = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromemail'];

                            $fromname = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromname']; 

                            $mailBody=$mailMessage['EmailTemplate']['content'];  

                            

                            /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/ 

                            ///////////////////////////////// append mail footer set by super admin /////////////////////////

                            

                            $condition = "id='1'";

                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                            $mailBody.=$mailfooter;

                            ///////////////////////////////// append mail footer set by super admin /////////////////////////

                           

                            // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                            $toemail = trim($this->data['Holder']['email']);

                            /**

                             * New Email Temp replacement code for data Elements 

                             */

                             //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $toemail);

                             //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                $dataEleValuesArray[DATA_ELEMENT_USER_NAME]= trim($this->data['Holder']['email']);

                                $dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= trim($userpass);

                                $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                             //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                               $result = $this->Sendemail->sendMailContentWithCC($toemail,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                               $ccemail = $mailMessage['EmailTemplate']['send_cc_email'];

                             /*       

                                if($ccemail==1)

                                {

                                    $to_cc_email=$from;

                                    

                                    $this->Sendemail->sendMailContent($to_cc_email,$from,$subject,$mailBody,$fromname);

                                }     */

                    

                            

                            $this->Session->delete("keypass");

                        }        



                        if($tempserial!=""){                



                            $condition = " Coinset.project_id='".$project_id."' and Coinset.verifycode='".$tempkey."' and Coinset.active_status='1' and Coinset.delete_status='0'";

                            $coinsets = $this->Coinset->find('first', array('conditions' => $condition));    

                            if(is_array($coinsets) and !empty($coinsets))    {        

                                $coinset_id=$coinsets['Coinset']['id'];    



                                //checking whether it is already registered or not

                                $condition1 = " CoinsHolder.serialnum='".$tempserial."' and CoinsHolder.is_current_holder  = '1' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";



                                $coinset_alregistered = $this->CoinsHolder->find('first', array('conditions' => $condition1));

                                if(is_array($coinset_alregistered) && !empty($coinset_alregistered)) {            



                                    if($projectDetails['ProjectType']['simple_cointransfer']==1){                

                                        $condition2 = "CoinsHolder.holder_id   = '".$coinset_alregistered['CoinsHolder']['holder_id']."' and CoinsHolder.serialnum = '".$coinset_alregistered['CoinsHolder']['serialnum']."' " ;

                                        $oldcoinholder = $this->CoinsHolder->find('first', array('conditions' => $condition2));



                                        $this->data['CoinsHolder1']['id']=$oldcoinholder['CoinsHolder']['id'];

                                        $this->data['CoinsHolder1']['is_current_holder']='0';

                                        $this->CoinsHolder->save($this->data['CoinsHolder1']);    

                                    }

                                }



                                $this->data['CoinsHolder']['project_id']=$project_id;

                                $this->data['CoinsHolder']['coinset_id']=$coinset_id;

                                $this->data['CoinsHolder']['is_current_holder']='1';



                                $this->data['CoinsHolder']['holder_id']=$new_holder_id;

                                $this->data['CoinsHolder']['serialnum']=$tempserial;



                                $this->CoinsHolder->save($this->data['CoinsHolder']);                    



                                // Update Holder member type as 'Holder' after registing coin                  

                                    $holderarr['Holder']['id']=$new_holder_id;

                                     App::import("Model", "MemberType");  

                                    $this->MemberType =  & new MemberType(); 

                                    $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_HOLDER, $project_id);

                                    $holderarr['Holder']['member_type']= $member_type['MemberType']['id']; 

                                    $this->Holder->save($holderarr);  

                                    

                                $condition = " EmailTemplate.email_template_name= 'COIN REGISTER CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                                $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                                if(is_array($mailMessage) && !empty($mailMessage)) 

                                {

                                    /**

                                    * OLD CODE

                                    * if(!empty($projectDetails['Project']['url']))

                                        $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                    else

                                        $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                                    if(!empty($projectDetails['Project']['system_name']))

                                        $pt_new_name=$projectDetails['Project']['system_name'];

                                    else

                                        $pt_new_name=$projectDetails['Project']['project_name'];

                                    $keyStringArray = array('[[HOLDER_FIRSTNAME]]'=> $this->data['Holder']['screenname'],

                                    '[[COIN_SERIAL]]'=>$tempserial,

                                    '[[COIN_REG_DATE]]'=>Date('Y-m-d'),

                                    '[[PROJECT_NAME]]'=>$pt_new_name,

                                    '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                                     if(!empty($keyStringArray)){

                                        foreach($keyStringArray as $key=>$val){

                                            $mailBody = str_replace($key,$val,$mailBody);

                                        }

                                    }       

                                    */

                                    $subject  = $mailMessage['EmailTemplate']['subject'];              

                                    $from = $mailMessage['EmailTemplate']['sender'];   //$projectDetails['Project']['fromemail'];

                                    $fromname = $mailMessage['EmailTemplate']['sender']; //$projectDetails['Project']['fromname'];

                                    $mailBody=$mailMessage['EmailTemplate']['content'];

                                    /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/ 

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                   

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    $mailBody.=$mailfooter;

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                   

                                     // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                                    $to = $this->data['Holder']['email'];

                                    /**

                                     * New Email Temp replacement code for data Elements 

                                     */

                                     //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                        $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                     //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                        $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $tempserial;

                                        $dataEleValuesArray[DATA_ELEMENT_COIN_REGISTRATION_DATE]= Date('m-d-Y');

                                        $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                     //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                        $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                        $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                

                                    $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                                    

                                    /*$ccemail  = $mailMessage['EmailTemplate']['send_cc_email'];

                                        

                                    if($ccemail==1)

                                    {

                                        $toccemail=$from;

                                        $this->Sendemail->sendMailContentWithCC($toccemail,$from,$subject,$mailBody,$fromname);

                                    }   */

                                }



                                $this->Session->setFlash('Thanks for registering coin.','default',array('class' => 'successmsg'));



                            }



                        }else{    $this->Session->setFlash('Thanks for registration!','default',array('class' => 'successmsg'));

                            $status="ok";

                            $this->set("status1",$status);

                            $condition = " User.id = ".$new_member_id;

                            $userDetails = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));    

                            $this->Session->write('User', $userDetails);

                        }



                    }



                    //$this->redirect('/companies/signup');

                }

            }



            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



            ##check default dropdowns        

            if($this->data['Holder']['country']){

                $conid = $this->data['Holder']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if($this->data['Holder']['state']>0){

                    $statid = $this->data['Holder']['state'];

                    $this->set("selectedstate",$statid);



                }

            }            



        }



        /*******************************************************************

        * Function Name: update_confirmation

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This is for activating the user account 

        * Created By      : SDN

        * Created: 23 AUG, 2010

        ********************************************************************/

        function update_confirmation($member_id) {    



            //Configure::write('debug', 2);    

            $this->layout= 'internal_layout';



            $mem_id = base64_decode($member_id);        

            //$mem_id = $member_id;    



            //for active menu display

            $this->set('page_url','update_confirmation');    

            

            



            $holderdetails = $this->Holder->find('first', array('conditions' => " Holder.id = '".$mem_id."'  ", 'recursive' => -1));

            

            //for invitation//           

            $to_user = trim($holderdetails['Holder']['email']);            

            $invite_details=$this->Invitation->query("select * from invitations where to_user='".$to_user."' and project_id='".$holderdetails['Holder']['project_id']."' ");            $invite_user_id=$invite_details[0]['invitations']['user_id'];

            $invite_project_id=$invite_details[0]['invitations']['project_id'];            

            //for invitation// 

            

            if(empty($holderdetails)) {

                $this->redirect('/companies/notavailable');

            }else if($holderdetails['Holder']['active_status']=='1'){

                  $this->Session->setFlash('Your account is already activated.You can login now.','default',array('class' => 'successmsg'));

                  $this->redirect('/companies/login');

            }else{

                $userpast = $this->User->find('first', array('conditions' => "User.id = '".$holderdetails['Holder']['user_id']."' "));            



                $project_id=$userpast['User']['project_id'];    



                $condition="Project.id='".$project_id."' and Project.active_status='1' and Project.delete_status='0'";



                $projectDetails1 = $this->Project->find($condition,NULL,NULL,NULL,NULL,1);    



                $project_name=$projectDetails1['Project']['project_name'];    

                

                



                $this->Session->write('projectwebsite_id', $project_id);

                $this->Session->write('projectwebsite_name', $project_name);        



                $this->set('project_name',$project_name);    



                $projectDetails=$this->getprojectdetails($project_id);    

                $this->set('project',$projectDetails);                                    



                $this->data['User']['id'] = $holderdetails['Holder']['user_id'];

                $this->data['User']['active_status'] = '1';

                $tempserial=$holderdetails['Holder']['tempserial'];

                $tempkey=$holderdetails['Holder']['tempkey'];



                $condition = " User.id = '".$holderdetails['Holder']['user_id']."' and User.project_id ='".$project_id."'  AND  User.active_status='1'  ";

                $userpresent = $this->User->find('first', array('conditions' => $condition));                





                if(empty($userpresent)) {



                    if($this->User->save($this->data)) {



                        $this->data['Holder']['id'] = $mem_id;

                        $this->data['Holder']['tempserial'] = '';

                        $this->data['Holder']['tempkey'] = 0;

                        $this->data['Holder']['active_status'] = '1';

                        $this->Holder->save($this->data['Holder']);





                        $condition = " User.id = '".$holderdetails['Holder']['user_id']."' and User.project_id ='".$project_id."' AND  User.active_status='1' ";        

                        $userdetails = $this->User->find('first', array('conditions' => $condition, 'recursive' => -1));                

                        //sending confirmation mail

                        



                        if(is_array($userdetails)) {                    



                            $condition = " EmailTemplate.email_template_name= 'REGISTRATION CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                            $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                            if(is_array($mailMessage) && !empty($mailMessage)) 

                            {

                                $userpass= base64_decode($this->Session->read("keypass"));

                                /**

                                * OLD CODE

                                * if(!empty($projectDetails['Project']['url']))

                                    $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                else

                                    $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                                 if(!empty($projectDetails['Project']['system_name']))

                                    $pt_new_name=$projectDetails['Project']['system_name'];

                                else

                                    $pt_new_name=$projectDetails['Project']['project_name'];

                                 $keyStringArray = array('[[USER_NAME]]'=>trim($holderdetails['Holder']['email']),

                                '[[TO_FIRSTNAME]]'=>trim($holderdetails['Holder']['screenname']),  

                                '[[EMAIL_ADDRESS]]'=>trim($holderdetails['Holder']['email']),

                                '[[PASSWORD]]'=>trim($userpass),

                                '[[PROJECT_NAME]]'=>$pt_new_name,

                                '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);    

                                if(!empty($keyStringArray)){

                                    foreach($keyStringArray as $key=>$val){

                                        $mailBody = str_replace($key,$val,$mailBody);

                                    }

                                }  

                                $subject = str_replace('[[PROJECT_NAME]]',$pt_new_name,$subject);

                                

                                */

                                $subject  = $mailMessage['EmailTemplate']['subject'];              

                                $from = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromemail'];

                                $fromname = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromname']; 

                                $mailBody=$mailMessage['EmailTemplate']['content'];

                                

                                /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button    **/

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                $condition = "id='1'";

                                $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                $mailBody.=$mailfooter;

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                               

                                

                                // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                                $to = trim($userdetails['User']['username']);                    

                                 /**

                                     * New Email Temp replacement code for data Elements 

                                     */

                                     //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                        $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                     //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                        $dataEleValuesArray[DATA_ELEMENT_USER_NAME]= trim($holderdetails['Holder']['email']);

                                        $dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= trim($userpass);

                                        $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                     //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                        $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                        $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                

                                $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                                

                              /*  $ccemail = $mailMessage['EmailTemplate']['send_cc_email'];

                                    

                                if($ccemail==1)

                                {

                                    $to_cc_email=$from;

                                    

                                    $this->Sendemail->sendMailContentWithCC($to_cc_email,$from,$subject,$mailBody,$fromname);

                                } */

                            }        







                            if($tempserial!=""){                



                                $condition = " Coinset.project_id='".$project_id."' and Coinset.verifycode='".$tempkey."' and Coinset.active_status='1' and Coinset.delete_status='0'";

                                $coinsets = $this->Coinset->find('first', array('conditions' => $condition));    



                                if(is_array($coinsets) and !empty($coinsets))    {        

                                    $coinset_id=$coinsets['Coinset']['id'];    



                                    //checking whether it is already registered or not

                                    $condition1 = " CoinsHolder.serialnum='".$tempserial."' and CoinsHolder.is_current_holder  = '1' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";



                                    $coinset_alregistered = $this->CoinsHolder->find('first', array('conditions' => $condition1));            



                                    if(is_array($coinset_alregistered) && !empty($coinset_alregistered)) {            



                                        if($projectDetails['ProjectType']['simple_cointransfer']==1){                

                                            $condition2 = "CoinsHolder.holder_id   = '".$coinset_alregistered['CoinsHolder']['holder_id']."' and CoinsHolder.serialnum = '".$coinset_alregistered['CoinsHolder']['serialnum']."' " ;

                                            $oldcoinholder = $this->CoinsHolder->find('first', array('conditions' => $condition2));



                                            $this->data['CoinsHolder1']['id']=$oldcoinholder['CoinsHolder']['id'];

                                            $this->data['CoinsHolder1']['is_current_holder']='0';

                                            $this->CoinsHolder->save($this->data['CoinsHolder1']);    

                                        }

                                    }



                                    $this->data['CoinsHolder']['project_id']=$project_id;

                                    $this->data['CoinsHolder']['coinset_id']=$coinset_id;

                                    $this->data['CoinsHolder']['is_current_holder']='1';



                                    $this->data['CoinsHolder']['holder_id']=$mem_id;

                                    $this->data['CoinsHolder']['serialnum']=$tempserial;



                                    $this->CoinsHolder->save($this->data['CoinsHolder']);                    





                                // Update Holder member type as 'Holder' after registing coin                  

                                    $holderarr['Holder']['id']=$mem_id;

                                     App::import("Model", "MemberType");  

                                    $this->MemberType =  & new MemberType(); 

                                    $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_HOLDER, $project_id);

                                    $holderarr['Holder']['member_type']= $member_type['MemberType']['id']; 

                                    $this->Holder->save($holderarr);  

                                    

                                    $condition = " EmailTemplate.email_template_name= 'COIN REGISTER CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                                    $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                                    if(is_array($mailMessage) && !empty($mailMessage)) 

                                    {

                                       /**

                                       * OLD CODE

                                       * if(!empty($projectDetails['Project']['url']))

                                            $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                        else

                                            $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                                       * if(!empty($projectDetails['Project']['system_name']))

                                            $pt_new_name=$projectDetails['Project']['system_name'];

                                        else

                                            $pt_new_name=$projectDetails['Project']['project_name'];            

                                        $keyStringArray = array('[[HOLDER_FIRSTNAME]]'=> $holderdetails['Holder']['screenname'],

                                        '[[COIN_SERIAL]]'=>$tempserial,

                                        '[[COIN_REG_DATE]]'=>Date('Y-m-d'),

                                        '[[PROJECT_NAME]]'=>$pt_new_name,

                                        '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                                         if(!empty($keyStringArray)){

                                            foreach($keyStringArray as $key=>$val){

                                                $mailBody = str_replace($key,$val,$mailBody);

                                            }

                                        }

                                       */

                                        $subject  = $mailMessage['EmailTemplate']['subject'];              

                                        $from =$mailMessage['EmailTemplate']['sender'];        //$projectDetails['Project']['fromemail'];

                                        $fromname = $mailMessage['EmailTemplate']['sender']; // $projectDetails['Project']['fromname']; 

                                        $mailBody=$mailMessage['EmailTemplate']['content'];

                                        

                                        /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/

                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                        $condition = "id='1'";

                                        $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                        $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                        $mailBody.=$mailfooter;

                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                       

                                        

                                        // Set path to inserted image 

                                            $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                                        $to = $holderdetails['Holder']['email'];

                                         /**

                                         * New Email Temp replacement code for data Elements 

                                         */

                                         //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                            $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                         //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                            $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $tempserial;

                                            $dataEleValuesArray[DATA_ELEMENT_COIN_REGISTRATION_DATE]= Date('Y-m-d');

                                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                         //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                            $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                            $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                



                                        $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                                        

                                      /*  $ccemail  = $mailMessage['EmailTemplate']['send_cc_email'];

                                        

                                        if($ccemail==1)

                                        {

                                            $toccemail=$from;

                                            $this->Sendemail->sendMailContentWithCC($toccemail,$from,$subject,$mailBody,$fromname);

                                        } */

                                    }



                                    $this->Session->setFlash('Thanks for registering coin. Your account has been activated successfully. You can login now.','default',array('class' => 'successmsg'));

                                //set invitation status to this user as accepted

                                $this->Invitation->query("update invitations set accepted=1 where to_user='".$to_user."' and project_id='".$project_id."' ");                                                                

                                //triggered points setup for user

                                $this->Point->triggerPoints(POINTS_PER_FRIEND_JOIN,$invite_project_id,$invite_user_id);        //trigger for invitation

                                $this->Point->triggerPoints("FRIEND_JOIN_BONUS_CHECK",$invite_project_id,$invite_user_id);        //trigger for no of invitation check



                                }



                            }else{

                                //set invitation status to this user as accepted

                                $this->Invitation->query("update invitations set accepted=1 where to_user='".$to_user."' and project_id='".$project_id."' ");                                                                

                                //triggered points setup for user

                                $this->Point->triggerPoints(POINTS_PER_FRIEND_JOIN,$invite_project_id,$invite_user_id);        //trigger for invitation

                                $this->Point->triggerPoints("FRIEND_JOIN_BONUS_CHECK",$invite_project_id,$invite_user_id);        //trigger for no of invitation check

                                

                                $this->Session->setFlash('Your account has been activated successfully. You can login now.','default',array('class' => 'successmsg'));

                                $this->redirect('/companies/login');



                            }



                        }



                    }else{

                        $this->Session->setFlash('Unable to activate your account. Please try again.','default',array('class' => 'errormsg'));

                    }

                }else{    

                

                ///set invitation status to this user as accepted

                $this->Invitation->query("update invitations set accepted=1 where to_user='".$to_user."' and project_id='".$project_id."' ");                                                                

                //triggered points setup for user

                $this->Point->triggerPoints(POINTS_PER_FRIEND_JOIN,$invite_project_id,$invite_user_id);        //trigger for invitation

                $this->Point->triggerPoints("FRIEND_JOIN_BONUS_CHECK",$invite_project_id,$invite_user_id);        //trigger for no of invitation check

                        

                    $this->Session->setFlash('Your account is already activated. You can login now.','default',array('class' => 'successmsg'));

                     $this->redirect('/companies/login');

                }

            }





        }



        /*******************************************************************

        * Function Name: verify

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function verify($coinset_value,$code=null){



            //$this->layout= '';        



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);    



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $errorString="";        



            $isvalid=false;



            if(strlen($coinset_value)!=7)    return $isvalid;





            $coinset_value1=substr($coinset_value, 3, (strlen($coinset_value)-3));



            $coinset_prefix=substr($coinset_value, 0, 3);  





            if(preg_match('/[A-Z]{3}/', $coinset_prefix)==1){



                $condition = "Coinset.coinset_name like '$coinset_prefix%' and Coinset.delete_status='0'";

                $is = $this->Coinset->find('count', array('conditions' => $condition));  

                // $coinset_prefix!=$projectDetails['Project']['serialprefix']





                if($is==0) return $isvalid;



            }



            if(!is_numeric($coinset_value1)) return $isvalid;







            if($code!=null){

                $condition = "Coinset.project_id='".$project_id."' and Coinset.verifycode='".$code."' and Coinset.active_status='1' and Coinset.delete_status='0'";

            }

            else{

                $condition = "Coinset.project_id='".$project_id."' and Coinset.active_status='1' and Coinset.delete_status='0'";

            }

            $coinsets = $this->Coinset->find('all', array('conditions' => $condition));    



            if(is_array($coinsets) and !empty($coinsets))    {

                foreach($coinsets as $set){        

                    $coinset_id=$set['Coinset']['id'];                                        

                    $startserialnum=$set['Coinset']['startserialnum'];

                    $endserialnum=$set['Coinset']['endserialnum'];                    



                    if($coinset_value1 >= $startserialnum && $coinset_value1 <= $endserialnum) 

                    {

                        $isvalid=true;    break;                    

                    }



                }

            }    

            return $isvalid;



        }

        /*

        * Function name   : selectstate()

        * Description : This function used to display state name by ajax

        * Created On      : 18-02-11 (04:20am)

        *

        */     

        function selectstate($countryid='',$modelname=''){

            

            $this->layout = false;

            $this->set("selectedstate",'');

            $this->statedroupdown($countryid);

            $this->set("modelname",$modelname);

        }



        

            /*

     * Function name   : selectstate()

     * Description : This function used to display state name by ajax

         * Created On      : 18-02-11 (04:20am)

         *

     */     

function selectstateoptions($countryid='',$modelname=''){        

        $this->layout = false;

        $this->set("selectedstate",'');

        $this->statedroupdown($countryid);

        $this->set("modelname",$modelname);

}





        function findselectstate($countryid='',$modelname=''){

            $this->layout = false;

            $this->set("selectedstate",'');

            $this->statedroupdown($countryid);

            $this->set("modelname",$modelname);

        }

        function newselectstate($countryid='',$modelname=''){

            //echo $countryid;echo $modelname;die;

            $this->layout = false;

            $this->set("selectedstate",'');

            $this->statedroupdown($countryid);

            $this->set("modelname",$modelname);

        }





        /*******************************************************************

        * Function Name: ajaxmorecomment

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This is ajax function for displaying more comments

        * Created By      : SDN

        * Created: 25 Feb, 2011

        ********************************************************************/

        function ajaxmorecomment($limit,$coinholderid) {





            $this->layout = false;

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);

            $this->set('project_id',$project_id);

            $this->set('user_id',$userid);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);        



            $condition = "CoinsHolder.id  = '".$coinholderid."' and  CoinsHolder.project_id='".$project_id."'  and CoinsHolder.delete_status='0'";



            $coinholder_details = $this->CoinsHolder->find('first', array('conditions' => $condition));



            $coinholder_ids= $this->CoinsHolder->find('all', array('conditions' => "CoinsHolder.serialnum  ='".$coinholder_details['CoinsHolder']['serialnum']."'",'fields'=>'id'));





            if(is_array($coinholder_ids) && !empty($coinholder_ids)) {

                $coinholder_ids1="";

                foreach ($coinholder_ids as $coinholder_id){

                    if($coinholder_ids1=="")

                        $coinholder_ids1=$coinholder_id['CoinsHolder']['id'];

                    else

                        $coinholder_ids1.=",".$coinholder_id['CoinsHolder']['id'];

                }



                $condition1="Comment.project_id='".$project_id."' and Comment.coin_holder_id in (".$coinholder_ids1.")  and Comment.offensive='0'  and Comment.active_status='1' and Comment.delete_status='0'";



                $field      = '';    



                $order      = array('Comment.created DESC');

                $comments = $this->Comment->find('all',array('conditions' => $condition1, 'fields' => $field, 'order' =>$order, 'limit' =>$limit));



                $this->set('comments',$comments);    





            }    



        }

        function commenttypepurpose($comment_type_id){

            $this->layout = false;

            $commenttypedata  =  $this->CommentType->find("first", array('conditions' => "CommentType.id=".$comment_type_id));     

            $this->set('commenttypepurpose',$commenttypedata['CommentType']['comment_type_purpose']);

        }

        /*******************************************************************

        * Function Name: report_popup

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This is ajax function for displaying more comments

        * Created By      : SDN

        * Created: 25 Feb, 2011

        ********************************************************************/

        function report_popup($coin_holder_id,$comment_id,$user_id,$project_id) {

            //Configure::write('debug', 2);        

            $this->set('user_id',$user_id);

            $this->set('project_id',$project_id);

            $this->set('comment_id',$comment_id);

            $this->set('coin_holder_id',$coin_holder_id);

            $this->set('project_name',$project_name);

            $this->layout = "";





        }

        function report_popup1($coin_holder_id,$comment_id,$user_id,$project_id,$comments) {



            $this->layout = "";



            if($comments!=""){

                /*$user_id=$this->data['Company']['user_id'];

                $project_id=$this->data['Company']['project_id'];

                $comment_id=$this->data['Company']['comment_id'];

                */

                $projectDetails=$this->getprojectdetails($project_id);    

                $this->set('project',$projectDetails);    



                $condition = " EmailTemplate.email_template_name= 'OFFENSIVE COMMENT REPORTED' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";



                $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                if(is_array($mailMessage) && !empty($mailMessage)) 

                {

                    $holder_details = $this->Holder->find('first',array('conditions' => " Holder.user_id='".$user_id."'"));

                    $comment_details = $this->Comment->find('first',array('conditions' => " Comment.id='".$comment_id."'"));

                    $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$comment_details['Comment']['coin_holder_id']."'"));

                    /**

                    * OLD CODE 

                    *  if(!empty($projectDetails['Project']['url']))

                        $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                    else

                        $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                       if(!empty($projectDetails['Project']['system_name']))

                        $pt_new_name=$projectDetails['Project']['system_name'];

                    else

                        $pt_new_name=$projectDetails['Project']['project_name'];  

                    $keyStringArray = array('[[USER_NAME]]'=>$holder_details['Holder']['firstname']." ".$holder_details['Holder']['lastnameshow'],

                    '[[COMMENT]]'=>$comment_details['Comment']['comment'],

                    '[[MESSAGE]]'=>$comments,

                    '[[COIN_SERIAL]]'=>$coinholder_details['CoinsHolder']['serialnum'],

                    '[[PROJECT_NAME]]'=>$pt_new_name,

                    '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                     if(!empty($keyStringArray)){

                        foreach($keyStringArray as $key=>$val){

                            $mailBody = str_replace($key,$val,$mailBody);

                        }

                    }       

                    * 

                    */

                    $subject  = $mailMessage['EmailTemplate']['subject'];              

                    $from = $holder_details['Holder']['email'];

                    $fromname = $holder_details['Holder']['screenname'];

                    $to = $mailMessage['EmailTemplate']['sender'];

                    $mailBody=$mailMessage['EmailTemplate']['content'];

                    /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button    **/  

                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                    $condition = "id='1'";

                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                    $mailBody.=$mailfooter;

                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                    

                    

                    // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                   /**

                    * New Email Temp replacement code for data Elements 

                    */

                     //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                        $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                     //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                        $dataEleValuesArray[DATA_ELEMENT_COMMENT]= $comment_details['Comment']['comment'];

                        $dataEleValuesArray[DATA_ELEMENT_MESSAGE]= $comments;

                        $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                     //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                        $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                        $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                     $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody, $from,$mailMessage['EmailTemplate']['send_cc_email_to']);

                     $this->set('result',$result);

                }        

            }

        }

        /*******************************************************************

        * Function Name: subcomment

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This is ajax function for displaying more comments

        * Created By      : SDN

        * Created: 25 Feb, 2011

        ********************************************************************/

        function subcomment($comment_id,$coin_holder_id) {

            //Configure::write('debug', 2);        



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");



            $this->set('user_id',$user_id);

            $this->set('project_id',$project_id);

            $this->set('comment_id',$comment_id);

            $this->set('coin_holder_id',$coin_holder_id);

            $this->set('project_name',$project_name);

            $this->layout = "";





        }

        /*******************************************************************

        * Function Name: subcomment1

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This is ajax function for displaying more comments

        * Created By      : SDN

        * Created: 25 Feb, 2011

        ********************************************************************/

        function subcomment1($comment_id,$coin_holder_id,$comment) {

            $this->layout = "";

            $this->autoRender = false;

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");

            $projectDetails=$this->getprojectdetails($project_id);    

            $condition = "user_id = '".$userid."' and  project_id='".$project_id."' and delete_status='0'";

            $holder = $this->Holder->find('first', array('conditions' => $condition));



            $this->data['Subcomment']['project_id']=$project_id;

            $this->data['Subcomment']['active_status']='1';

            $this->data['Subcomment']['comment_id']=$comment_id;    

            $this->data['Subcomment']['coin_holder_id']=$coin_holder_id;        

            $this->data['Subcomment']['holder_id']=$holder['Holder']['id'];

            $this->data['Subcomment']['comment']=$comment;        

            $this->Subcomment->save($this->data['Subcomment']);

            // echo $comment."*".$coin_holder_id; exit;

            $newid=$this->Subcomment->getLastInsertId();

            /*



            Dear [[USER_NAME]],



            We would like to thank for replying to the post:



            [[COMMENT]]



            With your Comment [[Reply_Comment]]



            on [[Comment_Date]].



            Thanks,



            The [[PROJECT_NAME]] Team

            [[PROJECT_HOMEPAGE_URL]]        











            */    

            if(!empty($this->data['Subcomment']['comment_id']))    

                $commentdata=$this->Comment->find('first',array('conditions'=>"Comment.id='".$this->data['Subcomment']['comment_id']."'"));

            if(!empty($this->data['Subcomment']['holder_id']))    

                $holder_details=$this->Holder->find('first',array('conditions'=>"Holder.id='".$this->data['Subcomment']['holder_id']."'"));







            $condition = " EmailTemplate.email_template_name= 'Email to Members Who Reply to a Comment' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

            $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



            if(is_array($mailMessage) && !empty($mailMessage)) 

            {



                $coinholder_details = $this->CoinsHolder->find('first',array('conditions' => " CoinsHolder.id='".$this->data['Coinset']['coin_holder_id']."'"));

                $replydata=$this->Subcomment->findByid($newid);

                $usdate=$this->usdateformat1($replydata['Subcomment']['created'],"time");

                /**

                * OLD Code

                *  if(!empty($projectDetails['Project']['url']))

                    $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                else

                    $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                * if(!empty($projectDetails['Project']['system_name']))

                    $pt_new_name=$projectDetails['Project']['system_name'];

                else

                    $pt_new_name=$projectDetails['Project']['project_name'];

                $keyStringArray = array('[[EMAIL_ADDRESS]]'=>$holder_details['Holder']['email']." ".$holder_details['Holder']['lastnameshow'],                        

                '[[COMMENT]]'=>$commentdata['Comment']['comment'],

                '[[Reply_Comment]]'=>$replydata['Subcomment']['comment'],

                '[[PROJECT_NAME]]'=>$pt_new_name,

                '[[COMMENT_POST_DATE]]'=>$usdate,

                '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                 if(!empty($keyStringArray)){

                    foreach($keyStringArray as $key=>$val){

                        $mailBody = str_replace($key,$val,$mailBody);

                    }

                }

                    

                */

               $subject  = $mailMessage['EmailTemplate']['subject'];              

               $from = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromemail'];

               $fromname = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromname']; 

               $mailBody=$mailMessage['EmailTemplate']['content'];

               /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/

                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                $condition = "id='1'";

                $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                $mailBody.=$mailfooter;

                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                

                

                // Set path to inserted image 

                      $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                $to = $holder_details['Holder']['email'];        

                 /**

                    * New Email Temp replacement code for data Elements 

                    */

                     //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                        $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                     //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                        $dataEleValuesArray[DATA_ELEMENT_COMMENT]= $commentdata['Comment']['comment'];

                        $dataEleValuesArray[DATA_ELEMENT_REPLY]= $replydata['Subcomment']['comment'];

                        $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                     //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                        $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                        $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);



                $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);





            }

            //to inform the coin holderabout the reply

          

            /*Dear  [[COIN_HOLDER_NAME]],



            This  is to inform you that [[USER_NAME]]  has replieed 



            [[Reply_Comment]]



            on your comment



            [[COMMENT]]  for the coin  [[COIN_SERIAL]]



            on  [[Comment_Date]].



            Thanks,



            The [[PROJECT_NAME]] Team

            [[PROJECT_HOMEPAGE_URL]]*/

           

            if(!empty($this->data['Subcomment']['coin_holder_id']))



                $coinholderdata=$this->CoinsHolder->find('first',array('conditions'=>"CoinsHolder.id='".$this->data['Subcomment']['coin_holder_id']."'"));

            if(!empty($coinholderdata))    

                $holderdetails_of_coin=$this->Holder->find('first',array('conditions'=>"Holder.id='".$coinholderdata['CoinsHolder']['holder_id']."'"));







            $conditiontoholder = " EmailTemplate.email_template_name= 'A REPLY TO YOUR COMMENT' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

            $mailMessagetoholder = $this->EmailTemplate->find('first',array('conditions' => $conditiontoholder));



            if(is_array($mailMessagetoholder) && !empty($mailMessagetoholder)) 

            {

                $replydata=$this->Subcomment->findByid($newid);

                /**

                * OLD CODE

                *   if(!empty($projectDetails['Project']['url']))

                    $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                else

                    $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                 if(!empty($projectDetails['Project']['system_name']))

                    $pt_new_name=$projectDetails['Project']['system_name'];

                else

                    $pt_new_name=$projectDetails['Project']['project_name']; 

                   $keyStringArray = array('[[EMAIL_ADDRESS]]'=>$holderdetails_of_coin['Holder']['email'],

                '[[User_Name]]'=>$holder_details['Holder']['firstname']." ".$holder_details['Holder']['lastnameshow'],                        

                '[[COMMENT]]'=>$commentdata['Comment']['comment'],

                '[[COIN_SERIAL]]'=>$coinholderdata['CoinsHolder']['serialnum'],

                '[[Reply_Comment]]'=>$replydata['Subcomment']['comment'],

                '[[PROJECT_NAME]]'=>$pt_new_name,

                '[[COMMENT_POST_DATE]]'=>$usdate,

                '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                if(!empty($keyStringArray)){

                    foreach($keyStringArray as $key=>$val){

                        $mailBody = str_replace($key,$val,$mailBody);

                    }

                }        

                * 

                */

                $subject  = $mailMessagetoholder['EmailTemplate']['subject'];              

                $from = $mailMessagetoholder['EmailTemplate']['sender'];   //$projectDetails['Project']['fromemail'];

                $fromname = $mailMessagetoholder['EmailTemplate']['sender'];  //$projectDetails['Project']['fromname'];

                $mailBody=$mailMessagetoholder['EmailTemplate']['content'];    

                

                /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/  

                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                $condition = "id='1'";

                $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                $mailBody.=$mailfooter;

                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                

                

                // Set path to inserted image 

                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                   

                $to = $holderdetails_of_coin['Holder']['email'];        

                /**

                * New Email Temp replacement code for data Elements 

                */

                 //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                 //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                    $dataEleValuesArray[DATA_ELEMENT_COMMENT]= $commentdata['Comment']['comment'];   

                    $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $coinholderdata['CoinsHolder']['serialnum'];   

                    $dataEleValuesArray[DATA_ELEMENT_REPLY]= $replydata['Subcomment']['comment'];

                    $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                 //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                    $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                    $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);



                $result2 = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessagetoholder['EmailTemplate']['send_cc_email_to']);













            }



        }

        /*******************************************************************

        * Function Name: showcomment

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This is ajax function for displaying more comments

        * Created By      : SDN

        * Created: 25 Feb, 2011

        ********************************************************************/

        function showcomment($comment_id) {

            $this->layout = "";

            $condition = "id = '".$comment_id."'";

            $comment = $this->Comment->find('first', array('conditions' => $condition));

            $this->set('comment',$comment);



        }

        /*******************************************************************

        * Function Name: show_request

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This is ajax function for displaying more comments

        * Created By      : SDN

        * Created: 25 Feb, 2011

        ********************************************************************/

        function show_request($holder_id,$project_id,$coinserial) {

            //Configure::write('debug', 2);        

            $this->layout = "";

            $condition1 = "CoinTransferRequest.serialnum  = '".$coinserial."' and  CoinTransferRequest.project_id='".$project_id."' and  CoinTransferRequest.to_holder_id='".$holder_id."'  and CoinTransferRequest.request_status='0'  and CoinTransferRequest.active_status='1' and CoinTransferRequest.delete_status='0'";



            $this->CoinTransferRequest->bindModel(array('hasOne' => array('Holder' => array('foreignKey' => false,'conditions' => array('Holder.id = CoinTransferRequest.from_holder_id' )))));



            $cointranferrequest = $this->CoinTransferRequest->find('all', array('conditions' => $condition1));

            $this->set('cointranferrequest',$cointranferrequest);    



        }

        /*******************************************************************

        * Function Name: acceptrequest

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This is ajax function for accepting request

        * Created By      : SDN

        * Created: 5 Mar, 2011

        ********************************************************************/

        function acceptrequest($id){





            $project_id=$this->Session->read("projectwebsite_id");    

            $this->layout = "";

            $this->data['CoinTransferRequest']['id']=$id;        

            $this->data['CoinTransferRequest']['request_status']='1';        

            $this->CoinTransferRequest->save($this->data['CoinTransferRequest']);            

            $cointranferrequest = $this->CoinTransferRequest->find('first', array('conditions' => "CoinTransferRequest.id  = '".$id."'"));        



            $this->data['CoinsHolder']['project_id']=$cointranferrequest['CoinTransferRequest']['project_id'];

            $this->data['CoinsHolder']['coinset_id']=$cointranferrequest['CoinTransferRequest']['coinset_id'];        

            $this->data['CoinsHolder']['holder_id']=$cointranferrequest['CoinTransferRequest']['from_holder_id'];

            $this->data['CoinsHolder']['serialnum']=$cointranferrequest['CoinTransferRequest']['serialnum'];

            $this->data['CoinsHolder']['is_current_holder']='1';

            $this->CoinsHolder->save($this->data['CoinsHolder']);   

            

            

        // Update Holder member type as 'Holder' after registing coin                  

            $holderarr['Holder']['id']=$cointranferrequest['CoinTransferRequest']['from_holder_id']; 

             App::import("Model", "MemberType");  

            $this->MemberType =  & new MemberType();

            $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_HOLDER, $project_id);

            $holderarr['Holder']['member_type']= $member_type['MemberType']['id'];

            $this->Holder->save($holderarr);   



            $condition2 = "CoinsHolder.holder_id   = '".$cointranferrequest['CoinTransferRequest']['to_holder_id']."' and CoinsHolder.serialnum = '".$cointranferrequest['CoinTransferRequest']['serialnum']."' " ;

            $oldcoinholder = $this->CoinsHolder->find('first', array('conditions' => $condition2));



            $this->data['CoinsHolder1']['id']=$oldcoinholder['CoinsHolder']['id'];

            $this->data['CoinsHolder1']['is_current_holder']='0';

            $this->CoinsHolder->save($this->data['CoinsHolder1']);    



            $old_holder_details = $this->Holder->find('first', array('conditions' => 'Holder.id='.$cointranferrequest['CoinTransferRequest']['to_holder_id']));    



            $holder_details = $this->Holder->find('first', array('conditions' => 'Holder.id='.$cointranferrequest['CoinTransferRequest']['from_holder_id']));            



            $condition = " EmailTemplate.email_template_name= 'COIN TRANSFER REQUEST ACCEPTED' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

            $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



            if(is_array($mailMessage) && !empty($mailMessage)) 

            {

                if(!empty($projectDetails['Project']['url']))

                    $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                else

                    $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];





                if(!empty($projectDetails['Project']['system_name']))

                    $pt_new_name=$projectDetails['Project']['system_name'];

                else

                    $pt_new_name=$projectDetails['Project']['project_name'];





                $keyStringArray = array('[[TO_NAME]]'=> $holder_details['Holder']['firstname'],

                '[[FROM_NAME]]'=> $old_holder_details['Holder']['firstname']." ".$old_holder_details['Holder']['lastnameshow'],

                '[[COIN_SERIAL]]'=>$cointranferrequest['CoinTransferRequest']['serialnum'],

                '[[PROJECT_NAME]]'=>$pt_new_name,

                '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);



                $mailBody=$mailMessage['EmailTemplate']['content'];

                 /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button              **/ 

                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                $condition = "id='1'";

                $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                $mailBody.=$mailfooter;

                ///////////////////////////////// append mail footer set by super admin /////////////////////////   

               

                 

                // Set path to inserted image 

                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                            

                if(!empty($keyStringArray)){

                    foreach($keyStringArray as $key=>$val){

                        $mailBody = str_replace($key,$val,$mailBody);

                    }

                }



                $subject  = $mailMessage['EmailTemplate']['subject'];              

                $from =  $mailMessage['EmailTemplate']['sender'];    

                $to =$holder_details['Holder']['email'];

                $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody, $from, $mailMessage['EmailTemplate']['send_cc_email_to']);

            }



        }

        /*******************************************************************

        * Function Name: denyrequest

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This is ajax function for deny request

        * Created By      : SDN

        * Created: 5 Mar, 2011

        ********************************************************************/

        function denyrequest($id){

            $this->layout = "";

            $project_id=$this->Session->read("projectwebsite_id");    

            $this->data['CoinTransferRequest']['id']=$id;        

            $this->data['CoinTransferRequest']['active_status']='0';        

            $this->CoinTransferRequest->save($this->data['CoinTransferRequest']);    



            $cointranferrequest = $this->CoinTransferRequest->find('first', array('conditions' => "CoinTransferRequest.id  = '".$id."'"));    

            $old_holder_details = $this->Holder->find('first', array('conditions' => 'Holder.id='.$cointranferrequest['CoinTransferRequest']['to_holder_id']));    



            $holder_details = $this->Holder->find('first', array('conditions' => 'Holder.id='.$cointranferrequest['CoinTransferRequest']['from_holder_id']));



            $condition = " EmailTemplate.email_template_name= 'COIN TRANSFER REQUEST DENIED' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

            $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



            if(is_array($mailMessage) && !empty($mailMessage)) 

            {

                if(!empty($projectDetails['Project']['url']))

                    $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                else

                    $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];





                if(!empty($projectDetails['Project']['system_name']))

                    $pt_new_name=$projectDetails['Project']['system_name'];

                else

                    $pt_new_name=$projectDetails['Project']['project_name'];





                $keyStringArray = array('[[TO_NAME]]'=> $holder_details['Holder']['firstname'],

                '[[FROM_NAME]]'=> $old_holder_details['Holder']['firstname']." ".$old_holder_details['Holder']['lastnameshow'],

                '[[COIN_SERIAL]]'=>$cointranferrequest['CoinTransferRequest']['serialnum'],

                '[[PROJECT_NAME]]'=>$pt_new_name,

                '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);



                $mailBody=$mailMessage['EmailTemplate']['content'];

                

                /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button        **/   

                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                $condition = "id='1'";

                $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                $mailBody.=$mailfooter;

                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                

                

                // Set path to inserted image 

                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                

                if(!empty($keyStringArray)){

                    foreach($keyStringArray as $key=>$val){

                        $mailBody = str_replace($key,$val,$mailBody);

                    }

                }



                $subject  = $mailMessage['EmailTemplate']['subject'];              

                $from =  $mailMessage['EmailTemplate']['sender'];    

                $to =$holder_details['Holder']['email'];



                $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody, $from, $mailMessage['EmailTemplate']['send_cc_email_to']);

            }

        }



        function test(){

            $this->layout= 'layout';



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);    



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            if(isset($this->data['Company'])){



                $status="";

                if($this->verify(trim($this->data['Company']['coinset']))==true)

                {                



                    $projectDetails = $this->Project->find("Project.id='".$project_id."'",NULL,NULL,NULL,NULL,1);    



                    $coinholder_ids= $this->CoinsHolder->find('all', array('conditions' => "CoinsHolder.serialnum  ='".trim($this->data['Company']['coinset'])."'",'fields'=>'id'));







                    if(is_array($coinholder_ids) && !empty($coinholder_ids)) {

                        $coin_holder_ids1="";

                        foreach ($coinholder_ids as $coinholder_id){

                            if($coin_holder_ids1=="")

                                $coin_holder_ids1=$coinholder_id['CoinsHolder']['id'];

                            else

                                $coin_holder_ids1.=",".$coinholder_id['CoinsHolder']['id'];

                        }        



                        $condition1="Comment.project_id='".$project_id."' and Comment.coin_holder_id in (".$coin_holder_ids1.") and Comment.offensive='0'  and  Comment.active_status='1' and Comment.delete_status='0'";





                        $this->Comment->bindModel(array('hasOne' => array('Holder' => array('foreignKey' => false,'conditions' => array('Holder.id = Comment.holder_id' )))));



                        $field='';                



                        $order      = array('Comment.created DESC');

                        $holderdetails = $this->Comment->find('all',array('conditions' => $condition1, 'fields' => 'DISTINCT Comment.holder_id,Comment.comment,Holder.firstname,Holder.zipcode,Holder.country,Holder.state,Holder.city,Holder.address1', 'order' =>$order));    



                        //pr($holderdetails);

                        $this->set('holderdetails',$holderdetails);



                        $this->set('coinserial',trim($this->data['Company']['coinset']));

                    }

                    else{

                        $this->redirect('/'.$project_name);

                    }



                }

                else

                {

                    $this->redirect('/'.$project_name);

                    $status="Notverified";

                }



                $this->set('status',$status);

            }else{

                //$this->redirect('/'.$project_name);

            }

        }

        function show_terms($type){        

            $this->layout= '';

            $project_id=$this->Session->read("projectwebsite_id");  

            $project_name=$this->Session->read("projectwebsite_name");                    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);

            $projectDetails=$this->getprojectdetails($project_id);  

            $this->set('project',$projectDetails);  

            //$project_name=$this->Session->read("projectwebsite_name");

            //if(empty($project_name)) $this->redirect('/companies/session_expired');            

            //$this->set('project_name',$project_name);



            //$project_id is set 0 for the policy and terms of image coins sign up only

            //$project_id = 0;

            $termDetails = $this->Term->find("Term.project_id='".$project_id."'",NULL,NULL,NULL,NULL,1);



            //project details

            if(is_array($termDetails) && !empty($termDetails)) 

            {



                if($type=="Terms"){

                    $politytitle=    $termDetails['Term']['termstitle'];

                    $content=$termDetails['Term']['termscontent'];

                }

                if($type=="Policy"){

                    $politytitle=    $termDetails['Term']['privacytitle'];

                    $content=$termDetails['Term']['privacycontent'];

                }

            }



            $this->set('politytitle',$politytitle);

            $this->set('content',$content);

        }    

        /*

        * Function name   : getallcontactbyprojectid()

        * Description : This function used to collect all emailid from holders & company contacts

        * Created On      : 25-02-11 (02:18am)

        *

        */     

        function getallcontactbyprojectid($projectid){ 



            $contactname="";



            $conditions = "Contact.project_id = '".$projectid."' AND  Contact.delete_status = '0'";



            $emailDropDown =  $this->Contact->find("all",array('conditions'=>$conditions,'order'=>'Contact.email ASC'),array('fields'=>array("DISTINCT Contact.email")));

            $emailaddresses = Set::combine($emailDropDown, '{n}.Contact.email', '{n}.Contact.email');



            $conditions1 = "Holder.project_id = '".$projectid."' AND  Holder.delete_status = '0'";



            $emailDropDownholder =  $this->Holder->find("all",array('conditions'=>$conditions1,'order'=>'Holder.email ASC'),array('fields'=>array("DISTINCT Holder.email")));

            $emailaddresses1 = Set::combine($emailDropDownholder, '{n}.Holder.email', '{n}.Holder.email');



            return Set::merge($emailaddresses, $emailaddresses1);



            exit;

        }    



        function getcompaniesbyprojectid($projectid,$displaytype=''){

           ##display companys in a company box

            ##import Company  model for processing

            App::import("Model", "Company");

            $this->Company =   & new Company();    

            //company box

            $companyname='';



            $condition2 = "project_id = '".$projectid."' AND  delete_status = '0'";

            $cpdata = $this->Company->find('all',array("conditions"=>$condition2));

            if($cpdata){

                if($displaytype){

                    $companyname = Set::combine($cpdata, '{n}.Company.id', '{n}.Company.company_name');



                }else{

                    foreach ($cpdata as $eachcompany){

                        $companyname = $eachcompany['Company']['company_name'].','.$companyname;

                    }

                    $companyname = substr($companyname,0,-1);

                }

            }



            return $companyname;

        }



        function getcontactsbyprojectid($projectid,$displaytype=''){ 



            ##import Contacts  model for processing

            App::import("Model", "Contact");

            $this->Contact =   & new Contact();    

            $contactname="";

            //contact box

            ##relation with company

            $this->Contact->bindModel(array('belongsTo'=>array(

            'ContactType'=>array(

            'foreignKey'=>false,

            'conditions'=>'Contact.contact_type_id = ContactType.id'

            ),'Company'=>array(

            'foreignKey'=>false,

            'conditions'=>'Contact.company_id = Company.id'

            )

            )));



            $condition2 = "Contact.project_id = '".$projectid."' AND  Contact.delete_status = '0'";

            $condata = $this->Contact->find('all',array("conditions"=>$condition2,'order'=>'Contact.id desc'));

            if($condata){

                if($displaytype){

                    $contactname = Set::combine($condata, '{n}.Contact.id', array('%s %s','{n}.Contact.firstname', '{n}.Contact.lastname'), '{n}.Company.company_name'); 



                }else{

                    foreach ($condata as $eachcontact){

                        $contactname = $eachcontact['Contact']['firstname'].' '.$eachcontact['Contact']['lastname'].' ['.$eachcontact['Company']['company_name'].'] ('.$eachcontact['ContactType']['contact_type_name'].'),'.$contactname;

                    }

                    $contactname = substr($contactname,0,-1);

                }

            }



            return $contactname;

            exit;

        }



        /*

        * Function name   : sendtempmail()

        * Description : This function used to send mail for related projects

        * Created On      : 23-02-11 (01:35am)

        *

        */ 

        function sendtempmail($tempid=''){



            ##check user session live or not

            $this->session_check_user();  

            $this->layout= 'new_sponsor_layout';    

            //for active menu display

            $this->set('page_url','editsponsordesc');

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            App::import("Model", "Project");

            $this->Project =   & new Project();

            $condition = "id=$project_id";

            $dt=$this->Project->find('all',array("conditions"=>$condition,'fields'=>array('fromemail')));

            $this->set("dt",$dt);





            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '12'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition    

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set("current_domain",$current_domain);

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;



            $tomail = "";

            $checkempty =true;

            if(!empty($this->data)){



                if($this->data['EmailTemplate']['subject']=="" || $this->data['EmailTemplate']['content']=="" || $this->data['EmailTemplate']['toid']=="" || $this->data['EmailTemplate']['fromid']==""){

                    $this->Session->setFlash("All the fields are mandatory.",'default',array('class' => 'msgTXt'));

                    $checkempty = false;

                }

                if($checkempty== true){   

                    $sendflag = true;

                    $errorwith="";

                    $mailtempid = $this->data['EmailTemplate']['id'];    

                    $mailsubject = $this->data['EmailTemplate']['subject'];    

                    $mailcontent = $this->data['EmailTemplate']['content'];

                    $frommail = $this->data['EmailTemplate']['fromid'];  

                    

                    /**

                    * STEP : Email Sent By Send mail , save it as Executed Task with 'Sedn Mail' as task name in task history table

                    */

                    App::import("Model", "CommunicationTask");

                    $this->CommunicationTask =   & new CommunicationTask();

                    $taskHistoryId=$this->CommunicationTask->saveSendMailTask($this->data['EmailTemplate'], $projectid);   

                    

                   // $mailsubject = $this->data['EmailTemplate']['subject'];

                   // $mailcontent = str_replace("../img","http://".$current_domain."/img",$this->data['EmailTemplate']['content']);

                    if($taskHistoryId > 0){ 

                    

                             /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/   

                                ///////////////////////////////// append mail footer set by super admin -U /////////////////////////

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    $mailcontent.=$mailfooter;

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                        

                        

                          

                             

                            // Set path to inserted image      

                            $mailcontent=$this->replaceImgPathInEmailContent($mailcontent);

                              //STEP : GET EMAIL TEMP DETAILS

                              $conditiontemp = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0'  AND EmailTemplate.active_status='1' AND EmailTemplate.id = '$mailtempid'";

                              $mailMessage = $this->EmailTemplate->find('first',array("conditions"=>$conditiontemp));

                         

                            $task_email_sent_count=0;

                            $task_email_senterror_count=0;

                            $fromname = $projectDetails['Project']['fromname'];  

                            App::import("Model", "CommunicationTaskExecutionReport");    

                            $this->CommunicationTaskExecutionReport =   & new CommunicationTaskExecutionReport();                        

                            $tomail = $this->data['EmailTemplate']['toid'];

                            $toids = explode(",",$tomail);

                            

                            foreach($toids as $eachid){

                                 /**

                                 * New Email Temp replacement code for data Elements 

                                 */

                                 //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $eachid);

                                 //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                  //   $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                 //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                    $mailsubject1=$this->EmailTemplates->insertDataElementValuesToContent($mailsubject);

                                    $mailcontent1=$this->EmailTemplates->insertDataElementValuesToContent($mailcontent);

                            

                                if(!$this->Sendemail->sendMailContentWithCC($eachid,$frommail,$mailsubject1,$mailcontent1, $fromname, $mailMessage['EmailTemplate']['send_cc_email_to'])){

                                    $sendflag = false;

                                    $errorwith = $eachid.','.$errorwith;

                                    $task_email_senterror_count++;

                                    $email_status="not sent";

                                }else{

                                     $task_email_sent_count++;

                                     $email_status="sent";

                                }

                                $errorwith = substr($errorwith,0,-1);

                                     

                                     //STEP : toemail holder details 

                                  $conditionhold = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND Holder.email = '$eachid'";

                                 $hldarr = $this->Holder->find('first',array("conditions"=>$conditionhold));



                                

                                   // STEP :  ADD TASK SENT EMAIL DETAILS TO COMMUNICATION_TASK_SENT_REPORT TABLE  

                                   $taskReport['CommunicationTaskExecutionReport']['id']='';

                                   $taskReport['CommunicationTaskExecutionReport']['task_id']='0';

                                   $taskReport['CommunicationTaskExecutionReport']['task_execution_id']=$taskHistoryId;

                                   $taskReport['CommunicationTaskExecutionReport']['project_id']=$projectid;

                                   $taskReport['CommunicationTaskExecutionReport']['email_template_id']=$mailtempid;

                                   $taskReport['CommunicationTaskExecutionReport']['sent_to_holderid']=$hldarr['Holder']['id'];

                                   $taskReport['CommunicationTaskExecutionReport']['sent_to_email']=$eachid;

                                   $taskReport['CommunicationTaskExecutionReport']['sent_to_firstname']=$hldarr['Holder']['firstname'];

                                   $taskReport['CommunicationTaskExecutionReport']['sent_to_lastname']=$hldarr['Holder']['lastnameshow'];

                                   $taskReport['CommunicationTaskExecutionReport']['sent_to_company']='';

                                   $taskReport['CommunicationTaskExecutionReport']['sent_to_matching']=$sent_to_matching;

                                   $taskReport['CommunicationTaskExecutionReport']['email_subject']=$mailsubject1;

                                   $taskReport['CommunicationTaskExecutionReport']['email_content']=$mailcontent1;

                                   $taskReport['CommunicationTaskExecutionReport']['email_from']=$frommail;

                                   $taskReport['CommunicationTaskExecutionReport']['email_status']=$email_status;

                                   $this->CommunicationTaskExecutionReport->save($taskReport['CommunicationTaskExecutionReport']);    

                            }

                            

                            // STEP : UPDATE TASK History ARRAY

                            App::import("Model", "CommunicationTaskHistory");

                            $this->CommunicationTaskHistory =   & new CommunicationTaskHistory();   

                            $taskHistoryArray['id']=$taskHistoryId;

                            $taskHistoryArray['task_sent_count']=$task_email_sent_count;

                            $taskHistoryArray['task_not_sent_count']=$task_email_senterror_count;

                            $this->CommunicationTaskHistory->save($taskHistoryArray);

                        

                            if($sendflag==true){

                                $this->Session->setFlash('Mail sent successfully.','default', array('class' => 'successmsg'));

                            }else{

                                $this->Session->setFlash("Error in Mail sending with email id $errorwith. Please try again",'default',array('class' => 'errormsg'));

                            }



                            ##setting action for save & apply        

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect('/companies/sendtempmail');

                            }else{

                                $this->redirect("/companies/sendtempmail/$tempid");

                            }

                            

                    }else{

                        $this->Session->setFlash("Error in Send Mail processing. Please try again",'default',array('class' => 'msgTXt'));

                   }

                }



            }



            if($tempid || isset($this->data['EmailTemplate']['id'])){

                if($this->data['EmailTemplate']['id']){

                    $tempid = $this->data['EmailTemplate']['id'];

                }

                $this->EmailTemplate->id = $tempid;

                $this->data = $this->EmailTemplate->read();



            }



            $chekret = $this->projectdetailbyid($projectid);



            $this->set('frmid',$chekret[0]['Sponsor']['email']);

            $this->set('toid',$tomail);



            //Get Company Type Drop Down

           $companytypedropdown=$this->companytypedropdown($projectid); 

			$this->set('companytypedropdown',$companytypedropdown);

            //Get Company Type Drop Down   

            $contacttypedropdown=$this->contacttypedropdown($projectid);          

			$this->set('contacttypedropdown',$contacttypedropdown);



            $this->set('projectid',$projectid);

            $this->customtemplatelisting($projectid);

             // Set memeber types

            $this->set('member_type', $this->getMemberTypesListByProject($projectid, true));



        }



        /*

        * Function name   : get_company_contacts_by_ajax()

        * Description : This function used to comapny contact details by projecttype id , company type id and contact type id

        * Created On      : 25-8-2011 - QUAD

        *

        */     

        

       function update_event_info(){



            #get record from global funtion for ajax calling

            $this->layout="ajax";

            ##check admin session live or not

            //$this->session_check_admin();

            

            $rec_eventid=$_POST['rec_eventid'];

            $event_id=$_POST['event_id'];

            $date=$_POST['date'];

            

            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            

            if($projectid)

            {

                ##import blog  model for processing

                App::import("Model", "Event");

                $this->Event =  & new Event();  

                

                 App::import("Model", "EventInvitation");

                 $this->EventInvitation =  & new EventInvitation(); 

                 

                //$today=date("Y-m-d");

                     

                $condition = "RecurringEvent.id ='".$rec_eventid."' and RecurringEvent.project_id ='".$projectid."'"; // and RecurringEvent.start_date='".$date."'";                 

                $recur_event_data= $this->RecurringEvent->find('first',array("conditions"=>$condition));

                $this->set('recur_event_data',$recur_event_data); 

                

                

                //$condition= "Event.id = '".$recur_event_data['RecurringEvent']['event_id']."'";

                //$main_eventdata = $this->Event->find('first',array("conditions"=>$condition));

                

                if($recur_event_data['RecurringEvent']['show_attendees_start'] < $recur_event_data['RecurringEvent']['max_attendees_start'])

                {

                    $max_attendees_start=$recur_event_data['RecurringEvent']['max_attendees_start'];

                }

                else

                    $max_attendees_start=$recur_event_data['RecurringEvent']['show_attendees_start'];

                    

                $this->set('max_attendees_start',$max_attendees_start); 

                

                

            }



            

        }

        

         function get_members_details_by_ajax($member_type=0){



            #get record from global funtion for ajax calling

            $this->layout="ajax";

            ##check admin session live or not

            //$this->session_check_admin();

            

            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    





            if($projectid)

            {



               /* if($member_type=="coin_holders")

                {

                    $coin_holders=$this->Holder->query("select * from holders as Holder where project_id=".$projectid." and active_status='1' and delete_status='0' and id In(select holder_id from coins_holders where project_id=".$projectid." and active_status='1' and delete_status='0')");

                    $this->set('userdetails',$coin_holders);     

                }

                else

                if($member_type=="non_coin_holders")

                {

                    $coin_non_holders=$this->Holder->query("select * from holders as Holder where project_id=".$projectid." and active_status='1' and delete_status='0' and id NOT In(select holder_id from coins_holders where project_id=".$projectid." and active_status='1' and delete_status='0')");

                    $this->set('userdetails',$coin_non_holders);      

                }

                else

                if($member_type=="non_members")

                {

                    $conditions = array("Holder.project_id" => $projectid,"Holder.active_status"=>"0","Holder.delete_status"=>"0"); 

                    $userdetails=$this->Holder->find("all",array('conditions'=>$conditions));

                    $this->set('userdetails',$userdetails);     

                    

                } */

                 if($member_type >0){

                    $conditions = array("Holder.project_id" => $projectid,"Holder.member_type" => $member_type, "Holder.delete_status"=>"0"); 

                    $userdetails=$this->Holder->find("all",array('conditions'=>$conditions));

                    $this->set('userdetails',$userdetails); 

                }

                else // $member_type==all     - Holder.active_status"=>"1",

                {               

                    $conditions = array("Holder.project_id" => $projectid,"Holder.delete_status"=>"0"); 

                    $userdetails=$this->Holder->find("all",array('conditions'=>$conditions));

                    $this->set('userdetails',$userdetails); 

                }

            }else{

                 $this->set('userdetails',false);

            }



            

        }





        function get_company_contacts_by_ajax($companytypeid=0, $contacttypeid=0){

            #get record from global funtion for ajax calling

            $this->layout="ajax";

            ##check user session live or not

            $this->session_check_user();

            

            $companytype_condition="";

            $contacttype_condition="";



            $project_id=$this->Session->read("projectwebsite_id"); 

             if($companytypeid  > 0 || $contacttypeid > 0)  {

                    if($companytypeid>0){

                        $companytype_condition= " AND Contact.company_id IN(Select id from companies where company_type_id='".$companytypeid."' and project_id = '".$project_id."')";   

                    }



                    if($contacttypeid>0){

                        $contacttype_condition= " AND Contact.contact_type_id='".$contacttypeid."'";   

                    }



                    $condition ="  Contact.project_id = '".$project_id."' " .$companytype_condition." ".$contacttype_condition;

                    App::import("Model", "Project");

                    $this->Project =   & new Project();

                    $query= "   Select Contact.id, Contact.firstname, Contact.lastname, Contact.email, 

                    Project.project_name as projectname, Company.company_name as companyname 

                    FROM contacts Contact

                    LEFT JOIN companies Company on Company.id=Contact.company_id

                    LEFT JOIN projects Project on Project.id=Contact.project_id

                    WHERE ".$condition;



                    $contactdetails=$this->Project->query($query);

                    

                    $this->set('contactdetails',$contactdetails);   

               }else{

                    $this->set('contactdetails',false); 

               } 





        }  

        

          /**

         * Funtion to get email templates details by ajax- used at sendtempmail view

         * 

         * @param mixed $template_id

         */

        function get_email_template_details_by_ajax($template_id)  {

            #get record from global funtion for ajax calling

            $this->layout="ajax";

            ##check admin session live or not

            $this->session_check_user();

            

             $projectid=$this->Session->read("projectwebsite_id");            

           

             $project_name=$this->Session->read("projectwebsite_name"); 

            if($template_id > 0){

                 ##import EmailTemplate  model for processing

                 App::import("Model", "EmailTemplate");

                 $this->EmailTemplate =   & new EmailTemplate();

                 $this->EmailTemplate->id = $template_id;

                 $this->data = $this->EmailTemplate->read();

                

                 echo json_encode($this->data['EmailTemplate']);

            }else{

                echo json_encode(false);

            }

            exit;

            

        }



        /*

        * Function name   : loginterms()

        * Description : This function used to edit terms & conditions and privacy policy

        * Created On      : 01-03-11 (03:22am)

        *

        */ 

        function loginterms(){



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','editsponsordesc');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '17'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition 



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;





            $checkempty = true;

            ##check empty data

            if(!empty($this->data)) {



                if($this->data['Term']['id']=="" || $this->data['Term']['termstitle']=="" || $this->data['Term']['termscontent']=="" || $this->data['Term']['privacytitle']==""|| $this->data['Term']['privacycontent']==""){

                    $this->Session->setFlash("All the fields are mandatory.",'default',array('class' => 'errormsg'));

                    $checkempty = false;

                }

                if($checkempty==true){

                    if($this->Term->Save($this->data)){

                        $this->Session->setFlash('Database updated Successfully.','default', array('class' => 'successmsg'));



                        if(isset($this->data['Action']['redirectpage'])){

                            $this->redirect('/companies/dashboard');

                        }else{

                            $this->redirect('/companies/loginterms');

                        }



                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'errormsg'));

                    }

                }



            }





            ##check exist sponsor for particular project

            $condition = "Term.project_id = '".$projectid."'";

            $ttdata = $this->Term->find('all',array("conditions"=>$condition));



            if($ttdata){

                if($ttdata[0]['Term']['id'] !=''){



                    $termid = $ttdata[0]['Term']['id'];



                    $this->Term->id = $termid;

                    $this->data = $this->Term->read();



                }

            }





        }

        

        

        

       function page_footer(){

                

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','page_footer');



          

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            $this->set('current_project_name',$project_name);     // used in project_name element file 

            

            App::import('Model','PageFooter');

            $this->PageFooter = new PageFooter();

            $cond="project_id='$project_id'";

            $dt=$this->PageFooter->find("first",array('conditions'=>$cond));

            

            $page_footer_id=$dt['PageFooter']['id'];

            $page_footer_content=$dt['PageFooter']['page_footer_content'];

            $this->set("page_footer_content",$page_footer_content);

            

             $this->set("page_footer_id",$page_footer_id);

            

            if(!empty($this->data))

            {    

                

                $errormsg = $this->PageFooter->invalidFields();

                //$errormsg="Please provide Get Started Name";

                $this->Session->setFlash($errormsg,'default',array('class' => 'msgTXt'));

                //print_r($errormsg);die;

                if(!$errormsg){

                    $this->data['PageFooter']['project_id']=$project_id;

                    

                    if($this->PageFooter->save($this->data))

                    {

                        $this->Session->setFlash('Page Footer Updated successfully.','default', array('class' => 'successmsg'));

                        if(isset($this->data['Action']['redirectpage'])){

                            $this->redirect('/companies/page_footer');

                        }else

                        {

                            $this->redirect('/companies/page_footer');

                        }

                    } 

                    else

                    {

                        $this->Session->setFlash("Please provide Page Footer",'default',array('class' => 'msgTXt'));

                    }

                }    

            } 



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '67'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition





        }

        

        

        

        /*

        * Function name   : contentlist()

        * Description : This function used to list content of related project

        * Created On      : 22-02-11 (04:20pm)

        *

        */ 

        function contentlist(){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','editsponsordesc');



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;





            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '15'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);









            ##fetch data from content table for listing

            if(!empty($this->data)) {



                if($this->data['Company']){    

                    foreach($this->data['Company'] as $key=>$value){

                        if($key !='' && $value !='' && is_numeric($key)){

                            $this->data['Content']['id'] = $key;

                            $this->data['Content']['file_sequence'] = $value;

                            $this->data['Content']['modified'] = $this->data['Company']['mdate_'.$key];

                            $this->Content->Save($this->data['Content']);

                        }

                    }

                }

            }





            ##checking search key

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                $searchkeyword = $this->data['Company']['searchkey'];

                $condition1 = "Content.project_id = '$projectid' AND Content.delete_status='0' and (Content.type='web' or Content.type='' or Content.type is NULL) AND (Content.title LIKE '%".$searchkeyword."%' OR Content.alias LIKE '%".$searchkeyword."%') AND (Content.is_sytem != '2')";

            }else{

                $condition1 = "Content.project_id = '$projectid' AND Content.delete_status='0' AND (Content.is_sytem != '2') and (Content.type='web' or Content.type='' or Content.type is NULL)";

            }

            $field='';



            $contentArr = $this->Content->find('all', array("conditions"=>$condition1));

            $Idar = Set::extract('/Content/id', $contentArr);

            //print_r(array_unique($parentId));//(". implode(',', array_unique($parentId)) .")

            $contentParentArr = $this->Content->find('all', array("conditions"=> "(Content.delete_status='0' AND Content.project_id = '$projectid') AND (Content.is_sytem != '2') and (Content.type='web' or Content.type='' or Content.type is NULL) AND (Content.parent_id = 0 OR Content.parent_id IN (".implode(',', array_unique($Idar)).") )"));

            $parentfilter = Set::extract('/Content/id', $contentParentArr);

            //print_r(array_unique($parentfilter));



            /**/

            $condition1 = "Content.id IN (".implode(',', array_unique($parentfilter)).")";



            //echo $condition1;

            $this->Pagination->sortByClass    = 'Content'; ##initaite pagination 



            $this->Pagination->total= count($this->Content->find('all',array("conditions"=>$condition1)));



            list($order,$limit,$page) = $this->Pagination->init($condition1,$field);



            $contentdtlarr = $this->Content->find('all',array("conditions"=>$condition1, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            ##set content data in variable



            $this->set("contentdata",$contentdtlarr);





        }  

        

        

           /*

        * Function name   : contentlist()

        * Description : This function used to list content of related project

        * Created On      : 22-02-11 (04:20pm)

        *

        */ 

        function systemlist(){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','editsponsordesc');



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;





            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '15'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);









            ##fetch data from content table for listing

            if(!empty($this->data)) {



                if($this->data['Company']){

                    foreach($this->data['Company'] as $key=>$value){

                        if($key !='' && $value !='' && is_numeric($key)){

                            $this->data['Content']['id'] = $key;

                            $this->data['Content']['file_sequence'] = $value;

                            $this->Content->Save($this->data['Content']);

                        }

                    }

                }

            }





            ##checking search key

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                $searchkeyword = $this->data['Company']['searchkey'];

                $condition1 = "Content.project_id = '$projectid' AND Content.delete_status='0' and is_sytem='2' AND (Content.title LIKE '%".$searchkeyword."%' OR Content.alias LIKE '%".$searchkeyword."%')";

            }else{ 

                $condition1 = "Content.project_id = '$projectid' AND Content.delete_status='0' and is_sytem='2'";

            }

            $field='';



            $contentArr = $this->Content->find('all', array("conditions"=>$condition1));

            $Idar = Set::extract('/Content/id', $contentArr);

            //print_r(array_unique($parentId));//(". implode(',', array_unique($parentId)) .")

            $contentParentArr = $this->Content->find('all', array("conditions"=> "(Content.delete_status='0' AND Content.project_id = '$projectid' and is_sytem='2') AND (Content.parent_id = 0 OR Content.parent_id IN (".implode(',', array_unique($Idar)).") )"));

            $parentfilter = Set::extract('/Content/id', $contentParentArr);

            //print_r(array_unique($parentfilter));



            /**/

            $condition1 = "Content.id IN (".implode(',', array_unique($parentfilter)).")";



            //echo $condition1;

            $this->Pagination->sortByClass    = 'Content'; ##initaite pagination 



            $this->Pagination->total= count($this->Content->find('all',array("conditions"=>$condition1)));



            list($order,$limit,$page) = $this->Pagination->init($condition1,$field);



            $contentdtlarr = $this->Content->find('all',array("conditions"=>$condition1, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            ##set content data in variable



            $this->set("contentdata",$contentdtlarr);





        }  

        

        /*

        * Function name   : addcontentpage()

        * Description : This function used to add new content pages of related projects

        * Created On      : 05-03-11 (06:22am)

        *

        */ 

        function addcontentpage($returnurl="",$extra='',$event_title=''){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_user();

            

            if($extra!="")

            {

                $this->layout= 'company_popup';  

                $this->set("event_title",$event_title);             

            }

            else

                $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','editsponsordesc');

            

            // if $returnurl is popup then its need to close else no need to close

            $this->set("closeit","no");

            

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '16'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;





            ##check empty data

            if(!empty($this->data)) {



            $returnurl=$this->data['Companies']['returnurl'];

            $extra=$this->data['Companies']['extra'];

            $event_title=$this->data['Companies']['event_title'];

                 

                 if($extra!="")

                 {

                    $this->data['Content']['parent_id'] = 0;

                    $this->data['Content']['alias']=$event_title;

                    $this->data['Content']['title']=$event_title;

                    $this->data['Content']['metatitle']=$event_title;

                    $this->data['Content']['is_sytem']=2;

                }

                      

                #set the posted data

                $this->Content->set($this->data);

                #check server side validation

                $errormsg = $this->Content->invalidFields();



                if(!$errormsg){

                    if($this->data['Content']['parent_id'] == "")

                    {

                        $this->data['Content']['parent_id'] = 0;

                    }

                    if($this->data['Content']['is_global'] == 1)

                    {

                        $this->data['Content']['is_global'] = 0;

                    }

                    else if($this->data['Content']['is_global'] == 0)

                        {

                            $this->data['Content']['is_global'] = 1;

                        }

                        $this->data['Content']['project_id'] = $projectid;

                    if(empty($this->data['Content']['alias'])){

                        $this->data['Content']['alias'] = rand(100, 999);

                    }

                    $this->data['Content']['is_sytem'] = 1;

                    

                    if($returnurl=="detail" || $extra=="detail")

                        $this->data['Content']['type']="event_detail";

                    if($returnurl=="sponsor" || $extra=="sponsor")

                        $this->data['Content']['type']="event_sponsor";

                    if($returnurl=="inquiry" || $extra=="inquiry")

                        $this->data['Content']['type']="event_inquiry";

                    

                    if($this->Content->Save($this->data['Content'])){

                        

                        if($returnurl=="detail" || $returnurl=="sponsor" || $returnurl=="inquiry" || $extra=="detail" || $extra=="sponsor" || $extra=="inquiry")

                        {                           

                            $this->Session->setFlash('Content Page Added Successfully.','default', array('class' => 'successmsg'));

                            

                            if($returnurl=="popup")

                            {

                               // $gotourl=explode("_id_",$this->data['Admins']['returnurl']);

                               

                                $gotourl=str_replace("_id_", "/", $returnurl);

                                  

                                  $this->set("closeit","yes");

                                //$this->redirect('/admins/'.$gotourl); 

                            }

                            else

                            {

                                

                            if($extra!="")

                                $returnurl=$extra;

                            

                            if(isset($this->data['Action']['redirectpage'])){



                                        //$sessdata=$this->Session->read('newsortingby');

                                        $this->redirect('/companies/event_pages/'.$returnurl);



                                    }else{



                                        $this->redirect('/companies/addcontentpage/'.$returnurl);



                                    }

                            }

                        }

                        

                         if($returnurl!=""){

                               // $gotourl=explode("_id_",$this->data['Admins']['returnurl']);

                               

                                $gotourl=str_replace("_id_", "/", $returnurl);

                                  

                                  $this->set("closeit","yes");

                                //$this->redirect('/admins/'.$gotourl); 

                            }else{

                                $this->Session->setFlash('Content Page Added Successfully.','default', array('class' => 'successmsg'));

                                ##setting action for save & apply        

                                if(isset($this->data['Action']['redirectpage'])){

                                    $sessdata=$this->Session->read('newsortingby');

                                    $this->redirect('/'.$sessdata);

                                }else{

                                    $this->redirect('/companies/addcontentpage');

                                }    

                                

                            }

                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                    }

                }

            }

            

           #for parentmenu - Only takes Webpages (is_system=1) as parent and Child page can't assigne to -  Event, blog , chat and comments parents    - alias!='events' AND

            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (  alias!='blogs' AND  alias!='chat' AND  alias!='comments')";

            $submenus = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));

            $menulist[0]="Parent menu";



            foreach($submenus as $submenu)

            {

                $menulist[$submenu['Content']['id']]=$submenu['Content']['title'];

            }



            $this->set('submenu',$menulist);

            $this->set("returnurl",$returnurl);

            $this->set("extra",$extra); 



        }

        

        

        

        /*

        * Function name   : editcontent()

        * Description : This function used to edit content pages of related projects

        * Created On      : 22-02-11 (04:40am)

        *

        */ 

         function editcontent($contentid,$returnurl="",$extra='',$event_title=''){

            //Configure::write('debug',3);



            ##check user session live or not

            $this->session_check_user();

            

            if($extra!="")

            {

                $this->layout= 'company_popup';  

                $this->set("event_title",$event_title);    

                $this->set("extra",$extra);          

                

            }

            else

                $this->layout= 'new_sponsor_layout';  

                

            $this->set("returnurl",$returnurl);

                

            // if $returnurl is popup then its need to close else no need to close

            $this->set("closeit","no");  



            //for active menu display

            $this->set('page_url','editsponsordesc');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '24'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);



            $this->set("contentid",$contentid);    







            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;          





            $prodtl = $this->projectdetailbyid($projectid);





            ##import ProjectGraphic  model for processing

            App::import("Model", "ProjectGraphic");

            $this->ProjectGraphic =   & new ProjectGraphic();    



            #set the posted data

            $this->Content->set($this->data);

            #check server side validation

            $errormsg = $this->Content->invalidFields();

            

            

             ##check empty data

            if(!empty($this->data)) {

                $contentid = $this->data['Content']['id'];

                

                $returnurl=$this->data['Companies']['returnurl'];

                $extra=$this->data['Companies']['extra'];

                $event_title=$this->data['Companies']['event_title'];

                

                if(!$errormsg){

                    

                                                

            /* upload_header image */

            $cont=$_FILES['data'];



            if($cont["tmp_name"]["Companies"]["header_image"]!="")

            {



                if ((($cont["type"]["Companies"]["header_image"] == "image/gif") || ($cont["type"]["Companies"]["header_image"] == "image/jpeg") || ($cont["type"]["Companies"]["header_image"] == "image/png") || ($cont["type"]["Companies"]["header_image"] == "image/jpg") || ($cont["type"]["Companies"]["header_image"] == "image/pjpeg")) && ($cont["size"]["Companies"]["header_image"] < 200000) )

                {

                    $ext=explode("/",$cont["type"]["Companies"]["header_image"]);

                    $ext=$ext[1];



                    $up_dir="img/".$project_name."/uploads/";

                    $filename=$this->data['Content']['title'].".".$ext;

                    $filename=str_replace(" ","",$filename); 



                    if ($cont["error"]["Companies"]["header_image"] > 0)

                    {

                        $errormsg .="Error Uploading file.Try again.";

                        $this->Session->setFlash('Error Uploading file.Try again.','default',array('class' => 'msgTXt'));

                    }

                    else

                    {

                        if (file_exists($up_dir.$filename))

                        {



                            //  foreach(glob($up_dir.'*.*') as $v)        //delete existing files from directory then upload

                            //  {

                            unlink($up_dir.$filename);

                            //  }

                            move_uploaded_file($cont["tmp_name"]["Companies"]["header_image"],$up_dir.$filename);

                        }

                        else

                        {



                            //$up_dir="uploads/avatar/".$userid."/";

                            mkdir($up_dir, 0777);

                            //$filename=$userid.".".$_FILES["avatar"]["type"];



                            move_uploaded_file($cont["tmp_name"]["Companies"]["header_image"],$up_dir.$filename);



                        }

                    }

                    $header_image_url=$up_dir.$filename;

                    $this->data['Content']['header_image']=$header_image_url; //upload image url 



                    $width = 960;

                    $height = 50;



                    list($width_orig, $height_orig) = getimagesize($header_image_url);



                    // Resample

                    $image_p = imagecreatetruecolor($width, $height);

                    $image = imagecreatefromjpeg($header_image_url);

                    imagecopyresampled($image_p, $image, 0, 0, 0, 0, $width, $height, $width_orig, $height_orig);



                    // Move file to image folder

                    imagejpeg($image_p, $header_image_url, 100);

                    imagedestroy($image_p);

                    imagedestroy($image);

                }

                else

                {

                    $errormsg .="Invalid File Type or Size";

                    $this->Session->setFlash('Invalid File Type or Size.','default',array('class' => 'msgTXt'));

                    $header_image_url="";

                }           

            }

                    

                    

                    //print_r($_REQUEST);



                    ##Show Option Page Graphic:

                    /* $conditions = "ProjectGraphic.project_id = '".$projectid."' AND  ProjectGraphic.delete_status = '0'";

                    $proj_grap_arr =  $this->ProjectGraphic->find("all",array('conditions'=>$conditions));

                    if(count($proj_grap_arr) > 0)

                    {

                    $this->ProjectGraphic->deleteAll($conditions, $cascade = true);

                    }



                    // For linkedin

                    if((isset($this->data['Companies']['imagenameold_link']['name']) && $this->data['Companies']['imagenameold_link']['name'] !='') || (isset($this->data['ProjectGraphic']['image_link']) && $this->data['ProjectGraphic']['image_link'] !='' && $this->data['Companies']['activestatus_link']==1)){

                    if(isset($this->data['Companies']['imagenameold_link']['name']) && $this->data['Companies']['imagenameold_link']['name'] !='') {

                    $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                    $this->File->setDestPath($filePath);



                    $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_link']['name']); 

                    $tmp1 = $this->data['Companies']['imagenameold_link']['tmp_name'];

                    $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33');

                    } else {

                    $fileNamesidea = $this->data['ProjectGraphic']['image_link'];

                    }



                    $this->data1['ProjectGraphic']['project_id'] = $projectid;

                    $this->data1['ProjectGraphic']['title'] = $this->data['Companies']['title_link'];

                    $this->data1['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data1['ProjectGraphic']['address'] = $this->data['Companies']['address_link'];



                    if(isset($this->data['Companies']['activestatus_link']) && $this->data['Companies']['activestatus_link']==1)

                    $this->data1['ProjectGraphic']['active_status'] = 1;

                    else

                    $this->data1['ProjectGraphic']['active_status'] = 0;



                    $this->ProjectGraphic->Save($this->data1['ProjectGraphic']);

                    }







                    // For Facebook

                    unset($this->ProjectGraphic);

                    App::import('Model','ProjectGraphic');

                    $this->ProjectGraphic = new ProjectGraphic();

                    if((isset($this->data['Companies']['imagenameold_face']['name']) && $this->data['Companies']['imagenameold_face']['name'] !='') || (isset($this->data['ProjectGraphic']['image_face']) && $this->data['ProjectGraphic']['image_face'] !='' && $this->data['Companies']['activestatus_face']==1)){

                    if(isset($this->data['Companies']['imagenameold_face']['name']) && $this->data['Companies']['imagenameold_face']['name'] !='') {

                    $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                    $this->File->setDestPath($filePath);



                    $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_face']['name']); 

                    $tmp1 = $this->data['Companies']['imagenameold_face']['tmp_name'];

                    $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                    $fileNamesidea = $this->data['ProjectGraphic']['image_face'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_face'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_face'];



                    if(isset($this->data['Companies']['activestatus_face']) && $this->data['Companies']['activestatus_face']==1)

                    $this->data1['ProjectGraphic']['active_status'] = 1;

                    else

                    $this->data1['ProjectGraphic']['active_status'] = 0;



                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                    }





                    // For Twitter

                    unset($this->ProjectGraphic);

                    App::import('Model','ProjectGraphic');

                    $this->ProjectGraphic = new ProjectGraphic();

                    if((isset($this->data['Companies']['imagenameold_twit']['name']) && $this->data['Companies']['imagenameold_twit']['name'] !='') || (isset($this->data['ProjectGraphic']['image_twit']) && $this->data['ProjectGraphic']['image_twit'] !='' && $this->data['Companies']['activestatus_twit']==1)){

                    if(isset($this->data['Companies']['imagenameold_twit']['name']) && $this->data['Companies']['imagenameold_twit']['name'] !='') {

                    $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                    $this->File->setDestPath($filePath);



                    $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_twit']['name']); 

                    $tmp1 = $this->data['Companies']['imagenameold_twit']['tmp_name'];

                    $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                    $fileNamesidea = $this->data['ProjectGraphic']['image_twit'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_twit'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_twit'];



                    if(isset($this->data['Companies']['activestatus_twit']) && $this->data['Companies']['activestatus_twit']==1)

                    $this->data1['ProjectGraphic']['active_status'] = 1;

                    else

                    $this->data1['ProjectGraphic']['active_status'] = 0;



                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                    }





                    //For Donation

                    unset($this->ProjectGraphic);

                    App::import('Model','ProjectGraphic');

                    $this->ProjectGraphic = new ProjectGraphic();



                    if((isset($this->data['Companies']['imagenameold_don']['name']) && $this->data['Companies']['imagenameold_don']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don']) && $this->data['ProjectGraphic']['image_don'] !='' && $this->data['Companies']['activestatus_don']==1)){

                    if(isset($this->data['Companies']['imagenameold_don']['name']) && $this->data['Companies']['imagenameold_don']['name'] !='') {

                    $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                    $this->File->setDestPath($filePath);



                    $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don']['name']); 

                    $tmp1 = $this->data['Companies']['imagenameold_don']['tmp_name'];

                    $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                    $fileNamesidea = $this->data['ProjectGraphic']['image_don'];

                    }



                        $this->data['ProjectGraphic']['project_id'] = $projectid;

                        $this->data['ProjectGraphic']['title'] = $this->data['Content']['title_don'];

                        $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                        $this->data['ProjectGraphic']['address'] = $this->data['Content']['address_don'];



                    if(isset($this->data['Companies']['activestatus_don']) && $this->data['Companies']['activestatus_don']==1)

                    $this->data1['ProjectGraphic']['active_status'] = 1;

                    else

                    $this->data1['ProjectGraphic']['active_status'] = 0;





                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                    }*/





          

                    if($this->data['Content']['parent_id'] == "")

                    {

                        $this->data['Content']['parent_id'] = 0;

                    }        

                    if($this->data['Content']['is_global'] == 1)

                    {

                        $this->data['Content']['is_global'] = 0;

                    }

                    else if($this->data['Content']['is_global'] == 0)

                        {

                            $this->data['Content']['is_global'] = 1;

                        }



                        if($returnurl=="detail" || $extra=="detail")

                            $this->data['Content']['type']="event_detail";

                        if($returnurl=="sponsor" || $extra=="sponsor")

                            $this->data['Content']['type']="event_sponsor";

                        if($returnurl=="inquiry" || $extra=="inquiry")

                            $this->data['Content']['type']="event_inquiry";

                        

                        if($this->Content->Save($this->data['Content'])){

                        $this->Session->setFlash('Content Page updated Successfully.','default', array('class' => 'successmsg'));

                        if(isset($this->data['Action']['redirectpage'])){



                            if($this->data['Content']['title']=="Register" || $this->data['Content']['title']=="Login" || $this->data['Content']['title']=="Logout") // if success then redirect to new system tab page

                            {

                                $this->redirect('/companies/systemlist');

                            }

                            else

                            {

                                if($returnurl=="popup")

                                {

                                   // $gotourl=explode("_id_",$this->data['Admins']['returnurl']);

                                   

                                    $gotourl=str_replace("_id_", "/", $returnurl);

                                      

                                      $this->set("closeit","yes");

                                    //$this->redirect('/admins/'.$gotourl); 

                                }

                                else

                                if($returnurl=="detail" || $returnurl=="sponsor" || $returnurl=="inquiry")

                                    $this->redirect('/companies/event_pages/'.$returnurl);    

                                else

                                    $this->redirect('/companies/contentlist');

                            }





                        }else{

                            

                             if($returnurl=="detail" || $returnurl=="sponsor" || $returnurl=="inquiry")

                                $this->redirect('/companies/editcontent/'.$contentid.'/'.$returnurl);    

                            else

                                $this->redirect('/companies/editcontent'/$contentid);



                        }



                    }else{

                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));

                    }

                }

            }else{



                $this->Content->id = $contentid;

                $this->data = $this->Content->read();



                if($this->data['Content']['is_global'] == 1)

                {

                    $this->data['Content']['is_global'] = 0;

                }

                else if($this->data['Content']['is_global'] == 0)

                    {

                        $this->data['Content']['is_global'] = 1;

                    }

            }







            #for parentmenu

             #for parentmenu - Only takes Webpages (is_system=1) as parent and Child page can't assigne to -  Event, blog , chat and comments parents    - alias!='events' AND

            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (  alias!='blogs' AND  alias!='chat' AND  alias!='comments')";

            $submenus = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));

            $menulist[0]="Parent menu";



           /* $conditionsubmenu= "id != $contentid and project_id = $projectid and delete_status='0'";

            $submenus = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));

            $menulist[0]="Parent menu"; */

            foreach($submenus as $submenu)

            {

                $menulist[$submenu['Content']['id']]=$submenu['Content']['title'];

            }



            $this->set('submenu',$menulist);

            #



            //11-05-11

            $conditiongra = "ProjectGraphic.project_id='$projectid' AND  ProjectGraphic.delete_status='0'";

            //11-05-11

            $graphicarr = $this->ProjectGraphic->find('all',array("conditions"=>$conditiongra));

            $this->set('graphiclist',$graphicarr);



        } 

        function showcontentwindow($contentid,$modelname=''){

          	echo '*********'.$contentid;

			$this->layout = "";



            ##import Content  model for processing

            App::import("Model", $modelname);

            $this->$modelname =   & new $modelname();    

            $condition= "$modelname.id = $contentid";

            $contentdtlarr = $this->$modelname->find('all',array("conditions"=>$condition));

            $this->set('contentdata',$contentdtlarr[0][$modelname]['content']);



        }    



        function getlogouturl($contentid){

            App::import("Model", "Content");

            $this->Content =   & new Content();    

            $condition= "Content.id = '$contentid'";

            $contentdtlarr = $this->Content->find('all',array("conditions"=>$condition));

			if(!empty($contentdtlarr)){

	            return $contentdtlarr['0']['Content']['alias'];

			}

        }







        /*

        * Function name   : getshipdays()

        * Description : This function used to get shipping days

        * Created On      : 23-02-11 (02:10am)

        *

        */     





        function getprojecttypedays($projecttypeid){

            #get record from global funtion for ajax calling

            $this->layout="";



            echo $this->getprojecttypedaysapp($projecttypeid);



            exit;

        }    



        /*

        * Function name   : getshipdays()

        * Description : This function used to get shipping days

        * Created On      : 23-02-11 (02:10am)

        *

        */     





        function getshipdays($shippingid){

            #get record from global funtion for ajax calling

            $this->layout="";



            echo $this->getshippingdays($shippingid);



            exit;

        }

        function getcoinsetsbyprojectid($projectid,$displaytype=''){



            ##import coinset  model for processing

            App::import("Model", "Coinset");

            $this->Coinset =   & new Coinset();    

            $coinsetname="";

            $unitcount=0;

            //Coinset box



            $condition3 = "Coinset.project_id = '".$projectid."' AND  Coinset.delete_status = '0'";

            $coinsetdata = $this->Coinset->find('all',array("conditions"=>$condition3,'order'=>'Coinset.id asc'));



            if($coinsetdata){

                if($displaytype){

                    $coinsetname = Set::combine($coinsetdata, '{n}.Coinset.id', '{n}.Coinset.coinset_name');



                }else{

                    foreach ($coinsetdata as $eachcoinset){

                        $coinsetname = $eachcoinset['Coinset']['coinset_name'].', '.$coinsetname;

                        $unitcount = ($eachcoinset['Coinset']['numunits']+$unitcount);

                    }

                    $coinsetname = substr($coinsetname,0,-2);

                }

            }



            return $coinsetname;

            exit;

        }



        function getcoinsetsunitbyprojectid($projectid){



            ##import coinset  model for processing

            App::import("Model", "Coinset");

            $this->Coinset =   & new Coinset();    

            $coinsetname="";

            $unitcount=0;

            //Coinset box



            $condition3 = "Coinset.project_id = '".$projectid."' AND  Coinset.delete_status = '0'";

            $coinsetdata = $this->Coinset->find('all',array("conditions"=>$condition3,'order'=>'Coinset.id desc'));



            if($coinsetdata){

                foreach ($coinsetdata as $eachcoinset){

                    $coinsetname = $eachcoinset['Coinset']['coinset_name'].', '.$coinsetname;

                    $unitcount = ($eachcoinset['Coinset']['numunits']+$unitcount);

                }

                $coinsetname = substr($coinsetname,0,-2);

            }



            return $unitcount;

            exit;

        }



        function getsponsornamebyprojectid($projectid){



            ##import coinset  model for processing

            App::import("Model", "Sponsor");

            $this->Sponsor =   & new Sponsor();    

            $coinsetname="";

            $unitcount=0;

            //Coinset box



            $condition3 = "Sponsor.project_id = '".$projectid."' AND  Sponsor.delete_status = '0'";

            $sponsordata = $this->Sponsor->find('all',array("conditions"=>$condition3));



            if($sponsordata){

                $sponsorname = $sponsordata[0]['Sponsor']['sponsor_name'];

            }



            return $sponsorname;

            exit;

        }

        function getprojectdetails($projectid){



            $this->Project->bindModel(array('hasOne' => array('Sponsor' => array('foreignKey' => false,'conditions' => array('Sponsor.id = Project.sponsor_id' )))));



            $this->Project->bindModel(array('hasOne' => array('ProjectType' => array('foreignKey' => false,'conditions' => array('ProjectType.id = Project.project_type_id' )))));



            $projectDetails = $this->Project->find("Project.id='".$projectid."' ",NULL,NULL,NULL,NULL,1);    



            return $projectDetails;

        }

        function projectdetailbyid($projectid=''){        



            $this->Project->bindModel(array('belongsTo'=>array(

            'Sponsor'=>array(

            'foreignKey'=>false,

            'conditions'=>'Sponsor.id = Project.sponsor_id'

            )

            )));



            $condition = "Project.id = '".$projectid."'";

            $ptdata = $this->Project->find('all',array("conditions"=>$condition));



            if($ptdata){

                return $ptdata;

            }else{

                return false;

            }



        }





        /*

        * Function name   : getcompanyaddressbyid()

        * Description : This function used to collect company address

        * Created On      : 01-03-11 (03:22am)

        *

        */      

        function getcompanyaddressbyid($companyid){

            $this->layout='';



            $conditions = "Company.id = '".$companyid."' AND  Company.delete_status = '0'";

            $companyarr =  $this->Company->find("all",array('conditions'=>$conditions));

            if($companyarr){

                $address1 = $companyarr[0]['Company']['address1'];

                $this->set('varaddress1',$address1);

                $address2 = $companyarr[0]['Company']['address2'];

                $this->set('varaddress2',$address2);

                $city = $companyarr[0]['Company']['city'];

                $this->set('varcity',$city);

                $state = $companyarr[0]['Company']['state'];

                $this->set('varstate',$state);

                $country = $companyarr[0]['Company']['country'];

                $this->set('varcountry',$country);

                $zipcode = $companyarr[0]['Company']['zipcode'];

                $this->set('varzipcode',$zipcode);

            }else{

                return false;

            }

        } 

        /*

        * Function name   : changestatus()

        * Arguments : $recid,$modelname,$status,$methodname

        * Description : This function used to change status as active or deactive

        * Created On      : 16-02-11 (03:45am)

        *

        */ 





        function changestatus($recid,$modelname,$status,$methodname,$action='cngstatus',$othermodel='',$otherid=''){

	         ##check user session live or not

            $this->session_check_user();

            ##import dynamic model for processing

            App::import("Model", $modelname);

            $this->$modelname =   & new $modelname();       

            ##set the record for updation



            $allid=str_replace('*', ' or id = ',$recid);                    

            $where="id=$allid";  



            if(count(explode('*',$recid))==1){

                $this->data["$modelname"]['id'] = $recid;

            }

            

            if($modelname=="EventInvitation")       

            {

                $methodname=$methodname."/".$otherid;

            }

            

            if($methodname=="event_pages" || $methodname=="eventtasklist")       

            {

                $methodname=$methodname."/".$otherid;

            }



            if($action =='permanant_delete')

            {

                //$this->Content->delete($this->data['$modelname']['id'],true);

                $this->Content->query("delete from contents where id=".$recid);

                $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));

                $this->redirect("$methodname/");

            }



            if($action =='undo_delete') //if it is already archived or permanantly delete

            {

                $this->$modelname->updateAll(array('delete_status'=>'0'),array('id' => $recid));

                $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));

                $this->redirect("$methodname/");

            }



            //handle for current events

            if($action=="rec_status")

            {

                

                $today=date('Y-m-d');

                

                $id_data=$this->$modelname->query("select event_id,project_id from recurring_events where id='".$recid."'");

                

                $event_id=$id_data[0]['recurring_events']['event_id'];

                $project_id=$id_data[0]['recurring_events']['project_id'];

              

                $this->$modelname->query("update recurring_events set active_status='".$status."' where event_id = '".$event_id."' and project_id='".$project_id."' and start_date >= '".$today."'");

                

                $this->$modelname->query("update events set active_status='".$status."' where id = '".$event_id."'");

                

                $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));

                $this->redirect("$methodname/");

            }

            

            if($action=="delete_rec")

            {

                

                $today=date('Y-m-d');

                

                $id_data=$this->$modelname->query("select event_id,project_id from recurring_events where id='".$recid."'");

                

                $event_id=$id_data[0]['recurring_events']['event_id'];

                $project_id=$id_data[0]['recurring_events']['project_id'];

              

                $this->$modelname->query("update recurring_events set delete_status='1' where event_id = '".$event_id."' and project_id='".$project_id."' and start_date >= '".$today."'");

                $this->$modelname->query("update events set delete_status='1' where id = '".$event_id."'");

                

                $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));

                $this->redirect("$methodname/");

            }

            if($action !='delete'){



                $this->data["$modelname"]['active_status'] = $status;



            }else{

                $this->data["$modelname"]['delete_status'] = 1;

            }

            ##in the case of other model like User

            if($othermodel && $otherid){

                App::import("Model", $othermodel);

                $this->$othermodel =   & new $othermodel();



                $this->data["$othermodel"]['id'] = $otherid;

                if($action !='delete'){

                    $this->data["$othermodel"]['active_status'] = $status;

                }else{

                    $this->data["$othermodel"]['delete_status'] = 1;

                }

                $this->$othermodel->Save($this->data["$othermodel"]);

            }





            if(count(explode('*',$recid))==1){

                $i=$this->$modelname->Save($this->data["$modelname"]);

            }else{

                if($action!="delete")

                    $i=$this->$modelname->updateAll(array('active_status'=>"'".$status."'"),$where);

                else{



                    $res = Set::enum('yes', array('no' => 0, 'yes' => 1));

                    $i=$this->$modelname->updateAll(array('delete_status'=>"'".$res."'"),$where);

                }

            }

            if($i){

                $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));



            }else{

                $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

            }





            $this->redirect("$methodname/");



        }







        function deletecontent($recid){







            App::import("Model", 'Content');

            $this->Content =   & new Content();    

            ##set the record for updation



            $alldeid=str_replace('*', ' or parent_id = ',$recid);              

            $parcond="parent_id=$alldeid and (delete_status='0' )"; 

            if(count(explode('*',$recid))==1){

                $parcond="parent_id=$alldeid and (delete_status='0' )"; 

            }

            $ptdata = $this->Content->find('all',array("conditions"=>$parcond));

            if(!empty($ptdata))

            {

                $this->Session->setFlash('Page to be deleted is Parent page for some pages. So manage them first.','default', array('class' => 'successmsg'));

                $this->redirect("contentlist/");

            }

            else

            {

                $allid=str_replace('*', ' or id = ',$recid);              

                $where="id=$allid";

                if(count(explode('*',$recid))==1){

                    $where="id=$recid"; 

                }



                if(count(explode('*',$recid))==1){

                    $this->data["Content"]['id'] = $recid;

                    $this->data["Content"]['delete_status'] = 1;



                    $i=$this->Content->Save($this->data["Content"]);

                }else{

                    $res = Set::enum('yes', array('no' => 0, 'yes' => 1));

                    $i=$this->Content->updateAll(array('delete_status'=>"'".$res."'"),$where);

                }



                if($i){

                    $this->Session->setFlash('Database updated successfully.','default', array('class' => 'successmsg'));



                }else{

                    $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                }





                $this->redirect("contentlist/");



            }





        }







        function addcommenttype($returnurl=""){

            ##check user session live or not

            $this->session_check_user();

               

            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"commenttype");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    





            ##import company type model for processing

            App::import("Model", "CommentType");

            $this->CommentType =   & new CommentType();

            ##check empty data

            if(!empty($this->data)) {

				

                //  $returnurl=$this->data['Companies']['returnurl'];       

                #set the posted data

                $this->CommentType->set($this->data);

                #check server side validation

                $this->CommentType->invalidFields();

                $ptname = $this->data['CommentType']['comment_type_name'];



                $condition = "comment_type_name = '".$ptname."' AND  delete_status = '0' AND project_id = ".$project_id;

                $ptdata = $this->CommentType->find('all',array("conditions"=>$condition));

                $this->data['CommentType']['project_id'] = $project_id;

                if(!$ptdata){

                    #save data in company type table

                    if($this->CommentType->Save($this->data)){

                         if($returnurl!=""){

                               // $gotourl=explode("_id_",$this->data['companies']['returnurl']);

                               

                                  $gotourl=str_replace("_id_", "/", $returnurl);

                                  

                                  $this->set("closeit","yes");

                                //$this->redirect('/companies/'.$gotourl); 

                            }else{

                                  $this->Session->setFlash('Comment Type added Successfully.','default', array('class' => 'successmsg'));

                         } 

                    }else{

                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));



                    }

                    

                }else{

                    $this->Session->setFlash('Comment Type with same name already exists.','default',array('class' => 'msgTXt'));

                }



             /*   if(isset($this->data['Action']['redirectpage'])){



                    $sessdata=$this->Session->read('newsortingby');

                    $this->redirect('/'.$sessdata);

                }else

                {

                    $this->redirect('/companies/suggestedcomments/');

                }   */



            }



                        

               $this->set("returnurl",$returnurl);  

        }    



        /*

        * Function name   : editcommenttype()

        * Description : This function used to add comment type

        * Created On      : 16-02-11 (06:00am)

        *

        */     

        function editcommenttype($recid=null){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"commenttype");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    











            ##import company type model for processing

            App::import("Model", "CommentType");

            $this->CommentType =   & new CommentType();



            ##check empty data

            if(!empty($this->data)) {

				//pr($this->data);die;

                #set the posted data

                $this->CommentType->set($this->data);

                #check server side validation

                $this->CommentType->invalidFields();

                #save data in company type table

                $recid  = $this->data['CommentType']['id'];

                $ptname  = $this->data['CommentType']['comment_type_name'];

                $condition = "comment_type_purpose = '".$ptname."' AND id !=$recid AND  delete_status = '0' AND project_id = ".$project_id;

                $ptdata = $this->CommentType->find('all',array("conditions"=>$condition));

                $this->data['CommentType']['project_id'] = $project_id;

                if(!$ptdata){

                    if($recid !=''){



                        if($this->CommentType->Save($this->data)){

                            $this->Session->setFlash('Comment Type updated Successfully.','default', array('class' => 'successmsg'));



                        }else{

                            $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));



                        }

                    }else{

                        $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));

                    }

                }else{



                    $this->Session->setFlash('Comment Type with same name already exists.','default',array('class' => 'msgTXt'));

                }

                if(isset($this->data['Action']['redirectpage'])){

                    $sessdata=$this->Session->read('newsortingby');

                    $this->redirect('/'.$sessdata);

                } 

                else {

                    $this->redirect("/companies/editcommenttype/$recid");

                }

            }

            $this->CommentType->id = $recid;

            $this->data = $this->CommentType->read();

        }    



        /*

        * Function name   : commenttype()

        * Description : This function used to add comment type

        * Created On      : 16-02-11 (05:45am)

        *

        */ 

        function commenttype(){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"commenttype");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            ##import company type model for processing

            App::import("Model", "CommentType");

            $this->CommentType =   & new CommentType();

            ##fetch data from project type table for listing

            $field='';

            $condition = "delete_status = '0' AND project_id =".$project_id;

            $this->Pagination->sortByClass    = 'CommentType'; ##initaite pagination 



            $this->Pagination->total= count($this->CommentType->find('all',array("conditions"=>$condition)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $commenttypedata = $this->CommentType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            ##set project type data in variable



            $this->set("commenttypedata",$commenttypedata);



        }







        /*************************************************************************

        * Function Name :  facebook_login

        * Function Arguments: N/A

        * Function Return: N/A.

        * Purpose: To login through facebook.

        * Created by : Anurag Mishra

        * Created on : Feb 23, 2011

        *************************************************************************/

        function facebook_login()

        {



		

            $project_id=$this->Session->read("projectwebsite_id");    

            $projectDetails=$this->getprojectdetails($project_id);



            $project_name=$this->Session->read("projectwebsite_name");    



            $email = $_SESSION['FacebookUser']['email'];

            $first_name = $_SESSION['FacebookUser']['first_name'];

            $last_name = $_SESSION['FacebookUser']['last_name'];

            $screenname = $_SESSION['FacebookUser']['name'];

            $avatar="http://graph.facebook.com/".$_SESSION['FacebookUser']['id']."/picture";



            if(!empty($email))

            {



                $condition = " User.username = '".$email."' and User.delete_status='0' and User.project_id='$project_id'";

                $userpresent = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));



                if(is_array($userpresent) && !empty($userpresent)) {

                    $this->User->bindModel(array('hasOne' => array('Holder' => array('foreignKey' => false,'conditions' => array(' Holder.user_id=User.id' )))));            

                    $condition = " User.username = '".$email."' and User.delete_status='0' and User.project_id='$project_id'";

                    $userDetails = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));    



                    if(is_array($userDetails) && !empty($userDetails)) {



                        /*to check  coin-holder member if coin# required then redirect non-holder member to register_user page with message*/



                        if($projectDetails['ProjectType']['coin_verification']==1)

                        {



                            App::import("Model", "CoinsHolder");

                            $this->CoinsHolder =   & new CoinsHolder();

                            $condition_1 = "CoinsHolder.project_id = ".$project_id." AND CoinsHolder.holder_id = ".$userDetails['Holder']['id']." and CoinsHolder.delete_status='0'";     

                            $coindata= $this->CoinsHolder->find('count', array("conditions" => $condition_1));

                            if($coindata<=0)

                            {

                                $this->Session->write('NewUser', $userDetails);

                                $this->Session->write('CurrentProject', $project_id);

                               $this->redirect(array('controller' => 'companies', 'action' => 'coinregister', 'register'));

                            }else{



                                /*for coin holders before redirecting them to dashborad we check  their active status too*/

                                if($userDetails['User']['active_status'] == '1'){

                                    $this->Session->write('User', $userDetails);

                                    $userDetails['User']['last_login']=date("Y-m-d H:i:s");

                                    $userDetails['User']['is_loggedin']='1';

                                    $this->User->save($userDetails);

                                    $this->Session->write('CurrentProject', $project_id);

                                    $s_URL = $this->Session->read('URL'); //    

                                    if($s_URL != ''){

                                        $this->redirect($s_URL);

                                    }else{    



                                        $this->redirect('/companies/dashboard');

                                    }

                                }

                                elseif($userDetails['User']['active_status'] == '0'){                    

                                    $_SESSION['registercoin']=1;        

                                    unset($_SESSION['FacebookUser']);

                                    $this->Session->delete('NewUser');

                                    $_SESSION['flashmessage']="Account Deactivated Unable to login";

                                    $this->redirect('/companies/user_register');

                                }

                            }

                        }else{

                             if($userDetails['User']['active_status'] == '1'){

                                $this->Session->write('User', $userDetails);

                                $userDetails['User']['last_login']=date("Y-m-d H:i:s");

                                $userDetails['User']['is_loggedin']='1';

                                $this->User->save($userDetails);

                                $this->Session->write('CurrentProject', $project_id);

                                $s_URL = $this->Session->read('URL'); //    

                                if($s_URL != ''){

                                    $this->redirect($s_URL);

                                }else{    



                                    $this->redirect('/companies/dashboard');

                                }

                            }

                            elseif($userDetails['User']['active_status'] == '0'){                    

                                $_SESSION['registercoin']=1;        

                                unset($_SESSION['FacebookUser']);

                                $this->Session->delete('NewUser');

                                $_SESSION['flashmessage']="Account Deactivated Unable to login";

                                $this->redirect('/companies/user_register');







                            }

                        }

                  }else{    

                        $_SESSION['flashmessage']='Username and Password mismatched.';        



                        $_SESSION['registercoin']=1;        

                        unset($_SESSION['FacebookUser']);

                        $this->Session->delete('NewUser');



                        $this->redirect('/companies/user_register');

                    }



                }else{

                    ##register if facebook user not in database



                    $this->data['Holder']['email'] = $email;

                    $this->data['Holder']['firstname'] = $first_name;            



                    $this->data['User']['project_id']=$project_id;

                    $activestatus =1;





                    $this->data['User']['active_status']="$activestatus";

                    $this->data['User']['username']=$this->data['Holder']['email'];

                    $this->data['User']['last_login']=date("Y-m-d H:i:s");

                    $this->data['User']['password']=md5($this->data['Holder']['password']); 

                    $this->data['User']['usertype']='holder';

                    $this->data['User']['avatar_url']=$avatar;



                    if($this->User->Save($this->data['User'])){



                        $lastuserid = $this->User->getLastInsertId();



                        $this->User->query("insert into user_profile_completions(user_id,register,avatar) values($lastuserid,30,10)");



                        $this->data['Holder']['project_id'] = $project_id;

                        $this->data['Holder']['user_id'] = $lastuserid;

                        $this->data['Holder']['active_status']="$activestatus";

                        $this->data['Holder']['firstname'] = $first_name;

                        $this->data['Holder']['lastnameshow'] = $last_name;

                        $this->data['Holder']['lastnameprivate'] = $last_name;

                        $this->data['Holder']['screenname'] = $screenname;    





                        if($this->Holder->Save($this->data['Holder'])){

                            $new_holder_id = $this->Holder->getLastInsertId();

                            $this->data['Holder']['id'] = $new_holder_id;







                            if($projectDetails['Project']['registration_confirmation']=="1")

                            {



                                $condition = "EmailTemplate.email_template_name= 'SIGN UP CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0'";



                                $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                                if(!empty($mailMessage)) 

                                {

                                    $confirm_signup_link ="<a href='http://".HTTP_PATH."/companies/update_confirmation/".base64_encode($new_holder_id)."' target='_blank'>Confirm Sign up</a>";

                                   /**

                                   * OLD CODE

                                   *  if(!empty($projectDetails['Project']['url']))

                                        $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                    else

                                        $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                                    if(!empty($projectDetails['Project']['system_name']))

                                        $pt_new_name=$projectDetails['Project']['system_name'];

                                    else

                                        $pt_new_name=$projectDetails['Project']['project_name'];

                                    $keyStringArray = array('[[HOLDER_FIRSTNAME]]'=>trim($screenname),                

                                    '[[CONFIRM_SIGN_UP_LINK]]'=>$confirm_signup_link,

                                    '[[PROJECT_NAME]]'=>$pt_new_name,

                                    '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                                    if(!empty($keyStringArray)){

                                        foreach($keyStringArray as $key=>$val){

                                            $mailBody = str_replace($key,$val,$mailBody);

                                        }

                                    }

                                            

                                   */

                                    $subject  = $mailMessage['EmailTemplate']['subject'];              

                                    $subject = str_replace('[[PROJECT_NAME]]',$pt_new_name,$subject);          

                                    $from =$mailMessage['EmailTemplate']['sender'];              // $projectDetails['Project']['fromemail'];

                                    $fromname = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromname']; 

                                    $mailBody=$mailMessage['EmailTemplate']['content'];

                                    

                                    /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button        **/   

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    $mailBody.=$mailfooter;

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                  

                                    

                                    // Set path to inserted image 

                                        $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                

                                    $to = trim($email);

                                    /**

                                    * New Email Temp replacement code for data Elements 

                                    */

                                     //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                        $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                     //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                        $dataEleValuesArray[DATA_ELEMENT_CONFIRM_SIGN_UP_LINK]= $confirm_signup_link;   

                                        $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                     //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                        $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                        $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                    $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);



                                }        



                                $this->Session->setFlash('Thanks for registering. Your registration is NOT complete until you Verify your e-mail address.We have sent you an email, please click the link in the e-mail to complete the Verify process. After you have Verified you will be able to Login.','default',array('class' => 'successmsg'));





                            }else{



                                $condition = " EmailTemplate.email_template_name= 'REGISTRATION CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                                $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                                if(is_array($mailMessage) && !empty($mailMessage)) 

                                {

                                    /**

                                    * OLD CODE

                                    * if(!empty($projectDetails['Project']['url']))

                                        $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                    else

                                        $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                                     if(!empty($projectDetails['Project']['system_name']))

                                        $pt_new_name=$projectDetails['Project']['system_name'];

                                    else

                                        $pt_new_name=$projectDetails['Project']['project_name'];

                                    $keyStringArray = array('[[EMAIL_ADDRESS]]'=>trim($this->data['Holder']['email']),

                                    '[[USER_NAME]]'=>trim($this->data['Holder']['email']),

                        '[[TO_FIRSTNAME]]'=>trim($this->data['Holder']['screenname']),  

                                    '[[PASSWORD]]'=>trim($userpass),

                                    '[[PROJECT_NAME]]'=>$pt_new_name,

                                    '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                                   if(!empty($keyStringArray)){

                                        foreach($keyStringArray as $key=>$val){

                                            $mailBody = str_replace($key,$val,$mailBody);

                                        }

                                    }         

                                    */

                                    $userpass= base64_decode($this->Session->read("keypass"));

                                    $subject  = $mailMessage['EmailTemplate']['subject'];              

                                    $subject = str_replace('[[PROJECT_NAME]]',$pt_new_name,$subject);                        

                                    $from = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromemail'];

                                    $fromname = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromname']; 

                                    $mailBody=$mailMessage['EmailTemplate']['content'];

                                   

                                    /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button      **/   

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    $condition = "id='1'";

                                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                    $mailBody.=$mailfooter;

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    

                                    

                                    // Set path to inserted image 

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                                    

                                    $to = trim($this->data['Holder']['email']);



                                    /**

                                    * New Email Temp replacement code for data Elements 

                                    */

                                     //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                        $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                     //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                        $dataEleValuesArray[DATA_ELEMENT_USER_NAME]= trim($this->data['Holder']['email']);   

                                        $dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= trim($userpass);   

                                        $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                     //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                        $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                        $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                        

                                    $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                                    

                                    $ccemail = $mailMessage['EmailTemplate']['send_cc_email'];

                                    

                                  /*  if($ccemail==1)

                                    {

                                        $to_cc_email=$from;

                                        

                                        $this->Sendemail->sendMailContentWithCC($to_cc_email,$from,$subject,$mailBody,$fromname);

                                    }    */

                                    

                                    $this->Session->delete("keypass");

                                }        



                            }



                            unset($_SESSION['FacebookUser']);



                            $condition = " User.username = '".$email."' and User.delete_status='0' and User.project_id='$project_id'";

                            $userDetails = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));    

                            if(is_array($userDetails) && !empty($userDetails)) {





                                $this->Session->write('NewUser', $userDetails);

                                $this->Session->write('CurrentProject', $project_id);

                                $this->redirect(array('controller' => 'companies', 'action' => 'coinregister', 'register'));



                            }else{    

                                $_SESSION['flashmessage']='Username and Password mismatched';        







                                $this->redirect(array('controller' => 'companies', 'action' => 'user_register'));

                            }



                        }



                    }else{

                        $_SESSION['flashmessage']='Error occur during registration.';    

                    }

                    $_SESSION['registercoin']=1;        

                    unset($_SESSION['FacebookUser']);

                    $this->Session->delete('NewUser');

                    $this->redirect(array('controller' => 'companies', 'action' => 'user_register'));

                }



            }else{

                $_SESSION['flashmessage']='Please enable your email address from your facekbook account to register.';

                //$this->redirect('/companies/signup');$_SESSION['registercoin']=1;        

                unset($_SESSION['FacebookUser']);

                $this->Session->delete('NewUser');

                $this->redirect(array('controller' => 'companies', 'action' => 'user_register'));

            }





        }





        function getprojectdetails1(){

            $project_id=$this->Session->read("projectwebsite_id");   



            App::import('Model','Project');

            $this->Project = new Project();

            $condition1 = "id = '$project_id'";



            $resultdata1=$this->Project->find('first',array("conditions"=>$condition1));



            if(!empty($resultdata1))

                return $resultdata1;

            else

                return;

        }













        function getstyles(){

            $project_id=$this->Session->read("projectwebsite_id");

            App::import('Model','Theme');

            $this->Theme = new Theme();

            $condition1 = "project_id = '$project_id'";



            $resultdata=$this->Theme->find('first',array("conditions"=>$condition1));



            if(!empty($resultdata))

                return $resultdata;

            else

                return;

        }

        function getstart(){

            $this->layout= 'new_sponsor_layout';

            App::import('Model','GetStart');

            $this->GetStart = new GetStart();

            $dt=$this->GetStart->find("all");

            $this->set("value",$dt);





        }



        /*******************************************************************

        * Function Name: settingthemes

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 09 June, 2011

        ********************************************************************/



        function settingthemes(){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','settingthemes');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $projectDetails=$this->getprojectdetails($project_id);



            $this->set('project',$projectDetails);



            $this->set('project_name',$project_name);



            App::import("Model", "Project");

            $this->Project =  & new Project();





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '31'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            if(!empty($this->data['Project'])) {

                $this->File = & new FileComponent;

                $filePath =  'img' . DS . $project_name . DS.'uploads' ;

                $this->File->setDestPath($filePath);

                $this->data['Project']['id']=$project_id; 



                if($this->data['Project']['coinlogo']['name'] !=''){

                    ##upload image

                    $file_name3 = $this->File->setFileName($this->data['Project']['coinlogo']['name']); 

                    $tmp3 = $this->data['Project']['coinlogo']['tmp_name'];

                    $file_namelogo = $this->File->uploadlogo($file_name3,$tmp3,true);

                    $uploadedfilepath = 'img' . DS . $project_name . DS.'uploads/'. $file_namelogo ;



                    $setnewdiamentions = $this->checkmaxfilesize($uploadedfilepath);

                    unlink($uploadedfilepath);

                    $file_name3 = $this->File->setFileName($this->data['Project']['coinlogo']['name']); 

                    $tmp3 = $this->data['Project']['coinlogo']['tmp_name'];

                    $file_namelogo = $this->File->uploadlogo($file_name3,$tmp3,true,$setnewdiamentions);



                    $this->data['Project']['logo'] = $file_namelogo;

                }





                if($this->Project->Save($this->data['Project'])) {



                    $this->Session->setFlash('Changes to the Themes added Sucessfully.','default', array('class' => 'successmsg'));





                }else{

                    $this->Session->setFlash('Error in processing.','default',array('class' => 'errormsg'));

                }



            }



            if(!empty($this->data['Theme'])) {

                $this->File = & new FileComponent;

                $filePath =  'img' . DS . $project_name . DS.'uploads' ;

                $this->File->setDestPath($filePath);

                $themeid=$this->data['Theme']['themeid'];



                if($this->data['Theme']['sitebackgroundimage']['name'] !=''){

                    $file_name12 = $this->File->setFileName($this->data['Theme']['sitebackgroundimage']['name']); 

                    $tmp12 = $this->data['Theme']['sitebackgroundimage']['tmp_name'];

                    $fileNameback = $this->File->uploadbackgroundimage($file_name12,$tmp12,true);

                    if(!empty($fileNameback)){

                        $this->data['Theme']['backgroundimage'] = $fileNameback;

                    }

                    else{    

                        unset($this->data['Theme']['backgroundimage']);    

                    }

                }



                if($this->data['Companies']['clearbackimage']==1)

                {

                    $this->data['Theme']['backgroundimage']="";

                }

                $this->data['Theme']['project_id']=$project_id;

                $this->data['Theme']['id']=$themeid;



                if($this->Theme->Save($this->data['Theme'])) {



                    $this->Session->setFlash('Changes to the Themes added Sucessfully.','default', array('class' => 'successmsg'));



                    if(isset($this->data['Action']['redirectpage'])){

                        $this->redirect('/companies/dashboard');

                    }else{

                        $this->redirect("/companies/settingthemes/");

                    }

                }else{

                    $this->Session->setFlash('Error in processing.','default',array('class' => 'errormsg'));

                }



            }











            $this->data1=$this->Project->find('first',array('conditions'=>array('id'=>$project_id)));

            $this->data = $this->Theme->find('first',array('conditions'=>array('project_id'=>$project_id)));



            $this->data = array_merge($this->data,$this->data1);

        }



        function socialnetwork(){



            ##import ProjectGraphic  model for processing

            $this->layout= 'new_sponsor_layout';

            $projectid = $this->Session->read("projectwebsite_id");

            $this->set("projectid",$projectid);

            $prodtl = $this->projectdetailbyid($projectid);

            $projectname = $prodtl[0]['Project']['project_name'];

            $this->set("projectname",$projectname);

            App::import("Model", "ProjectGraphic");

            $this->ProjectGraphic =   & new ProjectGraphic();    

            #set the posted data

            ##check empty data

            

            if(!empty($this->data)) {

                ##Show Option Page Graphic:

                $conditions = "ProjectGraphic.project_id = '".$projectid."' AND  ProjectGraphic.delete_status = '0'";

                $proj_grap_arr =  $this->ProjectGraphic->find("all",array('conditions'=>$conditions));

                if(count($proj_grap_arr) > 0)

                {

                    $this->ProjectGraphic->deleteAll($conditions, $cascade = true);

                }

                //print_r($this->data);die;

                // For linkedin

                if((isset($this->data['Companies']['imagenameold_link']['name']) && $this->data['Companies']['imagenameold_link']['name'] !='') || (isset($this->data['ProjectGraphic']['image_link']) && $this->data['ProjectGraphic']['image_link'] !='' )){

                    if(isset($this->data['Companies']['imagenameold_link']['name']) && $this->data['Companies']['imagenameold_link']['name'] !='') {

                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_link']['name']); 

                        $tmp1 = $this->data['Companies']['imagenameold_link']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33');

                    } else {

                        $fileNamesidea = $this->data['ProjectGraphic']['image_link'];

                    }



                    $this->data1['ProjectGraphic']['project_id'] = $projectid;

                    $this->data1['ProjectGraphic']['title'] = $this->data['Companies']['title_link'];

                    $this->data1['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data1['ProjectGraphic']['address'] = $this->data['Companies']['address_link'];



                    if(isset($this->data['Companies']['activestatus_link']) && $this->data['Companies']['activestatus_link']==1)

                        $this->data1['ProjectGraphic']['iframe_icon'] = 1;

                    else

                        $this->data1['ProjectGraphic']['iframe_icon'] = 0;



                    if(isset($this->data['Companies']['activestatus_link1']) && $this->data['Companies']['activestatus_link1']==1)

                        $this->data1['ProjectGraphic']['home_icon'] = 1;

                    else

                        $this->data1['ProjectGraphic']['home_icon'] = 0;

                    

                    $this->data1['ProjectGraphic']['active_status'] = 1;

                    $this->ProjectGraphic->Save($this->data1['ProjectGraphic']);

                    $this->Session->setFlash('Social network added successfully.','default', array('class' => 'successmsg'));









                }

                // For Facebook

                unset($this->ProjectGraphic);

                App::import('Model','ProjectGraphic');

                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Companies']['imagenameold_face']['name']) && $this->data['Companies']['imagenameold_face']['name'] !='') || (isset($this->data['ProjectGraphic']['image_face']) && $this->data['ProjectGraphic']['image_face'] !='')){

                    if(isset($this->data['Companies']['imagenameold_face']['name']) && $this->data['Companies']['imagenameold_face']['name'] !='') {

                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_face']['name']); 

                        $tmp1 = $this->data['Companies']['imagenameold_face']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                        $fileNamesidea = $this->data['ProjectGraphic']['image_face'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_face'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_face'];



                    if(isset($this->data['Companies']['activestatus_face']) && $this->data['Companies']['activestatus_face']==1)

                        $this->data['ProjectGraphic']['iframe_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['iframe_icon'] = 0;



                    if(isset($this->data['Companies']['activestatus_link2']) && $this->data['Companies']['activestatus_link2']==1)

                        $this->data['ProjectGraphic']['home_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['home_icon'] = 0;    

                        

                    $this->data['ProjectGraphic']['active_status'] = 1;

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                }

              

                // For Twitter

                unset($this->ProjectGraphic);

                App::import('Model','ProjectGraphic');

                $this->ProjectGraphic = new ProjectGraphic();

                if((isset($this->data['Companies']['imagenameold_twit']['name']) && $this->data['Companies']['imagenameold_twit']['name'] !='') || (isset($this->data['ProjectGraphic']['image_twit']) && $this->data['ProjectGraphic']['image_twit'] !='' )){

                    if(isset($this->data['Companies']['imagenameold_twit']['name']) && $this->data['Companies']['imagenameold_twit']['name'] !='') {

                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_twit']['name']); 

                        $tmp1 = $this->data['Companies']['imagenameold_twit']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                        $fileNamesidea = $this->data['ProjectGraphic']['image_twit'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_twit'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_twit'];



                    if(isset($this->data['Companies']['activestatus_twit']) && $this->data['Companies']['activestatus_twit']==1)

                        $this->data['ProjectGraphic']['iframe_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['iframe_icon'] = 0;



                    if(isset($this->data['Companies']['activestatus_link3']) && $this->data['Companies']['activestatus_link3']==1)

                        $this->data['ProjectGraphic']['home_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['home_icon'] = 0;    

                        

                    $this->data['ProjectGraphic']['active_status'] = 1;

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                }

                

                //For Donation

                unset($this->ProjectGraphic);

                App::import('Model','ProjectGraphic');

                $this->ProjectGraphic = new ProjectGraphic();



                if((isset($this->data['Companies']['imagenameold_don']['name']) && $this->data['Companies']['imagenameold_don']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don']) && $this->data['ProjectGraphic']['image_don'] !='' )){

                    if(isset($this->data['Companies']['imagenameold_don']['name']) && $this->data['Companies']['imagenameold_don']['name'] !='') {

                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don']['name']); 

                        $tmp1 = $this->data['Companies']['imagenameold_don']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                        $fileNamesidea = $this->data['ProjectGraphic']['image_don'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don'];



                    if(isset($this->data['Companies']['activestatus_don']) && $this->data['Companies']['activestatus_don']==1)

                        $this->data['ProjectGraphic']['iframe_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['iframe_icon'] = 0;



                    if(isset($this->data['Companies']['activestatus_link4']) && $this->data['Companies']['activestatus_link4']==1)

                        $this->data['ProjectGraphic']['home_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['home_icon'] = 0;



                     $this->data['ProjectGraphic']['active_status'] = 1;    

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                }



                //For Donation1

                unset($this->ProjectGraphic);

                App::import('Model','ProjectGraphic');

                $this->ProjectGraphic = new ProjectGraphic();



                if((isset($this->data['Companies']['imagenameold_don1']['name']) && $this->data['Companies']['imagenameold_don1']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don1']) && $this->data['ProjectGraphic']['image_don1'] !='' )){

                    if(isset($this->data['Companies']['imagenameold_don1']['name']) && $this->data['Companies']['imagenameold_don1']['name'] !='') {

                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don1']['name']); 

                        $tmp1 = $this->data['Companies']['imagenameold_don1']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                        $fileNamesidea = $this->data['ProjectGraphic']['image_don1'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don1'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don1'];



                    if(isset($this->data['Companies']['activestatus_don1']) && $this->data['Companies']['activestatus_don1']==1)

                        $this->data['ProjectGraphic']['iframe_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['iframe_icon'] = 0;



                    if(isset($this->data['Companies']['activestatus_link5']) && $this->data['Companies']['activestatus_link5']==1)

                        $this->data['ProjectGraphic']['home_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['home_icon'] = 0;

                    

                    $this->data['ProjectGraphic']['active_status'] = 1;    

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                }

                

                //For Donation2

                unset($this->ProjectGraphic);

                App::import('Model','ProjectGraphic');

                $this->ProjectGraphic = new ProjectGraphic();



                if((isset($this->data['Companies']['imagenameold_don2']['name']) && $this->data['Companies']['imagenameold_don2']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don2']) && $this->data['ProjectGraphic']['image_don2'] !='' )){

                    if(isset($this->data['Companies']['imagenameold_don2']['name']) && $this->data['Companies']['imagenameold_don2']['name'] !='') {

                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don2']['name']); 

                        $tmp1 = $this->data['Companies']['imagenameold_don2']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                        $fileNamesidea = $this->data['ProjectGraphic']['image_don2'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don2'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don2'];



                    if(isset($this->data['Companies']['activestatus_link6']) && $this->data['Companies']['activestatus_link6']==1)

                        $this->data['ProjectGraphic']['iframe_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['iframe_icon'] = 0;



                    if(isset($this->data['Companies']['activestatus_link6']) && $this->data['Companies']['activestatus_link6']==1)

                        $this->data['ProjectGraphic']['home_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['home_icon'] = 0;



                    $this->data['ProjectGraphic']['active_status'] = 1;    

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                }

                //For Donation3

                unset($this->ProjectGraphic);

                App::import('Model','ProjectGraphic');

                $this->ProjectGraphic = new ProjectGraphic();



                if((isset($this->data['Companies']['imagenameold_don3']['name']) && $this->data['Companies']['imagenameold_don3']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don3']) && $this->data['ProjectGraphic']['image_don3'] !='' )){

                    if(isset($this->data['Companies']['imagenameold_don3']['name']) && $this->data['Companies']['imagenameold_don3']['name'] !='') {

                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don3']['name']); 

                        $tmp1 = $this->data['Companies']['imagenameold_don3']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                        $fileNamesidea = $this->data['ProjectGraphic']['image_don3'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don3'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don3'];



                    if(isset($this->data['Companies']['activestatus_don3']) && $this->data['Companies']['activestatus_don3']==1)

                        $this->data['ProjectGraphic']['iframe_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['iframe_icon'] = 0;



                    if(isset($this->data['Companies']['activestatus_link7']) && $this->data['Companies']['activestatus_link7']==1)

                        $this->data['ProjectGraphic']['home_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['home_icon'] = 0;





                    $this->data['ProjectGraphic']['active_status'] = 1;    

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                }



                //For Donation3

                unset($this->ProjectGraphic);

                App::import('Model','ProjectGraphic');

                $this->ProjectGraphic = new ProjectGraphic();



                if((isset($this->data['Companies']['imagenameold_don4']['name']) && $this->data['Companies']['imagenameold_don4']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don4']) && $this->data['ProjectGraphic']['image_don4'] !='' )){

                    if(isset($this->data['Companies']['imagenameold_don4']['name']) && $this->data['Companies']['imagenameold_don4']['name'] !='') {

                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don4']['name']); 

                        $tmp1 = $this->data['Companies']['imagenameold_don4']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                        $fileNamesidea = $this->data['ProjectGraphic']['image_don4'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don4'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don4'];



                    if(isset($this->data['Companies']['activestatus_don4']) && $this->data['Companies']['activestatus_don4']==1)

                        $this->data['ProjectGraphic']['iframe_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['iframe_icon'] = 0;





                    if(isset($this->data['Companies']['activestatus_link8']) && $this->data['Companies']['activestatus_link8']==1)

                        $this->data['ProjectGraphic']['home_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['home_icon'] = 0;



                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                }



                //For Donation4

                unset($this->ProjectGraphic);

                App::import('Model','ProjectGraphic');

                $this->ProjectGraphic = new ProjectGraphic();



                if((isset($this->data['Companies']['imagenameold_don5']['name']) && $this->data['Companies']['imagenameold_don5']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don5']) && $this->data['ProjectGraphic']['image_don5'] !='' )){

                    if(isset($this->data['Companies']['imagenameold_don5']['name']) && $this->data['Companies']['imagenameold_don5']['name'] !='') {

                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don5']['name']); 

                        $tmp1 = $this->data['Companies']['imagenameold_don5']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                        $fileNamesidea = $this->data['ProjectGraphic']['image_don5'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don5'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don5'];



                    if(isset($this->data['Companies']['activestatus_don5']) && $this->data['Companies']['activestatus_don5']==1)

                        $this->data['ProjectGraphic']['iframe_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['iframe_icon'] = 0;





                    if(isset($this->data['Companies']['activestatus_link9']) && $this->data['Companies']['activestatus_link9']==1)

                        $this->data['ProjectGraphic']['home_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['home_icon'] = 0;



                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                }



                //For Donation5

                unset($this->ProjectGraphic);

                App::import('Model','ProjectGraphic');

                $this->ProjectGraphic = new ProjectGraphic();



                if((isset($this->data['Companies']['imagenameold_don6']['name']) && $this->data['Companies']['imagenameold_don6']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don6']) && $this->data['ProjectGraphic']['image_don6'] !='' )){

                    if(isset($this->data['Companies']['imagenameold_don6']['name']) && $this->data['Companies']['imagenameold_don6']['name'] !='') {

                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don6']['name']); 

                        $tmp1 = $this->data['Companies']['imagenameold_don6']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                        $fileNamesidea = $this->data['ProjectGraphic']['image_don6'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don6'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don6'];



                    if(isset($this->data['Companies']['activestatus_don6']) && $this->data['Companies']['activestatus_don6']==1)

                        $this->data['ProjectGraphic']['iframe_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['iframe_icon'] = 0;



                    if(isset($this->data['Companies']['activestatus_link10']) && $this->data['Companies']['activestatus_link10']==1)

                        $this->data['ProjectGraphic']['home_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['home_icon'] = 0;

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                }  

                //For Donation6

                unset($this->ProjectGraphic);

                App::import('Model','ProjectGraphic');

                $this->ProjectGraphic = new ProjectGraphic();



                if((isset($this->data['Companies']['imagenameold_don7']['name']) && $this->data['Companies']['imagenameold_don7']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don7']) && $this->data['ProjectGraphic']['image_don7'] !='' )){

                    if(isset($this->data['Companies']['imagenameold_don7']['name']) && $this->data['Companies']['imagenameold_don7']['name'] !='') {

                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don7']['name']); 

                        $tmp1 = $this->data['Companies']['imagenameold_don7']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                        $fileNamesidea = $this->data['ProjectGraphic']['image_don7'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don7'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don7'];



                    if(isset($this->data['Companies']['activestatus_don7']) && $this->data['Companies']['activestatus_don7']==1)

                        $this->data['ProjectGraphic']['iframe_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['iframe_icon'] = 0;



                    if(isset($this->data['Companies']['activestatus_link11']) && $this->data['Companies']['activestatus_link11']==1)

                        $this->data['ProjectGraphic']['home_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['home_icon'] = 0;

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                }

                //For Donation7

                unset($this->ProjectGraphic);

                App::import('Model','ProjectGraphic');

                $this->ProjectGraphic = new ProjectGraphic();



                if((isset($this->data['Companies']['imagenameold_don8']['name']) && $this->data['Companies']['imagenameold_don8']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don8']) && $this->data['ProjectGraphic']['image_don8'] !='')){

                    if(isset($this->data['Companies']['imagenameold_don8']['name']) && $this->data['Companies']['imagenameold_don8']['name'] !='') {

                        $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                        $this->File->setDestPath($filePath);



                        $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don8']['name']); 

                        $tmp1 = $this->data['Companies']['imagenameold_don8']['tmp_name'];

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                    } else {

                        $fileNamesidea = $this->data['ProjectGraphic']['image_don8'];

                    }



                    $this->data['ProjectGraphic']['project_id'] = $projectid;

                    $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don8'];

                    $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                    $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don8'];



                    if(isset($this->data['Companies']['activestatus_don8']) && $this->data['Companies']['activestatus_don8']==1)

                        $this->data['ProjectGraphic']['iframe_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['iframe_icon'] = 0;



                    if(isset($this->data['Companies']['activestatus_link12']) && $this->data['Companies']['activestatus_link12']==1)

                        $this->data['ProjectGraphic']['home_icon'] = 1;

                    else

                        $this->data['ProjectGraphic']['home_icon'] = 0;

                    $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                }











            }



            $conditiongra = "ProjectGraphic.project_id='$projectid' AND  ProjectGraphic.delete_status='0'";

            //$conditiongra = "ProjectGrap$socialiconshic.project_id='$projectid' AND  ProjectGraphic.delete_status='0'";    

            $graphicarr = $this->ProjectGraphic->find('all',array("conditions"=>$conditiongra,'order'=>'ProjectGraphic.id ASC'));

            $this->set('graphiclist',$graphicarr);

        }    



        function socialicon($project_id=null){

            $this->layout = "";

            if($project_id==null){

                $project_id = $this->Session->read("projectwebsite_id");

            }

            

            App::import('Model','Project');

            $this->Project = new Project();

            $prname = $this->Project->find('all',array('conditions'=>array('Project.id'=>$project_id),'fields'=>array('Project.project_name')));

            $this->set('project_na',$prname);

            if(isset($prname) && $prname!=""){

                            

                    App::import('Model','ProjectGraphic');

                    $this->ProjectGraphic = new ProjectGraphic();



                    $socialiconsArr = $this->ProjectGraphic->find('all',array('conditions'=>array('ProjectGraphic.project_id'=>$project_id,'ProjectGraphic.iframe_icon'=>1, 'ProjectGraphic.active_status'=>1, 'ProjectGraphic.delete_status'=>0), 'order'=>'ProjectGraphic.id ASC'));

                    $this->set('socialicons',$socialiconsArr);

            }



        }









        /*******************************************************************

        * Function Name: 

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 Feb, 2011

        ********************************************************************/

        function registeruser(){



            //Configure::write('debug', 2);    

            $this->layout= 'internal_layout';

            $reg_now  =false;

			//echo Controller::referer();

            //for active menu display

            $this->set('page_url','registeruser');

			$fbsession = $this->Session->read("facebookSesion");

			$gplusSession = $this->Session->read("gplus");

			

			$twittSession = $this->Session->read("twitterSesion");



			if(!empty($fbsession)){			

				$email = $fbsession['email'];

				$fbfname = $fbsession['first_name'];

				$fblname = $fbsession['last_name'];

				$fbid = $fbsession['oauth_uid'];

								

				$this->set('email',$email);

				$this->set('fname',$fname);

				$this->set('lname',$lname);

			}

			

			if(!empty($twittSession)){

				//print_r($twittSession);

				$screenName = $twittSession['screenName'];

				$tfname = $twittSession['first_name'];

				$tlname = $twittSession['last_name'];

				$tweetid = $twittSession['oauth_uid'];

				$profilepic = $twittSession['profilepic'];

				$this->set('screenName',$screenName);

				$this->set('fname',$fname);

				$this->set('lname',$lname);

			}

			if(!empty($gplusSession)){

				$screenName = $gplusSession['screen_name'];

				$email = $gplusSession['email'];

				$gplusefname = $gplusSession['first_name'];				

				$gpluseId = $gplusSession['oauth_uid'];								

				$this->set('email',$email);

				$this->set('fname',$gplusefname);

				$this->set('screenName',$screenName);

			}



			//$project_id = $this->Session->read("projectwebsite_id");    

            //$project_name=$this->Session->read("projectwebsite_name");   

			$project_id = '1';

            $page_content=$this->getcontents("register");

            $this->set('page_content',$page_content);

            // Changes by mahesh

            $numunites_count = $this->getcoinsetsunitbyprojectid($project_id);



			$projectDetails = $this->getprojectdetails($project_id);  

            $this->set('numunites_count',$numunites_count);      

			$project_name =$projectDetails['Project']['project_name'];       

            if(empty($project_name)) $this->redirect(array('controller'=>'companies','action'=>'ession_expired'));

            $this->set('project_name',$project_name);               

            $this->set('project',$projectDetails);  

            $conditioncoinset = "project_id = '".$projectDetails['Project']['id']."' and  active_status='1' and delete_status='0'";



            ##check already exists company name

            $consetdatacond = $this->Coinset->find('first',array("conditions"=>$conditioncoinset));

			//$this->pl($consetdatacond);	

            $this->set('coinsdetail',$consetdatacond);

            $this->set('status',"Verified"); 

			if($projectDetails['ProjectType']['coin_verification']=="0")    {

                //        $this->set('status',"Verified");

            }



            $this->set("selectedcountry",'');

            $this->set("selectedstate",'');



            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $this->set('meta_title',$projectDetails['Project']['sitename']);

            $this->set('page_title',$projectDetails['Project']['sitename']);



            //if admin has made the registration through csv file then a t_id is append with the registeruser url which is user_id with no activation

            if(isset($_GET['t_id']))   

            {

                $user_id = $_GET['t_id'];

                $this->Session->write("temp_user_id",$user_id);



                $holder_data=$this->Holder->find("first",array("conditions"=>array("user_id = $user_id and project_id=$project_id")));

                $this->set('holder_data',$holder_data);

			}            

            //if the user is coming through twitter invitation

            if(isset($_GET['invite_id']))   

            {

                $invite_id=$_GET['invite_id'];

                $this->Session->write("invite_id",$invite_id);

			}

            

			if(isset($this->data['Company'])){

				//pr($this->data);die;

                if(trim($this->data['Company']['coinset'])=="")

                {

                    $status="Empty coin serial";

                }else{

                    if($this->verify(trim($this->data['Company']['coinset']),trim($this->data['Company']['code']))==true)

                    {

                        //checking whether it is already registered or not

                        $condition1 = "CoinsHolder.serialnum='".trim($this->data['Company']['coinset'])."' and CoinsHolder.is_current_holder  = '1' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";

                        $coinset_alregistered = $this->CoinsHolder->find('count', array('conditions' => $condition1));

                        if($coinset_alregistered>0) {

                            if($projectDetails['ProjectType']['istransferable']==1){         

								$reg_now=true;                         

                                $status="Verified";

                                $this->set('tempserial',trim($this->data['Company']['coinset']));

                                $this->set('tempkey',trim($this->data['Company']['code']));

                                $tempserial=$this->data['Company']['coinset'];

                                $tempkey=$this->data['Company']['code'];

                            }

                            else

                            {

                                $status="Not Verified";

                                $this->Session->setFlash("This coin is already registered.As coin is not transferable,you can not register it again.",'default',array('class' => 'errormsg_coinverify'));

                                if($projectDetails['ProjectType']['coin_verification']=="0")    {

                                    $this->redirect("http://".HTTP_PATH."/".$project_name);

                                }

                            }                                                

                        }

                        else

                        {       $reg_now=true;                                 

                            $status="Verified";    

                            $this->set('tempserial',trim($this->data['Company']['coinset']));

                            $this->set('tempkey',trim($this->data['Company']['code']));                

                            $tempserial=$this->data['Company']['coinset'];

                            $tempkey=$this->data['Company']['code'];              

                        }

                    }

                    else{

                        $status="Not Verified";

                        $this->Session->setFlash("Sreial # or code not Verified",'default',array('class' => 'errormsg_coinverify'));

                        if($projectDetails['ProjectType']['coin_verification']=="0")    {

                            $this->redirect("http://".HTTP_PATH."/".$project_name);

                        }

                    }

                }            

                $this->set('status',$status);

            }

           if(isset($this->data['Holder'])){        

				

				$this->set('status',trim($this->data['Holder']['coinstatus']));

                $errorString ='';    



                if(trim($this->data['Holder']['coinstatus'])!="Verified")

                    $errorString .="Serial is not verified.<br/>";



                //screenname checking            

                if(trim($this->data['Holder']['screenname'])=="")

                {

                    $errorString .="Screen Name is required.<br/>";

                }else{

                     $uniqueHolder = $this->Holder->isUniqueScreenName($this->data['Holder']['screenname'], $project_id);

                    if ($uniqueHolder == false) {

                        $errorString .="Screen name already exists.<br/>";

                    }

                }



                //password checking            

                if(trim($this->data['Holder']['password']) == ''){

                    $errorString .="Please enter password<br/>";                

                }else{

                    if(strlen(trim($this->data['Holder']['password'])) < 6 ){

                        $errorString .="Password must have atleast 6 character.<br/>";    

                    }

                }



                //email checking

                if(trim($this->data['Holder']['email']) == '' ){

                    $errorString .="Please enter email address<br/>";                

                }else{

                    if(!eregi("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$", trim($this->data['Holder']['email']))){

                        $errorString .="Please enter valid email address.<br/>";                

                    }

                    else{

                        $condition = "email = '".$this->data['Holder']['email']."' and  project_id='".$project_id."' and delete_status='0'";

                        $usersession = $this->Holder->find('first', array('conditions' => $condition));



                        if($this->Session->read("temp_user_id")=="")       //if temp id is present then user came through csv upload and is already in DB

                        {



                            if(is_array($usersession) && !empty($usersession)) {

                                $errorString .=" If you have already Registered and want to Register a New Coin, please Login and Add the Coin in Your Dashboard";

                                if(trim($this->data['Holder']['email']) != trim($this->data['Holder']['revemail'])){

                                    $errorString .="email & confirm email must be same<br/>";                

                                }

                            }

                        }

                    }

                }





                if(trim($this->data['Holder']['zipcode'])=="")

                    $errorString .="Zip is required.<br/>";    



                if(trim($this->data['Holder']['country'])=="")

                    $errorString .="Country is required.<br/>";        



                if(trim($errorString) !=''){                

                    // If Error Show error                 

                    $this->Session->setFlash($errorString,'default',array('class' => 'errormsg_register'));

					

                }else{



					$tempserial='';

					if($projectDetails['Project']['registration_confirmation']=="0")

                    {    

                        $tempserial=$this->data['Holder']['tempserial'];

                        $tempkey=$this->data['Holder']['tempkey'];

                        $this->data['Holder']['tempkey']=0;

                        $this->data['Holder']['tempserial']='';

                        $active_status='1';

                    }

					

                    else $active_status='0';

                    

					$this->data['User']['project_id']=$project_id;

                   // $this->data['User']['active_status']=$active_status;

                    $this->data['User']['username']=$this->data['Holder']['email'];

                    $this->data['User']['password']=md5($this->data['Holder']['password']);

                    $this->data['User']['usertype']='holder';

				

					$fbsession = $this->Session->read("facebookSesion");

					

					

					if(!empty($fbsession)){

					$this->data['User']['fbid']=$fbid;

					}

					if(!empty($twittSession)){       

						$this->data['User']['avatar_url'] = $profilepic;

					}

					

                    $this->Session->write('new_user_data', $this->data['User']);

				

					//$startdate1=explode("/",$this->data['Holder']['birthday']);

                    //$birthdate=$startdate1[2]."-".$startdate1[0]."-".$startdate1[1];

                   // $this->data['Holder']['birthday']=$birthdate;

                    $this->data['Holder']['project_id']=$project_id;

                    $this->data['Holder']['user_id']=0;              // after saving user we will get it $new_member_id

                    $this->data['Holder']['active_status']=$active_status;

					$this->Session->write('new_holder_data', $this->data['Holder']);  

                    $is_coin = $this->data['Holder']['havecoin'];  

                    /**********    START **********/

                //var_dump($numunites_count);

				

					if(empty($projectDetails['ProjectType']['coin_verification']) || $projectDetails['ProjectType']['coin_verification'] == "0"){

                        // Coin not required to register

						//$this->pl($projectDetails);

						if($is_coin){

                            // If user have  coin  : Screen 4 - Register Coin

                            $status="Not Verified";

                            $this->set("status",$status); 



                        }else{

                            $reg_now=true;

                        }

                    }else{

                       // if coinset not defined then do direct user registration without user coin registration

                       

                       if($numunites_count > 0 )  

                          { 

                           // Coinset defined and Coin required to register

                            if($is_coin){

                                // If user have  coin  : Screen 4 - Register Coin

                                $status="Not Verified";   

                                $this->set("status",$status);

                            }else{

                                // If user not have  coin  : Screen 5 -  Coin Registertion required

                                $status="Not Verified";

                               // $this->Session->setFlash("Coin registration is required.",'default',array('class' => 'errormsg_coinverify'));

                                $this->set("status",$status);

                                $this->redirect(array('controller'=>'companies','action'=>'register_process','coin_req'));  



                            } 

                      }else{

                          // Coinset not defined and do registrtion

                          $reg_now=true;

                      }

                    }



                    /***********    END **********************/







                    //$this->redirect('/companies/signup');

                }



            }

			//var_dump($reg_now);
            if($reg_now){

                // Save user data  

                $this->data['User']= $this->Session->read('new_user_data');

				

                if($this->Session->read("temp_user_id"))    //user came through csv upload 

                {

                    $this->data['User']['id']=$this->Session->read("temp_user_id"); 



                    $condition = "user_id = '".$this->data['User']['id']."' and  project_id='".$project_id."'";

                    $hold_data = $this->Holder->find('first', array('conditions' => $condition));

                    $holder_id=$hold_data['Holder']['id'];

                    $this->data['Holder']['id']=$holder_id; 

                    $this->Session->write("temp_user_id","");  

                }

				                

                if($this->Session->read("invite_id"))    //user came through twitter invitation

                {

                    

                    $invitation_details=$this->Invitation->find("first",array('conditions' => "invite_id=".$this->Session->read("invite_id")));

                    $invite_user_id=$invitation_details['Invitation']['user_id'];

                    $invite_project_id=$invitation_details['Invitation']['project_id'];

                    

                    //triggered points setup for user

                    $this->Point->triggerPoints(POINTS_PER_FRIEND_JOIN,$invite_project_id,$invite_user_id);        //trigger for invitation

                    $this->Point->triggerPoints("FRIEND_JOIN_BONUS_CHECK",$invite_project_id,$invite_user_id);        //trigger for no of invitation check                  

                    $this->Session->write("invite_id","");

                }

            

                $this->User->save($this->data['User']);    

                //$new_member_id = $this->User->getLastInsertId();

                $new_member_id = $this->User->id;



                //triggered points setup for user

                $this->Point->triggerPoints(REGISTRATION,$project_id,$new_member_id);        //trigger for register

				               

                if($projectDetails['Project']['registration_confirmation']=="0")

                {

                    //for invitation//           

                    $to_user = trim($this->data['Holder']['email']);            

                    $invite_details=$this->Invitation->query("select * from invitations where to_user='".$to_user."' and project_id='".$project_id."' and accepted=0");                         $invite_user_id=$invite_details[0]['invitations']['user_id'];

                    $invite_project_id=$invite_details[0]['invitations']['project_id'];            

                    

                    //set invitation status to this user as accepted

                    $this->Invitation->query("update invitations set accepted=1 where to_user='".$to_user."' and project_id='".$project_id."' ");                                                 

                    if(!empty($invite_details))

                    {

                        //triggered points setup for user

                        $this->Point->triggerPoints(POINTS_PER_FRIEND_JOIN,$invite_project_id,$invite_user_id);        //trigger for invitation

                        $this->Point->triggerPoints("FRIEND_JOIN_BONUS_CHECK",$invite_project_id,$invite_user_id);        //trigger for no of invitation check                  

                    }

                }



                // save holder data

                $this->data['Holder']= $this->Session->read('new_holder_data');

                $this->data['Holder']['user_id']=$new_member_id; 



                // Set default all subscription types check on for user  - Ref. 2-9-12 Critical Review Doc -Item # 232

                $subscriptiontypes_checks=$this->getDefaultSubscriptionTypesChecks();

                $this->data['Holder']['subscription_type_id']= $subscriptiontypes_checks;

                 App::import("Model", "MemberType");  

                $this->MemberType =  & new MemberType();  

                $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_NON_HOLDER, $project_id);

                $this->data['Holder']['member_type']= $member_type['MemberType']['id'];

				

				

				//$this->pl($this->data['Holder']);

				if(!empty($fbsession)){       

						$this->data['Holder']['facebook_userid'] = $fbid;

						$this->data['Holder']['firstname'] = $fbfname;

						$this->data['Holder']['lastnameshow'] = $fblname;

					}



					/*if(!empty($twittSession)){       

						$this->data['Holder']['twitter_userid'] = $tweetid;

						$this->data['Holder']['firstname'] = $tfname;

						$this->data['Holder']['lastnameshow'] = $tlname;

					}*/

				if(!empty($gplusSession)){       

						$this->data['Holder']['google_userid'] = $gpluseId;

						$this->data['Holder']['firstname'] = $gplusefname;

				}

				

				if(!empty($twittSession)){       

					    $this->data['Holder']['twitter_userid'] = $tweetid;

						$this->data['Holder']['firstname'] = $tfname;

						$this->data['Holder']['lastnameshow'] = $tlname;

				}

                $this->Holder->save($this->data['Holder']);



                //$new_holder_id = $this->Holder->getLastInsertId();    

                $new_holder_id = $this->Holder->id;    

                // unset user and holder fro session   

                $this->Session->delete('new_user_data');

                $this->Session->delete('new_holder_data');



                // save user profile completion percetage - registration complete 30%

                $this->data['UserProfileCompletion']['user_id']= $new_member_id;

                App::import("Model", "UserProfileCompletion");

                $this->UserProfileCompletion =  & new UserProfileCompletion();

                $chk= $this->UserProfileCompletion->save($this->data['UserProfileCompletion']);



                if($chk){

                    $svaed= "profile_comp_saved";

                }

                   

                if($projectDetails['Project']['registration_confirmation']=="1")

                {

                    $condition = " EmailTemplate.email_template_name= 'SIGN UP CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                    $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));

                    if(is_array($mailMessage) && !empty($mailMessage)) 

                    {

                        $confirm_signup_link ="<a href='http://".HTTP_PATH."/companies/update_confirmation/".base64_encode($new_holder_id)."' target='_blank'>Confirm Sign up</a>";

                        

                          $to = trim($this->data['Holder']['email']);  

                          $subject  = $mailMessage['EmailTemplate']['subject'];  

                          $from  = $mailMessage['EmailTemplate']['sender'];  

                          $fromname =$from;                 

                          $mailBody=$mailMessage['EmailTemplate']['content'];

                          

                          /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/  

                          ///////////////////////////////// append mail footer set by super admin /////////////////////////

                            $condition = "id='1'";

                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                            $mailBody.=$mailfooter;

                          /////////////////////////////////  append mail footer set by super admin /////////////////////////

                          

                          

                          // Set path to inserted image 

                            $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                

                           /**

                            * New Email Temp replacement code for data Elements 

                            */

                             //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                             //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                $dataEleValuesArray[DATA_ELEMENT_CONFIRM_SIGN_UP_LINK]= $confirm_signup_link;   

                                $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                             //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                        

                          $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);



                    }        



                    $status="ok";

                    $this->set("status1",$status);

                   

                    $reg_email="reg_email";

                    if($tempserial!=""){                        

                       $condition = " Coinset.project_id='".$project_id."' and Coinset.verifycode='".$tempkey."' and Coinset.active_status='1' and Coinset.delete_status='0'";

                        $coinsets = $this->Coinset->find('first', array('conditions' => $condition));    

                        if(is_array($coinsets) and !empty($coinsets))    {        

                            $coinset_id=$coinsets['Coinset']['id'];  

                            //checking whether it is already registered or not

                            $condition1 = " CoinsHolder.serialnum='".$tempserial."' and CoinsHolder.is_current_holder  = '1' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";



                            $coinset_alregistered = $this->CoinsHolder->find('first', array('conditions' => $condition1));

                            if(is_array($coinset_alregistered) && !empty($coinset_alregistered)) {            



                                if($projectDetails['ProjectType']['simple_cointransfer']==1){                

                                    $condition2 = "CoinsHolder.holder_id   = '".$coinset_alregistered['CoinsHolder']['holder_id']."' and CoinsHolder.serialnum = '".$coinset_alregistered['CoinsHolder']['serialnum']."' " ;

                                    $oldcoinholder = $this->CoinsHolder->find('first', array('conditions' => $condition2));



                                    $this->data['CoinsHolder1']['id']=$oldcoinholder['CoinsHolder']['id'];

                                    $this->data['CoinsHolder1']['is_current_holder']='0';

                                    $this->CoinsHolder->save($this->data['CoinsHolder1']);    

                                }

                            }



                            $this->data['CoinsHolder']['project_id']=$project_id;

                            $this->data['CoinsHolder']['coinset_id']=$coinset_id;

                            $this->data['CoinsHolder']['is_current_holder']='1';



                            $this->data['CoinsHolder']['holder_id']=$new_holder_id;

                            $this->data['CoinsHolder']['serialnum']=$tempserial;



                            $this->CoinsHolder->save($this->data['CoinsHolder']);  

                            

                            // Update Holder member type as 'Holder' after registing coin                  

                            $holderarr['Holder']['id']=$new_holder_id;

                             App::import("Model", "MemberType");  

                            $this->MemberType =  & new MemberType();

                            $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_HOLDER, $project_id);

                            $holderarr['Holder']['member_type']= $member_type['MemberType']['id'];

                            $this->Holder->save($holderarr);



                            $condition = " EmailTemplate.email_template_name= 'COIN REGISTER CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                            $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                            if(is_array($mailMessage) && !empty($mailMessage)) 

                            {

                                

                                $subject  = $mailMessage['EmailTemplate']['subject'];              

                                $from =   $mailMessage['EmailTemplate']['sender']; //  $projectDetails['Project']['fromemail'];

                                $fromname =$mailMessage['EmailTemplate']['sender'];  // $projectDetails['Project']['fromname']; 

                                $mailBody=$mailMessage['EmailTemplate']['content'];

                                /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button        **/  

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                $condition = "id='1'";

                                $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                $mailBody.=$mailfooter;

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                               

                                

                                  // Set path to inserted image 

                                  $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                             

                                $to = $this->data['Holder']['email'];



                                 /**

                                 * New Email Temp replacement code for data Elements 

                                 */

                                 //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                 //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                    $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $tempserial;   

                                    $dataEleValuesArray[DATA_ELEMENT_COIN_REGISTRATION_DATE]= Date('Y-m-d');   

                                    $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                 //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                    $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                    $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                            

                                        

                                $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);                               

                              

                            }                         

                          $reg_email="reg_email_coin";

                        }                       

                       

                    }

                    $this->redirect(array('controller'=>'companies','action'=>'register_process',$reg_email));

                }

                else{



                    $condition = " EmailTemplate.email_template_name= 'REGISTRATION CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                    $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                    if(is_array($mailMessage) && !empty($mailMessage)) 

                    {

                        

                        $userpass= base64_decode($this->Session->read("keypass"));

                        $subject  = $mailMessage['EmailTemplate']['subject'];

                        $from = $mailMessage['EmailTemplate']['sender'];              // $projectDetails['Project']['fromemail'];

                        $fromname= $from; //$projectDetails['Project']['fromname'];

                        $mailBody=$mailMessage['EmailTemplate']['content'];

                        /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button      **/    

                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                        $condition = "id='1'";

                        $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                        $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                        $mailBody.=$mailfooter;

                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                        

                        

                          // Set path to inserted image 

                            $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                        $to = trim($this->data['Holder']['email']);

                         /**

                         * New Email Temp replacement code for data Elements 

                         */

                         //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                            $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                         //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                            $dataEleValuesArray[DATA_ELEMENT_USER_NAME]= trim($this->data['Holder']['email']);   

                            $dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= trim($userpass);   

                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                         //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                            $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                            $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);       

                                    

                        $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                        

                        $ccemail = $mailMessage['EmailTemplate']['send_cc_email'];

                        $this->Session->delete("keypass");

					}                       

                    if($tempserial!=""){                



                        $condition = " Coinset.project_id='".$project_id."' and Coinset.verifycode='".$tempkey."' and Coinset.active_status='1' and Coinset.delete_status='0'";

                        $coinsets = $this->Coinset->find('first', array('conditions' => $condition));    

                        if(is_array($coinsets) && !empty($coinsets)) {        

                            $coinset_id=$coinsets['Coinset']['id'];    



                            //checking whether it is already registered or not

                            $condition1 = " CoinsHolder.serialnum='".$tempserial."' and CoinsHolder.is_current_holder  = '1' and  CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";



                            $coinset_alregistered = $this->CoinsHolder->find('first', array('conditions' => $condition1));

                            if(is_array($coinset_alregistered) && !empty($coinset_alregistered)) {            



                                if($projectDetails['ProjectType']['simple_cointransfer']==1){                

                                    $condition2 = "CoinsHolder.holder_id   = '".$coinset_alregistered['CoinsHolder']['holder_id']."' and CoinsHolder.serialnum = '".$coinset_alregistered['CoinsHolder']['serialnum']."' " ;

                                    $oldcoinholder = $this->CoinsHolder->find('first', array('conditions' => $condition2));



                                    $this->data['CoinsHolder1']['id']=$oldcoinholder['CoinsHolder']['id'];

                                    $this->data['CoinsHolder1']['is_current_holder']='0';

                                    $this->CoinsHolder->save($this->data['CoinsHolder1']);    

                                }

                            }



                            $this->data['CoinsHolder']['project_id']=$project_id;

                            $this->data['CoinsHolder']['coinset_id']=$coinset_id;

                            $this->data['CoinsHolder']['is_current_holder']='1';



                            $this->data['CoinsHolder']['holder_id']=$new_holder_id;

                            $this->data['CoinsHolder']['serialnum']=$tempserial;



                            $this->CoinsHolder->save($this->data['CoinsHolder']);                    

                             // Update Holder member type as 'Holder' after registing coin                  

                            $holderarr['Holder']['id']=$new_holder_id;

                             App::import("Model", "MemberType");  

                            $this->MemberType =  & new MemberType();

                            $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_HOLDER, $project_id);

                            $holderarr['Holder']['member_type']= $member_type['MemberType']['id']; 

                            $this->Holder->save($holderarr);



                            $condition = " EmailTemplate.email_template_name= 'COIN REGISTER CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                            $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                            if(is_array($mailMessage) && !empty($mailMessage)) 

                            {

                               

                                $subject  = $mailMessage['EmailTemplate']['subject'];              

                                $from =   $mailMessage['EmailTemplate']['sender']; //  $projectDetails['Project']['fromemail'];

                                $fromname =$mailMessage['EmailTemplate']['sender'];  // $projectDetails['Project']['fromname'];

                                $mailBody=$mailMessage['EmailTemplate']['content'];

                                 /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                $condition = "id='1'";

                                $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                $mailBody.=$mailfooter;

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                

                                

                                // Set path to inserted image 

                                $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                                $to = $this->data['Holder']['email'];

                                

                                /**

                                 * New Email Temp replacement code for data Elements 

                                 */

                                 //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                 //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                    $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $tempserial;   

                                    $dataEleValuesArray[DATA_ELEMENT_COIN_REGISTRATION_DATE]= Date('Y-m-d');   

                                    $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                 //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                    $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                    $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                    

                                $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                            }

							$this->redirect(array('controller'=>'companies','action'=>'register_process','coin_reg'));  

                        }

                    }else{    

                        $status="ok";

                        $this->set("status1",$status);

                        $this->redirect(array('controller'=>'companies','action'=>'register_process','reg_done'));  

                    }



                }



            }

            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



            ##check default dropdowns        

            if($this->data['Holder']['country']){

                $conid = $this->data['Holder']['country'];

                $this->set("selectedcountry",$conid);

			} 

			

			if(!empty($this->data)) {

				if(!empty($fbsession)){

					$this->Session->delete("facebookSesion");

				}

				if(!empty($twittSession)){

					$twittSession = $this->Session->delete("twitterSesion");

				}

				if(!empty($gplusSession)){

					$gplusSession = $this->Session->delete("gplus");

				}

			}

			require 'twitter/EpiCurl.php'; 

            require 'twitter/EpiOAuth.php';

            require 'twitter/EpiTwitter.php';

           // require 'twitter/secret.php';			

		    

			//$consumer_key = '6pfGRRAR6ys7DwTRFfQ9EQ';

			//$consumer_secret = 'bpq5gQ8bixT7gYxmMk0FIlsLCZT55r0HZ2A127Ftd0';

			//$token = '748855514-lBxk6tUr1IODJKlgbMnfnXAzNw1PZQfapTD9hBLq';

			//$secret= 'qMLEGEH8nVI1gGsPOmrhAXrcUxmRrxbXff8GvrN5oE';

			//$this->pl($projectDetails);

			$consumer_key = $projectDetails['Project']['twitterkey'];

			$consumer_secret = $projectDetails['Project']['twittersecretkey'];

			$token = $projectDetails['Project']['twittertoken'];

			$secret = $projectDetails['Project']['twitterSecret'];			

			//$twitterObjUnAuth = new EpiTwitter($consumer_key, $consumer_secret);

			//$url = $twitterObjUnAuth->getAuthenticateUrl();
            $this->set("twitter_url",$url); 		            



        }



        function register_process($process_type="") {



            //Configure::write('debug', 2);    

            $this->layout= 'internal_layout';        



            //for active menu display

            $this->set('page_url','register_process');



            $project_id='1';

            $projectDetails=$this->getprojectdetails($project_id);    

			$project_name =$projectDetails['Project']['project_name']; 

			if(empty($project_name)) $this->redirect('/companies/session_expired');

            $this->set('project_name',$project_name);

            $this->set('process_type',$process_type);               

            $this->set('project',$projectDetails);            



            $noterror = true; 

        }





        /***********USER REGISTRATION************/



        function user_register(){



            //Configure::write('debug', 2);    

            $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url','user_register');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);    



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $this->set("selectedcountry",'');

            $this->set("selectedstate",'');



            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $conditionpagetitle="Content.internal_alias='register' and Content.project_id=".$project_id." and Content.active_status='1' and Content.delete_status='0' ";



            $page_content= $this->Content->find($conditionpagetitle,NULL,NULL,NULL,NULL,1);        

            $this->set('meta_title',$page_content['Content']['metatitle']);

            $this->set('page_title',$page_content['Content']['metatitle']);



            if (!empty($this->data['Holder'])) {



                $this->set('status',trim($this->data['Holder']['coinstatus']));

                $errorString ='';    



                //coinset verification





                //screenname checking            

                if(trim($this->data['Holder']['screenname'])=="")

                {

                    $errorString .="Screen Name is required.<br/>";

                }





                //password checking            

                if(trim($this->data['Holder']['password']) == ''){

                    $errorString .="Please enter password<br/>";                

                }else{

                    if(strlen(trim($this->data['Holder']['password'])) < 6 ){

                        $errorString .="Password must have atleast 6 character.<br/>";    

                    }

                }



                //email checking

                if(trim($this->data['Holder']['email']) == '' ){

                    $errorString .="Please enter email address<br/>";                

                }else{

                    if(!eregi("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$", trim($this->data['Holder']['email']))){

                        $errorString .="Please enter valid email address.<br/>";                

                    }

                    else{

                        $condition = "email = '".$this->data['Holder']['email']."' and  project_id='".$project_id."' and delete_status='0'";

                        $usersession = $this->Holder->find('first', array('conditions' => $condition));

                        if(is_array($usersession) && !empty($usersession)) {

                            $errorString .=" If you have already Registered and want to Register a New Coin, please Login and Add the Coin in Your Dashboard";

                            if(trim($this->data['Holder']['email']) != trim($this->data['Holder']['revemail'])){

                                $errorString .="email & confirm email must be same<br/>";                

                            }

                        }

                    }

                }







                if(trim($this->data['Holder']['zipcode'])=="")

                    $errorString .="Zip is required.<br/>";    



                if(trim($this->data['Holder']['country'])=="")

                    $errorString .="Country is required.<br/>";        



                if(trim($errorString) !=''){                

                    $this->Session->setFlash($errorString,'default',array('class' => 'errormsg_register'));

                }else{



                    if($projectDetails['Project']['registration_confirmation']=="0")

                    {    

                        $active_status='1';

                    }

                    else $active_status='0';



                    $this->data['User']['project_id']=$project_id;

                    $this->data['User']['active_status']=$active_status;

                    $this->data['User']['username']=$this->data['Holder']['email'];

                    $this->data['User']['password']=md5($this->data['Holder']['password']);

                    $this->data['User']['usertype']='holder';

                    $this->data['User']['last_login']=date("Y-m-d H:i:s");

                    $this->User->save($this->data['User']);    

                    ;          $pass=$this->data['Holder']['password'];

                    $this->Session->write("keypass", base64_encode($pass));

                    $new_member_id = $this->User->getLastInsertId();

                    $this->data['User']['id']=$new_member_id;



                    //$startdate1=explode("/",$this->data['Holder']['birthday']);

                    //$birthdate=$startdate1[2]."-".$startdate1[0]."-".$startdate1[1];



                    //$this->data['Holder']['birthday']=$birthdate;

                    $this->data['Holder']['firstname']=$this->data['Holder']['screenname'];

                    $this->data['Holder']['project_id']=$project_id;

                    $this->data['Holder']['user_id']=$new_member_id;    

                    $this->data['Holder']['active_status']=$active_status;        



                    $this->Holder->save($this->data['Holder']);



                    $new_holder_id = $this->Holder->getLastInsertId();

                    $this->data['Holder']['id'] = $new_holder_id;



                    $this->Session->write('NewUser', $this->data);

                    $this->Session->write('CurrentProject', $project_id);











                    $this->redirect(array('controller' => 'companies', 'action' => 'coinregister', 'register'));

                }

            }



            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



            ##check default dropdowns        

            if($this->data['Holder']['country']){

                $conid = $this->data['Holder']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);

                if($this->data['Holder']['state']>0){

                    $statid = $this->data['Holder']['state'];

                    $this->set("selectedstate",$statid);



                }

            }



            //$this->redirect('/companies/register_coin/register');



        }





        /*********USER REGISTRATION**************/





        function coinregister($register = ''){



            if ($register == 'nocoin') {



                //sending mail to users 





                $_SESSION['registercoin']=1;        

                unset($_SESSION['FacebookUser']);

                $this->Session->delete('NewUser');

                $_SESSION['flashmessage']='Registration requires a Coin and you will have to obtain a coin before completing Registration.';

                $this->redirect(array('controller' => 'companies', 'action' => 'user_register'));

            }

            elseif ($register == 'nocoinreq') {



                $this->__send_registration_email();





            }



            //$this->session_check_user();



            $this->layout= 'internal_layout';



            //for active menu display

            $this->set('page_url',"register_coin");

            $this->set('registeruser', $register);





            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);            



            $projectDetails = $this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);





            $userid = $this->Session->read("NewUser.User.id");





            $conditioncoinset = "project_id = '".$projectDetails['Project']['id']."' and  active_status='1' and delete_status='0'";

            ##check already exists company name

            $consetdatacond = $this->Coinset->find('first',array("conditions"=>$conditioncoinset));

            $this->set('coinsdetail',$consetdatacond);





            if (!empty($this->data)) {

                $serz = $this->data['Coinset']['coinserial'];



                $serz = str_pad($serz,7,"0", STR_PAD_LEFT);





                $errorString ='';



                if (trim($this->data['Coinset']['coinserial']) == '') {

                    $errorString .= "Please insert Coin Serial.<br/>";

                }

                if ($projectDetails['Project']['coins_verificationshow'] == 1) {

                    if (trim($this->data['Coinset']['code']) == '') {

                        $errorString .="Please insert code.<br/>";

                    }

                }

                if (!in_array(strlen($this->data['Coinset']['coinserial']), array(7, 10))) {

                    $errorString .="Please insert Correct Coin Serial.<br/>";

                }





                if (trim($errorString) !='') {

                    $this->Session->setFlash($errorString,'default',array('class' => 'errormsg1'));



                }

                else {

                    $coinset_value1 = $this->data['Coinset']['coinserial'];

                    $code = trim($this->data['Coinset']['code']);



                    if (!is_numeric($coinset_value1)) {

                        $coinset_value1 = substr($coinset_value1, 3, (strlen($coinset_value1)-3));

                    }



                    $coinset_prefix = substr($coinset_value1, 0, 3);



                    if (!empty($this->data['Coinset']['coinserial'])) {



                        $conditions = array(



                        'CoinsHolder.project_id' => $project_id,



                        'CoinsHolder.serialnum' => $this->data['Coinset']['coinserial'],



                        'CoinsHolder.active_status' => '1',

                        'CoinsHolder.delete_status' => '0'

                        );



                        if ($this->CoinsHolder->hasAny($conditions)) {

                            $this->Session->setFlash('Coin serial # already exists','default',array('class' => 'errormsg1'));

                            $this->redirect(array('controller' => 'companies', 'action' => 'coinregister'));

                        }



                    }



                    $isvalid = false;

                    if (!empty($this->data['Coinset']['code'])) {

                        $condition = " Coinset.project_id='".$project_id."' and Coinset.verifycode='".$code."' and Coinset.active_status='1' and Coinset.delete_status='0'";

                        $coinsets = $this->Coinset->find('first', array('conditions' => $condition));

                    }

                    else {

                        $condition = " Coinset.project_id='".$project_id."' AND Coinset.startserialnum >= '". $this->data['Coinset']['coinserial'] ."' AND Coinset.startserialnum <= '". $this->data['Coinset']['coinserial'] ."' and Coinset.active_status='1' and Coinset.delete_status='0'";

                        $coinsets = $this->Coinset->find('first', array('conditions' => $condition));

                    }



                    if (is_array($coinsets) and !empty($coinsets)) {

                        $coinset_id = $coinsets['Coinset']['id'];

                        $verifycode = trim($coinsets['Coinset']['verifycode']);

                        $startserialnum = $coinsets['Coinset']['startserialnum'];

                        $endserialnum = $coinsets['Coinset']['endserialnum'];





                        if ($coinset_value1 >= $startserialnum && $coinset_value1 <= $endserialnum) {

                            $isvalid = true;



                            $holder_details = $this->Holder->find('first', array('conditions' => "Holder.user_id = '".$userid."' and Holder.project_id='".$project_id."'  and Holder.delete_status='0'"));





                            //checking whether it is already registered or not

                            $condition1 = "CoinsHolder.coinset_id = '".$coinset_id."' and CoinsHolder.serialnum='".$coinset_value1."' and CoinsHolder.is_current_holder = '1' and CoinsHolder.project_id='".$project_id."' and CoinsHolder.active_status='1' and CoinsHolder.delete_status='0'";



                            $coinset_alregistered = $this->CoinsHolder->find('first', array('conditions' => $condition1)); 



                            if (is_array($coinset_alregistered) && !empty($coinset_alregistered)) {



                                if ($projectDetails['ProjectType']['istransferable'] == 0) {

                                    $this->Session->setFlash('This coin is already registered.This coin is not transferable.Please try another coin.','default',array('class' => 'errormsg1'));

                                    $this->redirect('/companies/coinregister');

                                }



                                if ($projectDetails['ProjectType']['simple_cointransfer'] == 0) {

                                    $this->Session->setFlash('This coin is already registered.Please send coin transfer request.','default',array('class' => 'errormsg1'));

                                    $this->redirect('/companies/transfer_request');

                                }



                                if ($projectDetails['ProjectType']['simple_cointransfer'] == 1) {

                                    $condition2 = "CoinsHolder.holder_id = '".$coinset_alregistered['CoinsHolder']['holder_id']."' and CoinsHolder.serialnum = '".$coinset_alregistered['CoinsHolder']['serialnum']."' " ;

                                    $oldcoinholder = $this->CoinsHolder->find('first', array('conditions' => $condition2));

                                    $this->data['CoinsHolder1']['id'] = $oldcoinholder['CoinsHolder']['id'];

                                    $this->data['CoinsHolder1']['is_current_holder'] = '0';

                                    $this->CoinsHolder->save($this->data['CoinsHolder1']);

                                }

                            }





                            $this->data['CoinsHolder']['project_id'] = $project_id;

                            $this->data['CoinsHolder']['coinset_id'] = $coinset_id;

                            $this->data['CoinsHolder']['is_current_holder'] = '1';



                            $this->data['CoinsHolder']['holder_id']=$holder_details['Holder']['id'];

                            $this->data['CoinsHolder']['serialnum']=$serz;



                            $this->CoinsHolder->save($this->data['CoinsHolder']);

                            

                            // Update Holder member type as 'Holder' after registing coin                  

                            $holderarr['Holder']['id']=$holder_details['Holder']['id'];

                             App::import("Model", "MemberType");  

                             $this->MemberType =  & new MemberType();

                            $member_type=$this->getMemberTypeIdByTypeName(MemberType::MEMBER_TYPE_HOLDER, $project_id);

                            $holderarr['Holder']['member_type']= $member_type['MemberType']['id'];

                            $this->Holder->save($holderarr);

                            

                            $this->__send_registration_email('noredir');



                            $condition = " EmailTemplate.email_template_name= 'COIN REGISTER CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                            $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));

                            if (is_array($mailMessage) && !empty($mailMessage)) {

                                /** 

                                * OLD CODE 

                                *  if(!empty($projectDetails['Project']['url']))

                                    $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                else

                                    $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                                if(!empty($projectDetails['Project']['system_name']))

                                        $pt_new_name=$projectDetails['Project']['system_name'];

                                else

                                        $pt_new_name=$projectDetails['Project']['project_name'];

                                $keyStringArray = array('[[HOLDER_FIRSTNAME]]'=> $holder_details['Holder']['screenname'],

                                '[[COIN_SERIAL]]'=>$coinset_value1,

                                '[[COIN_REG_DATE]]'=>Date('Y-m-d'),

                                '[[PROJECT_NAME]]'=>$pt_new_name,

                                '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                                 if (!empty($keyStringArray)){

                                    foreach ($keyStringArray as $key => $val) {

                                        $mailBody = str_replace($key,$val,$mailBody);

                                    }

                                }

                                    

                                */

                                $subject  = $mailMessage['EmailTemplate']['subject'];

                                $from = $mailMessage['EmailTemplate']['sender'];  //$projectDetails['Project']['fromemail'];

                                $fromname = $mailMessage['EmailTemplate']['sender'];  //$projectDetails['Project']['fromname'];  

                                $mailBody = $mailMessage['EmailTemplate']['content'];

                                

                                /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button  **/  

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                $condition = "id='1'";

                                $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                $mailBody.=$mailfooter;

                                ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                

                                

                                  // Set path to inserted image 

                                  $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                                $to = $holder_details['Holder']['email'];



                                  /**

                                 * New Email Temp replacement code for data Elements 

                                 */

                                 //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                 //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                    $dataEleValuesArray[DATA_ELEMENT_COIN_SERIAL]= $tempserial;   

                                    $dataEleValuesArray[DATA_ELEMENT_COIN_REGISTRATION_DATE]= Date('Y-m-d');   

                                    $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                 //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                    $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                    $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                    

                                $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                                

                              /*  $ccemail  = $mailMessage['EmailTemplate']['send_cc_email'];

                                        

                                if($ccemail==1)

                                {

                                    $toccemail=$from;

                                    $this->Sendemail->sendMailContentWithCC($toccemail,$from,$subject,$mailBody,$fromname);

                                }  */

                            }



                            $this->Session->setFlash('Thanks for Registeration.','default',array('class' => 'successmsg'));

                            if($projectDetails['Project']['registration_confirmation']==1){



                                $this->Session->setFlash('Thanks for registering. Your registration is NOT complete until you Verify your e-mail address.We have sent you an email, please click the link in the e-mail to complete the Verify process. After you have Verified you will be able to Login.','default',array('class' => 'successmsg'));

                            }



                            $this->redirect('/companies/user_register');

                        }



                        $this->redirect('/companies/coinregister');







                    }

                    else {

                        $this->Session->setFlash('No Serial available.','default',array('class' => 'errormsg1'));

                        $this->redirect('/companies/coinregister');

                    }









                }//else





            }//$this->data

        }







        function __send_registration_email($flag='')

        {

            $project_id     = $this->Session->read("projectwebsite_id");

            $projectDetails = $this->getprojectdetails($project_id);    



            $holder = $this->Session->read('NewUser.Holder');

            $usersdetails= $this->Session->read('NewUser');



            if($projectDetails['Project']['registration_confirmation']=="1")

            {

                $condition = " EmailTemplate.email_template_name= 'SIGN UP CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));

                if(is_array($mailMessage) && !empty($mailMessage)) 

                {

                    $confirm_signup_link ="<a href='http://".HTTP_PATH."/companies/update_confirmation/".base64_encode($holder['id'])."' target='_blank'>Confirm Sign up</a>";

                    /**

                    * OLD CODE

                    *  if(!empty($projectDetails['Project']['url']))

                        $site_url=str_replace('http://', '', $projectDetails['Project']['url']);

                    else

                        $site_url=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];



                    if(!empty($projectDetails['Project']['system_name']))

                        $pt_new_name=$projectDetails['Project']['system_name'];

                    else

                        $pt_new_name=$projectDetails['Project']['project_name'];

                    $keyStringArray = array('[[EMAIL_ADDRESS]]'=>trim($holder['email']),

                    '[[CONFIRM_SIGN_UP_LINK]]'=>$confirm_signup_link,

                    '[[PROJECT_NAME]]'=>$pt_new_name,

                    '[[PROJECT_HOMEPAGE_URL]]'=>$site_url);

                     if(!empty($keyStringArray)){

                        foreach($keyStringArray as $key=>$val){

                            $mailBody = str_replace($key,$val,$mailBody);

                        }

                    }

                    * $subject = str_replace('[[PROJECT_NAME]]',$pt_new_name,$subject);              

                    */

                    $subject  = $mailMessage['EmailTemplate']['subject'];              

                    $from = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromemail'];

                    $fromname = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromname'];

                    $mailBody=$mailMessage['EmailTemplate']['content'];

                    

                    /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/    

                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                    $condition = "id='1'";

                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                    $mailBody.=$mailfooter;

                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                    

                    

                      // Set path to inserted image 

                            $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                    $to = trim($holder['email']);

                    

                    /**

                     * New Email Temp replacement code for data Elements 

                     */

                     //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                        $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                     //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                        $dataEleValuesArray[DATA_ELEMENT_CONFIRM_SIGN_UP_LINK]= $confirm_signup_link;   

                        $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                     //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                        $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                        $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                    

                    $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);



                }        

                if(isset($_SESSION['FacebookUser']))

                {

                    $this->Session->delete('NewUser');

                    $_SESSION['registercoin']=1;        

                    unset($_SESSION['FacebookUser']);



                }

                if($flag==''){

                    $this->Session->setFlash('Thanks for registering. Your registration is NOT complete until you Verify your e-mail address.We have sent you an email, please click the link in the e-mail to complete the Verify process. After you have Verified you will be able to Login.','default',array('class' => 'successmsg'));



                    $this->redirect('/companies/user_register');}

            }else{





                $condition = " EmailTemplate.email_template_name= 'REGISTRATION CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                if(is_array($mailMessage) && !empty($mailMessage)) 

                {

                    /**

                    * OLD CODE

                    * if(!empty($projectDetails['Project']['url']))

                        $site_url=str_replace('http://', '', $projectDetails['Project']['url']);

                    else

                        $site_url=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];       \

                    if(!empty($projectDetails['Project']['system_name']))

                        $pt_new_name=$projectDetails['Project']['system_name'];

                    else

                        $pt_new_name=$projectDetails['Project']['project_name'];

                      $keyStringArray = array('[[EMAIL_ADDRESS]]'=>trim($holder['email']),

                    '[[USER_NAME]]'=>trim($this->data['Holder']['email']),

                        '[[TO_FIRSTNAME]]'=>trim($this->data['Holder']['screenname']),  

                    '[[PASSWORD]]'=>trim($userpass),

                    '[[PROJECT_NAME]]'=>$pt_new_name,

                    '[[PROJECT_HOMEPAGE_URL]]'=>$site_url);

                    if(!empty($keyStringArray)){

                        foreach($keyStringArray as $key=>$val){

                            $mailBody = str_replace($key,$val,$mailBody);

                        }

                    }

                     $subject = str_replace('[[PROJECT_NAME]]',$pt_new_name,$subject);                

                    */

                    

                    $userpass= base64_decode($this->Session->read("keypass"));

                    $subject  = $mailMessage['EmailTemplate']['subject'];              

                    $from = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromemail'];

                    $fromname =$mailMessage['EmailTemplate']['sender'];              // $projectDetails['Project']['fromname'];

                    $mailBody=$mailMessage['EmailTemplate']['content'];

                    

                    /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button     **/  

                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                    $condition = "id='1'";

                    $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                    $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                    $mailBody.=$mailfooter;

                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                    

                    

                      // Set path to inserted image 

                            $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                    $to = trim($holder['email']);

                    

                     /**

                     * New Email Temp replacement code for data Elements 

                     */

                     //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                        $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                     //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                        $dataEleValuesArray[DATA_ELEMENT_USER_NAME]= trim($this->data['Holder']['email']);   

                        $dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= trim($userpass);   

                        $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                     //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                        $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                        $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                        

                    $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                    $this->Session->delete("keypass");

                }

                if($flag==''){

                    $this->Session->write('User', $usersdetails);

                    $this->Session->write('CurrentProject', $project_id);

                    $this->Session->delete('NewUser');

                    $_SESSION['registercoin']=1;        

                    unset($_SESSION['FacebookUser']);

                    $this->redirect('/companies/dashboard');

                }



            }



        }//end __send_registration_email()















        function newlogin($facebook){



            $this->set('getfacebook_login',"$facebook");



            $datastyle=$this->getstyles();

            $this->Session->delete('styledata');

            $this->set('styledata',$datastyle);

            $this->Session->write("styledata",$datastyle);

            $this->layout= 'internal_layout';



            //         //for active menu display

            $this->set('page_url',$page_name);



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);















            $projectDetails=$this->getprojectdetails($project_id);

            $this->set('project',$projectDetails);





            if($projectDetails['ProjectType']['coin_verification']=="0")    {

                $this->set('status',"Verified");

            }



            $loutouturl = $this->getlogouturl($projectDetails['Project']['logoutredirect']);

            $this->Session->write('logouturl', $loutouturl);





            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $this->set('meta_title',$projectDetails['Project']['sitename']);

            $this->set('page_title',$projectDetails['Project']['sitename']);







            if(isset($this->data)){

                //...This if for login purpose



                $username = $this->data['User']['username'];

                $password = $this->data['User']['password'];



                if($password=="" )

                {                    

                    $this->Session->setFlash('Username or Password is empty!','default',array('class' => 'errormsg')); 

                }

                else

                {

                    $condition = " User.username = '".$username."' and User.project_id='".$project_id."'  and User.delete_status='0'";

                    $userpresent = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));



                    if(is_array($userpresent) && !empty($userpresent)) {                

                        $username = $this->data['User']['username'];

                        $password = $this->data['User']['password'];



                        $condition = " User.username = '".$username."' AND User.password = '".md5($password)."' and User.project_id='".$project_id."' and User.delete_status='0' ";

                        $userDetails = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));    



                        if(is_array($userDetails) && !empty($userDetails)) {

                            if($userDetails['User']['active_status'] == '1'){

                                $this->Session->write('User', $userDetails);

                                $this->Session->write('CurrentProject', $project_id);

                                $s_URL = $this->Session->read('URL'); //    

                                if($s_URL != ''){

                                    $this->redirect($s_URL);

                                }else{        

                                    $this->redirect('/companies/dashboard');

                                }

                            }elseif($userDetails['User']['active_status'] == '0'){                    



                                if($projectDetails['Project']['registration_confirmation']=="1")

                                {            $this->Session->setFlash('Account not activated,you must check your e-mail for a Confirmation e-mail from us and to finish the Activation.','default',array('class' => 'errormsg')); }

                                else{            $this->Session->setFlash('This Account has been deactivated.','default',array('class' => 'errormsg')); }



                                $this->redirect('/companies/login');



                            }                            

                        }else{    

                            $this->Session->setFlash('Username and Password mismatched.','default',array('class' => 'errormsg'));                                        

                            $this->redirect('/companies/login');



                        }



                    }else{

                        $this->Session->setFlash('Invalid username!','default',array('class' => 'errormsg'));    

                        $this->redirect('/companies/login');                        

                    }

                }

            }

        }









        function downloadregcoinlist(){

            $this->layout = null;

            $this->autoLayout = false; 

            Configure::write('debug', '0');

            $this->session_check_admin();

            $project_id = $this->Session->read("sessionprojectid");



            //for active menu display



            $this->set('page_url',"coinsetlist");





            App::import("Model", "CoinsHolder");

            $this->CoinsHolder =   & new CoinsHolder();







            # set help condition













            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid =$project_id;    









            if(!empty($this->data))



            {        //print_r($this->data);



                $val=$this->data['Companies']['searchkey'];

                $condition = "CoinsHolder.serialnum like '%$val%' OR Coinset.coinset_name  like '%$val%' OR Holder.screenname like '%$val%' ";



                //$condition = "CoinsHolder.serialnum like '%$val%'";    







            } 



            else



            {



                $condition = "CoinsHolder.project_id = '$projectid' AND CoinsHolder.delete_status='0'";



            }





            ##fetch data from CoinsHolder table for listing







            $this->CoinsHolder->bindModel(array('belongsTo'=>array(



            'Holder'=>array(



            'foreignKey'=>false,



            'conditions'=>'Holder.id = CoinsHolder.holder_id'



            ),'Coinset'=>array(



            'foreignKey'=>false,



            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'



            )



            )));







            $field='';







            $this->Pagination->sortByClass    = 'CoinsHolder'; ##initaite pagination 







            $this->Pagination->total= count($this->CoinsHolder->find('all',array("conditions"=>$condition)));    



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);            



            $this->CoinsHolder->bindModel(array('belongsTo'=>array(



            'Holder'=>array(



            'foreignKey'=>false,



            'conditions'=>'Holder.id = CoinsHolder.holder_id'



            ),'Coinset'=>array(



            'foreignKey'=>false,



            'conditions'=>'Coinset.id = CoinsHolder.coinset_id'



            )



            )));











            if($order == "CoinsHolder.id ASC"){



                $order = "CoinsHolder.id DESC";



            }



            $coinscoinlistdtlarr = $this->CoinsHolder->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));







            ##set Coinset data in variable            



            $this->set("coinlist",$coinscoinlistdtlarr);







        }









        function clear_session(){

            $project_id=$this->Session->write("projectwebsite_id",null);  

            $project_name=$this->Session->write("projectwebsite_name",null);die;

        }

        

        /**

        * Function to verify the coin serial

        * @param Integer $coinserial The coin serial

        * @return void

        */

        function verify_coin($coinserial = null)

        {

            // No need to render this action

            $this->layout     = false;

            $this->autoRender = false;



            // The Project Id

            $project_id = $this->Session->read("projectwebsite_id");





            if(!is_numeric($coinserial)){

                $coinset_prefix=substr($coinserial, 0, 3);

                $coinserial=substr($coinserial, 3, (strlen($coinserial)-3)); 



            }

            else {

                $coinset_prefix = '';

            }





            // Set the conditions

            $conditions = array(

            'Coinset.project_id' => $project_id,

            "Coinset.startserialnum <= $coinserial",

            "Coinset.endserialnum >= $coinserial",

            );



            if ($coinset_prefix != '') {

                $conditions['Coinset.serialprefix'] = $coinset_prefix;

            }









            // Find the number of coinsets

            $coinsets = $this->Coinset->find('first', compact('conditions'));

            //echo  "serialprx". $coinsets['Coinset']['serialprefix'];

            echo (count($coinsets['Coinset']) > 0) ? (!empty($coinsets['Coinset']['verifycode'])?$coinsets['Coinset']['verifycode']:'null') : 'false '. $coinset_prefix;

        }//end verify_coin() 

        

        

        

        /**

        * Funtion to show listing of all public events (if user not logged in) and private events (if user logged in)at front side 

        * 

        * @param mixed $eventlimit - Number events for per page

        * @param mixed $eventid - To view perticula event in details

        */

        function events($eventlimit=10, $rec_eventid=null){



         // Configure::write('debug', 2);    



            $this->layout= 'internal_layout';          

            //for active menu display

            $this->set('page_url','event');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");  

                          

            if(empty($project_name)) $this->redirect('/companies/session_expired');



            //STEP : GET PAGE CONTENT

            $condition="Content.alias='events' and Content.project_id=".$project_id." and Content.active_status='1' and Content.delete_status='0' ";

            $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);     

            $this->set('meta_description',$page_content['Content']['metadescription']);

            $this->set('meta_keyword',$page_content['Content']['metakeyword']);

            $this->set('meta_title',$page_content['Content']['metatitle']);

            $this->set('meta_isindex',$page_content['Content']['meta_isindex']);

            $this->set('meta_isfollow',$page_content['Content']['meta_isfollow']);

            $this->set('page_title',$page_content['Content']['title']);

            $this->set('page_content',$page_content);

             

            

            $this->set('project_name',$project_name);    



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);

            

            $holder_id = $this->Session->read("User.Holder.id");

            $this->set('holder_id',$holder_id);



            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain); 

            

            ##import blog  model for processing

            App::import("Model", "Event");

            $this->Event =  & new Event();   

                       



            ##import blog  model for processing

            App::import("Model", "RecurringEvent");

            $this->RecurringEvent =  & new RecurringEvent();   



            $condition = "RecurringEvent.project_id = '".$projectDetails['Project']['id']."' and  RecurringEvent.active_status='1' and RecurringEvent.delete_status='0' and (DATE(RecurringEvent.start_date) >= CURRENT_DATE() )";

            if(!$userid){

            //    $condition.= " and Event. is_memberonly = '0' ";  // i.e if user not logged in then show only public events 

            }

            if($rec_eventid!=null && $rec_eventid > 0) {

                // Show specific blog

                $condition.= " and RecurringEvent.id = '".$rec_eventid."' ";

                $eventdata = $this->RecurringEvent->find('first',array("conditions"=>$condition));

                $this->set('eventrow',$eventdata);  

                

                if($eventdata['RecurringEvent']['meta_description']!="")

                    $this->set('meta_description',$eventdata['RecurringEvent']['meta_description']);

                

                //$condition= "Event.id = '".$eventdata['RecurringEvent']['event_id']."'";

                //$main_eventdata = $this->Event->find('first',array("conditions"=>$condition));

                

                if($eventdata['RecurringEvent']['show_attendees_start'] < $eventdata['RecurringEvent']['max_attendees_start'])

                {

                    $max_attendees_start=$eventdata['RecurringEvent']['max_attendees_start'];

                }

                else

                    $max_attendees_start=$eventdata['RecurringEvent']['show_attendees_start'];

                    

                $this->set('max_attendees_start',$max_attendees_start); 

                

                //set google map for event address



                if($projectDetails['Project']['googlemapskey'])

                {                

                    require'EasyGoogleMap.class.php';

                    //$gm = & new EasyGoogleMap("ABQIAAAAoM-kEW8yHxWwveOZAouVXhTkQdzC1XuexHlQDsWmu58XcfHJ8xQB-xtA9nt_7NDWTsfJfHHxosdNZg");

                    $gm = & new EasyGoogleMap($projectDetails['Project']['googlemapskey']);

                    $gm->SetMarkerIconStyle('GT_FLAT');

                    $gm->SetMarkerIconColor('PACIFICA');

                    $gm->SetMapZoom(10);

                    //$gm->SetMapControl('SMALL_ZOOM');

                    //$gm->mMapType = TRUE;

                     if($eventdata['RecurringEvent']['country'] && $eventdata['RecurringEvent']['state'])

                     {

                         if($eventdata['RecurringEvent']['address'])

                            $addr=str_replace("\r\n"," ",$eventdata['RecurringEvent']['address']);

                            

                         if($eventdata['RecurringEvent']['city'])

                         {

                             if($addr!="")

                                $addr=$addr.",".str_replace("\r\n"," ",$eventdata['RecurringEvent']['city']);

                             else

                                $addr=str_replace("\r\n"," ",$eventdata['RecurringEvent']['city']);

                         }

                         

                         /*

                         if($eventdata['RecurringEvent']['zipcode'])

                         {

                             if($addr!="")

                                $addr=$addr."-".str_replace("\r\n"," ",$eventdata['RecurringEvent']['zipcode']);

                             else

                                $addr=str_replace("\r\n"," ",$eventdata['RecurringEvent']['zipcode']);

                         }

                         */

                         

                         $country=$this->getcountryname($eventdata['RecurringEvent']['country']);

                         $state=$this->getstatename($eventdata['RecurringEvent']['state']);

                         

                         if($addr!="")

                            $addr=$addr.",".$state.",".$country; 

                         else

                            $addr=$state.",".$country; 

                            

                         if($eventdata['RecurringEvent']['location']!="")

                            $addr=$eventdata['RecurringEvent']['location'].",".$addr;

                            

                         $gm->SetAddress($addr);

                     }

                     else

                        $gm->SetAddress($eventdata['RecurringEvent']['location']);

                        

                    $gm->SetInfoWindowText($eventdata['RecurringEvent']['event_title']);

                    $gm->SetMapWidth(345); # default = 300

                    $gm->SetMapHeight(300); # default = 300

                    $this->set('gm',$gm); 

                }

                

                $this->set('gmkey',$projectDetails['Project']['googlemapskey']); 

                

            }

            else{

             

                //$group="event_id";

                $field='RecurringEvent.id,RecurringEvent.project_id,RecurringEvent.event_id,RecurringEvent.event_title,RecurringEvent.event_type,RecurringEvent.max_attendees,RecurringEvent.max_attendees_start,min(RecurringEvent.start_date) as start_date,RecurringEvent.location,RecurringEvent.eventdescription';

                

                //$eventdata = $this->RecurringEvent->find('all',array('fields'=>$field,"conditions"=>$condition,'group'=>$group,'limit' => $eventlimit, 'page' => 1)); 



                $eventdata = $this->RecurringEvent->query("SELECT * FROM (SELECT * FROM recurring_events as RecurringEvent where project_id='".$projectDetails['Project']['id']."' and active_status='1' and delete_status='0' and (DATE(start_date) >= CURRENT_DATE()) ORDER BY start_date) RecurringEvent limit ".$eventlimit);

               

                $this->set('eventdata',$eventdata);

                $this->set('eventlimit',$eventlimit);  

                $this->set('eventoffset',10);   

       

            }



        



        }



                /**

        * Funtion to show listing of all public events (if user not logged in) and private events (if user logged in)at front side 

        * 

        * @param mixed $eventlimit - Number events for per page

        * @param mixed $eventid - To view perticula event in details

        */

        function pastevents($eventlimit=10, $rec_eventid=null) {



         // Configure::write('debug', 2);    



            $this->layout= 'internal_layout';

            $reg_now  =false;

            //for active menu display

            $this->set('page_url','events');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");  

                          

            if(empty($project_name)) $this->redirect('/companies/session_expired');



            //STEP : GET PAGE CONTENT

            $condition="Content.alias='pastevents' and Content.project_id=".$project_id." and Content.active_status='1' and Content.delete_status='0' ";

            $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);     

            $this->set('meta_description',$page_content['Content']['metadescription']);

            $this->set('meta_keyword',$page_content['Content']['metakeyword']);

            $this->set('meta_title',$page_content['Content']['metatitle']);

            $this->set('meta_isindex',$page_content['Content']['meta_isindex']);

            $this->set('meta_isfollow',$page_content['Content']['meta_isfollow']);

            $this->set('page_title',$page_content['Content']['title']);

            $this->set('page_content',$page_content);

            

            

            $this->set('project_name',$project_name);    



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);

            

            $holder_id = $this->Session->read("User.Holder.id");

            $this->set('holder_id',$holder_id);



            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain); 



            ##import blog  model for processing

            App::import("Model", "RecurringEvent");



            $this->Event =  & new RecurringEvent();   



            $condition = "RecurringEvent.project_id = '".$projectDetails['Project']['id']."' and  RecurringEvent.active_status='1' and RecurringEvent.delete_status='0' and (DATE(RecurringEvent.start_date) < CURRENT_DATE() )";

			$eventdata = array();

			

            if(!$userid){

            //    $condition.= " and Event. is_memberonly = '0' ";  // i.e if user not logged in then show only public events 

            }

            if($rec_eventid!=null && $rec_eventid > 0) {

                // Show specific blog

                $condition.= " and RecurringEvent.id = '".$rec_eventid."' ";

                $eventdata = $this->RecurringEvent->find('first',array("conditions"=>$condition));

                $this->set('eventdata',$eventdata);  

                

                if($eventdata['RecurringEvent']['meta_description']!="")

                    $this->set('meta_description',$eventdata['RecurringEvent']['meta_description']);

                

                $condition= "Event.id = '".$eventdata['RecurringEvent']['event_id']."'";

                $main_eventdata = $this->Event->find('first',array("conditions"=>$condition));

                

                if($main_eventdata['Event']['max_attendees_start'] < $eventdata['RecurringEvent']['max_attendees_start'])

                {

                    $max_attendees_start=$eventdata['RecurringEvent']['max_attendees_start'];

                }

                else

                    $max_attendees_start=$main_eventdata['Event']['max_attendees_start'];

                    

                $this->set('max_attendees_start',$max_attendees_start); 

                

                if($projectDetails['Project']['googlemapskey'])

                {               

                    require'EasyGoogleMap.class.php';

                    //$gm = & new EasyGoogleMap("ABQIAAAAoM-kEW8yHxWwveOZAouVXhTkQdzC1XuexHlQDsWmu58XcfHJ8xQB-xtA9nt_7NDWTsfJfHHxosdNZg");

                    $gm = & new EasyGoogleMap($projectDetails['Project']['googlemapskey']);

                    $gm->SetMarkerIconStyle('GT_FLAT');

                    $gm->SetMarkerIconColor('PACIFICA');

                    $gm->SetMapZoom(10);

                     if($eventdata['RecurringEvent']['country'] && $eventdata['RecurringEvent']['state'])

                     {

                         if($eventdata['RecurringEvent']['address'])

                            $addr=str_replace("\r\n"," ",$eventdata['RecurringEvent']['address']);

                            

                         if($eventdata['RecurringEvent']['city'])

                         {

                             if($addr!="")

                                $addr=$addr.",".str_replace("\r\n"," ",$eventdata['RecurringEvent']['city']);

                             else

                                $addr=str_replace("\r\n"," ",$eventdata['RecurringEvent']['city']);

                         }

                         

                         /*

                         if($eventdata['RecurringEvent']['zipcode'])

                         {

                             if($addr!="")

                                $addr=$addr."-".str_replace("\r\n"," ",$eventdata['RecurringEvent']['zipcode']);

                             else

                                $addr=str_replace("\r\n"," ",$eventdata['RecurringEvent']['zipcode']);

                         }

                         */

                         

                         $country=$this->getcountryname($eventdata['RecurringEvent']['country']);

                         $state=$this->getstatename($eventdata['RecurringEvent']['state']);

                         

                         if($addr!="")

                            $addr=$addr.",".$state.",".$country; 

                         else

                            $addr=$state.",".$country; 

                            

                         if($eventdata['RecurringEvent']['location']!="")

                            $addr=$eventdata['RecurringEvent']['location'].",".$addr;

                            

                         $gm->SetAddress($addr);

                     }

                     else

                        $gm->SetAddress($eventdata['RecurringEvent']['location']);

                        

                    $gm->SetInfoWindowText($eventdata['RecurringEvent']['event_title']);

                    $gm->SetMapWidth(345); # default = 300

                    $gm->SetMapHeight(300); # default = 300

                    $this->set('gm',$gm); 

                }

                

                $this->set('gmkey',$projectDetails['Project']['googlemapskey']); 

                

            }else{



            

                //$eventdata = $this->Event->find('all',array("conditions"=>$condition, 'order' =>'Event.starttime ASC, Event.created ASC', 'limit' => $eventlimit, 'page' => 1)); 

                $eventdata = $this->RecurringEvent->query("SELECT * FROM (SELECT * FROM recurring_events as RecurringEvent where project_id='".$projectDetails['Project']['id']."' and active_status='1' and delete_status='0' and (DATE(start_date) < CURRENT_DATE()) ORDER BY start_date) RecurringEvent limit ".$eventlimit);

               

                $this->set('eventdata',$eventdata);

                $this->set('eventlimit',$eventlimit);  

                $this->set('eventoffset',10);   

            }



        }

        

        

        function rsvp($rec_eventid=null){

            

        // $this->layout= 'internal_layout';

		// $this->layout= 'new_sponsor_layout';

         $this->layout= 'iframelayout';

            

            //for active menu display

            $this->set('page_url','rsvp');

            $this->set('page_title','RSVP');



            $project_id = '1';    

            $project_name = '';    

            $userid = $this->Session->read("User.User.id");  

            $holder_id = $this->Session->read("User.Holder.id");

                          

            //if(empty($project_name)) $this->redirect('/companies/session_expired');

                               

            $this->set('project_name',$project_name);    



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);

            

            $screenname = $this->Session->read("User.Holder.screenname");

            $this->set('screenname',$screenname);

            //$_SESSION

            

            $holder_email = $this->Session->read("User.Holder.email");

            

            $rsvp_arr=$this->getEventRSVPArray();

            $this->set('rsvp_arr',$rsvp_arr);

            



            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain); 



            ##import blog  model for processing

            App::import("Model", "Event");

            $this->Event =  & new Event();  

            

             App::import("Model", "EventInvitation");

             $this->EventInvitation =  & new EventInvitation(); 

             

             

             $condition = "RecurringEvent.id ='".$rec_eventid."'"; 

             $e_data= $this->RecurringEvent->find('first',array("conditions"=>$condition)); 

             $event_id=$e_data['RecurringEvent']['event_id'];

             

             $this->set('event_id',$event_id); 

             

             $today=date("Y-m-d");

                        

             $condition = "RecurringEvent.event_id ='".$event_id."' and RecurringEvent.start_date>='".$today."'";  

             //$order="RecurringEvent.id desc";

             $limit="10";

             $order="RecurringEvent.id asc";

             $recur_event_data= $this->RecurringEvent->find('all',array("conditions"=>$condition,'order'=>$order,'limit' => $limit));

             $future_dates=array();

            

            if(!empty($recur_event_data)){               

                foreach($recur_event_data as $rec){

                    $start_date=  date("F j, Y", strtotime($rec['RecurringEvent']['start_date']));

                    $future_dates[$rec['RecurringEvent']['start_date']]=$start_date;

                }               

            }

            

            $this->set('future_dates',$future_dates); 

            

            

            if($rec_eventid!=null && $rec_eventid > 0) {

            

                $this->set('rec_eventid',$rec_eventid); 

                // Show specific blog

                $condition= "RecurringEvent.id = '".$rec_eventid."' ";

                $old_event_data = $this->RecurringEvent->find('first',array("conditions"=>$condition));

                $this->set('eventrow',$old_event_data);  

                

                $condition= "Event.id = '".$eventdata['RecurringEvent']['event_id']."'";

                $main_eventdata = $this->Event->find('first',array("conditions"=>$condition));



                if($old_event_data['RecurringEvent']['show_attendees_start'] < $old_event_data['RecurringEvent']['max_attendees_start'])

                {

                    $max_attendees_start=$old_event_data['RecurringEvent']['max_attendees_start'];

                }

                else

                    $max_attendees_start=$old_event_data['RecurringEvent']['show_attendees_start'];

                    

                $this->set('max_attendees_start',$max_attendees_start); 

                

                $max_tichets_per_member=$old_event_data['RecurringEvent']['max_tickets_per_member'];

                

                if($max_tichets_per_member!="" || $max_tichets_per_member!=NULL)

                {                

                    $max_tichets_per_member_range=range(0,$max_tichets_per_member);

                    $this->set('max_tickets',$max_tichets_per_member_range); 

                }

                else

                {

                    $max_tichets_per_member_range=0;

                    $this->set('max_tickets',$max_tichets_per_member_range); 

                }



                if($projectDetails['Project']['googlemapskey'])

                {      

                    require'EasyGoogleMap.class.php';

                    //$gm = & new EasyGoogleMap("ABQIAAAAoM-kEW8yHxWwveOZAouVXhTkQdzC1XuexHlQDsWmu58XcfHJ8xQB-xtA9nt_7NDWTsfJfHHxosdNZg");

                    $gm = & new EasyGoogleMap($projectDetails['Project']['googlemapskey']);

                    $gm->SetMarkerIconStyle('GT_FLAT');

                    $gm->SetMarkerIconColor('PACIFICA');

                    $gm->SetMapZoom(10);

                    if($old_event_data['RecurringEvent']['address']){

                         $addr=str_replace("\r\n"," ",$old_event_data['RecurringEvent']['address']);

                         $gm->SetAddress($addr);

                    }                        

                    else

                    	$gm->SetAddress($old_event_data['RecurringEvent']['location']);

                    

                    $gm->SetInfoWindowText($old_event_data['RecurringEvent']['event_title']);

                    $gm->SetMapWidth(345); # default = 300

                    $gm->SetMapHeight(300); # default = 300

                    $this->set('gm',$gm); 

                }

                $this->set('gmkey',$projectDetails['Project']['googlemapskey']); 

            }else{



             

            } 

            

            if($this->data)

            {     

           

               // $rec_eventid=$this->data['RecurringEvent']['id'];

            	$rec_eventid=$this->data['rec_eventid'];

                

                 if($rec_eventid!=null && $rec_eventid > 0) {

                     //$event_arr['Event']['id']=$event_id;

                     $event_arr['RecurringEvent']['id']=$rec_eventid;

                     

                     if($this->data['attend']!="")      

                     {

                         if($this->data['attend']=='0' || $this->data['attend']=='2' || $this->data['attend']=='3')

                            $request_tickets=0;

                         else

                            $request_tickets=$this->data['tickets_request'];

                       

                         $condition= "RecurringEvent.id = '".$rec_eventid."' ";

                         $old_event_data = $this->RecurringEvent->find('first',array("conditions"=>$condition));

                         

                         if($old_event_data['RecurringEvent']['start_date'])

                            $tickets_booked_date=$old_event_data['RecurringEvent']['start_date'];

                         else

                            $tickets_booked_date="0000-00-00";

                    

                        

                        $condition= "EventInvitation.event_id = '".$event_id."' and EventInvitation.project_id='".$project_id."' and EventInvitation.invite_to_holder_id='".$holder_id."' and EventInvitation.rec_event_id='".$rec_eventid."'";

                        

                        $old_event_inv = $this->EventInvitation->find('first',array("conditions"=>$condition)); 

                        

                        $rsvp_response=$this->data['attend'];

                                                

                        if(empty($old_event_inv))

                         {

                            $new_event_inv_arr['Event_Invitation']['id']="";

                            $new_event_inv_arr['Event_Invitation']['invitation']='0';

                         }

                         else   //if record already exists

                         {

                             $new_event_inv_arr['Event_Invitation']['id']=$old_event_inv['EventInvitation']['id']; 

                             if($old_event_inv['EventInvitation']['in_waitlist']==0)

                             {                               

                                $event_arr['RecurringEvent']['max_attendees_start']=$old_event_data['RecurringEvent']['max_attendees_start']-$old_event_inv['EventInvitation']['tickets_booked'];

                                

                                if($event_arr['RecurringEvent']['max_attendees_start']<=0)

                                    $event_arr['RecurringEvent']['max_attendees_start']=0;

                                    

                                $this->RecurringEvent->Save($event_arr['RecurringEvent']); 

                             }

                      

                         }

                         

                         // again fetch events records to get updated max and start entries

                         $condition= "RecurringEvent.id = '".$rec_eventid."' ";

                         $new_event_data = $this->RecurringEvent->find('first',array("conditions"=>$condition));

                         

                         $rsvp_mail_id=$new_event_data['RecurringEvent']['rsvp_email'];

                         $waitlist_mail_id=$new_event_data['RecurringEvent']['waitlist_email'];

                         

                         //no tickets are available push to wait list

                         if(($new_event_data['RecurringEvent']['max_attendees']-$new_event_data['RecurringEvent']['max_attendees_start'])< $request_tickets) 

                         {

                            //allocate remaining tickets and put other in waiting list

                           $available=$new_event_data['RecurringEvent']['max_attendees']-$new_event_data['RecurringEvent']['max_attendees_start'];

                           $remaining_requested=$request_tickets-$available;

                            

                             

                             $new_event_inv_arr['Event_Invitation']['project_id']=$project_id;

                             $new_event_inv_arr['Event_Invitation']['invite_to_holder_id']=$holder_id;

                             $new_event_inv_arr['Event_Invitation']['event_id']=$event_id;

                             $new_event_inv_arr['Event_Invitation']['invite_status']=$rsvp_response;

                             $new_event_inv_arr['Event_Invitation']['active_status']=1;

                             $new_event_inv_arr['Event_Invitation']['tickets_booked']=$available;

                             if($available>0)

                                $new_event_inv_arr['Event_Invitation']['in_rsvp']=1;

                             else

                                $new_event_inv_arr['Event_Invitation']['in_rsvp']=0;

                                

                             $new_event_inv_arr['Event_Invitation']['in_waitlist']=1;

                             $new_event_inv_arr['Event_Invitation']['waitlist_tickets']=$remaining_requested;

                             $new_event_inv_arr['Event_Invitation']['tickets_booked_date']=$tickets_booked_date;

                             $new_event_inv_arr['Event_Invitation']['rec_event_id']=$rec_eventid;

                             

                             $this->EventInvitation->Save($new_event_inv_arr['Event_Invitation']);

                             

                             $this->Session->setFlash('Requested tickets are not available.You have been moved to Waiting List','default',array('class' => 'errormsg'));                           

                             if($waitlist_mail_id!="" && $waitlist_mail_id!=NULL)

                             {

                                 $condition = " EmailTemplate.id= '".$waitlist_mail_id."' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0'";

                                 

                                $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                                if(is_array($mailMessage) && !empty($mailMessage)) 

                                {   

                                    $userpass= base64_decode($this->Session->read("keypass"));  

                                   

                                    $subject  = $mailMessage['EmailTemplate']['subject'];              

                                    $subject = str_replace('[[PROJECT_NAME]]',$project_name,$subject);          

                                    $from = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromemail'];

                                    $fromname = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromname']; 

                                    $mailBody=$mailMessage['EmailTemplate']['content'];  

                                                                      

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                           

                                    $toemail = $holder_email;

                                    

                                 /**

                                 * New Email Temp replacement code for data Elements 

                                 */

                                 //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $toemail);

                                 //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                    //$dataEleValuesArray[DATA_ELEMENT_USER_NAME]= $holder_email;

                                    //$dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= trim($userpass);

                                    //$this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                 //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                    $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                    $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                    $result = $this->Sendemail->sendMailContentWithCC($toemail,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                                    $ccemail = $mailMessage['EmailTemplate']['send_cc_email'];

                                                                                                    

                                    $this->Session->delete("keypass");

                                } 

                             }

                            $this->redirect(array('controller'=>'companies','action'=>'rsvp',$rec_eventid));                             

                         }

                         else

                         {

                         

                            if(empty($old_event_inv))

                            {

                                //$new_event_inv_arr['Event_Invitation']['id']="";

                                $new_event_inv_arr['Event_Invitation']['invitation']='0';

                                

                                $event_arr['RecurringEvent']['max_attendees_start']=$new_event_data['RecurringEvent']['max_attendees_start']+$request_tickets;

                                                              

                                $this->RecurringEvent->Save($event_arr['RecurringEvent']); 

                            }

                            else

                            {

                                                                

                                if($this->data['attend']==1)

                                {

                                    $event_arr['RecurringEvent']['max_attendees_start']=$new_event_data['RecurringEvent']['max_attendees_start']+$request_tickets;                                                      

                                    $this->RecurringEvent->Save($event_arr['RecurringEvent']); 

                                }

                                

                            }

                            

                            $new_event_inv_arr['Event_Invitation']['project_id']=$project_id;

                            $new_event_inv_arr['Event_Invitation']['invite_to_holder_id']=$holder_id;

                            $new_event_inv_arr['Event_Invitation']['event_id']=$event_id;

                            $new_event_inv_arr['Event_Invitation']['invite_status']=$rsvp_response;

                            $new_event_inv_arr['Event_Invitation']['active_status']=1;

                            $new_event_inv_arr['Event_Invitation']['tickets_booked']=$request_tickets;

                            $new_event_inv_arr['Event_Invitation']['in_rsvp']=1;

                            $new_event_inv_arr['Event_Invitation']['in_waitlist']=0;

                            $new_event_inv_arr['Event_Invitation']['waitlist_tickets']=0;

                            $new_event_inv_arr['Event_Invitation']['tickets_booked_date']=$tickets_booked_date;

                            $new_event_inv_arr['Event_Invitation']['rec_event_id']=$rec_eventid;

                            

                            $this->EventInvitation->Save($new_event_inv_arr['Event_Invitation']);

                            

                            

                            if($rsvp_mail_id!="" && $rsvp_mail_id!=NULL)

                             {

                                 $condition = " EmailTemplate.id= '".$rsvp_mail_id."' and  EmailTemplate.project_id='".$project_id."' and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0'";

                                 

                                $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                                if(is_array($mailMessage) && !empty($mailMessage)) 

                                {   

                                    $userpass= base64_decode($this->Session->read("keypass"));  

                                   

                                    $subject  = $mailMessage['EmailTemplate']['subject'];              

                                    $subject = str_replace('[[PROJECT_NAME]]',$project_name,$subject);          

                                    $from = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromemail'];

                                    $fromname = $mailMessage['EmailTemplate']['sender'];              //$projectDetails['Project']['fromname']; 

                                    $mailBody=$mailMessage['EmailTemplate']['content'];  

                                                                      

                                    $mailBody = $this->replaceImgPathInEmailContent($mailBody); 

                                           

                                    $toemail = $holder_email;

                                    

                                 /**

                                 * New Email Temp replacement code for data Elements 

                                 */

                                 //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $toemail);

                                 //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                    //$dataEleValuesArray[DATA_ELEMENT_USER_NAME]= $holder_email;

                                    //$dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= trim($userpass);

                                    //$this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                 //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                    $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                    $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                    $result = $this->Sendemail->sendMailContentWithCC($toemail,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                                                                       

                                    $ccemail = $mailMessage['EmailTemplate']['send_cc_email'];

                                                                                                    

                                    $this->Session->delete("keypass");

                                } 

                            

                             }

                                                         



							$this->redirect(array('controller'=>'companies','action'=>'rsvp','exit'));

                         }

                     }

                     else   //if i will attend is not check

                     {

                         $this->Session->setFlash('Error In Processing. Please try Again later.','default',array('class' => 'errormsg'));                                        

						 $this->redirect(array('controller'=>'companies','action'=>'rsvp',$eventid));

                         

                     }

                     

                     

                 }

            }          



        }

        

         function  dashboard_events(){ 

            //Configure::write('debug', 2);    

            $this->layout= 'internal_layout';            



            //for active menu display

            $this->set('page_url',"dashboard_events");

            

            ##check user session live or not

            $this->session_check_user();

         

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");                



            if(empty($project_name)) $this->redirect(array('controller'=>'companies','action'=>'session_expired'));



            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);    

            

            $current_domain= $_SERVER['HTTP_HOST'];

            $this->set('current_domain',$current_domain); 

                               

        }





        /**

        * Dashboard - Event invitations  List

        */

        function  get_eventinvitations_by_ajax($eventstart='0', $eventoffset='10'){ 

            //Configure::write('debug', 2);    

            $this->layout = 'ajax';

            ##check user session live or not

            $this->session_check_user();

         

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");                



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));



            $this->set('holder_id',$holderArray['Holder']['id']);



            $commentcondition = " Comment.project_id='".$project_id."' and Comment.active_status='1' and Comment.delete_status='0'";

            if(isset($coinholderid)!=""){

                $commentcondition.= " and   Comment.coin_holder_id='".$coinholderid."'";

            }

            if(isset($comment_start)==""){

                $comment_start=0;

            }



            if(isset($comment_offset)==""){

                $comment_offset=5;

            }

            /**

            * Get logged in user's event invitations

            */

            

            $condition = "EventInvitation.project_id='$project_id' and EventInvitation.invite_to_holder_id='".$holderArray['Holder']['id']."'

            and Event.id= EventInvitation.event_id and Event.active_status='1' and Event.delete_status='0'";  



            $query="Select EventInvitation.id as invite_id, EventInvitation.invite_status, Event.*

            from event_invitations EventInvitation, events Event

            Where ".$condition."group by EventInvitation.event_id" ;



            $eventinvitationsArray = $this->User->query($query); 

  //  echo "<pre>"; print_r($eventArray); echo "</pre>";  exit;

            $this->set("eventinvitationsArray",$eventinvitationsArray);    

        }

        

        

        function eventrespond($event_id, $respond){  

            $this->session_check_user();



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");  



            if(empty($project_name)){

                echo json_encode(1);   exit;        

            } 



            if($event_id=="" || $respond=="")   {

                echo json_encode(1);   exit;       

            }



            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

            $holder_id =  $holderArray['Holder']['id'];





            App::import("Model", "EventInvitation");

            $this->EventInvitation =   & new EventInvitation();



            $upcondition = " EventInvitation.event_id = '".$event_id."' and  EventInvitation.project_id='".$project_id."' and EventInvitation.invite_to_holder_id ='".$holder_id."' ";  

            //     $this->set('holder_id',$holderArray['Holder']['id']);

            $chk= $this->EventInvitation->updateAll(array('invite_status'=>"'".$respond."'"), array('EventInvitation.event_id'=>$event_id, 'EventInvitation.project_id'=>$project_id, 'EventInvitation.invite_to_holder_id'=>$holder_id));

            if($chk) {

                echo json_encode(1);   exit;        

            } else{

                echo json_encode(0);   exit;        

            }





        }

        function view_eventinvitationdetails($eventid){

            ##check user session live or not

            $this->session_check_user();



            $usertype = $this->Session->read("User.User.usertype");

            $userid = $this->Session->read("User.User.id");

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');   



            $this->layout= 'internal_layout';

            if($usertype=="holder"){

                $this->layout= 'internal_layout';



            }

            else {

                $this->layout= 'new_sponsor_layout';

            }



            if($eventid==""){

                $this->redirect('/companies/dashboard');   

            }

            $current_domain= $_SERVER['HTTP_HOST'];  

            //for active menu display

            $this->set('page_url',"dashboard");





            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);



            App::import('Model','Event');

            $this->Event = new Event();

            $condition3 = "Event.project_id = '$project_id' AND Event.id='$eventid'";

            $eventDetails=$this->Event->find('first',array("conditions"=>$condition3));



            $this->set('eventDetails',$eventDetails);   



        }



        function blogs($bloglimit=10, $blogid=null){



            //Configure::write('debug', 2);    



            $this->layout= 'internal_layout';

            $reg_now  =false;

            //for active menu display

            $this->set('page_url','blogs');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            //STEP : GET PAGE CONTENT

            $condition="Content.alias='blogs' and Content.project_id=".$project_id." and Content.active_status='1' and Content.delete_status='0' ";

            $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);     

            $this->set('meta_description',$page_content['Content']['metadescription']);

            $this->set('meta_keyword',$page_content['Content']['metakeyword']);

            $this->set('meta_title',$page_content['Content']['metatitle']);

            $this->set('meta_isindex',$page_content['Content']['meta_isindex']);

            $this->set('meta_isfollow',$page_content['Content']['meta_isfollow']);

            $this->set('page_title',$page_content['Content']['title']);

            $this->set('page_content',$page_content);

               



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);



            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain); 



            ##import blog  model for processing

            App::import("Model", "Blog");



            $this->Blog =  & new Blog();   



            $condition = "project_id = '".$projectDetails['Project']['id']."' and  active_status='1' and delete_status='0'";

            if($blogid!=null && $blogid > 0) {

                // Show specific blog

                $condition.= " and id = '".$blogid."' ";

                $blogdata = $this->Blog->find('first',array("conditions"=>$condition));

                $this->set('blogdata',$blogdata);  

            }else{



                // Show blog list 

                $blogquery="Select Blog.*, (SELECT count(1) from blog_comments where blog_id=Blog.id) as commentcount from blogs Blog where ".$condition." order by Blog.created desc limit 0,".$bloglimit;

                $bloglist = $this->Blog->query($blogquery);

                // echo "<pre>"; print_r($bloglist); echo "</pre>";   exit;

                // find('all',array("conditions"=>$condition, 'order' =>'created desc', 'limit' => $bloglimit, 'page' => 1)); 

                $this->set('bloglist',$bloglist);

                $this->set('bloglimit',$bloglimit);  

                $this->set('blogoffset',10);   

            }





            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $this->set('meta_title',$projectDetails['Project']['sitename']);

            $this->set('page_title',$projectDetails['Project']['sitename']);



        }





        function blog_savecomment(){

            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();



            $userid = $this->Session->read("User.User.id");

            $project_id=$this->Session->read("projectwebsite_id");

            $this->layout= 'ajax';

            if(!empty($this->data['Coinset']['id'])){



                $coinholderid=$this->data['Coinset']['id'];



            }



            $comment=$_REQUEST['data']['comment'];  

            $blog_id=$_REQUEST['blog_id'];             



            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

            $holder_id =$holderArray['Holder']['id'];

            $holder_name =$holderArray['Holder']['screenname'];



            $this->data['BlogCommnet']['blog_id']=  $blog_id;

            $this->data['BlogCommnet']['project_id']=  $project_id;

            $this->data['BlogCommnet']['holder_id']=  $holder_id;

            $this->data['BlogCommnet']['holder_screenname']=  $holder_name;

            $this->data['BlogCommnet']['comment']=  $comment;

            ##import blog  model for processing

            App::import("Model", "BlogComment");



            $this->BlogComment =  & new BlogComment();  

            $chk=$this->BlogComment->save($this->data['BlogCommnet']);

            if($chk){

                echo json_encode(1);   exit;    

            }else{

                echo json_encode(0);   exit;    

            }



        }

        

        

        function events_savecomment(){

            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();

            

            $userid = $this->Session->read("User.User.id");

            $project_id=$this->Session->read("projectwebsite_id");

            $this->layout= 'ajax';

            if(!empty($this->data['Coinset']['id'])){



                $coinholderid=$this->data['Coinset']['id'];



            }



            $comment=$_REQUEST['data']['comment'];  

            $event_id=$_REQUEST['event_id'];    

            

                     



            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

            $holder_id =$holderArray['Holder']['id'];

            $holder_name =$holderArray['Holder']['screenname'];



            $this->data['EventComment']['event_id']=  $event_id;

            $this->data['EventComment']['project_id']=  $project_id;

            $this->data['EventComment']['holder_id']=  $holder_id;

            $this->data['EventComment']['holder_screenname']=  $holder_name;

            $this->data['EventComment']['comment']=  $comment;

            ##import blog  model for processing

            App::import("Model", "EventComment");



            $this->EventComment =  & new EventComment();  

            $chk=$this->EventComment->save($this->data['EventComment']);

            if($chk){

                echo json_encode(1);   exit;    

            }else{

                echo json_encode(0);   exit;    

            }



        }





        /**

        * Fucntion to get all comments for selected blog and selected project

        *     

        * @param mixed $blog_id         - Selected blog id

        * @param mixed $comment_start   - Comment Start limit

        * @param mixed $comment_offset  - Comment Offset 

        * 

        */



        function  blog_comments_by_ajax($blog_id,$comment_start, $comment_offset){ 

            //Configure::write('debug', 2);    

            $this->layout = 'ajax';

            ##check user session live or not   - No need to check session becasue comments are viewable to all users

            // $this->session_check_user();



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $commentcondition = " BlogComment.project_id='".$project_id."' and BlogComment.active_status='1' and BlogComment.delete_status='0' and   BlogComment.blog_id='".$blog_id."'";

            if($comment_start==""){

                $comment_start=0;

            }



            if($comment_offset==""){

                $comment_offset=50;

            }

            // Get all comments for select project and selected blog

            $query="SELECT BlogComment.*   FROM blog_comments BlogComment

            WHERE  ".$commentcondition."   ORDER BY  BlogComment.created desc   LIMIT ".$comment_start.", ".$comment_offset;

            $blogcommentArray = $this->User->query($query); 

            $this->set('blogcommentArray',$blogcommentArray);      

        }

        

        

        function  event_comments_by_ajax($event_id,$comment_start, $comment_offset){ 

            //Configure::write('debug', 2);    

            $this->layout = 'ajax';

            ##check user session live or not   - No need to check session becasue comments are viewable to all users

            // $this->session_check_user();



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $commentcondition = " EventComment.project_id='".$project_id."' and EventComment.active_status='1' and EventComment.delete_status='0' and   EventComment.event_id='".$event_id."'";

            if($comment_start==""){

                $comment_start=0;

            }



            if($comment_offset==""){

                $comment_offset=50;

            }

            // Get all comments for select project and selected blog

            $query="SELECT EventComment.*   FROM event_comments EventComment

            WHERE  ".$commentcondition."   ORDER BY  EventComment.created desc   LIMIT ".$comment_start.", ".$comment_offset;

            $eventcommentArray = $this->User->query($query); 

            $this->set('eventcommentArray',$eventcommentArray);      

        }



        

         /**

        * Funtion to show listing of all online members of project and user can join chat

        * 

        */

            function chat(){



            // Configure::write('debug', 2);    



          //  $this->session_check_user();

          

            $this->layout= 'internal_layout';

            $reg_now  =false;

            //for active menu display

            $this->set('page_url','chat');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            //STEP : GET PAGE CONTENT

            $condition="Content.alias='chat' and Content.project_id=".$project_id." and Content.active_status='1' and Content.delete_status='0' ";

            $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);     

            $this->set('meta_description',$page_content['Content']['metadescription']);

            $this->set('meta_keyword',$page_content['Content']['metakeyword']);

            $this->set('meta_title',$page_content['Content']['metatitle']);

            $this->set('meta_isindex',$page_content['Content']['meta_isindex']);

            $this->set('meta_isfollow',$page_content['Content']['meta_isfollow']);

            $this->set('page_title',$page_content['Content']['title']);

            $this->set('page_content',$page_content);

            

            $this->set('project_name',$project_name);    



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $userid = $this->Session->read("User.User.id");  

            $this->set('userid',$userid);

            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);

    

            if($username){

                // Get user sessiond details 

                

                $user = $this->Session->read("User"); 

                // Check logged in user joined chat or not

                $condition = " User.id = '".$userid."' and User.delete_status='0' ";

                $userDetails = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));   

                $user_is_chatjoined= $userDetails['User']['is_chatjoined'];

                $this->set('user_is_chatjoined',$user_is_chatjoined);

            }

            

            

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain); 



            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $this->set('meta_title',$projectDetails['Project']['sitename']);

            $this->set('page_title',$projectDetails['Project']['sitename']);



        }

        

        /**

        * Online member list of selected project  -  chat Module

        * 

        */

        function chat_onlinememberlist(){

            $this->session_check_user();

                      $this->layout = 'ajax';

                    $reg_now  =false;

                    //for active menu display

                    $this->set('page_url','chat');



                    $project_id=$this->Session->read("projectwebsite_id");    

                    $project_name=$this->Session->read("projectwebsite_name");    

                    $userid = $this->Session->read("User.User.id");  

                                  

                    if(empty($project_name)) $this->redirect('/companies/session_expired');



                    $this->set('project_name',$project_name);    



                    $projectDetails=$this->getprojectdetails($project_id);    

                    $this->set('project',$projectDetails);    



                    $username = $this->Session->read("User.User.username");

                    $this->set('username',$username);



                    $current_domain= $_SERVER['HTTP_HOST']; 

                    $this->set('current_domain',$current_domain); 



                    ##import blog  model for processing  

                    App::import("Model", "Holder");



                    $this->Holder =  & new Holder();   

                    

                    // check Active users in last 30 mins i.e active sessions

                    $condition1="Holder.project_id='".$project_id."'  and User.is_loggedin='1'  and  Holder.active_status='1' and Holder.delete_status='0'

                    and User.id IN(Select DISTINCT(user_id) from user_sessions where TIMEDIFF(CURRENT_TIMESTAMP,modified ) <= TIME('00:30:00')) ";



                    $this->Holder->bindModel(array('belongsTo'=>array(

                    'User'=>array(

                    'foreignKey'=>false,

                    'conditions'=>'User.id = Holder.user_id'

                    )

                    )));



                                



                    $order      = array('User.last_login DESC');

                    $memberdetails = $this->Holder->find('all',array('conditions' => $condition1, 'order' =>$order));    



                   $this->set('memberdetails',$memberdetails); 

        }

        

        function chat_joinedmemberlist(){ 

              $this->session_check_user();

                       $this->layout = 'ajax';

                    $reg_now  =false;

                    //for active menu display

                    $this->set('page_url','chat');



                    $project_id=$this->Session->read("projectwebsite_id");    

                    $project_name=$this->Session->read("projectwebsite_name");    

                    $userid = $this->Session->read("User.User.id");  

                                  

                    if(empty($project_name)) $this->redirect('/companies/session_expired');



                    $this->set('project_name',$project_name);    



                    $projectDetails=$this->getprojectdetails($project_id);    

                    $this->set('project',$projectDetails);    



                    $username = $this->Session->read("User.User.username");

                    $this->set('username',$username);



                    $current_domain= $_SERVER['HTTP_HOST']; 

                    $this->set('current_domain',$current_domain); 



                    ##import blog  model for processing  

                    App::import("Model", "Holder");



                    $this->Holder =  & new Holder();   

                    

                    $condition1="Holder.project_id='".$project_id."'  and User.is_loggedin='1' and User.is_chatjoined='1'  and  Holder.active_status='1' 

                    and Holder.delete_status='0'  and User.id IN(Select DISTINCT(user_id) from user_sessions where TIMEDIFF(CURRENT_TIMESTAMP,modified ) <= TIME('00:30:00')) ";



                    $this->Holder->bindModel(array('belongsTo'=>array(

                    'User'=>array(

                    'foreignKey'=>false,

                    'conditions'=>'User.id = Holder.user_id'

                    )

                    )));



                                



                    $order      = array('User.last_login DESC');

                    $memberdetails = $this->Holder->find('all',array('conditions' => $condition1, 'order' =>$order));    



                   $this->set('memberdetails',$memberdetails); 

        }

      

      

      

           /**

        * Funtion to show listing of all online members of project and user can join chat

        * 

        */

            function chat_join(){



            // Configure::write('debug', 2);    

        

            $this->session_check_user();

            $this->layout= 'internal_layout';

            $reg_now  =false;

            //for active menu display

            $this->set('page_url','chat');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");  

                          

            if(empty($project_name)) $this->redirect('/companies/session_expired');



             $user['User']['id']=$userid;

             $user['User']['is_chatjoined']='1';

           

             if($this->User->Save($user['User'])){

                  echo json_encode(1) ;

                  exit;

             }else{

                  echo json_encode(0) ;

                  exit;

             }

  

            }

            

            

       /**

        * Funtion to show listing of all online members of project and user can join chat

        * 

        */

            function chat_leave(){



            // Configure::write('debug', 2);    

            

            $this->session_check_user();

            $this->layout= 'internal_layout';

            $reg_now  =false;

            //for active menu display

            $this->set('page_url','chat');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");  

                          

            if(empty($project_name)) $this->redirect('/companies/session_expired');



             $user['User']['id']=$userid;

             $user['User']['is_chatjoined']='0';

           

             if($this->User->Save($user['User'])){

                  echo json_encode(1) ;

                  exit;

             }else{

                  echo json_encode(0) ;

                  exit;

             }

            

            }

            

        /**

        * Fucntion to send chat message from loggedin user 

        * 

        */

        function chat_sendmessage(){

            //Configure::write('debug', 2);    

            ##check user session live or not

            //$this->session_check_user();

            $this->layout= ''; 

            $sessionuser   = $this->Session->read('User');

            if(!empty($sessionuser))

            {

                $userid = $this->Session->read("User.User.id");

                $usertype = $this->Session->read("User.User.usertype");     

                $project_id=$this->Session->read("projectwebsite_id");



                if(!empty($this->data['Coinset']['id'])){

                    $coinholderid=$this->data['Coinset']['id'];

                }

                $message=$_REQUEST['message'];  

                if($usertype=="holder"){

                    $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

                    $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

                    $usr_id =$holderArray['Holder']['id'];

                    $usr_name =$holderArray['Holder']['screenname'];



                }

                else {

                    App::import("Model", "Sponsor");

                    $sponsor =   & new Sponsor();

                    $projectDetails=$this->getprojectdetails($project_id);

                    $sponserid=$projectDetails['Project']['sponsor_id'];    

                    $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid));

                    $usr_id =$sponsordetails['Sponsor']['id'];

                    $usr_name =$sponsordetails['Sponsor']['sponsor_name'];

                }

            }else{

                $sessionadmin   = $this->Session->read('Admin');

                if(!empty($sessionadmin))

                {

                    $usr_id = $this->Session->read("Admin.Admin.id");

                    $usr_name = $this->Session->read("Admin.Admin.username");   

                    $project_id=$this->Session->read("sessionprojectid");    

                    $project_name=$this->Session->read("projectwebsite_name_admin");       



                }else{

                    echo "0";

                    exit(0);

                }

            }





            $this->data['Chat']['project_id']=  $project_id;

            $this->data['Chat']['holder_id']=  $usr_id;

            $this->data['Chat']['holder_screenname']=  $usr_name;

            $this->data['Chat']['message']=  $message;

            ##import blog  model for processing

            App::import("Model", "Chat");



            $this->Chat =  & new Chat();  

            $chk=$this->Chat->save($this->data['Chat']);

            if($chk){

                echo "1";

                exit(0);

            }else{

                echo "0";

                exit(0);

            }

        }



        /**

        * Function load today's chat messages to chat window

        *     

        * @param mixed $lastid  - last message id

        */

        function chat_getmessages($lastid=0){   

            $this->layout = '';

            ##check user session live or not

            // $this->session_check_user();

            $sessionuser   = $this->Session->read('User');

            if(!empty($sessionuser))

            {

                $project_id=$this->Session->read("projectwebsite_id");    

                $project_name=$this->Session->read("projectwebsite_name");    

            }else{

                $sessionadmin   = $this->Session->read('Admin');

                if(!empty($sessionadmin))

                {

                    $project_id=$this->Session->read("sessionprojectid");    

                    $project_name=$this->Session->read("projectwebsite_name_admin");     



                }else{

                  // $project_id=$this->Session->read("projectwebsite_id");    

                  // $project_name=$this->Session->read("projectwebsite_name");

                 echo 0;

                exit; 

                }

            }

            if(empty($project_name)) {

                echo 0;

                exit; 

            }



            $commentcondition = " Chat.project_id='".$project_id."' and Chat.active_status='1' and Chat.delete_status='0' and id >'".$lastid."'";

            if($lastid==0){

                // To get last 5 records from table

                //  $commentcondition.=" and (Chat.id > (select count(id) from chats) - 5 )";



                // To get todays records from table

                $commentcondition.=" AND  DATE(Chat.`created`) = DATE(NOW()) ";

                $commentcondition.=" Order by  Chat.created ASC";

            }else{

                $commentcondition.=" Order by  Chat.created ASC ";   // Limit ".$lastid.", 100

            }



            $query="SELECT Chat.*  from chats Chat  where  ".$commentcondition;

            $chatHistory = $this->User->query($query); 

            echo json_encode($chatHistory) ;

            exit;

        }  



        /**

        * Founction to display all messages sent and received by loggin user - holder

        * 

        * 

        */

        function  messages(){

           

            Configure::write('debug', 0);    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';    

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain);



            //for active menu display

            $this->set('page_url','messages');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect(array('controller'=>'companies','action'=>'session_expired'));



            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $userid = $this->Session->read("User.User.id");

            // Get logged user Holder details

            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

            $this->set('holder_id',$holderArray['Holder']['id']);

            // Per page number of messages 

            $this->set('msg_offset',15); 



            // Get Project Sponsor details 

             App::import("Model", "Sponsor");

             $sponsor =   & new Sponsor();

               

             $sponsordetails=$sponsor->find('first',array("conditions"=>'project_id='.$project_id));

              $this->set("sponsordetails",$sponsordetails); 

             //$holderid =$sponsordetails['Sponsor']['id'];

           //  $holdername =$sponsordetails['Sponsor']['sponsor_name'];

             

            //  Retrieve holder list to send messages 

            $condition = "Holder.project_id = '$project_id' AND Holder.delete_status='0' AND Holder.user_id!='".$userid."' ";  

            $order = "Holder.id DESC"; 

            $query="SELECT Holder.* from holders Holder where  ".$condition." Order by  screenname ASC";

            $holderarr = $this->Holder->query($query); pr($holderarr);

			$holderarr = array();

            $this->set("holderlist",$holderarr);

        }

        

        

          function  get_coin_detail_by_ajax($project_id,$coin_holder_id,$coin_serial){ 

            //Configure::write('debug', 2);    

            $this->layout = 'ajax';

            ##check user session live or not

            //$this->session_check_user();

                        

            // Project Details

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);

            $this->set('project',$projectDetails);    

            

            $this->set('coin_serial',$coin_serial); 

            

                      

            

            App::import("Model", "Comment");

            $this->Comment =   & new Comment();

            

            $condition = "Comment.project_id='".$project_id."' and coin_holder_id='". $coin_holder_id."' and  Comment.delete_status='0'";

            $comment_details = $this->Comment->find('all', array('conditions' => $condition));            

            

            $this->set('comment_details',$comment_details); 

            

            //find coin_holders

           

            $coin_holder_ids=array();

            

            foreach($comment_details as $comment_detail)

            {

                if(!in_array($comment_detail['Comment']['holder_id'],$coin_holder_ids))

                    array_push($coin_holder_ids,$comment_detail['Comment']['holder_id']);

            }

            

            $this->set('coin_holder_ids',$coin_holder_ids);

            

            

            

        }

        

        

         function  get_next_coins($coin_start=0,$coin_limit=10){ 

            //Configure::write('debug', 2);    

            $this->layout = 'ajax';

            

            if($coin_start=="undefined" && $coin_limit=="undefined")

            {

                $coin_start=0;

                $coin_limit=10;

            }

            

                        

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

                        

            // Project Details

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);

            $this->set('project',$projectDetails);    



            App::import("Model", "CoinsHolder");

            $this->CoinsHolder =   & new CoinsHolder();

            $condition = "CoinsHolder.project_id='".$project_id."' and  CoinsHolder.delete_status='0'";

            $coinholderdetails = $this->CoinsHolder->find('all', array('conditions' => $condition,'fields'=>array('DISTINCT CoinsHolder.serialnum,holder_id,id'),'order'=>'CoinsHolder.serialnum','limit'=>$coin_start.",".$coin_limit));

            

            $this->set('coinholderdetails',$coinholderdetails); 

            

            $coin_start=$coin_start+$coin_limit;

            

            $this->set('$coin_limit',$coin_limit); 

            $this->set('coin_start',$coin_start);  

            

            

    

        }



        



        /**

        * Fucntion get logged user all messages by ajax call 

        *  

        * @param mixed $msg_start      - Start limit

        * @param mixed $msg_offset     - Number of records per page

        */

        function  messages_get_by_ajax($msg_start=0, $msg_offset=15){ 

            //Configure::write('debug', 2);    

            $this->layout = 'ajax';

            ##check user session live or not

            $this->session_check_user();

            

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");                



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            // Project Details

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);

            $this->set('project',$projectDetails);    



            // Holder Details

            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

            $this->set('holder_id',$holderArray['Holder']['id']);

            $this->set('holder_name',$holderArray['Holder']['screenname']);

            // Get Messages

            App::import("Model", "Message");

            $this->Message =   & new Message(); 



            // Condition to retrieve messages  

            $condition=" MessageHolder.holderid='".$holderArray['Holder']['id']."' and MessageHolder.project_id='".$project_id."' 

            and MessageHolder.active_status='1' and MessageHolder.delete_status='0' ";          //  AND Message.fromusertype='holder'

            // Get total message count

            $querycnt="SELECT count(1) totalmsg  FROM message_holders MessageHolder WHERE ".$condition;

            $msgCountArray = $this->Message->query($querycnt); 

            $this->set('totalmsgcount',$msgCountArray[0][0]);

            $this->set('msg_offset',$msg_offset);

            $this->set('msg_start',$msg_start);



            // Get Messages                

            $msgQuery="Select MessageHolder.is_new, Message.*

            FROM message_holders MessageHolder

            LEFT JOIN messages Message ON  Message.id=MessageHolder.msgid

            WHERE ".$condition." Order by  Message.lastreplydate DESC 

            Limit ".$msg_start.",".$msg_offset;

            $msgArray = $this->Message->query($msgQuery); 

            $this->set('msgArray',$msgArray);     

        }



        /**

        * Function to send message to receiver(s)    - by holder   

        *     

        */

        function message_send(){

            //Configure::write('debug', 2);   



            ##check user session live or not

            $this->session_check_user();

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $userid = $this->Session->read("User.User.id");   



            $this->layout= 'ajax';

            if(empty($project_name)) $this->redirect('/companies/session_expired');

            $this->set('project_name',$project_name);



            $parent_msgid=  $_REQUEST['parent_msgid'];     

            $recevier_id=  $_REQUEST['recevier_id'];  

            $subject= $_REQUEST['subject'];     

            $message= nl2br((string)$_REQUEST['message']); 

            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

            $from_holderid=  $holderArray['Holder']['id'];

            $from_holdername=  $holderArray['Holder']['screenname']; 



            $issucessmsg =   $this->sendMessageToHolders($recevier_id, $subject, $message, $from_holderid, $from_holdername);

            if( $issucessmsg ){

                // message sent ot all receivers

                echo json_encode(1);   exit;  

            }

            else{

                // If no receiver or subject or message entered

                echo json_encode(0);   exit;      

            }



        }



        /**

        * Function view specific message in detail by message id   - to holder   

        *      

        * @param mixed $msgid  - Message id

        */

        function  messages_view($msgid){

            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'internal_layout';    

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain);



            //for active menu display

            $this->set('page_url','update_profile');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            if(empty($msgid)) $this->redirect('/companies/messages');  



            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $userid = $this->Session->read("User.User.id");

            $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

            $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

            $holderid=  $holderArray['Holder']['id'];

            $this->set('holder_name',$holderArray['Holder']['screenname']);



            // Get Messages

            App::import("Model", "Message");

            $this->Message =   & new Message();

            // Update message read staus

            $this->Message->query("UPDATE message_holders SET is_new = '0'  WHERE msgid = ' ".$msgid."' and holderid='".$holderid."'");  



            //  $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 

            $condition = "Message.id = '$msgid' AND Message.project_id = '$project_id' AND Message.active_status='1' AND Message.delete_status='0' ";  

            $msgInfo = $this->Message->find('first',array('conditions' => $condition ));       

            $this->set("msgInfo",$msgInfo);

        }



        /**

        * Send message reply - by holder 

        * 

        */

        function message_sendreply(){

            $this->session_check_user();

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $userid = $this->Session->read("User.User.id");   



            $this->layout= 'ajax';

            if(empty($project_name)) $this->redirect(array('controller'=>'companies','action'=>'session_expired'));

            $this->set('project_name',$project_name);



            $msgid=  $_REQUEST['msgid'];     

            $reply= nl2br((string) $_REQUEST['data']['Companies']['reply']);     

			if($msgid){

                $usertype = $this->Session->read("User.User.usertype");    

                if($usertype=="holder"){

                 

					$condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

                    $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

                    $holderid=  $holderArray['Holder']['id'];

                    $holdername=  $holderArray['Holder']['screenname'];

                }

                else {

                    App::import("Model", "Sponsor");

                    $sponsor =   & new Sponsor();

                    $projectDetails=$this->getprojectdetails($project_id);

                    $sponserid=$projectDetails['Project']['sponsor_id'];    

                    $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid));

                    $holderid =$sponsordetails['Sponsor']['id'];

                    $holdername =$sponsordetails['Sponsor']['sponsor_name'];

                }



                if($reply!=""){

                    // Import MessageReply model send message

                    App::import('Model','MessageReply');

                    $this->MessageReply = new MessageReply();



                    // Insert message reply 

                    $this->data['MessageReply']['project_id']=$project_id;

                    $this->data['MessageReply']['msgid']=$msgid; 

                    $this->data['MessageReply']['holderid']=$holderid; 

                    $this->data['MessageReply']['holdername']=$holdername; 

                    $this->data['MessageReply']['reply_content']=trim($reply); 

                    $this->data['MessageReply']['active_status']=1;

                    $this->MessageReply->save($this->data['MessageReply']);   

                    // Update message is_new status - if msg has new reply then msg status is_new become new (1)

                    App::import('Model','Message');

                    $this->Message = new Message();    

                    $this->Message->id = $msgid;

                    $this->data = $this->Message->read(); 

                    if($this->data['Message']['id'])  {

                        $this->data['Message']['lastreplydate']=date("Y-m-d h:i:s");    

                        $this->Message->save($this->data['Message']);  

                        $this->Message->query("UPDATE message_holders SET is_new = '1'  WHERE msgid = ' ".$msgid."' and holderid!='".$holderid."'");  

                    }  

                    echo json_encode(1);   exit;       



                } else{

                    // if no reply enterd

                    echo json_encode(0);   exit;      

                }    

            }

            else{

                // if no msg id defined    

                echo json_encode(0);   exit;      

            }

        }



        /**

        * Fucntion to get all replies for selected message and selected project

        *     

        * @param mixed $msgid         - Selected message id

        * @param mixed $reply_start   - Reply Start limit

        * @param mixed $reply_offset  - Reply Offset 

        * 

        */



        function  message_reply_by_ajax($msgid,$reply_start=0, $reply_offset=50){ 



            $this->layout = 'ajax';    

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $this->set('project_name',$project_name);    

            $this->set('project_id',$project_id);



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            $usertype = $this->Session->read("User.User.usertype");

            if($usertype=="sponsor"){

                $projectDetails=$this->getprojectdetails($project_id);

                App::import("Model", "Sponsor");

                $sponsor =   & new Sponsor();

                $sponserid=$projectDetails['Project']['sponsor_id'];    

                $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid)); 

                $usr_name =$sponsordetails['Sponsor']['sponsor_name'];

                $this->set('holder_name',$usr_name);

            }else{

                $userid = $this->Session->read("User.User.id");

                $condition = " Holder.user_id = '".$userid."' and  Holder.project_id='".$project_id."' ";

                $holderArray = $this->Holder->find('first',array('conditions' => $condition ));

                $holderid=  $holderArray['Holder']['id'];

                $this->set('holder_name',$holderArray['Holder']['screenname']);

            }

            

            

            // Import MessageReply model send message

            App::import('Model','MessageReply');

            $this->MessageReply = new MessageReply();



            $replycondition = " MessageReply.project_id='".$project_id."' and MessageReply.active_status='1' and MessageReply.delete_status='0' and   MessageReply.msgid='".$msgid."'";

            // Get all relpies for select project and selected message

            $query="SELECT MessageReply.*   FROM message_replies MessageReply

            WHERE  ".$replycondition."   ORDER BY  MessageReply.created desc   LIMIT ".$reply_start.", ".$reply_offset;

            $msgReplyArray = $this->User->query($query); 

            $this->set('msgReplyArray',$msgReplyArray);      

        }





        /**

        * Function name   : messagelist()

        * Description : This function used to list messages for sponsor of related project

        * Created On      : 24-8-2011

        *

        */ 

        function messagelist(){

            ##Configure::write('debug',3);



            ##check user session live or not

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"messagelist");

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect(array('controller'=>'companies','action'=>'session_expired'));



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '6'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);



            $projectDetails=$this->getprojectdetails($project_id);

            $this->set('project_name',$project_name);

            $this->set('project',$projectDetails);    



            $projectid =$project_id;    

            App::import("Model", "Sponsor");

            $sponsor =   & new Sponsor();

            $sponserid=$projectDetails['Project']['sponsor_id'];    

            $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid));

            $usr_id =$sponsordetails['Sponsor']['id'];

            $usr_name =$sponsordetails['Sponsor']['sponsor_name'];

            $this->set("usr_name",$usr_name);  	



            if(!empty($this->data))

            {        

                $val=$this->data['Companies']['searchkey'];

                $condition = "(Message.from_holdername  like '%$val%' OR Message.to_holdername  like '%$val%' OR Message.msg_subject like '%$val%') and 

                MessageHolder.holderid='".$usr_id."' and  MessageHolder.project_id = '$projectid' AND Message.delete_status='0'  AND MessageHolder.usertype='sponsor'";

            } 

            else

            {

               $condition = "MessageHolder.holderid='".$usr_id."' and  MessageHolder.project_id = '$projectid' AND Message.delete_status='0' AND MessageHolder.usertype='sponsor'";

            }



            App::import("Model", "Message");

            $this->Message =  & new Message();			



            ##fetch data from Messages table for listing

            $field='';

			 $msgQuery="Select MessageHolder.is_new, Message.*

            FROM message_holders MessageHolder

            LEFT JOIN messages Message ON  Message.id=MessageHolder.msgid

            WHERE ".$condition." Order by  Message.lastreplydate DESC  ";

            $msgarr = $this->Message->query($msgQuery);   



            $this->Pagination->sortByClass    = 'Message'; ##initaite pagination 

            $this->Pagination->total= count($msgarr);    

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);            



            $order = "Message.created DESC";



            $msgQuery="Select MessageHolder.is_new, Message.*

            FROM message_holders MessageHolder

            LEFT JOIN messages Message ON  Message.id=MessageHolder.msgid

            WHERE ".$condition." Order by  Message.lastreplydate DESC  ";

            $msgarr = $this->Message->query($msgQuery);                       

            ##set message data in variable            

            $this->set("msglist",$msgarr);



        }



        /**

        * Fucntion to create new message and also if msgid then view that message -For Sponsor

        *  

        * @param mixed $msgid

        */

        function messagenew($msgid=null, $msgholder=null){

            ##Configure::write('debug',3);

            ##check user session live or not

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");

            $this->set('msgholder',$msgholder);               

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '6'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain);



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set("msgid",$msgid); 



            $projectid =$project_id;    

            App::import("Model", "Sponsor");

            $sponsor =   & new Sponsor();

            $sponserid=$projectDetails['Project']['sponsor_id'];    

            $sponsordetails=$sponsor->find('first',array("conditions"=>'id='.$sponserid)); 

            $usr_name =$sponsordetails['Sponsor']['sponsor_name'];

            $this->set("usr_name",$usr_name);

            // Import Message model 

            App::import('Model','Message');

            $this->Message = new Message(); 



            if(isset($_REQUEST['recevier_id']))

            {        

                $recevier_id=  $_REQUEST['recevier_id'];  

                $subject= $_REQUEST['subject'];     

                $message= nl2br((string)$_REQUEST['message']);    

                $fromusertype='sponsor';

                if($recevier_id){



                    $from_holderid =$sponsordetails['Sponsor']['id'];

                    $from_holdername =$sponsordetails['Sponsor']['sponsor_name'];



                    // Get receiver comma separated list

                    $to_holderid=""; 

                    $to_holdername="";

                    foreach($recevier_id as $recevier){

                        $recevierArray=explode("-", $recevier);

                        if($to_holderid==""){

                            $to_holderid=$recevierArray[0];

                            $to_holdername=$recevierArray[1];

                        }else{

                            $to_holderid.=",".$recevierArray[0];

                            $to_holdername.=",".$recevierArray[1];       

                        }

                    }              





                    if($message!="" && $subject!=""){ 

                        // Send message to receiver INBOX  Folder

                        $this->data['Message']['project_id']=$project_id;

                        $this->data['Message']['from_holderid']=$from_holderid; 

                        $this->data['Message']['to_holderid']=$to_holderid;

                        $this->data['Message']['from_holdername']=$from_holdername;

                        $this->data['Message']['to_holdername']=$to_holdername;

                        $this->data['Message']['msg_subject']=trim($subject);

                        $this->data['Message']['msg_content']=trim($message);

                        $this->data['Message']['fromusertype']=$fromusertype;  

                        $this->data['Message']['lastreplydate']=date("Y-m-d h:i:s");

                        $this->data['Message']['active_status']=1;    

                        $this->Message->save($this->data['Message']);

                        $new_msg_id = $this->Message->getLastInsertId();

                        if($new_msg_id){

                            App::import('Model','MessageHolder');

                            $this->MessageHolder = new MessageHolder();

                            foreach($recevier_id as $recevier){

                                $recevierArray=explode("-", $recevier);

                                $to_id=$recevierArray[0];

                                // Insert mesg id to message holder table for receiver

                                $this->data['MessageHolder']['id']=0;      

                                $this->data['MessageHolder']['project_id']=$project_id;

                                $this->data['MessageHolder']['msgid']=$new_msg_id; 

                                $this->data['MessageHolder']['holderid']=$to_id; 

                                $this->data['MessageHolder']['is_new']=1; 

                                $this->data['MessageHolder']['usertype']='holder'; 

                                $this->data['MessageHolder']['active_status']=1;

                                $this->MessageHolder->save($this->data['MessageHolder']);

                            }



                            // Insert mesg id to message holder table for sender

                            $this->data['MessageHolder']['id']=0; 

                            $this->data['MessageHolder']['project_id']=$project_id;

                            $this->data['MessageHolder']['msgid']=$new_msg_id; 

                            $this->data['MessageHolder']['holderid']=$from_holderid; 

                            $this->data['MessageHolder']['is_new']=0; 

                            $this->data['MessageHolder']['usertype']=$fromusertype; 

                            $this->data['MessageHolder']['active_status']=1;

                            $this->MessageHolder->save($this->data['MessageHolder']);       

                        }

                        $this->Session->setFlash('Your message sent successfully!.','default',array('class' => 'successmsg')); 

                        $this->redirect('/companies/messagelist'); 

                    } else{

                        $this->Session->setFlash('Please enter subject and message both.','default',array('class' => 'errormsg'));   

                        //echo json_encode(0);   exit;      

                    }    

                }else{

                    $this->Session->setFlash('Please select receiver.','default',array('class' => 'errormsg'));    

                }



            } 



            if ($msgid!=null){

                // Update message read staus

                $this->Message->query("UPDATE message_holders SET is_new = '0'  WHERE msgid = ' ".$msgid."' and holderid='".$sponsordetails['Sponsor']['id']."'");  

                // Get msg details if msg id 

                $condition = "Message.id = '$msgid' AND Message.project_id = '$project_id' AND Message.active_status='1' AND Message.delete_status='0' ";  

                $msgInfo = $this->Message->find('first',array('conditions' => $condition ));       

                $this->set("msgInfo",$msgInfo);



            }else{

                // Get receiver list to send message 

                $condition = "Holder.project_id = '$project_id' AND Holder.delete_status='0' ";  

                $order = "Holder.id DESC"; 

                $query="SELECT Holder.*

                from holders Holder

                where  ".$condition."

                Order by  screenname ASC";

                $holderarr = $this->Holder->query($query); 

                $this->set("holderlist",$holderarr);

            }

        }



        function sendMessageToHolders($recevier_id, $subject, $message, $from_holderid, $from_holdername, $fromusertype='holder'){

            //  $recevier_id=  $_REQUEST['recevier_id'];  

            //    $subject= $_REQUEST['subject'];     

            //    $message= nl2br((string)$_REQUEST['message']); 

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");        



            if($recevier_id){

                //    $from_holderid =$sponsordetails['Sponsor']['id'];

                //     $from_holdername =$sponsordetails['Sponsor']['sponsor_name'];



                // Get receiver comma separated list

                $to_holderid=""; 

                $to_holdername="";

                foreach($recevier_id as $recevier){

                    $recevierArray=explode("-", $recevier);

                    if($to_holderid==""){

                        $to_holderid=$recevierArray[0];

                        $to_holdername=$recevierArray[1];

                    }else{

                        $to_holderid.=",".$recevierArray[0];

                        $to_holdername.=",".$recevierArray[1];       

                    }

                }              

                // Import Message model 

                App::import('Model','Message');

                $this->Message = new Message(); 



                if($message!="" && $subject!=""){ 

                    // Send message to receiver INBOX  Folder

                    $this->data['Message']['project_id']=$project_id;

                    $this->data['Message']['from_holderid']=$from_holderid; 

                    $this->data['Message']['to_holderid']=$to_holderid;

                    $this->data['Message']['from_holdername']=$from_holdername;

                    $this->data['Message']['to_holdername']=$to_holdername;

                    $this->data['Message']['msg_subject']=trim($subject);

                    $this->data['Message']['msg_content']=trim($message);

                    $this->data['Message']['fromusertype']=$fromusertype;

                    $this->data['Message']['lastreplydate']=date("Y-m-d h:i:s");

                    $this->data['Message']['active_status']=1;    

                    $this->Message->save($this->data['Message']);

                    $new_msg_id = $this->Message->getLastInsertId();

                    if($new_msg_id){

                        App::import('Model','MessageHolder');

                        $this->MessageHolder = new MessageHolder();

                        foreach($recevier_id as $recevier){

                            $recevierArray=explode("-", $recevier);

                            $to_id=$recevierArray[0];

                            $to_usertype= $recevierArray[2]; 

                            // Insert mesg id to message holder table for receiver

                            $this->data['MessageHolder']['id']=0;      

                            $this->data['MessageHolder']['project_id']=$project_id;

                            $this->data['MessageHolder']['msgid']=$new_msg_id; 

                            $this->data['MessageHolder']['holderid']=$to_id; 

                            $this->data['MessageHolder']['is_new']=1; 

                            $this->data['MessageHolder']['usertype']=$to_usertype; 

                            $this->data['MessageHolder']['active_status']=1;

                            $this->MessageHolder->save($this->data['MessageHolder']);

                        }



                        // Insert mesg id to message holder table for sender

                        $this->data['MessageHolder']['id']=0; 

                        $this->data['MessageHolder']['project_id']=$project_id;

                        $this->data['MessageHolder']['msgid']=$new_msg_id; 

                        $this->data['MessageHolder']['holderid']=$from_holderid; 

                        $this->data['MessageHolder']['is_new']=0; 

                        $this->data['MessageHolder']['usertype']=$fromusertype; 

                        $this->data['MessageHolder']['active_status']=1;

                        $this->MessageHolder->save($this->data['MessageHolder']);  



                        return true;      

                    }else{

                        return false;

                    }

                }else{

                    return false;

                }

            }else{

                return false;

            }

        }





        /*******************************************************************

        * Function Name: projectbackup

        * Function Arguments: None

        * Function Return: (array)

        * Purpose:This function is used to generate project backup along with database.

        * Created By      : QUAD

        ********************************************************************/

        function  projectbackup(){



            ##check user session live or not

            $this->session_check_user();

               

            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','projectbackup');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '18'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $filename='';  // 20110826_191928.sql

            $userid = $this->Session->read("User.User.id");

            //............



            $condition = " User.id = '".$userid."' and User.project_id='".$project_id."'";

            $userArray = $this->User->find('first',array('conditions' => $condition ));

            $this->set('userArray',$userArray);

            $filepath =  'img' . DS . $project_name . DS.'uploads';

            if(!empty($this->data)) {   

                 if(isset($this->data['Company']['generate'])){

                        $errorString ='';

                        ini_set('max_execution_time', 7200);

                        ini_set('memory_limit','300M');



                        $filename=$this->Backup->getProjectBackup($project_id, $project_name);

                        if($filename){

                               //   $filename=$this->Backup->getDatabaseBackUP($filepath, $project_id);

                               $this->Session->setFlash("Backup generated successfully!.",'default',array('class' => 'successmsg'));        

                        }else{

                             $this->Session->setFlash("Opps! There seems to some problem. Please try later.",'default',array('class' => 'errormsg'));        

                        }

                }

                

                if(isset($this->data['Company']['download'])){  

                    $filename= $this->data['Company']['filename'];

                    $filepath =  'backup/'.$filename.".zip" ;

                    $this->ForceDownload->forceDownload($filepath, 'ProjectBackup.zip');

                     $this->Session->setFlash("Backup downloaded successfully!.",'default',array('class' => 'successmsg'));

                     $this->redirect('/companies/projectbackup');

                  //    exit();

                }

               

            }else{

                $this->data = $userArray;

            }

            $this->set('project_name',$project_name);  

            $this->set('filepath',$filepath);  

            $this->set('filename',$filename);   

        }



        function get_project_backup_file($filename){

            $this->layout = ''; 



            // ##check user session live or not

            //  $this->session_check_admin();

            //    $project_id = $this->Session->read("sessionprojectid");

            //   $projectDetails=$this->getprojectdetails($project_id);    

            //   $this->set('project',$filename); 

            $this->set('filename',$filename); 

        }



        /**

        * Blog Module Fucntions start here

        **********************************************************************************************************************************/



        /**

        * fucntion to list all blogs for related project

        * 

        */

        function bloglist(){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','projectbackup');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project_name',$project_name);



            $projectid = $project_id;



            ##fetch data from Blog table for listing



            $field='';



            App::import("Model", "Blog");

            $this->Blog =   & new Blog();



            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){



                $searchkeyword = $this->data['Company']['searchkey'];







                $condition = "Blog.delete_status = '0' AND Blog.project_id = '".$project_id."' and (Blog.title LIKE '%".$searchkeyword."%' OR Blog.introcontent  LIKE '%".$searchkeyword."%' )";



            }else{



                $condition = "Blog.delete_status = '0' AND Blog.project_id = '".$project_id."'";



            }



            $this->Pagination->sortByClass    = 'Blog'; ##initaite pagination 

            $this->Pagination->total= count($this->Blog->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $blogArray = $this->Blog->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            //  print_r($eventArray);    exit;    

            ##set project type data in variable

            $this->set("blogdata",$blogArray);

        }



        /*

        * Function name   : blogadd()

        * Description : This function used to add/edit blog entry for project

        * Created On      : 11-08-11 

        *

        */     



        function blogadd($blogid=''){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','projectbackup');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            ##import Company  model for processing

            App::import("Model", "Blog");



            $this->Blog =  & new Blog();   



            //for active menu display

            $this->set('page_url','addblog');



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   



            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);            



            $projectid = $project_id;



            $this->set('project_name',$projectDetails['Project']['project_name']);



            ##check empty data



            if(!empty($this->data)) {     

                $this->data['Blog']['project_id'] = $projectid;

                $bid= $this->data['Blog']['id'];

                #set the posted data

                $this->Blog->set($this->data);



                #check server side validation

                $errormsg = $this->Blog->invalidFields();



                if(!$errormsg){

                    // $bid = $this->data['Blog']['id'];   

                    $title = $this->data['Blog']['title'];

                    ##check already exists company name

                    if($this->Blog->Save($this->data)){



                        if($bid > 0){



                            $this->Session->setFlash('Blog updated Successfully.','default', array('class' => 'successmsg'));



                            if(isset($this->data['Action']['redirectpage'])){



                                $this->redirect('/companies/bloglist');



                            }else{



                                $this->redirect("/companies/blogadd/$blogid");



                            }



                        }else{



                            $this->Session->setFlash('Blog Added Successfully.','default', array('class' => 'successmsg'));



                            if(isset($this->data['Action']['redirectpage'])){



                                $this->redirect('/companies/bloglist');



                            }else{



                                $this->redirect("/companies/blogadd");       



                            }



                        }



                    }else{



                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));    



                    }





                }



            }



            if($blogid){

                $this->Blog->id = $blogid;

                $this->set('blogid', $blogid);  

                $this->set('blogpageaction', "Update");    

                $this->data = $this->Blog->read();

            }else{

                $this->set('blogid', 0); 

                $this->set('blogpageaction', "Add"); 

            }     





            $prodtl = $this->projectdetailbyid($projectid);



            $sponname = $this->getsponsornamebyprojectid($projectid);



            $this->set('sponorname',$sponname);



            $projectname = $prodtl[0]['Project']['project_name'];



            $this->set('projectname',$projectname);

        }





        /**

        * Event Module Fucntions start here

        **********************************************************************************************************************************/



        /*

        * Function name   : eventlist()

        * Description : This function used to list evnets of related project

        * Created On      : 11-08-11 

        *

        */ 

        

        function eventlist(){

            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user(); 

            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','eventlist');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   



            $projectDetails=$this->getprojectdetails($project_id); 

            $this->set('project',$projectDetails);            

            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project_name',$project_name);

            $projectid = $project_id;

            ##fetch data from Company table for listing

			App::import("Model", "RecurringEvent");

            $this->RecurringEvent =   & new RecurringEvent();

            $current_date=date('Y-m-d');



            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){ 

                $searchkeyword = $this->data['Company']['searchkey'];

                $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.start_date>='".$current_date."' and RecurringEvent.delete_status ='0' and (RecurringEvent.event_title LIKE '%".$searchkeyword."%' OR RecurringEvent.event_type  LIKE '%".$searchkeyword."%' )";

            }else{



                $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.start_date>='".$current_date."' and RecurringEvent.delete_status ='0'";



            }

            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){

                  $_GET["sortBy"]="start_date";

                  $_GET["direction"]="ASC";

            }

            

            $this->Pagination->sortByClass    = 'RecurringEvent'; ##initaite pagination 

            $this->Pagination->total= count($this->RecurringEvent->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition);

            $group="event_id";

            $eventArray = $this->RecurringEvent->find('all',array("conditions"=>$condition,'order' =>$order,'limit' => $limit, 'page' => $page));

            //  print_r($eventArray);    exit;    

            ##set project type data in variable

            $this->set("eventdata",$eventArray);

            



        }

        

             

        function pasteventlist(){

            $this->session_check_user();	 

            $this->layout= 'new_sponsor_layout';              

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");  

            $this->set('current_project_name',$project_name);     // used in project_name element file 

            //for active menu display

            $this->set('page_url','pasteventlist');



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   

             

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project_name',$project_name); 

            $projectid = $project_id;	   

			##fetch data from Company table for listing		  

            $field='';								 

            App::import("Model", "RecurringEvent");

            $this->Event =   & new RecurringEvent();			         

            $current_date=date('Y-m-d');



            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){		

                $searchkeyword = $this->data['Admin']['searchkey'];			  

                $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.start_date<'".$current_date."' and RecurringEvent.active_status='1' and RecurringEvent.delete_status='0' and  (RecurringEvent.event_title LIKE '%".$searchkeyword."%' OR RecurringEvent.eventdescription  LIKE '%".$searchkeyword."%' )";



            }else{



                $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.start_date<'".$current_date."' and RecurringEvent.active_status='1' and RecurringEvent.delete_status='0'";



            }

            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){

                  $_GET["sortBy"]="start_date";

                  $_GET["direction"]="ASC";

            }

			$order='';

            $this->Pagination->sortByClass    = 'RecurringEvent'; ##initaite pagination 

            $this->Pagination->total= count($this->RecurringEvent->find('all',array("conditions"=>$condition,'order' =>$order)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $eventArray = $this->RecurringEvent->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

             //pr($eventArray);   

            ##set project type data in variable

            $this->set("eventdata",$eventArray);



        }

        

        function calendarlist($year = null, $month = null)

        {

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','calendarlist');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");  

            

            $this->set('current_project_name',$project_name);     // used in project_name element file 

            

            $current_domain= $_SERVER['HTTP_HOST'];

            

            

            App::import("Model", "Event");

            $this->Event =   & new Event();

            

        

             App::import("Model", "RecurringEvent");

             $this->RecurringEvent =   & new RecurringEvent();

           // get all the events from the database.

            $events = $this->RecurringEvent->find('all',array('conditions' => "RecurringEvent.project_id='".$project_id."' and RecurringEvent.active_status='1' and RecurringEvent.delete_status='0'"));



             $current_date=date('Y-m-d');

            

            // insert rows to an array.

            for ($a=0; count($events)> $a; $a++){

                

                 $validate_event = $this->Event->find('all',array('conditions' => "Event.id='".$events[$a]['RecurringEvent']['event_id']."' and Event.active_status='1' and Event.delete_status='0'"));

            

                if(!empty($validate_event))

                {

                

                $starttime=date('Y-m-d H:i:s', strtotime($events[$a]['RecurringEvent']['start_date']));

                $endtime=date('Y-m-d H:i:s', strtotime($events[$a]['RecurringEvent']['end_date']));

            

                $event_startdate=$events[$a]['RecurringEvent']['start_date'];

                

                    if($event_startdate >= $current_date)

                        $url="http://".$current_domain."/companies/edit_event/";

                    else

                        $url="http://".$current_domain."/companies/pasteventcreated/";   



            $rows[]= '{"id":'.$events[$a]['RecurringEvent']['event_id'].', "title":"'.$events[$a]['RecurringEvent']['event_title'].'", "start":"'.$starttime.'","end":"'.$endtime.'","url":"'.$url.$events[$a]['RecurringEvent']['id'].'", "className":"'.$events[$a]['RecurringEvent']['event_type'].'","type":"'.$events[$a]['RecurringEvent']['event_type'].'"}';

                }



            }

            // convert the array to a string.

            if ($rows){

            $convertojson = implode(",", $rows);

            }



            // pass the string to the json variable. this will then be passed  and printed to the javascript code.

            $this->set('json',$convertojson); 

        }

        

        function rsvp_sponsor($rec_event_id=null){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','rsvp_sponsor');

            

            $this->set('rec_event_id',$rec_event_id);



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $this->set('current_project_name',$project_name);     // used in project_name element file 

            //for active menu display

            $this->set('page_url','eventlist');



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   

             

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project_name',$project_name);



            $projectid = $project_id;



         



            ##fetch data from Company table for listing



            $field='';

            App::import("Model", "RecurringEvent");

            $this->RecurringEvent =   & new RecurringEvent();



            App::import("Model", "EventInvitation");

            $this->EventInvitation =   & new EventInvitation();

            

            

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){



                $searchkeyword = $this->data['Admin']['searchkey'];

                $condition = "EventInvitation.delete_status = '0' AND EventInvitation.project_id = '".$project_id."' and EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.in_rsvp='1' and EventInvitation.rec_event_id!=''";



            }else{



                $condition = "EventInvitation.delete_status = '0' AND EventInvitation.project_id = '".$project_id."' and EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.in_rsvp='1' and EventInvitation.rec_event_id!=''";



            }

            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){

                  $_GET["sortBy"]="id";

                  $_GET["direction"]="desc";

            }

            $this->Pagination->sortByClass    = 'RecurringEvent'; ##initaite pagination 

            

         

            

            $this->RecurringEvent->bindModel(array('belongsTo'=>array(

            'EventInvitation'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.rec_event_id = RecurringEvent.id'

            ),

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.invite_to_holder_id = Holder.id'

            ),

            'MemberType'=>array(

            'foreignKey'=>false,

            'conditions'=>'MemberType.id = Holder.member_type'

            ), 

            'DonationLevel'=>array(

            'foreignKey'=>false,

            'conditions'=>'DonationLevel.id = Holder.donation_level'

            )

            )));

            

            $this->Pagination->total= count($this->RecurringEvent->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            

            $this->RecurringEvent->bindModel(array('belongsTo'=>array(

            'EventInvitation'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.rec_event_id = RecurringEvent.id'

            ),

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.invite_to_holder_id = Holder.id'

            ),

            'MemberType'=>array(

            'foreignKey'=>false,

            'conditions'=>'MemberType.id = Holder.member_type'

            ), 

            'DonationLevel'=>array(

            'foreignKey'=>false,

            'conditions'=>'DonationLevel.id = Holder.donation_level'

            )

            )));



            $eventArray = $this->RecurringEvent->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));          

            $this->set("eventdata",$eventArray);

            

              

            $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$project_id."' and EventInvitation.in_waitlist='1'";

            $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    

            

            if(empty($check_waiting_list))            

                $waiting_list=0;

            else

                $waiting_list=1;

         

            $this->set('waiting_list', $waiting_list); 



        }

        

         function waitlist($rec_event_id=null){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','rsvp_sponsor');

            

            $this->set('rec_event_id',$rec_event_id);



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $this->set('current_project_name',$project_name);     // used in project_name element file 

            //for active menu display

            $this->set('page_url','eventlist');



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   

             

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project_name',$project_name);



            $projectid = $project_id;



         



            ##fetch data from Company table for listing



            $field='';

            App::import("Model", "RecurringEvent");

            $this->RecurringEvent =   & new RecurringEvent();



            App::import("Model", "EventInvitation");

            $this->EventInvitation =   & new EventInvitation();

            

            

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){



                $searchkeyword = $this->data['Admin']['searchkey'];

                $condition = "EventInvitation.delete_status = '0' AND EventInvitation.project_id = '".$project_id."' and EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.in_waitlist='1'";



            }else{



                $condition = "EventInvitation.delete_status = '0' AND EventInvitation.project_id = '".$project_id."' and EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.in_waitlist='1'";



            }

            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){

                  $_GET["sortBy"]="id";

                  $_GET["direction"]="desc";

            }

            $this->Pagination->sortByClass    = 'RecurringEvent'; ##initaite pagination 

            

         

            

            $this->RecurringEvent->bindModel(array('belongsTo'=>array(

            'EventInvitation'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.rec_event_id = RecurringEvent.id'

            ),

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.invite_to_holder_id = Holder.id'

            ),

            'MemberType'=>array(

            'foreignKey'=>false,

            'conditions'=>'MemberType.id = Holder.member_type'

            ), 

            'DonationLevel'=>array(

            'foreignKey'=>false,

            'conditions'=>'DonationLevel.id = Holder.donation_level'

            )

            )));

            

            $this->Pagination->total= count($this->RecurringEvent->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            

            $this->RecurringEvent->bindModel(array('belongsTo'=>array(

            'EventInvitation'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.rec_event_id = RecurringEvent.id'

            ),

            'Holder'=>array(

            'foreignKey'=>false,

            'conditions'=>'EventInvitation.invite_to_holder_id = Holder.id'

            ),

            'MemberType'=>array(

            'foreignKey'=>false,

            'conditions'=>'MemberType.id = Holder.member_type'

            ), 

            'DonationLevel'=>array(

            'foreignKey'=>false,

            'conditions'=>'DonationLevel.id = Holder.donation_level'

            )

            )));



            $eventArray = $this->RecurringEvent->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));          

            $this->set("eventdata",$eventArray);



        }

        

        

         function send_invite($tempid=''){



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','editsponsordesc');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            App::import("Model", "Project");

            $this->Project =   & new Project();

            $condition = "id=$project_id";

            $dt=$this->Project->find('all',array("conditions"=>$condition,'fields'=>array('fromemail')));

            $this->set("dt",$dt);

            

            $rec_event_id=$this->Session->read("rec_event_id");

            $this->set('rec_event_id',$rec_event_id);





            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '12'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition    

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set("current_domain",$current_domain);

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            $projectid = $project_id;



            $tomail = "";

            $checkempty =true;

            if(!empty($this->data)){

                

                if($this->data['EmailTemplate']['subject']=="" || $this->data['EmailTemplate']['content']=="" || $this->data['EmailTemplate']['toid']=="" || $this->data['EmailTemplate']['fromid']==""){

                    $this->Session->setFlash("All the fields are mandatory.",'default',array('class' => 'msgTXt'));

                    $checkempty = false;

                }

                if($checkempty== true){   

                    $sendflag = true;

                    $errorwith="";

                    $mailtempid = $this->data['EmailTemplate']['id'];    

                    $mailsubject = $this->data['EmailTemplate']['subject'];    

                    $mailcontent = $this->data['EmailTemplate']['content'];

                    $frommail = $this->data['EmailTemplate']['fromid'];  

                    

                    /**

                    * STEP : Email Sent By Send mail , save it as Executed Task with 'Sedn Mail' as task name in task history table

                    */

                    App::import("Model", "CommunicationTask");

                    $this->CommunicationTask =   & new CommunicationTask();

                    

                    //$taskHistoryId=$this->CommunicationTask->saveSendMailTask($this->data['EmailTemplate'], $projectid);   

                    

                   // $mailsubject = $this->data['EmailTemplate']['subject'];

                   // $mailcontent = str_replace("../img","http://".$current_domain."/img",$this->data['EmailTemplate']['content']);

                   

                    //if($taskHistoryId > 0){   

                            // Set path to inserted image      

                            $mailcontent=$this->replaceImgPathInEmailContent($mailcontent);

                              //STEP : GET EMAIL TEMP DETAILS

                              $conditiontemp = "EmailTemplate.project_id = '$projectid' AND EmailTemplate.delete_status='0'  AND EmailTemplate.active_status='1' AND EmailTemplate.id = '$mailtempid'";

                              $mailMessage = $this->EmailTemplate->find('first',array("conditions"=>$conditiontemp));

                         

                            $task_email_sent_count=0;

                            $task_email_senterror_count=0;

                            $fromname = $projectDetails['Project']['fromname'];  

                            App::import("Model", "CommunicationTaskExecutionReport");    

                            $this->CommunicationTaskExecutionReport =   & new CommunicationTaskExecutionReport();                        

                            $tomail = $this->data['EmailTemplate']['toid'];

                            $toids = explode(",",$tomail);

                            

                            foreach($toids as $eachid){

                                 /**

                                 * New Email Temp replacement code for data Elements 

                                 */

                                 //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                    $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $eachid);

                                 //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                  //   $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                 //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                    $mailsubject1=$this->EmailTemplates->insertDataElementValuesToContent($mailsubject);

                                    $mailcontent1=$this->EmailTemplates->insertDataElementValuesToContent($mailcontent);

                            

                                if(!$this->Sendemail->sendMailContentWithCC($eachid,$frommail,$mailsubject1,$mailcontent1, $fromname, $mailMessage['EmailTemplate']['send_cc_email_to'])){

                                    $sendflag = false;

                                    $errorwith = $eachid.','.$errorwith;

                                    $task_email_senterror_count++;

                                    $email_status="not sent";

                                }else{

                                     $task_email_sent_count++;

                                     $email_status="sent";

                                }

                                $errorwith = substr($errorwith,0,-1);

                                /*

                                   // STEP :  ADD TASK SENT EMAIL DETAILS TO COMMUNICATION_TASK_SENT_REPORT TABLE  

                                   $taskReport['CommunicationTaskExecutionReport']['id']='';

                                   $taskReport['CommunicationTaskExecutionReport']['task_id']='0';

                                   $taskReport['CommunicationTaskExecutionReport']['task_execution_id']=$taskHistoryId;

                                   $taskReport['CommunicationTaskExecutionReport']['project_id']=$projectid;

                                   $taskReport['CommunicationTaskExecutionReport']['sent_to_email']=$eachid;

                                   $taskReport['CommunicationTaskExecutionReport']['sent_to_firstname']='';

                                   $taskReport['CommunicationTaskExecutionReport']['sent_to_lastname']='';

                                   $taskReport['CommunicationTaskExecutionReport']['sent_to_company']='';

                                   $taskReport['CommunicationTaskExecutionReport']['sent_to_matching']=$sent_to_matching;

                                   $taskReport['CommunicationTaskExecutionReport']['email_subject']=$mailsubject1;

                                   $taskReport['CommunicationTaskExecutionReport']['email_content']=$mailcontent1;

                                   $taskReport['CommunicationTaskExecutionReport']['email_from']=$frommail;

                                   $taskReport['CommunicationTaskExecutionReport']['email_status']=$email_status;

                                   $this->CommunicationTaskExecutionReport->save($taskReport['CommunicationTaskExecutionReport']);

                                   */

                            }

                            

                            // STEP : UPDATE TASK History ARRAY

                            /*

                            App::import("Model", "CommunicationTaskHistory");

                            $this->CommunicationTaskHistory =   & new CommunicationTaskHistory();   

                            $taskHistoryArray['id']=$taskHistoryId;

                            $taskHistoryArray['task_sent_count']=$task_email_sent_count;

                            $taskHistoryArray['task_not_sent_count']=$task_email_senterror_count;

                            $this->CommunicationTaskHistory->save($taskHistoryArray);

                            */

                            

                            

                            if($this->data['id_list']!="")

                          {

                              App::import("Model", "EventInvitation");

                              $this->EventInvitation =   & new EventInvitation();

                          

                              $event_inv['EventInvitation']['id']='';

                              $event_inv['EventInvitation']['project_id']=$projectid;

                              $event_inv['EventInvitation']['event_id']='0';

                              $event_inv['EventInvitation']['rec_event_id']=$rec_event_id;

                              $event_inv['EventInvitation']['invite_status']='0';

                              $event_inv['EventInvitation']['active_status']='1';

                              $event_inv['EventInvitation']['delete_status']='0';

                              $event_inv['EventInvitation']['invitation']='1';

                              

                              for($i=0;$i<count($this->data['id_list']);$i++)

                              {

                                  $val=$this->data['id_list'][$i];

                                  

                                  $val=explode('_',$val);

                                  

                                  if($val[0]=="contact")

                                  {

                                      $event_inv['EventInvitation']['invite_to_contact_id']=$val[1];

                                      $event_inv['EventInvitation']['is_contact']='1';

                                      

                                      $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.invite_to_contact_id='".$val[1]."'";

                                  }

                                  else

                                  if($val[0]=="member")

                                  {

                                      $event_inv['EventInvitation']['invite_to_holder_id']=$val[1];

                                      $event_inv['EventInvitation']['is_contact']='0';

                                      

                                      $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.invite_to_holder_id='".$val[1]."'";

                                  }

                                  

                                  

                                  $existing_data=$this->EventInvitation->find('first',array('conditions'=>$cond));

                                  if(!empty($existing_data))

                                    $event_inv['EventInvitation']['id']=$existing_data['EventInvitation']['id'];

                                    

                                  $this->EventInvitation->save($event_inv['EventInvitation']);

                              }

                              

                          }

                        

                            if($sendflag==true){

                                $this->Session->setFlash('Mail sent successfully.','default', array('class' => 'successmsg'));

                            }else{

                                $this->Session->setFlash("Error in Mail sending with email id $errorwith. Please try again",'default',array('class' => 'errormsg'));

                            }



                            ##setting action for save & apply        

                            if(isset($this->data['Action']['redirectpage'])){

                                $this->redirect('/companies/edit_event/'.$rec_event_id);

                            }else{

                                $this->redirect("/companies/send_invite/");

                            }

                            

                   /* }else{

                        $this->Session->setFlash("Error in Send Mail processing. Please try again",'default',array('class' => 'msgTXt'));

                   }*/

                }



            }



            if($tempid || isset($this->data['EmailTemplate']['id'])){

                if($this->data['EmailTemplate']['id']){

                    $tempid = $this->data['EmailTemplate']['id'];

                }

                $this->EmailTemplate->id = $tempid;

                $this->data = $this->EmailTemplate->read();



            }



            $chekret = $this->projectdetailbyid($projectid);



            $this->set('frmid',$chekret[0]['Sponsor']['email']);

            $this->set('toid',$tomail);



            //Get Company Type Drop Down

            $this->companytypedropdown($projectid); 



            //Get Company Type Drop Down   

            $this->contacttypedropdown($projectid);          



            $this->set('projectid',$projectid);

            

            $is_event_temp=3;

            $this->customtemplatelisting($projectid,$is_event_temp);

           

            $this->set('member_type',$this->getMemberTypesListByProject($projectid,true));

            

            App::import("Model", "EventInvitation");

            $this->EventInvitation =   & new EventInvitation();    

        

            $cond="EventInvitation.rec_event_id='".$rec_event_id."' and EventInvitation.project_id='".$projectid."' and EventInvitation.in_waitlist='1'";

            $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    

            

            if(empty($check_waiting_list))            

                $waiting_list=0;

            else

                $waiting_list=1;

         

            $this->set('waiting_list', $waiting_list); 



        }

        

        

        function event_pages($page=''){

            //Configure::write('debug', 2);    

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','eventlist');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }





            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project_name',$project_name);



            $projectid = $project_id;





           App::import("Model", "RecurringEvent");

           $this->RecurringEvent =   & new RecurringEvent();

            App::import("Model", "Content");

            $this->Content =   & new Content();

            

            $current_date=date('Y-m-d');

            

            $fields="RecurringEvent.id,RecurringEvent.event_title,RecurringEvent.start_date,RecurringEvent.starttime,RecurringEvent.show_to_invitees_only,RecurringEvent.active_status,RecurringEvent.event_detail_page,RecurringEvent.sponsor_detail_page,RecurringEvent.inquiry_detail_page,Content.id,Content.title";



            if($page=="detail")

            {           

                if(isset($this->data['Company']['searchkey']) && $this->data['Admin']['searchkey'])

                {

                    $searchkeyword = $this->data['Company']['searchkey'];

                    $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.delete_status ='0' and RecurringEvent.event_detail_page!='' ";

                }

                else

                {

                     $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.delete_status ='0' and RecurringEvent.event_detail_page!='' ";

                }       

                $bind_condition="Content.id = RecurringEvent.event_detail_page";

            }

            

            if($page=="sponsor")

            {           

                if(isset($this->data['Company']['searchkey']) && $this->data['Admin']['searchkey'])

                {

                    $searchkeyword = $this->data['Company']['searchkey'];

                    $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.delete_status ='0' and RecurringEvent.sponsor_detail_page!='' ";

                }

                else

                {

                     $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.delete_status ='0' and RecurringEvent.sponsor_detail_page!='' ";

                }      

                $bind_condition="Content.id = RecurringEvent.sponsor_detail_page";      

            }

            

            if($page=="inquiry")

            {           

                if(isset($this->data['Company']['searchkey']) && $this->data['Admin']['searchkey'])

                {

                    $searchkeyword = $this->data['Company']['searchkey'];

                    $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.delete_status ='0' and RecurringEvent.inquiry_detail_page!='' ";

                }

                else

                {

                     $condition = "RecurringEvent.project_id = '".$project_id."' and RecurringEvent.delete_status ='0' and RecurringEvent.inquiry_detail_page!='' ";

                } 

                $bind_condition="Content.id = RecurringEvent.inquiry_detail_page";           

            }



            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){

                  $_GET["sortBy"]="id";

                  $_GET["direction"]="ASC";

            }

             $this->RecurringEvent->bindModel(array('belongsTo'=>array(

            'Content'=>array(

            'foreignKey'=>false,

            'conditions'=>$bind_condition

            )

            )));

            $this->Pagination->sortByClass    = 'RecurringEvent'; ##initaite pagination 

            $this->Pagination->total= count($this->RecurringEvent->find('all',array("conditions"=>$condition,'fields'=>$fields)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$fields);

            

            $this->RecurringEvent->bindModel(array('belongsTo'=>array(

            'Content'=>array(

            'foreignKey'=>false,

            'conditions'=>$bind_condition

            )

            )));

            

            //$group="event_id";

            $eventArray = $this->RecurringEvent->find('all',array("conditions"=>$condition,'fields'=>$fields,'limit' => $limit, 'page' => $page));

           

            $this->set("eventdata",$eventArray);



        }

        

        

        

        function event_types(){

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','eventlist');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }





            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   

             

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project_name',$project_name);



            $projectid = $project_id;





            App::import("Model", "EventType");

            $this->EventType =   & new EventType();

            

            //debugbreak();  

          

           // if(isset($this->data['Companies']['searchkey']) && $this->data['Companies']['searchkey'])

		   if(!empty($this->data))

            {

                $searchkeyword = $this->data['Companies']['searchkey'];

                 $condition = "EventType.project_id = '".$project_id."' and EventType.delete_status ='0' and EventType.event_type_desp like'%".$searchkeyword."' OR EventType.event_type like'%".$searchkeyword."' ";

            }

            else

            {

                  $condition = "EventType.project_id = '".$project_id."' and EventType.delete_status ='0'";

            } 

                       



            if(!isset($_GET["sortBy"]) || $_GET["sortBy"]==""){

                  $_GET["sortBy"]="id";

                  $_GET["direction"]="ASC";

            }

            

            $this->Pagination->sortByClass    = 'EventType'; ##initaite pagination 

            $this->Pagination->total= count($this->EventType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition);

            

            //debugbreak();

            $eventtypedata = $this->EventType->find('all',array("conditions"=>$condition,'order'=>$order,'limit' => $limit, 'page' => $page));

           

            $this->set("eventtypedata",$eventtypedata);



        }   

        

        function addeventtype($recid=null){

              

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','eventlist');



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect(array('controller'=>'companies','action'=>'session_expired'));

            

            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }

            

            ##import project type model for processing

            App::import("Model", "EventType");

            $this->EventType =   & new EventType();



            ##check empty data

            if(!empty($this->data)) {

                #set the posted data

                //print_r($this->data);die;

                $this->EventType->set($this->data);

                #check server side validation

                $this->EventType->invalidFields();

                #save data in project type table

                $recid  = $this->data['EventType']['id'];

                $event_type  = $this->data['EventType']['event_type'];

                $this->data['EventType']['project_id']=$projectid;

                         

                if($recid=="")

                {

                    $condition = "EventType.event_type = '".$event_type."' AND EventType.project_id ='".$projectid."' AND  EventType.delete_status = '0'";

                    $etdata = $this->EventType->find('all',array("conditions"=>$condition));                

                }

                else

                {

                    $condition = "EventType.event_type = '".$event_type."' AND EventType.project_id ='".$projectid."' AND  EventType.delete_status = '0' and EventType.id!='".$recid."'";

                    $etdata = $this->EventType->find('all',array("conditions"=>$condition));              

                }							                

                if(!$etdata){	                     

                        if($this->EventType->Save($this->data))

                        {

                            $this->Session->setFlash('Event Type updated Successfully.','default', array('class' => 'successmsg'));                            

                        }

                        else

                        {

                            $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                        }

      

                }else{



                    $this->Session->setFlash('Event Type with same name already exists.','default',array('class' => 'msgTXt'));

                    $this->redirect(array('controller'=>'companies','action'=>'addeventtype',$recid));

                }



                if(isset($this->data['Action']['redirectpage'])){



					 $this->redirect(array('controller'=>'companies','action'=>'event_types'));

                }else

                {

					$this->redirect(array('controller'=>'companies','action'=>'addeventtype',$recid));

                }



            }

            

            if($recid!="")

            {

            

                $this->EventType->id = $recid;

                $this->data = $this->EventType->read();

                $this->set("event_type_id", $recid);

            }



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '58'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



        }    



        

         /**

        * Function to get all content pages for by ajax call 

        * 

        * @param mixed $project_id  - 

        * @param mixed $selectedid

        */

        function getcontentpagesbyajax($projectid, $selectedid='',$temp_type=''){        

            $this->layout = false;

            

            $this->set("selectedid",$selectedid);

            

            if($temp_type=="event_detail" || $temp_type=="event_sponsor" || $temp_type=="event_inquiry")

            {

                $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments') and type='".$temp_type."'";

            }

            else

            {

            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments')";

            }

            App::import("Model", 'Content');

            $this->Content =   & new Content();    

            $contentpages = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));

            $this->set('contentpages',$contentpages);



           

        }

        



        /*

        

        * Function name   : eventcreate()

        * Description : This function used to create event for project

        * Created On      : 11-08-11 

        *

        */     



        function eventcreate($eventid=''){



            //Configure::write('debug', 2);    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','projectbackup');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            $current_domain= $_SERVER['HTTP_HOST'];

            $this->set('current_domain',$current_domain);

            $this->set('projectid',$project_id);



            ##import Company  model for processing

            App::import("Model", "Event");



            $this->Event =  & new Event();   



            //for active menu display

            $this->set('page_url','editevent');



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   



            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);            



            $projectid = $project_id;



            $this->set('project_name',$projectDetails['Project']['project_name']);

            $this->set('projectid',$projectid);







            ##check empty data



            if(!empty($this->data)) {  

            		

                $this->data['Event']['project_id'] = $projectid;   

                #set the posted data																			

				$this->Event->set($this->data);

                #check server side validation  

                $errormsg = $this->Event->invalidFields();

                if(!$errormsg){

                    ##uploading Sponsor logo

                    if($this->data['Event']['eventlogo']['name'] !=''){

                        $ptname = $projectDetails['Project']['project_name']; //$this->data['Project']['projectname']; 

                        $filePath =  'img' . DS . $ptname . DS.'uploads' ;	  

                        $this->File->setDestPath($filePath);

                        $file_name1 = $this->File->setFileName($this->data['Event']['eventlogo']['name']); 

                       $extDot = explode(".",$this->data['Event']['eventlogo']['name']);             

                        $ext = $extDot[1];

                        if($ext=='bmp')

                        {

                            $this->Session->setFlash('Please upload jpg,gif,png file','default',array('class' => 'msgTXt'));

                            $this->redirect("/companies/eventcreate"); 

						}

                        $tmp1 = $this->data['Event']['eventlogo']['tmp_name'];

                        $width = 150;

                        $height = 150;	

                        // Get new dimensions

                        list($width_orig, $height_orig) = getimagesize($tmp1);                          

                        $ratio_orig = $width_orig/$height_orig;		

                        if ($width/$height > $ratio_orig) {

                            $width = $height*$ratio_orig;

                        } else {

                            $height = $width/$ratio_orig;

                        }							

                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,$width."x".$height);

                        $this->data['Event']['small_pic'] = $fileNamesidea;

                        $this->data['Event']['large_pic'] = $fileNamesidea;

                    }



                    $eid = "";



                    $etitle = $this->data['Event']['title'];

                    $data = explode("-", $this->data['Event']['starttime']);

                    $date = new DateTime();

                    $date->setDate($data['2'], $data['0'], $data['1']);

                    $sdt= $date->format("Y-m-d");



                    // $dt=date("Y-m-d", strtotime($this->data['Event']['starttime']));

                    $sdate=  $sdt." ".$this->data['Event']['stime'];

                    $new_sdate=date("Y-m-d H:i:s", strtotime($sdate));

                    $this->data['Event']['starttime']=$new_sdate; // $date->format("Y-m-d H:i:s"); 



                    // $etitle = $this->data['Event']['endtime'];

                    $data = explode("-", $this->data['Event']['endtime']);

                    $date = new DateTime();

                    $date->setDate($data['2'], $data['0'], $data['1']);

                    $edt= $date->format("Y-m-d");



                    $edate=  $edt." ".$this->data['Event']['etime'];

                    $new_edate=date("Y-m-d H:i:s", strtotime($edate));

                    $this->data['Event']['endtime']= $new_edate;  

					//$data = explode("-", $this->data['Event']['end_by_date']);

					$date = new DateTime();

                    //$date->setDate($data['2'], $data['0'], $data['1']);

                    $end_by_date= $date->format("Y-m-d");

                    $this->data['Event']['task_end_by_date']= $end_by_date;  



                    $event_detail_pages_ids=explode(',',$this->data['Companies']['event_detail_pages_ids']);

                    $event_sponsor_pages_ids=explode(',',$this->data['Companies']['event_sponsor_pages_ids']);

                    $event_inquiry_pages_ids=explode(',',$this->data['Companies']['event_inquiry_pages_ids']);

                    

                    if($this->data['Event']['event_detail_page']!="")

                    {

                        if(in_array($this->data['Event']['event_detail_page'],$event_detail_pages_ids) )

                        {

                            $content_id=$this->data['Event']['event_detail_page'];

                            $title=$this->data['Event']['title']." ".date('m-d-Y', strtotime($this->data['Event']['starttime']));

                            $type="event_detail";

                            $this->data['Event']['event_detail_page']=$this->Content->create_duplicate_content($content_id,$title,$type);

                        }

                    }

                    

                    if($this->data['Event']['sponsor_detail_page']!="")

                    {

                        if(in_array($this->data['Event']['sponsor_detail_page'],$event_sponsor_pages_ids) )

                        {

                            $content_id=$this->data['Event']['sponsor_detail_page'];

                            $title=$this->data['Event']['title']." ".date('m-d-Y', strtotime($this->data['Event']['starttime']));

                            $type="event_sponsor";

                            $this->data['Event']['sponsor_detail_page']=$this->Content->create_duplicate_content($content_id,$title,$type);

                        }

                    }

                    

                    if($this->data['Event']['inquiry_detail_page']!="")

                    {                                        

                        if(in_array($this->data['Event']['inquiry_detail_page'],$event_inquiry_pages_ids) )

                        {

                            $content_id=$this->data['Event']['inquiry_detail_page'];

                            $title=$this->data['Event']['title']." ".date('m-d-Y', strtotime($this->data['Event']['starttime']));

                            $type="event_inquiry";

                            $this->data['Event']['inquiry_detail_page']=$this->Content->create_duplicate_content($content_id,$title,$type);

                        }

                    }

                    

                    $recur_arr=array();

                    $event_arr=array();

                    

                    if($this->Event->Save($this->data)){

                        

                       if($this->data['Event']['id']=="" || $this->data['Event']['id']==NULL || $this->data['Event']['id']=="0")

                        {

                            $event_id=$this->Event->getLastInsertID();

                            $create_unique_events=1;

                        }

                        else

                        {

                            $event_id=$this->data['Event']['id'];

                            $create_unique_events=0;

                        }

                            

                        $recur_arr=$this->data['Event'];

                        $recur_arr['event_id']=$event_id;

                        $recur_arr['event_title']=$this->data['Event']['title'];

                        $recur_arr['max_attendees_start']=0;

                        $recur_arr['show_attendees_start']=$this->data['Event']['max_attendees_start'];	                         

                        $current_day=date('Y-m-d');			                        

                        $start_time=strtotime($this->data['Event']['starttime']);

                        $end_time=strtotime($this->data['Event']['endtime']);

                        

                        $start_time=date("H:i:s", $start_time);

                        $end_time=date("H:i:s", $end_time);

                        

                        $event_pages_content=0;

                        

                        if($create_unique_events==1)

                        {

                        

                            if($this->data['Event']['recur_pattern']=="" || $this->data['Event']['recur_pattern']=="None")

                            {

                                //before adding events delte any existing same events

                                $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' ");

                                

                                $recur_arr['id']=""; 

                                $recur_arr['event_title']=$recur_arr['event_title']." ".date('m-d-Y', strtotime($this->data['Event']['starttime']));

                                $recur_arr['start_date']=$this->data['Event']['starttime'];

                                $recur_arr['end_date']=$this->data['Event']['endtime'];

                                

                                if($event_pages_content>=1)

                                {

                                    if($this->data['Event']['event_detail_page']!="")

                                        $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                    if($this->data['Event']['sponsor_detail_page']!="")

                                        $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                    if($this->data['Event']['inquiry_detail_page']!="")

                                        $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                }

                                

                                $this->RecurringEvent->Save($recur_arr);                                 

                                $event_pages_content++;

                            }

                            else                                       

                            if($this->data['Event']['recur_pattern']=="Daily")

                            {

								//before adding events delte any existing same events

                                $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' ");                              

                                $daily_arr_all=$this->RecurringEvent->initDailyRecurPattern($this->data['Event']); 

                                for($j=0;$j<count($daily_arr_all);$j++)

                                {     

                                    if($daily_arr_all[$j]['task_is_done']==0)

                                    {

                                        $recur_arr['id']="";  

                                        $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($daily_arr_all[$j]['task_last_execution_date']));   

                                        $recur_arr['start_date']=$daily_arr_all[$j]['task_last_execution_date']." ".$start_time;

                                        $recur_arr['end_date']=$daily_arr_all[$j]['task_last_execution_date']." ".$end_time;;

                                        

                                        if($event_pages_content>=1)

                                        {

                                            if($this->data['Event']['event_detail_page']!="")

                                                $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                            if($this->data['Event']['sponsor_detail_page']!="")

                                                $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                            if($this->data['Event']['inquiry_detail_page']!="")

                                                $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                            

                                        }

                                        

                                        $this->RecurringEvent->Save($recur_arr);

                                        

                                        $event_pages_content++;

                                    }

                                    else

                                        break;

                                }

                                

                                $last= count($daily_arr_all)-1;                           

                            //    echo "<pre>"; print_r($daily_arr_all[$last]); echo "</pre>";

                                $daily_arr=$daily_arr_all[$last];

                                

                                $today=date('Y-m-d');

                                

                                if($daily_arr['task_is_done']==0 || empty($daily_arr))

                                {

                                   

                                    $total_rem_occ=$this->data['Event']['task_end_after_occurrences']-$daily_arr['task_execution_count'];                                 

                                    $taskTotalOccurenceCount=$daily_arr['task_execution_count'];

                                    $taskTaskEndAfterOccurrences=$this->data['Event']['task_end_after_occurrences'];

                                    $taskStartDate=$this->data['Event']['starttime'];

                                    $taskDailyPattern=$this->data['Event']['daily_pattern'];

                                    $taskDailyEveryNumofDays=$this->data['Event']['daily_every_noof_days'];

                                    $taskTaskEndByDate="0000-00-00";

                                    

                                    if($this->data['Event']['task_end']=="by_no_date")

                                    {

                                        $taskTaskEndByDate="0000-00-00";

                                        $taskTotalOccurenceCount=0;     

                                        $taskTaskEndAfterOccurrences=0;                               

                                        

                                        if(!empty($daily_arr))

                                            $taskLastOccurenceDate=$daily_arr['task_last_execution_date'];

                                        else

                                            $taskLastOccurenceDate="0000-00-00";

                                        

                                        for($i=0;$i<70;$i++)

                                        {

                                            $next_date=$this->RecurringEvent->calculateDailyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskDailyPattern, $taskDailyEveryNumofDays, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);

                                            $taskLastOccurenceDate=$next_date;

                                            

                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));   

                                             $recur_arr['start_date']=$next_date." ".$start_time;

                                            $recur_arr['end_date']=$next_date." ".$end_time; 

                                            $recur_arr['id']="";     

                                            

                                            if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                                                      

                                            $this->RecurringEvent->Save($recur_arr);

                                            

                                            $event_pages_content++;

                                        }

                                        

                                    }

                                    else

                                    if($this->data['Event']['task_end']=="after_accurrences")

                                    {

                                        $taskTaskEndByDate="0000-00-00";

                                        for($i=0;$i<$total_rem_occ;$i++)

                                        {

                                            if($i==0)

                                            {

                                                if(!empty($daily_arr))

                                                    $taskLastOccurenceDate=$daily_arr['task_last_execution_date'];

                                                else

                                                    $taskLastOccurenceDate="0000-00-00";

                                            }

                                            else

                                                $taskLastOccurenceDate=$next_date;

                                                

                                            $next_date=$this->RecurringEvent->calculateDailyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskDailyPattern, $taskDailyEveryNumofDays, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);

                                            $taskTotalOccurenceCount=$taskTotalOccurenceCount+1;

                                            

                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date)); 

                                            $recur_arr['start_date']=$next_date." ".$start_time;

                                            $recur_arr['end_date']=$next_date." ".$end_time; 

                                            $recur_arr['id']="";           

                                            

                                            if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                                                

                                            $this->RecurringEvent->Save($recur_arr);

                                            

                                            $event_pages_content++;

                                        }

                                    }

                                    else

                                    if($this->data['Event']['task_end']=="by_date")

                                    {

                                        $taskTaskEndAfterOccurrences=0;

                                        $taskTaskEndByDate=$this->data['Event']['task_end_by_date'];                       

                                        $taskTotalOccurenceCount=0;

                                        

                                        if(!empty($daily_arr))

                                            $taskLastOccurenceDate=$daily_arr['task_last_execution_date'];

                                        else

                                            $taskLastOccurenceDate="0000-00-00";

                                        

                                                                          

                                        do{

                                                                                       

                                           $next_date=$this->RecurringEvent->calculateDailyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskDailyPattern, $taskDailyEveryNumofDays, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);

                                           

                                           $taskLastOccurenceDate= $next_date;

                                           

                                           if($next_date>$taskTaskEndByDate || $next_date=="0000-00-00")

                                                break;

                                           

                                           $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date)); 

                                            $recur_arr['start_date']=$next_date." ".$start_time;

                                            $recur_arr['end_date']=$next_date." ".$end_time; 

                                           $recur_arr['id']="";        

                                           

                                           if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                                                

                                           $this->RecurringEvent->Save($recur_arr);

                                           

                                           $event_pages_content++;

                                           

                                        }while($next_date<=$taskTaskEndByDate);

                                    }

                                }

                                

                            }

                            else

                            if($this->data['Event']['recur_pattern']=="Weekly")

                            {

                                      

                                //before adding events delte any existing same events

                                $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' ");

                               

                                $weekly_arr_all=$this->RecurringEvent->initWeeklyRecurPattern($this->data['Event']);    

                                

                                for($j=0;$j<count($weekly_arr_all);$j++)

                                {     

                                    if($weekly_arr_all[$j]['task_is_done']==0)

                                    {

                                        $recur_arr['id']="";                          

                                        $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($weekly_arr_all[$j]['task_last_execution_date'])); 

                                        $recur_arr['start_date']=$weekly_arr_all[$j]['task_last_execution_date']." ".$start_time;

                                        $recur_arr['end_date']=$weekly_arr_all[$j]['task_last_execution_date']." ".$end_time;

                                        

                                        if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                        

                                        $this->RecurringEvent->Save($recur_arr);

                                        

                                        $event_pages_content++;

                                    }

                                    else

                                        break;

                                }

                                

                                $last= count($weekly_arr_all)-1;                           

                            //    echo "<pre>"; print_r($daily_arr_all[$last]); echo "</pre>";

                                $weekly_arr=$weekly_arr_all[$last];                            

                                $today=date('Y-m-d');

                                

                                                        

                                if($weekly_arr['task_is_done']==0 || empty($weekly_arr))

                                {

                                   

                                    $total_rem_occ=$this->data['Event']['task_end_after_occurrences']-$weekly_arr['task_execution_count'];                                 

                                    $taskTotalOccurenceCount=$weekly_arr['task_execution_count'];

                                    $taskTaskEndAfterOccurrences=$this->data['Event']['task_end_after_occurrences'];

                                    $taskStartDate=$this->data['Event']['starttime'];

                                    $taskDailyPattern=$this->data['Event']['daily_pattern'];

                                    $taskEveryNumofWeeks=$this->data['Event']['weekly_every_noof_weeks'];

                                    $taskTaskEndByDate="0000-00-00";

                                    

                                    $taskWeekDayArray= array(

                                       "1"=> $this->data['Event']['weekly_monday'],

                                       "2"=> $this->data['Event']['weekly_tuesday'],

                                       "3"=> $this->data['Event']['weekly_wednesday'],

                                       "4"=> $this->data['Event']['weekly_thursday'],

                                       "5"=> $this->data['Event']['weekly_friday'],

                                       "6"=> $this->data['Event']['weekly_saturday'],

                                       "7"=> $this->data['Event']['weekly_sunday'],

                                    );

                                    

                                     $taskExeNumOfTimesInWeek=0;

                                       for($i=1; $i<=7; $i++){

                                           if($taskWeekDayArray[$i]==1){

                                               $taskExeNumOfTimesInWeek++;

                                           }

                                       }

                                       

                                       

                                    if($this->data['Event']['task_end']=="by_no_date")

                                    {

                                        $taskTaskEndByDate="0000-00-00";

                                        $taskTotalOccurenceCount=0;

                                        $taskTaskEndAfterOccurrences=0;

                                        

                                        if(!empty($weekly_arr))

                                            $taskLastOccurenceDate=$weekly_arr['task_last_execution_date'];

                                        else

                                            $taskLastOccurenceDate="0000-00-00";

                                        

                                        for($i=0;$i<60;$i++)

                                        {

                                            $next_date=$this->RecurringEvent->calculateWeeklyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskEveryNumofWeeks, $taskWeekDayArray, $taskExeNumOfTimesInWeek, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);

                                            $taskLastOccurenceDate=$next_date;

                                            

                                            if($next_date=="0000-00-00" || $next_date=="")

                                                break;

                                            

                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date)); 

                                            $recur_arr['start_date']=$next_date." ".$start_time;

                                            $recur_arr['end_date']=$next_date." ".$end_time;

                                            $recur_arr['id']="";

                                            

                                            if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                            

                                            $this->RecurringEvent->Save($recur_arr);

                                            

                                            $event_pages_content++;

                                        }

                                        

                                    }

                                    else

                                    if($this->data['Event']['task_end']=="after_accurrences")

                                    {

                                        $taskTaskEndByDate="0000-00-00";

                                        

                                         

                                        

                                        for($i=0;$i<$total_rem_occ;$i++)

                                        {

                                            if($i==0)

                                            {

                                                if(!empty($weekly_arr))

                                                    $taskLastOccurenceDate=$weekly_arr['task_last_execution_date'];

                                                else

                                                    $taskLastOccurenceDate="0000-00-00";

                                            }

                                            else

                                                $taskLastOccurenceDate=$next_date;

                                                

                                           $next_date=$this->RecurringEvent->calculateWeeklyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskEveryNumofWeeks, $taskWeekDayArray, $taskExeNumOfTimesInWeek, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);

                                           

                                            $taskTotalOccurenceCount=$taskTotalOccurenceCount+1;

                                            

                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date)); 

                                            $recur_arr['start_date']=$next_date." ".$start_time;

                                            $recur_arr['end_date']=$next_date." ".$end_time;

                                            $recur_arr['id']="";     

                                            

                                            if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                                                      

                                            $this->RecurringEvent->Save($recur_arr);

                                            

                                            $event_pages_content++;

                                        }

                                    }

                                    else

                                    if($this->data['Event']['task_end']=="by_date")

                                    {

                                        $taskTaskEndAfterOccurrences=0;

                                        

                                        $taskTaskEndByDate=$this->data['Event']['task_end_by_date'];

                                        if(!empty($weekly_arr))

                                            $taskLastOccurenceDate=$weekly_arr['task_last_execution_date'];

                                        else

                                            $taskLastOccurenceDate="0000-00-00";

                                                                                

                                        $taskTotalOccurenceCount=0;

                                                                          

                                        do{

                                                                                       

                                           $next_date=$this->RecurringEvent->calculateWeeklyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskEveryNumofWeeks, $taskWeekDayArray, $taskExeNumOfTimesInWeek, $taskTaskEndAfterOccurrences, $taskTaskEndByDate);

                                           

                                           $taskLastOccurenceDate= $next_date;

                                           

                                           if($next_date>$taskTaskEndByDate || $next_date=="0000-00-00")

                                                break;

                                           

                                           $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date)); 

                                           $recur_arr['start_date']=$next_date." ".$start_time;

                                            $recur_arr['end_date']=$next_date." ".$end_time;

                                           $recur_arr['id']="";          

                                           

                                           if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                                              

                                           $this->RecurringEvent->Save($recur_arr);

                                           

                                           $event_pages_content++;

                                           

                                        }while($next_date<=$taskTaskEndByDate);

                                    }

                                }

                                

                                

                                

                            }

                            else

                            if($this->data['Event']['recur_pattern']=="Monthly")

                            {

                                                            

                                //before adding events delte any existing same events

                                $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' ");                                                     

                                $monthly_arr_all=$this->RecurringEvent->initMonthlyRecurPattern($this->data['Event']);    

                                

                                for($j=0;$j<count($monthly_arr_all);$j++)

                                {     

                                    if($monthly_arr_all[$j]['task_is_done']==0)

                                    {

                                        $recur_arr['id']="";    

                                        $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($monthly_arr_all[$j]['task_last_execution_date']));                       

                                        $recur_arr['start_date']=$monthly_arr_all[$j]['task_last_execution_date']." ".$start_time;

                                        $recur_arr['end_date']=$monthly_arr_all[$j]['task_last_execution_date']." ".$end_time;

                                        

                                        if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                        

                                        $this->RecurringEvent->Save($recur_arr);

                                        

                                        $event_pages_content++;

                                    }

                                    else

                                        break;

                                }

                                

                                $last= count($monthly_arr_all)-1;                           

                            //    echo "<pre>"; print_r($daily_arr_all[$last]); echo "</pre>";

                                $monthly_arr=$monthly_arr_all[$last];                            

                                $today=date('Y-m-d');

                                

                                                        

                                if($monthly_arr['task_is_done']==0 || empty($monthly_arr))

                                {

                                   

                                    $total_rem_occ=$this->data['Event']['task_end_after_occurrences']-$monthly_arr['task_execution_count'];                                 

                                    $taskTotalOccurenceCount=$monthly_arr['task_execution_count'];

                                    $taskTaskEndAfterOccurrences=$this->data['Event']['task_end_after_occurrences'];

                                    $taskStartDate=$this->data['Event']['starttime'];

                                    $taskMonthlyPattern=$this->data['Event']['monthly_pattern'];

                                    $taskMonthDate=$this->data['Event']['monthly_onof_day'];

                                    $taskMonthEveryNumofMonth=$this->data['Event']['monthly_every_noof_months'];

                                    $taskMonthWeekNumber=$this->data['Event']['monthly_weeknumber'];

                                    $taskMonthWeekDayName=$this->data['Event']['monthly_weekday'];

                                    $taskMonthWeekEveryNumofMonth=$this->data['Event']['monthly_weekof_noof_months'];                                                        

                                    $taskTaskEndByDate="0000-00-00";

                                    

                                                                      

                                                                    

                                    if($this->data['Event']['task_end']=="by_no_date")

                                    {

                                        $taskTaskEndByDate="0000-00-00";

                                        $taskTotalOccurenceCount=0;

                                        $taskTaskEndAfterOccurrences=0;

                                        

                                        if(!empty($monthly_arr))

                                            $taskLastOccurenceDate=$monthly_arr['task_last_execution_date'];

                                        else

                                            $taskLastOccurenceDate="0000-00-00";

                                        

                                        for($i=0;$i<24;$i++)

                                        {

                                            $next_date=$this->RecurringEvent->calculateMonthlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskMonthlyPattern, $taskMonthDate,$taskMonthEveryNumofMonth,$taskMonthWeekNumber,$taskMonthWeekDayName, $taskMonthWeekEveryNumofMonth,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);

                                            $taskLastOccurenceDate=$next_date;

                                            

                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));

                                             $recur_arr['start_date']=$next_date." ".$start_time;

                                            $recur_arr['end_date']=$next_date." ".$end_time;   

                                            $recur_arr['id']="";

                                            

                                            if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                            

                                            $this->RecurringEvent->Save($recur_arr);

                                            

                                            $event_pages_content++;

                                        }

                                        

                                    }

                                    else

                                    if($this->data['Event']['task_end']=="after_accurrences")

                                    {

                                        $taskTaskEndByDate="0000-00-00";

                                        

                                   

                                        for($i=0;$i<$total_rem_occ;$i++)

                                        {

                                            if($i==0)

                                            {

                                                if(!empty($monthly_arr))

                                                    $taskLastOccurenceDate=$monthly_arr['task_last_execution_date'];

                                                else

                                                    $taskLastOccurenceDate="0000-00-00";

                                            }

                                            else

                                                $taskLastOccurenceDate=$next_date;

                                                

                                           $next_date=$this->RecurringEvent->calculateMonthlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskMonthlyPattern, $taskMonthDate,$taskMonthEveryNumofMonth,$taskMonthWeekNumber,$taskMonthWeekDayName, $taskMonthWeekEveryNumofMonth,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);

                                           

                                            $taskTotalOccurenceCount=$taskTotalOccurenceCount+1;

                                            

                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));

                                             $recur_arr['start_date']=$next_date." ".$start_time;

                                            $recur_arr['end_date']=$next_date." ".$end_time;   

                                            $recur_arr['id']="";    

                                            

                                            if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                                                       

                                            $this->RecurringEvent->Save($recur_arr);

                                            

                                            $event_pages_content++;

                                        }

                                    }

                                    else

                                    if($this->data['Event']['task_end']=="by_date")

                                    {

                                        $taskTaskEndAfterOccurrences=0;

                                        $taskTaskEndByDate=$this->data['Event']['task_end_by_date'];

                                        if(!empty($monthly_arr))

                                            $taskLastOccurenceDate=$monthly_arr['task_last_execution_date'];

                                        else

                                            $taskLastOccurenceDate="0000-00-00";

                                                                                

                                        $taskTotalOccurenceCount=0;

                                                                          

                                        do{

                                                                                       

                                           $next_date=$this->RecurringEvent->calculateMonthlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskMonthlyPattern, $taskMonthDate,$taskMonthEveryNumofMonth,$taskMonthWeekNumber,$taskMonthWeekDayName, $taskMonthWeekEveryNumofMonth,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);

                                           

                                           $taskLastOccurenceDate= $next_date;

                                           

                                           if($next_date>$taskTaskEndByDate || $next_date=="0000-00-00")

                                                break;

                                           

                                           $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date));

                                            $recur_arr['start_date']=$next_date." ".$start_time;

                                            $recur_arr['end_date']=$next_date." ".$end_time;   

                                           $recur_arr['id']="";      

                                           

                                           if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                                                  

                                           $this->RecurringEvent->Save($recur_arr);

                                           

                                           $event_pages_content++;

                                           

                                        }while($next_date<=$taskTaskEndByDate);

                                    }

                                }

                                

                               

                                

                            }

                            else

                            if($this->data['Event']['recur_pattern']=="Yearly")

                            {

                                                            

                                //before adding events delte any existing same events

                               $this->RecurringEvent->query("delete from recurring_events where event_id='".$event_id."' and start_date >='".$current_day."' ");

                             

                                $yearly_arr_all=$this->RecurringEvent->initYearlyRecurPattern($this->data['Event']);    

                                

                                for($j=0;$j<count($yearly_arr_all);$j++)

                                {     

                                    if($yearly_arr_all[$j]['task_is_done']==0)

                                    {

                                        $recur_arr['id']="";     

                                        $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($yearly_arr_all[$j]['task_last_execution_date']));         

                                         $recur_arr['start_date']=$yearly_arr_all[$j]['task_last_execution_date']." ".$start_time;

                                        $recur_arr['end_date']=$yearly_arr_all[$j]['task_last_execution_date']." ".$end_time;

                                        

                                        

                                        if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                        

                                        $this->RecurringEvent->Save($recur_arr);

                                        

                                        $event_pages_content++;

                                    }

                                    else

                                        break;

                                }

                                

                                $last= count($yearly_arr_all)-1;                           

                            //    echo "<pre>"; print_r($daily_arr_all[$last]); echo "</pre>";

                                $yearly_arr=$yearly_arr_all[$last];                            

                                $today=date('Y-m-d');

                                

                                                        

                                if($yearly_arr['task_is_done']==0 || empty($yearly_arr))

                                {

                                   

                                    $total_rem_occ=$this->data['Event']['task_end_after_occurrences']-$yearly_arr['task_execution_count'];                                 

                                    $taskTotalOccurenceCount=$yearly_arr['task_execution_count'];

                                    $taskTaskEndAfterOccurrences=$this->data['Event']['task_end_after_occurrences'];

                                    $taskStartDate=$this->data['Event']['starttime'];

                                    $taskYearlyPattern=$this->data['Event']['yearly_pattern'];

                                    $taskYearEveryMonth=$this->data['Event']['yearly_everymonth'];

                                    $taskYearEveryMonthDate=$this->data['Event']['yearly_everymonth_date'];

                                    $taskYearWeekNumber=$this->data['Event']['yearly_weeknumber'];

                                    //if($taskYearWeekNumber=="last") $taskYearWeekNumber="fifth";

                                    $taskYearWeekDayName=$this->data['Event']['yearly_weekday'];

                                    $taskYearWeekMonthName=$this->data['Event']['yearly_weekof_month'];

                                    

                                    $taskEveryNumofWeeks=$this->data['Event']['weekly_every_noof_weeks'];

                                    $taskTaskEndByDate="0000-00-00";

                                    

                                                                      

                                                                    

                                    if($this->data['Event']['task_end']=="by_no_date")

                                    {

                                        $taskTaskEndByDate="0000-00-00";

                                        $taskTotalOccurenceCount=0;

                                        $taskTaskEndAfterOccurrences=0;

                                        

                                        if(!empty($yearly_arr))

                                            $taskLastOccurenceDate=$yearly_arr['task_last_execution_date'];

                                        else

                                            $taskLastOccurenceDate="0000-00-00";

                                        

                                        for($i=0;$i<5;$i++)

                                        {

                                            $next_date=$this->RecurringEvent->calculateYearlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskYearlyPattern, $taskYearEveryMonth,$taskYearEveryMonthDate,$taskYearWeekNumber,$taskYearWeekDayName, $taskYearWeekMonthName,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);

                                            $taskLastOccurenceDate=$next_date;

                                            

                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date)); 

                                            $recur_arr['start_date']=$next_date." ".$start_time;

                                            $recur_arr['end_date']=$next_date." ".$end_time;

                                            $recur_arr['id']="";

                                            

                                            if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                            

                                            $this->RecurringEvent->Save($recur_arr);

                                            

                                            $event_pages_content++;

                                        }

                                        

                                    }

                                    else

                                    if($this->data['Event']['task_end']=="after_accurrences")

                                    {

                                        $taskTaskEndByDate="0000-00-00";

                                        

                                   

                                        for($i=0;$i<$total_rem_occ;$i++)

                                        {

                                            if($i==0)

                                            {

                                                if(!empty($yearly_arr))

                                                    $taskLastOccurenceDate=$yearly_arr['task_last_execution_date'];

                                                else

                                                    $taskLastOccurenceDate="0000-00-00";

                                            }

                                            else

                                                $taskLastOccurenceDate=$next_date;

                                                

                                           $next_date=$this->RecurringEvent->calculateYearlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskYearlyPattern, $taskYearEveryMonth,$taskYearEveryMonthDate,$taskYearWeekNumber,$taskYearWeekDayName, $taskYearWeekMonthName,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);

                                           

                                            $taskTotalOccurenceCount=$taskTotalOccurenceCount+1;

                                            

                                            $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date)); 

                                            $recur_arr['start_date']=$next_date." ".$start_time;

                                            $recur_arr['end_date']=$next_date." ".$end_time;

                                            $recur_arr['id']="";      

                                            

                                            if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                                                     

                                            $this->RecurringEvent->Save($recur_arr);

                                            

                                            $event_pages_content++;

                                        }

                                    }

                                    else

                                    if($this->data['Event']['task_end']=="by_date")

                                    {

                                        $taskTaskEndAfterOccurrences=0;                                    

                                        $taskTaskEndByDate=$this->data['Event']['task_end_by_date'];

                                        if(!empty($yearly_arr))

                                            $taskLastOccurenceDate=$yearly_arr['task_last_execution_date'];

                                        else

                                            $taskLastOccurenceDate="0000-00-00";

                                                                                

                                        $taskTotalOccurenceCount=0;

                                                                          

                                        do{

                                                                                       

                                           $next_date=$this->RecurringEvent->calculateYearlyNextExecutionDate($taskLastOccurenceDate,$taskTotalOccurenceCount,$taskStartDate, $taskYearlyPattern, $taskYearEveryMonth,$taskYearEveryMonthDate,$taskYearWeekNumber,$taskYearWeekDayName, $taskYearWeekMonthName,  $taskTaskEndAfterOccurrences, $taskTaskEndByDate);

                                           

                                           $taskLastOccurenceDate= $next_date;

                                           

                                           if($next_date>$taskTaskEndByDate || $next_date=="0000-00-00")

                                                break;

                                           

                                           $recur_arr['event_title']=$this->data['Event']['title']." ".date('m-d-Y', strtotime($next_date)); 

                                           $recur_arr['start_date']=$next_date." ".$start_time;

                                            $recur_arr['end_date']=$next_date." ".$end_time;

                                           $recur_arr['id']="";  

                                           

                                           if($event_pages_content>=1)

                                            {

                                                if($this->data['Event']['event_detail_page']!="")

                                                    $recur_arr['event_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['event_detail_page'],$recur_arr['event_title'],"event_detail");

                                                if($this->data['Event']['sponsor_detail_page']!="")

                                                    $recur_arr['sponsor_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['sponsor_detail_page'],$recur_arr['event_title'],"event_sponsor");

                                                if($this->data['Event']['inquiry_detail_page']!="")

                                                    $recur_arr['inquiry_detail_page']=$this->Content->create_duplicate_content($this->data['Event']['inquiry_detail_page'],$recur_arr['event_title'],"event_inquiry");

                                                

                                            }

                                                                      

                                           $this->RecurringEvent->Save($recur_arr);

                                           

                                           $event_pages_content++;

                                           

                                        }while($next_date<=$taskTaskEndByDate);

                                    }

                                }

                                

                                

                                

                            }

                              

                             //test if any recurring events are being generated or not,if not show warning         

                            $rec_id=$this->RecurringEvent->getLastInsertId();

                            

                            if($rec_id=="" || $rec_id==Null)

                            {

                                   $this->Session->setFlash('As per your recurrence pattern no recurring events have been generated.Please select appropriate recurrence pattern.','default',array('class' => 'msgTXt'));

                                   $this->redirect("/companies/eventcreate/".$event_id);   

                            }       

                            

                        }



                        if($eid){



                            $this->Session->setFlash('Event updated Successfully.','default', array('class' => 'successmsg'));



                            if(isset($this->data['Action']['redirectpage'])){



                                $this->redirect('/companies/eventlist');



                            }else{



                                $this->redirect("/companies/eventcreate/".$this->data['Event']['id']);



                            }



                        }else{



                            $this->Session->setFlash('Event Added Successfully.','default', array('class' => 'successmsg'));



                            if(isset($this->data['Action']['redirectpage'])){



                                $this->redirect('/companies/eventlist');



                            }else{



                                $this->redirect('/companies/eventcreate/'.$this->data['Event']['id']);



                            }



                        }



                    }else{



                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));    



                    }









                }



            }







            ##check default dropdowns





            if($eventid){



                $this->Event->id = $eventid;

                $this->set('eventid', $eventid);   

                $this->data = $this->Event->read();

                $event_sdate=strtotime($this->data['Event']['starttime']);

                $sel_stime=date("h:i a", $event_sdate);

                // $this->data['Event']['endtime']= $date->format("Y-m-d  H:i:s");  

                $event_edate=strtotime($this->data['Event']['endtime']); 

                $sel_etime=date("h:i a", $event_edate);



                $this->set('sdate', date("m-d-Y", $event_sdate));  

                $this->set('edate', date("m-d-Y", $event_edate));  

                $this->set('eventdata', $this->data['Event']); 

               

                App::import("Model", 'EventInvitation');

                $this->EventInvitation =   & new EventInvitation();    

                

                $cond="EventInvitation.event_id='".$eventid."' and EventInvitation.project_id='".$project_id."' and EventInvitation.in_waitlist='1'";

                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    

                

                if(empty($check_waiting_list))            

                    $waiting_list=0;

                else

                    $waiting_list=1;

             

                $this->set('waiting_list', $waiting_list); 

                

            }else{

                $date = new DateTime();

                //   $date->setDate($d1[2], $d1[0], $d1[1]);

                $date->setTime(10, 0,0);

                $sel_stime= $date->format("h:i a");

                $sel_etime= $date->format("h:i a");

                $this->set('eventid', 0);  

            }     



            $this->set('sel_stime', $sel_stime);  

            $this->set('sel_etime', $sel_etime);  



            $prodtl = $this->projectdetailbyid($projectid);



            $sponname = $this->getsponsornamebyprojectid($projectid);



            $this->set('sponorname',$sponname);



            $projectname = $prodtl[0]['Project']['project_name'];



            $this->set('projectname',$projectname);

           

            $this->eventtypelisting($projectid);

          

            $member_type=$this->getMemberTypesListByProject($projectid,true);

            $this->set('member_type',$member_type);

            

            $this->set('recur_pattern',$this->getRecurPatternkArray());





            //event and sponsor detail dropdown



            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments')";

            App::import("Model", 'Content');

            $this->Content =   & new Content();    

            $submenus = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));

            //$menulist[0]="Parent menu";



            foreach($submenus as $submenu)

            {

                $menulist[$submenu['Content']['id']]=$submenu['Content']['title'];

            }



            $this->set('submenu',$menulist);

            

            

            //pick a email tempalte list



            $conditions= "project_id = $projectid and delete_status='0' and active_status='1' and is_event_temp='1'";

            App::import("Model", 'EmailTemplate');

            $this->EmailTemplate =   & new EmailTemplate();    

            $email_templates = $this->EmailTemplate->find('all',array('fields' => array('EmailTemplate.id','EmailTemplate.email_template_name'),"conditions"=>$conditions));

            //$menulist[0]="Parent menu";

			 $templatedropdown=array();

            foreach($email_templates as $email_template)

            {

                $templatedropdown[$email_template['EmailTemplate']['id']]=$email_template['EmailTemplate']['email_template_name'];

            }



            $this->set('templatedropdown',$templatedropdown);





            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments') and type='event_detail'";                   

            $event_detail_pages = $this->Content->find('all',array('fields' => array('Content.id'),"conditions"=>$conditionsubmenu));

              $event_detail_pages_ids=array();

            for($i=0;$i<count($event_detail_pages);$i++)

            {

                $event_detail_pages_ids[$i]=$event_detail_pages[$i]['Content']['id'];

            }

            

            $event_detail_pages_ids=implode(',',$event_detail_pages_ids);            

            $this->set('event_detail_pages_ids',$event_detail_pages_ids);

            

            

            

            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments') and type='event_sponsor'";               

            $event_sponsor_pages = $this->Content->find('all',array('fields' => array('Content.id'),"conditions"=>$conditionsubmenu));

            	$event_sponsor_pages_ids=array();

            for($i=0;$i<count($event_sponsor_pages);$i++)

            {

                $event_sponsor_pages_ids[$i]=$event_sponsor_pages[$i]['Content']['id'];

            }

            

            $event_sponsor_pages_ids=implode(',',$event_sponsor_pages_ids);            

            $this->set('event_sponsor_pages_ids',$event_sponsor_pages_ids);

            

            

            

            

            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments') and type='event_inquiry'";                

            $event_inquiry_pages = $this->Content->find('all',array('fields' => array('Content.id'),"conditions"=>$conditionsubmenu));

			$event_inquiry_pages_ids=array();	            

            for($i=0;$i<count($event_inquiry_pages);$i++)

            {

                $event_inquiry_pages_ids[$i]=$event_inquiry_pages[$i]['Content']['id'];

            }

            

            $event_inquiry_pages_ids=implode(',',$event_inquiry_pages_ids);          

            $this->set('event_inquiry_pages_ids',$event_inquiry_pages_ids);



            

            #country state default selection

            $this->set("selectedcountry","");

            $this->set("selectedstate","");



            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



            

            if($this->data['RecurringEvent']['country']){

                $conid = $this->data['RecurringEvent']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);



                if($this->data['RecurringEvent']['state']){

                    $statid = $this->data['RecurringEvent']['state'];

                    $this->set("selectedstate",$statid);

                }

            }





        }

        

        

         function edit_event($rec_eventid=null){

             

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','projectbackup');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            

            $this->Session->write("rec_event_id",$rec_eventid);



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            $this->set('current_project_name',$project_name);     // used in project_name element file 

            

            ##import Company  model for processing

            App::import("Model", "Event");

            $this->Event =  & new Event();   

            

            #import Company  model for processing

            App::import("Model", "RecurringEvent");

            $this->RecurringEvent =  & new RecurringEvent();   



            //for active menu display

            $this->set('page_url','editevent');

            

            $current_domain= $_SERVER['HTTP_HOST'];

            $this->set('current_domain',$current_domain);



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   



            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);            



            $projectid = $project_id;



            $this->set('project_name',$projectDetails['Project']['project_name']);

            $this->set('projectid',$projectid);









            ##check empty data



            if(!empty($this->data)) {   

                $this->data['RecurringEvent']['project_id'] = $projectid;



                #set the posted data



                $this->RecurringEvent->set($this->data);



                #check server side validation



                //$errormsg = $this->RecurringEvent->invalidFields();

                

                $errormsg="";

                

                $errormsg = preg_match("/\d{2}\/\d{2}\/\d{4}$/", $this->data['RecurringEvent']['event_title']);

                $errormsg = preg_match("/\d{2}\-\d{2}\-\d{4}$/", $this->data['RecurringEvent']['event_title']);



                if(!$errormsg){







                    ##uploading Sponsor logo



                    if($this->data['RecurringEvent']['eventlogo']['name'] !=''){



                        $ptname = $projectDetails['Project']['project_name']; //$this->data['Project']['projectname'];







                        $filePath =  'img' . DS . $ptname . DS.'uploads' ;



                        $this->File->setDestPath($filePath);



                       

                        $file_name1 = $this->File->setFileName($this->data['RecurringEvent']['eventlogo']['name']); 

                        

                        $extDot = explode(".",$this->data['RecurringEvent']['eventlogo']['name']);

            

                        $ext = $extDot[1];

                        if($ext=='bmp')

                        {

                            $this->Session->setFlash('Please upload jpg,gif,png file','default',array('class' => 'msgTXt'));

                            $this->redirect("/companies/edit_event/".$rec_eventid);

                        }



                        $tmp1 = $this->data['RecurringEvent']['eventlogo']['tmp_name'];

                        $width = 150;

                        $height = 150;



                        // Get new dimensions

                        list($width_orig, $height_orig) = getimagesize($tmp1);

                         

                        $ratio_orig = $width_orig/$height_orig;



                        if ($width/$height > $ratio_orig) {

                            $width = $height*$ratio_orig;

                        } else {

                            $height = $width/$ratio_orig;

                        }



                        $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,$width."x".$height);



                        $this->data['RecurringEvent']['small_pic'] = $fileNamesidea;

                        $this->data['RecurringEvent']['large_pic'] = $fileNamesidea;



                    }



                    $eid = "";

                    

                    $etitle = $this->data['RecurringEvent']['event_title'];

                    $data = explode("-", $this->data['RecurringEvent']['starttime']);

                    $date = new DateTime();

                    $date->setDate($data[2], $data[0], $data[1]);

                    $sdt= $date->format("Y-m-d");

                    

                    // $dt=date("Y-m-d", strtotime($this->data['Event']['starttime']));

                    $sdate=  $sdt." ".$this->data['RecurringEvent']['stime'];

                    $new_sdate=date("Y-m-d H:i:s", strtotime($sdate));

                    $this->data['RecurringEvent']['starttime']=$new_sdate; // $date->format("Y-m-d H:i:s"); 



                    $this->data['RecurringEvent']['event_title']=$this->data['RecurringEvent']['event_title']." ".date("m-d-Y", strtotime($sdt));

                    

                    // $etitle = $this->data['Event']['endtime'];

                    $data = explode("-", $this->data['RecurringEvent']['endtime']);

                    $date = new DateTime();

                    $date->setDate($data[2], $data[0], $data[1]);

                    $edt= $date->format("Y-m-d");



                    $edate=  $edt." ".$this->data['RecurringEvent']['etime'];

                    $new_edate=date("Y-m-d H:i:s", strtotime($edate));

                    $this->data['RecurringEvent']['endtime']= $new_edate;  

                    

                    $data = explode("-", $this->data['RecurringEvent']['end_by_date']);

                    $date = new DateTime();

                    $date->setDate($data[2], $data[0], $data[1]);

                    $end_by_date= $date->format("Y-m-d");

                    $this->data['RecurringEvent']['task_end_by_date']= $end_by_date;  

                    

                    $this->data['RecurringEvent']['start_date']=$this->data['RecurringEvent']['starttime'];

                    $this->data['RecurringEvent']['end_date']=$this->data['RecurringEvent']['endtime'];

                    

                    if($this->data['RecurringEvent']['event_detail_page']!="")

                    {

                        $title=$this->data['RecurringEvent']['event_title'];

                        $metatitle=$this->data['RecurringEvent']['event_title']." event_detail";

                        $status=$this->Content->query("update contents set title='".$title."',metatitle='".$metatitle."' where id='".$this->data['RecurringEvent']['event_detail_page']."'  ");

                    }

                    

                    if($this->data['RecurringEvent']['sponsor_detail_page']!="")

                    {

                        $title=$this->data['RecurringEvent']['event_title'];

                        $metatitle=$this->data['RecurringEvent']['event_title']." event_detail";

                        $status=$this->Content->query("update contents set title='".$title."',metatitle='".$metatitle."' where id='".$this->data['RecurringEvent']['sponsor_detail_page']."'  ");

                    }

                    

                    if($this->data['RecurringEvent']['inquiry_detail_page']!="")

                    {

                        $title=$this->data['RecurringEvent']['event_title'];

                        $metatitle=$this->data['RecurringEvent']['event_title']." event_detail";

                       $status=$this->Content->query("update contents set title='".$title."',metatitle='".$metatitle."' where id='".$this->data['RecurringEvent']['inquiry_detail_page']."'  ");

                    }

                    

                 

                    if($this->RecurringEvent->Save($this->data['RecurringEvent'])){

                       

                                  

                        if($eid){



                            $this->Session->setFlash('Event updated Successfully.','default', array('class' => 'successmsg'));



                            if(isset($this->data['Action']['redirectpage'])){



                                $this->redirect('/companies/eventlist');



                            }else{



                                $this->redirect("/companies/edit_event/".$rec_eventid);



                            }



                        }else{



                            $this->Session->setFlash('Event Added Successfully.','default', array('class' => 'successmsg'));



                            if(isset($this->data['Action']['redirectpage'])){



                                $this->redirect('/companies/eventlist');



                            }else{  

                                $this->redirect('/companies/edit_event/'.$this->data['RecurringEvent']['id']);



                            }



                        }



                    }else{



                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));  

                        



                    }









                }

                else

                {

                    $this->Session->setFlash('Please use event title with no date.','default',array('class' => 'msgTXt'));    

                    $this->redirect("/companies/edit_event/".$this->data['RecurringEvent']['id']); 

                }



            }

            ##check default dropdowns





            if($rec_eventid){



                $this->RecurringEvent->id = $rec_eventid;

                $this->set('rec_eventid', $rec_eventid);   

                $this->data = $this->RecurringEvent->read();

                $this->set('rec_event_data', $this->data); 

                

                $event_sdate=strtotime($this->data['RecurringEvent']['start_date']);

                $ev_sdate=strtotime($this->data['RecurringEvent']['starttime']);

                $sel_stime=date("h:i a", $ev_sdate);

                // $this->data['Event']['endtime']= $date->format("Y-m-d  H:i:s");  

                $event_edate=strtotime($this->data['RecurringEvent']['end_date']); 

                $ev_edate=strtotime($this->data['RecurringEvent']['endtime']); 

                $sel_etime=date("h:i a", $ev_edate);



                $this->set('sdate', date("m-d-Y", $event_sdate));  

                $this->set('edate', date("m-d-Y", $event_edate));  

                $this->set('eventdata', $this->data['RecurringEvent']); 

               

                App::import("Model", 'EventInvitation');

                $this->EventInvitation =   & new EventInvitation();    

                

                $cond="EventInvitation.rec_event_id='".$rec_eventid."' and EventInvitation.project_id='".$project_id."' and EventInvitation.in_waitlist='1'";

                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    

                

                if(empty($check_waiting_list))            

                    $waiting_list=0;

                else

                    $waiting_list=1;

             

                $this->set('waiting_list', $waiting_list); 

                

            }else{

                

                $date = new DateTime();

                //   $date->setDate($d1[2], $d1[0], $d1[1]);

                $date->setTime(10, 0,0);

                $sel_stime= $date->format("h:i a");

                $sel_etime= $date->format("h:i a");

                $this->set('eventid', 0);  

            }     



            $this->set('sel_stime', $sel_stime);  

            $this->set('sel_etime', $sel_etime);  



            $prodtl = $this->projectdetailbyid($projectid);



            $sponname = $this->getsponsornamebyprojectid($projectid);



            $this->set('sponorname',$sponname);



            $projectname = $prodtl[0]['Project']['project_name'];



            $this->set('projectname',$projectname);

            

            /*

            $event_type['At Location']="At Location";

            $event_type['Video Conference']="Video Conference";

            $event_type['Webinar']="Webinar";

            $event_type['Conference Call']="Conference Call";

            $event_type['At Location & Live Broadcast']="At Location & Live Broadcast";

            

            $this->set('event_type',$event_type);

             */

             $this->eventtypelisting($projectid);

            /* 

            $member_type['all']="All";

            $member_type['coin_holders']="Coin Holders";

            $member_type['non_coin_holders']="Non Coin Holders";

            $member_type['non_members']="Non Members";

            */

            $member_type=$this->getMemberTypesListByProject($projectid,true);

            $this->set('member_type',$member_type);

            

            $this->set('recur_pattern',$this->getRecurPatternkArray());





            //event and sponsor detail dropdown



            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments')";

            App::import("Model", 'Content');

            $this->Content =   & new Content();    

            $submenus = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));

            //$menulist[0]="Parent menu";



            foreach($submenus as $submenu)

            {

                $menulist[$submenu['Content']['id']]=$submenu['Content']['title'];

            }



            $this->set('submenu',$menulist);

            

            

            //pick a email tempalte list



            $conditions= "project_id = $projectid and delete_status='0' and active_status='1' and is_event_temp='1'";

            App::import("Model", 'EmailTemplate');

            $this->EmailTemplate =   & new EmailTemplate();    

            $email_templates = $this->EmailTemplate->find('all',array('fields' => array('EmailTemplate.id','EmailTemplate.email_template_name'),"conditions"=>$conditions));

            //$menulist[0]="Parent menu";



            foreach($email_templates as $email_template)

            {

                $templatedropdown[$email_template['EmailTemplate']['id']]=$email_template['EmailTemplate']['email_template_name'];

            }



            $this->set('templatedropdown',$templatedropdown);

            

            #country state default selection

            $this->set("selectedcountry","");

            $this->set("selectedstate","");



            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



            

            if($this->data['RecurringEvent']['country']){

                $conid = $this->data['RecurringEvent']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);



                if($this->data['RecurringEvent']['state']){

                    $statid = $this->data['RecurringEvent']['state'];

                    $this->set("selectedstate",$statid);

                }

            }





        }

        

        

        function pasteventcreated($eventid=''){



            //Configure::write('debug', 2);    



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','projectbackup');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');

            

            $current_domain= $_SERVER['HTTP_HOST'];

            $this->set('current_domain',$current_domain);



            ##import Company  model for processing

            App::import("Model", "RecurringEvent");



            $this->RecurringEvent =  & new RecurringEvent();   



            //for active menu display

            $this->set('page_url','editevent');



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   



            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);            



            $projectid = $project_id;



            $this->set('project_name',$projectDetails['Project']['project_name']);





            if($eventid){



                $this->RecurringEvent->id = $eventid;

                $this->set('eventid', $eventid);   

                $this->data = $this->RecurringEvent->read();

                $event_sdate=strtotime($this->data['RecurringEvent']['starttime']);

                $sel_stime=date("h:i a", $event_sdate);

                // $this->data['Event']['endtime']= $date->format("Y-m-d  H:i:s");  

                $event_edate=strtotime($this->data['RecurringEvent']['endtime']); 

                $sel_etime=date("h:i a", $event_edate);



                $this->set('sdate', date("m-d-Y", $event_sdate));  

                $this->set('edate', date("m-d-Y", $event_edate));  

                $this->set('eventdata', $this->data['RecurringEvent']); 

               

                App::import("Model", 'EventInvitation');

                $this->EventInvitation =   & new EventInvitation();    

                

                $cond="EventInvitation.event_id='".$eventid."' and EventInvitation.project_id='".$project_id."' and EventInvitation.in_waitlist='1'";

                $check_waiting_list = $this->EventInvitation->find('all',array("conditions"=>$cond));    

                

                if(empty($check_waiting_list))            

                    $waiting_list=0;

                else

                    $waiting_list=1;

             

                $this->set('waiting_list', $waiting_list); 

                

            }else{

                $date = new DateTime();

                //   $date->setDate($d1[2], $d1[0], $d1[1]);

                $date->setTime(10, 0,0);

                $sel_stime= $date->format("h:i a");

                $sel_etime= $date->format("h:i a");

                $this->set('eventid', 0);  

            }     



            $this->set('sel_stime', $sel_stime);  

            $this->set('sel_etime', $sel_etime);  



            $prodtl = $this->projectdetailbyid($projectid);



            $sponname = $this->getsponsornamebyprojectid($projectid);



            $this->set('sponorname',$sponname);



            $projectname = $prodtl[0]['Project']['project_name'];



            $this->set('projectname',$projectname);

            /*

            

            $event_type['At Location']="At Location";

            $event_type['Video Conference']="Video Conference";

            $event_type['Webinar']="Webinar";

            $event_type['Conference Call']="Conference Call";

            $event_type['At Location & Live Broadcast']="At Location & Live Broadcast";

            

            $this->set('event_type',$event_type);

            */

            $this->eventtypelisting($projectid);

            /*

            $member_type['all']="All";

            $member_type['coin_holders']="Coin Holders";

            $member_type['non_coin_holders']="Non Coin Holders";

            $member_type['non_members']="Non Members";

            */

            $member_type=$this->getMemberTypesListByProject($projectid,true);

            $this->set('member_type',$member_type);

            

            $this->set('recur_pattern',$this->getRecurPatternkArray());





            //event and sponsor detail dropdown



            $conditionsubmenu= "project_id = $projectid and delete_status='0' and parent_id='0' and is_sytem!='2' and (   alias!='blogs' AND  alias!='chat' AND  alias!='comments')";

            App::import("Model", 'Content');

            $this->Content =   & new Content();    

            $submenus = $this->Content->find('all',array('fields' => array('Content.title','Content.id'),"conditions"=>$conditionsubmenu));

            //$menulist[0]="Parent menu";



            foreach($submenus as $submenu)

            {

                $menulist[$submenu['Content']['id']]=$submenu['Content']['title'];

            }



            $this->set('submenu',$menulist);

            

            

            //pick a email tempalte list



            $conditions= "project_id = $projectid and delete_status='0' and is_sytem='1'";

            App::import("Model", 'EmailTemplate');

            $this->EmailTemplate =   & new EmailTemplate();    

            $email_templates = $this->EmailTemplate->find('all',array('fields' => array('EmailTemplate.id','EmailTemplate.email_template_name'),"conditions"=>$conditions));

            $templatedropdown=array();

			foreach($email_templates as $email_template)

            {

                $templatedropdown[$email_template['EmailTemplate']['id']]=$email_template['EmailTemplate']['email_template_name'];

            }



            $this->set('templatedropdown',$templatedropdown);



            ##country state default selection

            $this->set("selectedcountry","");

            $this->set("selectedstate","");



            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();



            

            if($this->data['RecurringEvent']['country']){

                $conid = $this->data['RecurringEvent']['country'];

                $this->set("selectedcountry",$conid);

                ##state drop down

                $this->statedroupdown($conid);



                if($this->data['RecurringEvent']['state']){

                    $statid = $this->data['RecurringEvent']['state'];

                    $this->set("selectedstate",$statid);

                }

            }







        }



        /*

        * Function name   : eventinvitation()

        * Description : This function used to send invitaiton to selected project members

        * Created On      : 25-02-11 (02:18am)

        *

        */ 



        function eventinvitation($rec_eventid=''){



            ##Configure::write('debug',3);



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','projectbackup');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            ##import  Holder  model for processing

            App::import("Model", "Holder");

            $this->Holder =   & new Holder(); 



            ##import  Event  model for processing

            App::import("Model", "Event");

            $this->Event =   & new Event();       



            //for active menu display



            $this->set('page_url',"evenlist");



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '3'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition  



            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);    



            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    



            $field='';

            

            App::import("Model", "RecurringEvent");

             $this->RecurringEvent =   & new RecurringEvent();    

             

             $condition = "RecurringEvent.id = ".$rec_eventid;  

             $rec_event_data= $this->RecurringEvent->find('first',array("conditions"=>$condition));

             $eventid=$rec_event_data['RecurringEvent']['event_id'];



            if(!empty($this->data))



            {        



                App::import("Model", "EventInvitation");

                $this->EventInvitation =   & new EventInvitation();    



                $this->data['EventInvitation']['project_id'] = $projectid;

                $this->data['EventInvitation']['rec_event_id'] = $rec_eventid;

                //  $this->data['EventInvitation']['event_id'] = $this->data['EventInvitation']['id'];

                $holdersArray=  $_REQUEST['holderids'];



                //  echo "<pre>"; print_r($this->data);  echo "</pre>"; exit;

                for($i=0; $i<sizeof($holdersArray); $i++){

                    $this->data['EventInvitation']['invite_to_holder_id']=$holdersArray[$i];

                    $this->EventInvitation->save($this->data);

                    $this->data['EventInvitation']['id']='';

                }



                $this->Session->setFlash('Event invitation sent succeffully.','default', array('class' => 'successmsg')); 

                $this->redirect('/companies/eventlist');

            } 



            else

            {

                if($eventid==''){

                    $this->Session->setFlash('First select event to send invitation.','default', array('class' => 'errormsg')); 

                    $this->redirect('/companies/eventlist');

                }



                //$condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND Holder.id  IN (SELECT DISTINCT holder_id FROM coins_holders)";

                $this->Event->id = $eventid;

                $this->set('eventid', $eventid);   

                $this->data = $this->Event->read(); 





            }

            

            $member_type=$rec_event_data['RecurringEvent']['member_type'];

            

            if($member_type=="coin_holders")

                {

                  $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and Holder.id NOT IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid') and  Holder.id In(select holder_id from coins_holders where project_id=".$projectid." and active_status='1' and delete_status='0')";   

                }

                else

                if($member_type=="non_coin_holders")

                {

                                      

                    $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and Holder.id NOT IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid') and Holder.id NOT In(select holder_id from coins_holders where project_id=".$projectid." and active_status='1' and delete_status='0')";       

                }

                else

                if($member_type=="non_members")

                {

                                     

                    $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND Holder.active_status='0' and Holder.id NOT IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid')";  

                    

                }

                else // $member_type==all     - Holder.active_status"=>"1",

                {               

                    $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' and Holder.id NOT IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid') and (Holder.active_status='0' or Holder.active_status='1')";  

                }

            



            //  $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 

           // $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND  

            //Holder.id NOT IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid')";  



            if($order == "Holder.id ASC"){

                $order = "Holder.id DESC";

            }

            $order = "Holder.id DESC"; 

            $query="SELECT Holder.*,User.avatar_url

            from holders Holder

            LEFT JOIN users User ON User.id = Holder.user_id

            where  ".$condition."

            Order by  ".$order;



            $holderarr = $this->Holder->query($query); 



            $this->set("holderlist",$holderarr);

            $this->set("eventid",$eventid);     



        }





        /**

        * Function name   : eventattending()

        * Description : Fucntion to show all attending memebrs for given event           

        * Created On      : 25-02-11 (02:18am)

        *

        **/ 



        function eventattending($eventid=''){



            ##Configure::write('debug',3);



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','projectbackup');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            ##import  Holder  model for processing

            App::import("Model", "Holder");

            $this->Holder =   & new Holder(); 



            ##import  Event  model for processing

            App::import("Model", "Event");

            $this->Event =   & new Event();       



            //for active menu display



            $this->set('page_url',"evenlist");



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '3'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition  



            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);    



            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    



            $field='';





            if($eventid==''){

                $this->Session->setFlash('First select event to send invitation.','default', array('class' => 'errormsg')); 

                $this->redirect('/companies/eventlist');

            }



            //$condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND Holder.id  IN (SELECT DISTINCT holder_id FROM coins_holders)";

            $this->Event->id = $eventid;

            $this->set('eventid', $eventid);   

            $this->data = $this->Event->read(); 



            //  $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 

            $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND 

            Holder.id IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid' and invite_status='1')";  



            if($order == "Holder.id ASC"){

                $order = "Holder.id DESC";

            }

            $order = "Holder.id DESC"; 

            $query="SELECT Holder.*,User.avatar_url

            from holders Holder

            LEFT JOIN users User ON User.id = Holder.user_id

            where  ".$condition."

            Order by  ".$order;



            $holderarr = $this->Holder->query($query); 



            $this->set("holderlist",$holderarr);

            $this->set("eventid",$eventid);     



        }



        /**

        * Fucntion to show all may be attending members for given event           

        * 

        * @param mixed $eventid

        */

        function eventmayattending($eventid=''){



            ##Configure::write('debug',3);



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','eventmayattending');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            ##import  Holder  model for processing

            App::import("Model", "Holder");

            $this->Holder =   & new Holder(); 



            ##import  Event  model for processing

            App::import("Model", "Event");

            $this->Event =   & new Event();       



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '3'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition  



            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);    



            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    



            $field='';





            if($eventid==''){

                $this->Session->setFlash('First select event to send invitation.','default', array('class' => 'errormsg')); 

                $this->redirect('/companies/eventlist');

            }



            //$condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND Holder.id  IN (SELECT DISTINCT holder_id FROM coins_holders)";

            $this->Event->id = $eventid;

            $this->set('eventid', $eventid);   

            $this->data = $this->Event->read(); 



            //  $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 

            $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND  

            Holder.id IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid' and invite_status='2')";  



            if($order == "Holder.id ASC"){

                $order = "Holder.id DESC";

            }

            $order = "Holder.id DESC"; 

            $query="SELECT Holder.*,User.avatar_url

            from holders Holder

            LEFT JOIN users User ON User.id = Holder.user_id

            where  ".$condition."

            Order by  ".$order;



            $holderarr = $this->Holder->query($query); 



            $this->set("holderlist",$holderarr);

            $this->set("eventid",$eventid);     



        }



        /**

        * Fucntion to show all pending invitation for given event

        * 

        * @param mixed $eventid

        */

        function eventpending($eventid=''){     



            ##Configure::write('debug',3);



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','eventpending');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            ##import  Holder  model for processing

            App::import("Model", "Holder");

            $this->Holder =   & new Holder(); 



            ##import  Event  model for processing

            App::import("Model", "Event");

            $this->Event =   & new Event();       



            //for active menu display



            $this->set('page_url',"evenlist");



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '3'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition  



            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);    



            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    



            $field='';





            if($eventid==''){

                $this->Session->setFlash('First select event to send invitation.','default', array('class' => 'errormsg')); 

                $this->redirect('/companies/eventlist');

            }



            //$condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND Holder.id  IN (SELECT DISTINCT holder_id FROM coins_holders)";

            $this->Event->id = $eventid;

            $this->set('eventid', $eventid);   

            $this->data = $this->Event->read(); 



            //  $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 

            $condition = "Holder.project_id = '$projectid' AND Holder.delete_status='0' AND 

            Holder.id IN(SELECT DISTINCT invite_to_holder_id from event_invitations where project_id= '$projectid' and event_id= '$eventid' and invite_status='0')";  



            if($order == "Holder.id ASC"){

                $order = "Holder.id DESC";

            }

            $order = "Holder.id DESC"; 

            $query="SELECT Holder.*,User.avatar_url

            from holders Holder

            LEFT JOIN users User ON User.id = Holder.user_id

            where  ".$condition."

            Order by  ".$order;



            $holderarr = $this->Holder->query($query); 



            $this->set("holderlist",$holderarr);

            $this->set("eventid",$eventid);     



        }

        

         function iframe_logout(){



             

             $current_domain= $_SERVER['HTTP_HOST'];  

            $project_id=$this->Session->read("projectwebsite_id");    

            $projectDetails=$this->getprojectdetails($project_id);    



            $userid = $this->Session->read("User.User.id");

           

            //set login date

            $login_date=date('m-d-Y H:m:s');

            $user['User']['id']=$userid;

            $user['User']['last_login']=$login_date;

            $user['User']['is_loggedin']='0';

            $user['User']['is_chatjoined']='0';

            

            $this->User->Save($user['User']);



            $usrdtl = $this->Session->read('User');

            $this->Session->delete('User');

            $this->Session->delete('iframe_session');

            

            $project_name=$this->Session->read("projectwebsite_name");

          

            $this->redirect('http://'.$current_domain."/companies/iframelogin/".$project_id."/".$project_name);





        }

        

         function iframe_dashboard(){



            ##check user session live or not

            $this->session_check_user();



            $usertype = $this->Session->read("User.User.usertype");

            $userid = $this->Session->read("User.User.id");

            

            $condition="User.id=".$userid;

            $last_login= $this->User->find($condition,NULL,NULL,NULL,NULL,1);

            $last_login=$last_login['User']['modified'];

            $this->set('last_login',$last_login);



            $this->layout= 'iframelayout';

            

            $this->Session->write("iframe_session",1);

            



            $current_domain= $_SERVER['HTTP_HOST'];  

            //for active menu display

            $this->set('page_url',"");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)){ if(!empty($this->Cookie)){

                    $pname= $this->Cookie->read('name'); 

                    $project_id= $this->Cookie->read('id'); 

              

                }else{



                    $this->redirect('/companies/session_expired');

                }

            }





            $this->set('project_id',$project_id);

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);



            $usermodified = $this->Session->read("User.User.last_login");

            $usermodified12=$this->Session->read("User.User.last_login");



            $today=getdate();

            $todaydate=$today[year]."-".$today[mon]."-".$today[mday];

            $data1 = explode("-", $todaydate);





            $dt=strtotime($usermodified);

            $my=date("Y", $dt);

            $md=date("d", $dt);

            $mm=date("m", $dt);



            $tdate1=$my."-".$mm."-".$md;



            if(is_array($usermodified))

            {

                $tdate1=$usermodified['year']."-".$usermodified['mon']."-".$usermodified['mday'];



            }

  

            $day=abs($data1[1]-$md)."  Days";

            $m=$data1[2]-$mm."  Months";

            $y=$data1[0]-$my."  Year";

            $d=$day;

            $usermodified=$d."  ".$m."  ".$y;

           

            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '55'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            if(substr($usermodified12,0,10) != '0000-00-00'){

                //prashant code to calculate date difference



                $diffdate = abs(strtotime($todaydate) - strtotime($tdate1));



                $years1 = floor($diffdate / (365*60*60*24));

                $months1 = floor(($diffdate - $years1 * 365*60*60*24) / (30*60*60*24));

                $days1 = floor(($diffdate - $years1 * 365*60*60*24 - $months1*30*60*60*24)/ (60*60*24));

                //code end here





                $months1=($months1!=0)?$months1."  months":"";

                $years1=($years1!=0)?$years1."  years":"";

                $days1=($days1!=0)?(($days1==1)?$days1." day":$days1." days"):"-----";

                $usermodifiedat=$days1."  ".$months1."  ".$years1; 

            }

            $this->set('dateoflogin',$usermodifiedat);



            App::import('Model','Holder');

            $this->Holder = new Holder();

            $condition = "Holder.project_id = '$project_id' AND Holder.user_id='$userid' AND delete_status='0'"; 

            $dataholder=$this->Holder->find('all',array("conditions"=>$condition));



            $created=$dataholder[0]['Holder']['created'];

            $hid=$dataholder[0]['Holder']['id'];

            $this->set('creatdate',$created);

            $this->set('screenname',$dataholder[0]['Holder']['screenname']);



            App::import('Model','CoinsHolder');

            $this->Holder = new Holder();

            $condition1 = "CoinsHolder.project_id = '$project_id' AND CoinsHolder.holder_id='$hid'";



            $noofcoins=$this->CoinsHolder->find('count',array("conditions"=>$condition1));

            $holdercoin=$this->CoinsHolder->find('all',array("conditions"=>$condition1));

            $coincreated=$holdercoin[0]['CoinsHolder']['created'];

            $this->set('coincreatdate',$coincreated);

            $this->set('noofcoins',$noofcoins);



            App::import('Model','Comment');

            $this->Comment = new Comment();

            $condition3 = "Comment.project_id = '$project_id' AND Comment.holder_id='$hid'";

            $comment=$this->Comment->find('first',array("conditions"=>$condition3,'order'=>'modified DESC'));



            $commentcount=$this->Comment->find('all',array("conditions"=>$condition3));

            $lastmodify=$comment['Comment']['modified'];

            $dt=strtotime($lastmodify);

            $my=date("Y", $dt);

            $md=date("d", $dt);

            $mm=date("m", $dt);

            $tdate=$my."-".$mm."-".$md;



            //prashant code to calculate date difference

            $lastcommenteddate="";

            if(substr($lastmodify,0,10) != '0000-00-00' && !empty($lastmodify)){



                $diff = abs(strtotime($todaydate) - strtotime($tdate));





                $years = floor($diff / (365*60*60*24));

                $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));

                $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                //code end here



                $months=($months!=0)?$months." months":"";

                $years=($years!=0)?$years." years":"";

                $days=($days!=0)?(($days==1)?$days." day":$days." days"):"----";

                $lastcommenteddate=$days."  ".$months."  ".$years; 

            }



            $day=abs($data1[1]-$md)." Days";

            $m=$data1[2]-$mm." Months";

            $y=$data1[0]-$my." Year";

            $d=$day; 

            $coun=0;

            if(!empty($commentcount))

                $coun=count($commentcount);

            //$lastcommenteddate=$comment[0]['Comment']['created'];

            $this->set('ncomment',$coun);

            $this->set('lastcommenteddate',$lastmodify);



            $conditionpagetitle="Content.internal_alias='dashboard' and Content.project_id=".$project_id." and Content.active_status='1' and Content.delete_status='0' ";

            $page_content= $this->Content->find($conditionpagetitle,NULL,NULL,NULL,NULL,1);        

            $this->set('meta_title',$page_content['Content']['metatitle']);

            $this->set('page_title',$page_content['Content']['metatitle']);

            

            $this->set('current_domain', $current_domain);



            //get profile completion %

            $profile_completion=$this->User->query("select register + profile + birthday + avatar + gender + social_account + reg_coin + comment as per from user_profile_completions where user_id=$userid");

            $pro_complete=$profile_completion[0][0];

            $this->set('pro_complete',$pro_complete);

            

                        

            //get member points

            $points=$this->User->query("select sum(points) as points from point_archive_users where member_id=$userid and project_id=$project_id");

            $member_points=$points[0][0];

            $this->set('member_points',$member_points);

            

            /** GET USER WAITING COMMENTS COUNT ***/



            // STEP : Get total number of suggested commets type for selected project

             $getCommentTypeCountQuery="Select count(1) as totalcommenttypes from comment_types where project_id='$project_id' and active_status='1' and delete_status='0'";

             $commentTypeCountArray=$this->Comment->query($getCommentTypeCountQuery);

             $totalcommenttypes=$commentTypeCountArray[0][0]['totalcommenttypes'];

             



            // STEP : Get total number of holder commets on comment type for selected project             

            $getHolderCommentCountQuery="Select Count(DISTINCT(comment_type_id)) as totalholdercomments from comments 

                                        where project_id='$project_id' and holder_id='$hid' and coinset_id='0' and active_status='1' 

                                        and delete_status='0' and 

                                        comment_type_id IN(Select id from comment_types where project_id='$project_id' and active_status='1' and delete_status='0')";

             $holderCommentCountArray=$this->Comment->query($getHolderCommentCountQuery);

             $totalholdercomments=$holderCommentCountArray[0][0]['totalholdercomments'];

        

            

             $waiting_comments= $totalcommenttypes  -  $totalholdercomments;

             if($waiting_comments < 0){

                 $waiting_comments=0;

             }

            

            //STEP : Get total number waiting reply for comment posted by user

            $getCommentReplyCountQuery = "Select count(1) as totalcommentreplies from comment_replies where project_id='$project_id' and active_status='1' 

                                        and delete_status='0'   and reply_id='0' and holder_id!='$hid' and comment_id IN(Select id from comments 

                                        where project_id='$project_id' and holder_id='$hid'  and coinset_id='0' and active_status='1' 

                                        and delete_status='0' )";

            $commentReplyCountArray=$this->Comment->query($getCommentReplyCountQuery);

            $totalcommentreplies=$commentReplyCountArray[0][0]['totalcommentreplies'];

            

            $waiting_comments=$waiting_comments + $totalcommentreplies;

            

            $this->set('waiting_comments',$waiting_comments); 

        }









        /*******************************************************************

        * Function Name: Iframelogin

        * Function Arguments: two

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 jul, 2011

        ********************************************************************/

        function iframelogin($frid='1',$prname='',$chat=null){



            $this->layout= 'iframelayout';

            $datastyle=$this->getstyles();

            $this->Session->delete('styledata');

            $this->set('styledata',$datastyle);

            $this->Session->write("styledata",$datastyle);

            //$this->layout= 'internal_layout';



            //         //for active menu display

            $this->set('frid',$frid);

            $this->set('page_url',$page_name);

            $this->set('prname',$prname);

            $project_id=$frid;

            $this->Session->write("projectwebsite_id",$project_id);    

            $project_name=$prname;

            $this->Session->write("projectwebsite_name",$project_name);    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);

            $this->set('project',$projectDetails);

            $loutouturl = $this->getlogouturl($projectDetails['Project']['logoutredirect']);

            $this->Session->write('logouturl', $loutouturl);





            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $this->set('meta_title',$projectDetails['Project']['sitename']);

            $this->set('page_title',$projectDetails['Project']['sitename']);



            $current_domain= $_SERVER['HTTP_HOST'];  



            if(isset($this->data)){

                //...This if for login purpose



                $username = $this->data['User']['username'];

                $password = $this->data['User']['password'];



                if($username=="" ||$password=="" )

                {                    

                    $this->Session->setFlash('Username or Password is empty!','default',array('class' => 'errormsg1')); 

                }

                else

                {



                    $condition = " User.username = '".$username."' and User.project_id='".$project_id."'  and User.delete_status='0'";

                    $userpresent = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));

                    if(is_array($userpresent) && !empty($userpresent)) {                

                        $username = $this->data['User']['username'];

                        $password = $this->data['User']['password'];

                        $condition = " User.username = '".$username."' AND User.password = '".md5($password)."' and User.project_id='".$project_id."' and User.delete_status='0' ";

                        $userDetails = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));    



                        if(is_array($userDetails) && !empty($userDetails)) {                        

                            

                            if($userDetails['User']['active_status'] == '1'){

                                

                                $userDetails['User']['last_login']=date("Y-m-d H:i:s");

                                $userDetails['User']['is_loggedin']='1';

                                $this->User->save($userDetails);

                                

                                $this->Session->write('User', $userDetails);

                                $this->Session->write('CurrentProject', $project_id);

                                $s_URL = $this->Session->read('URL'); //    

                                $daily_visit_check=$this->Point->query("select * from point_archive_users where point_id=10 and member_id='".$userDetails['User']['id']."' and project_id='$project_id' order by id desc limit 1");

                                if($s_URL != ''){

                                    if($userDetails['User']['usertype']=="holder")

                                    {

                                        if(empty($daily_visit_check))

                                        {

                                            $this->Point->triggerPoints(DAILY_VISIT,$project_id,$userDetails['User']['id']);        //trigger for daily visit

                                        }

                                        else

                                        {

                                            $old_created_date=$daily_visit_check[0]['point_archive_users']['created'];

                                            $current_date=date("Y-m-d");

                                            $diff = abs(strtotime($current_date) - strtotime($old_created_date));

                                            $years = floor($diff / (365*60*60*24));

                                            $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));

                                            $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                                            

                                            if($days>=1)

                                                $this->Point->triggerPoints(DAILY_VISIT,$project_id,$userDetails['User']['id']);        //trigger for daily visit

                                        }

                                    }

                                    if($chat=="chat")

                                        $this->redirect('http://'.$current_domain."/companies/iframechat/".$project_id."/".$project_name);

                                    else

                                        $this->redirect($s_URL);

                                }else{



                                    if($userDetails['User']['usertype']=="holder")

                                    {

                                        if(empty($daily_visit_check))

                                        {

                                            $this->Point->triggerPoints(DAILY_VISIT,$project_id,$userDetails['User']['id']);        //trigger for daily visit

                                        }

                                        else

                                        {

                                            $old_created_date=$daily_visit_check[0]['point_archive_users']['created'];

                                            $current_date=date("Y-m-d");

                                            $diff = abs(strtotime($current_date) - strtotime($old_created_date));

                                            $years = floor($diff / (365*60*60*24));

                                            $months = floor(($diff - $years * 365*60*60*24) / (30*60*60*24));

                                            $days = floor(($diff - $years * 365*60*60*24 - $months*30*60*60*24)/ (60*60*24));

                                            

                                            if($days>=1)

                                                $this->Point->triggerPoints(DAILY_VISIT,$project_id,$userDetails['User']['id']);        //trigger for daily visit

                                        }

                                    }

                                    

                                    if($chat=="chat")

                                        $this->redirect('http://'.$current_domain."/companies/iframechat/".$project_id."/".$project_name);

                                    else        

                                        $this->redirect('/companies/iframe_dashboard');

                                }

                            }elseif($userDetails['User']['active_status'] == '0'){                    



                                if($projectDetails['Project']['registration_confirmation']=="1")

                                {            $this->Session->setFlash('Account not activated,you must check your e-mail for a Confirmation e-mail from us and to finish the Activation.','default',array('class' => 'errormsg')); }

                                else{            $this->Session->setFlash('This Account has been deactivated.','default',array('class' => 'errormsg1')); }



                                //$this->redirect('/companies/iframelogin');



                            }                            

                        }else{        

                            $this->Session->setFlash('Username and Password mismatched.','default',array('class' => 'errormsg1'));                                    

                            //$this->redirect('/companies/iframelogin');



                        }



                    }else{

                        //die("sdsfjksdjfjfsdk");    

                        $this->Session->setFlash('Invalid username!','default',array('class' => 'errormsg1'));    

                        //$this->redirect('/companies/iframelogin');                        

                    }

                }

            }    

        }

        



        /*******************************************************************

        * Function Name: iframeregister

        * Function Arguments: two

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 jul, 2011

        ********************************************************************/

        function iframeregister($frid=null,$prname=null){

           // $this->layout= 'iframelayout';

            //$this->layout= 'internal_layout';

          

            $this->layout= 'iframelayout';

            //for active menu display

            $this->set('page_url','registeruser');

            $project_id='1';

            $projectDetails = $this->getprojectdetails($project_id);   



            $this->set('project',$projectDetails);     

           

            if($projectDetails){

                $regdone=false;

                 $project_name=$projectDetails['Project']['project_name'];

                $this->set('project_id',$project_id);    

                $this->set('project_name',$project_name);    

                // Check User Login for different projects End

                $this->Session->write('projectwebsite_id', $project_id);

                $this->Session->write('projectwebsite_name',$project_name );

                

                //$_SESSION['projectwebsite_id']=$projectDetails['Project']['id'];

                if(empty($project_name)) $this->redirect('/companies/session_expired');



                $this->set("selectedcountrnew-my-testy",'');

                $this->set("selectedstate",'');



               $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

               $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

               $this->set('meta_title',$projectDetails['Project']['sitename']);

               $this->set('page_title',$projectDetails['Project']['sitename']);



                    if (!empty($this->data['Holder'])) {



                        $this->set('status',trim($this->data['Holder']['coinstatus']));

                        $errorString ='';    



                        //coinset verification

                        



                        //screenname checking            

                        if(trim($this->data['Holder']['screenname'])=="")

                        {

                            $errorString .="Screen Name is required.<br/>";

                        }





                        //password checking            

                        if(trim($this->data['Holder']['password']) == ''){

                            $errorString .="Please enter password<br/>";                

                        }else{

                            if(strlen(trim($this->data['Holder']['password'])) < 6 ){

                                $errorString .="Password must have atleast 6 character.<br/>";    

                            }

                        }

                        //email checking

                        if(trim($this->data['Holder']['email']) == '' ){

                            $errorString .="Please enter email address<br/>";                

                        }else{

                            if(!eregi("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})$", trim($this->data['Holder']['email']))){

                                $errorString .="Please enter valid email address.<br/>";                

                            }

                            else{

                                $condition = "email = '".$this->data['Holder']['email']."' and  project_id='".$project_id."' and delete_status='0'";

                                $usersession = $this->Holder->find('first', array('conditions' => $condition));

                                if(is_array($usersession) && !empty($usersession)) {

                                    $errorString .=" If you have already Registered and want to Register a New Coin, please Login and Add the Coin in Your Dashboard";

                                    if(trim($this->data['Holder']['email']) != trim($this->data['Holder']['revemail'])){

                                        $errorString .="email & confirm email must be same<br/>";                

                                    }

                                }

                            }

                        }







                        if(trim($this->data['Holder']['zipcode'])=="")

                            $errorString .="Zip is required.<br/>";    



                        if(trim($this->data['Holder']['country'])=="")

                            $errorString .="Country is required.<br/>";        



                        if(trim($errorString) !=''){                

                            $this->Session->setFlash($errorString,'default',array('class' => 'errormsg_register'));

                        }else{



                            if($projectDetails['Project']['registration_confirmation']=="0")

                            {    

                                $active_status='1';

                            }

                            else{ $active_status='0'; }



                            $this->data['User']['project_id']=$project_id;

                            $this->data['User']['active_status']=$active_status;

                            $this->data['User']['username']=$this->data['Holder']['email'];

                            $this->data['User']['password']=md5($this->data['Holder']['password']);

                            $this->data['User']['usertype']='holder';



                            $this->User->save($this->data['User']);    

                           

                            $new_member_id = $this->User->getLastInsertId();

                            $this->data['User']['id']=$new_member_id;

                            

                              //triggered points setup for user

                              $this->Point->triggerPoints(REGISTRATION,$project_id,$new_member_id);        //trigger for register

                

                            // save user profile completion percetage - registration complete 30%

                            $this->data['UserProfileCompletion']['user_id']= $new_member_id;

                            App::import("Model", "UserProfileCompletion");

                            $this->UserProfileCompletion =  & new UserProfileCompletion();

                            $chk= $this->UserProfileCompletion->save($this->data['UserProfileCompletion']);



                            //$startdate1=explode("/",$this->data['Holder']['birthday']);

                            //$birthdate=$startdate1[2]."-".$startdate1[0]."-".$startdate1[1];



                            //$this->data['Holder']['birthday']=$birthdate;

                            $this->data['Holder']['project_id']=$project_id;

                            $this->data['Holder']['user_id']=$new_member_id;    

                            $this->data['Holder']['active_status']=$active_status;        



                            $this->Holder->save($this->data['Holder']);



                            $new_holder_id = $this->Holder->getLastInsertId();

                            $this->data['Holder']['id'] = $new_holder_id;

                            

                           if($projectDetails['Project']['registration_confirmation']=="1")

                           {

                               $successmsg_register="Almost there... you will be receiving an e-mail shortly.<br/> To complete  your Registration process you will need to open this e-mail and click the activate link to activate your account. <br/>Thank you and welcome to our community!";

                                $condition = " EmailTemplate.email_template_name= 'SIGN UP CONFIRMATION' and  EmailTemplate.project_id='".$project_id."' 

                                                and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                                $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));

                                if(is_array($mailMessage) && !empty($mailMessage)) 

                                {

                                    /**

                                    * OLD CODE

                                    * if(!empty($projectDetails['Project']['url']))

                                        $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                                    else

                                        $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];



                                    if(!empty($projectDetails['Project']['system_name']))

                                        $pt_new_name=$projectDetails['Project']['system_name'];

                                    else

                                        $pt_new_name=$projectDetails['Project']['project_name'];

                                    *$keyStringArray = array('[[HOLDER_FIRSTNAME]]'=>trim($this->data['Holder']['screenname']),

                                        '[[EMAIL_ADDRESS]]'=>$to,

                                        '[[CONFIRM_SIGN_UP_LINK]]'=>$confirm_signup_link,

                                        '[[PROJECT_NAME]]'=>$pt_new_name,

                                        '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                                     $subject = str_replace('[[PROJECT_NAME]]',$pt_new_name,$subject);  

                                    if(!empty($keyStringArray)){

                                            foreach($keyStringArray as $key=>$val){

                                                $mailBody = str_replace($key,$val,$mailBody);

                                            }

                                        }             

                                    */

                                    $confirm_signup_link ="<a href='http://".HTTP_PATH."/companies/update_confirmation/".base64_encode($new_holder_id)."'target='_blank'>Confirm Sign up</a>";

                                    $to = trim($this->data['Holder']['email']);  

                                    $subject  = $mailMessage['EmailTemplate']['subject'];  

                                    $from  = $mailMessage['EmailTemplate']['sender'];  

                                    $fromname =$from;                 

                                    $mailBody=$mailMessage['EmailTemplate']['content'];

                                    /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button  **/

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    

                                        $condition = "id='1'";

                                        $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                        $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                        $mailBody.=$mailfooter;

                                    ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                    

                                     

                                      // Set path to inserted image 

                                      $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                                      

                                     /**

                                     * New Email Temp replacement code for data Elements 

                                     */

                                     //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                        $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                                     //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                        $dataEleValuesArray[DATA_ELEMENT_CONFIRM_SIGN_UP_LINK]= $confirm_signup_link;  

                                        $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                     //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                        $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                        $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                            

                                      $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                            }       

                            $regdone=true; 

                            $this->Session->setFlash($successmsg_register,'default',array('class' => 'successmsg_register'));

                        //    $this->redirect('/companies/iframelogin/'.$project_id."/".$project_name);

                }

                else{

                        $project_url= $_SERVER['HTTP_HOST']."/".$project_name;

                        $successmsg_register = "Your account has been created, you can login now. <br/>Thank you and welcome to our community!";

                        

                        $condition = " EmailTemplate.email_template_name= 'REGISTRATION CONFIRMATION' and  EmailTemplate.project_id='".$project_id."'

                                         and EmailTemplate.active_status='1' and EmailTemplate.delete_status='0' ";

                        $mailMessage = $this->EmailTemplate->find('first',array('conditions' => $condition));



                        if(is_array($mailMessage) && !empty($mailMessage)) 

                        {

                            /**

                            * OLD CODE

                            * if(!empty($projectDetails['Project']['url']))

                                $homepagepath=str_replace('http://', '', $projectDetails['Project']['url']);

                            else

                                $homepagepath=HTTP_PATH.'/'.$projectDetails['Project']['project_name'];

                            * if(!empty($projectDetails['Project']['system_name']))

                                $pt_new_name=$projectDetails['Project']['system_name'];

                            else

                                $pt_new_name=$projectDetails['Project']['project_name'];

                             $keyStringArray = array('[[USER_NAME]]'=>trim($this->data['Holder']['email']),

                            '[[TO_FIRSTNAME]]'=>trim($this->data['Holder']['screenname']),  

                            '[[PASSWORD]]'=>trim($userpass),

                            '[[PROJECT_NAME]]'=>$pt_new_name,

                            '[[PROJECT_HOMEPAGE_URL]]'=>$homepagepath);

                            if(!empty($keyStringArray)){

                                foreach($keyStringArray as $key=>$val){

                                    $mailBody = str_replace($key,$val,$mailBody);

                                }

                            }

                            $subject = str_replace('[[PROJECT_NAME]]',$pt_new_name,$subject);     

                            */

                            



                            $userpass= base64_decode($this->Session->read("keypass"));

                            $subject  = $mailMessage['EmailTemplate']['subject'];

                            $from = $mailMessage['EmailTemplate']['sender'];              // $projectDetails['Project']['fromemail'];

                            $fromname = $from; //$projectDetails['Project']['fromname'];

                            $mailBody=$mailMessage['EmailTemplate']['content'];

                            

                            /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/    

                            ///////////////////////////////// append mail footer set by super admin /////////////////////////

                            $condition = "id='1'";

                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                            $mailBody.=$mailfooter;

                            ///////////////////////////////// append mail footer set by super admin /////////////////////////

                            

                            

                            // Set path to inserted image 

                            $mailBody = $this->replaceImgPathInEmailContent($mailBody);

                                      

                            $to = trim($this->data['Holder']['email']);

                            

                            /**

                             * New Email Temp replacement code for data Elements 

                             */

                             //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $to);

                             //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                $dataEleValuesArray[DATA_ELEMENT_USER_NAME]= trim($this->data['Holder']['email']);  

                                $dataEleValuesArray[DATA_ELEMENT_USER_PASSWORD]= trim($userpass);  

                                $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                             //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                $subject=$this->EmailTemplates->insertDataElementValuesToContent($subject);

                                $mailBody=$this->EmailTemplates->insertDataElementValuesToContent($mailBody);

                                        

                            $result = $this->Sendemail->sendMailContentWithCC($to,$from,$subject,$mailBody,$fromname, $mailMessage['EmailTemplate']['send_cc_email_to']);

                            $this->Session->delete("keypass");

                        }   

                            $regdone=true; 

                           $this->Session->setFlash($successmsg_register,'default',array('class' => 'successmsg_register'));   

                         //  $this->redirect('/companies/iframelogin/'.$project_id."/".$project_name);   

                       }

                      }

                    }



                    ##country drop down

                    $this->countrydroupdown();

                    $this->statedroupdown();

                    $this->set("regdone",$regdone);  

                    ##check default dropdowns        

                    if($this->data['Holder']['country']){

                        $conid = $this->data['Holder']['country'];

                        $this->set("selectedcountry",$conid);

                        ##state drop down

                        $this->statedroupdown($conid);

                        if($this->data['Holder']['state']>0){

                            $statid = $this->data['Holder']['state'];

                            $this->set("selectedstate",$statid);



                        }

                    }    

            }

        }

        

        

        

          function iframeevent($eventlimit=10, $eventid=null){

 

          	$p_id='1';

          	$p_name=null;

            $this->layout= 'iframelayout';

            $datastyle=$this->getstyles();

            $this->Session->delete('styledata');

            $this->set('styledata',$datastyle);

            $this->Session->write("styledata",$datastyle);

            

            $this->set('page_url','iframeevent');

            

            

            $project_id=$p_id;

            $projectDetails=$this->getprojectdetails($project_id);   

            $this->set('project',$projectDetails);

            

            if($projectDetails)

            {

                $this->Session->delete('projectwebsite_id');

                $this->Session->delete('projectwebsite_name');

                $project_name=$projectDetails['Project']['project_name'];

                $this->set('project_id',$project_id);    

                $this->set('project_name',$project_name);    

                // Check User Login for different projects End

                $this->Session->write('projectwebsite_id', $project_id);

                $this->Session->write('projectwebsite_name',$project_name );

                

                //$_SESSION['projectwebsite_id']=$projectDetails['Project']['id'];

                if(empty($project_name)) $this->redirect('/companies/session_expired');

                

            }

                                     



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);



            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain); 



            ##import blog  model for processing

            App::import("Model", "Event");



            $this->Event =  & new Event();   



            $condition = "Event.project_id = '".$projectDetails['Project']['id']."' and  Event.active_status='1' and Event.delete_status='0'";

           

            if($eventid!=null && $eventid > 0) {

                // Show specific blog

                $condition.= " and Event.id = '".$eventid."' ";

                $eventdata = $this->Event->find('first',array("conditions"=>$condition));

                $this->set('eventrow',$eventdata);  

                

                //set google map for event address



                if($projectDetails['Project']['googlemapskey'])

                {                

                    require'EasyGoogleMap.class.php';

                    //$gm = & new EasyGoogleMap("ABQIAAAAoM-kEW8yHxWwveOZAouVXhTkQdzC1XuexHlQDsWmu58XcfHJ8xQB-xtA9nt_7NDWTsfJfHHxosdNZg");

                    $gm = & new EasyGoogleMap($projectDetails['Project']['googlemapskey']);

                    $gm->SetMarkerIconStyle('GT_FLAT');

                    $gm->SetMarkerIconColor('PACIFICA');

                    $gm->SetMapZoom(10);

                     if($eventdata['Event']['address'])

                        $gm->SetAddress($eventdata['Event']['address']);

                     else

                        $gm->SetAddress($eventdata['Event']['location']);

                        

                    $gm->SetInfoWindowText($eventdata['Event']['title']);

                    $gm->SetMapWidth(345); # default = 300

                    $gm->SetMapHeight(300); # default = 300

                    $this->set('gm',$gm); 

                }

                

                $this->set('gmkey',$projectDetails['Project']['googlemapskey']); 

                

            }else{



             

                $eventdata = $this->Event->find('all',array("conditions"=>$condition, 'order' =>'created desc', 'limit' => $eventlimit, 'page' => 1)); 

              

                $this->set('eventdata',$eventdata);

                $this->set('eventlimit',$eventlimit);  

                $this->set('eventoffset',10);   

            }



            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $this->set('meta_title',$projectDetails['Project']['sitename']);

            $this->set('page_title',$projectDetails['Project']['sitename']);



        }

        

        function iframecoupon($eventlimit=10, $couponid=null){

			//die('tets');

          	$p_id='1';

          	$p_name=null;

            $this->layout= 'iframelayout';

            $datastyle=$this->getstyles();

            $this->Session->delete('styledata');

            $this->set('styledata',$datastyle);

            $this->Session->write("styledata",$datastyle);

            

            $this->set('page_url','iframecoupon');

            

            $project_id=$p_id;

            $projectDetails=$this->getprojectdetails($project_id);   

            $this->set('project',$projectDetails);

            

            if($projectDetails)

            {

                $this->Session->delete('projectwebsite_id');

                $this->Session->delete('projectwebsite_name');

                $project_name=$projectDetails['Project']['project_name'];

                $this->set('project_id',$project_id);    

                $this->set('project_name',$project_name);    

                // Check User Login for different projects End

                $this->Session->write('projectwebsite_id', $project_id);

                $this->Session->write('projectwebsite_name',$project_name );

                

                //$_SESSION['projectwebsite_id']=$projectDetails['Project']['id'];

                if(empty($project_name)) $this->redirect('/companies/session_expired');

                

            }

                                     



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);



            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain); 



            ##import blog  model for processing

            App::import("Model", "Coupon");

            $this->Coupon =   & new Coupon();

            

            $current_date=date('Y-m-d');



            $condition = "Coupon.project_id = '".$projectDetails['Project']['id']."' AND Coupon.delete_status ='0' AND Coupon.coupon_end_by_date >='".$current_date."'";

			

             $this->Coupon->bindModel(array('belongsTo'=>array(

				'CouponType'=>array(

				'foreignKey'=>'type'

			))));

			// get all the events from the database.

            

			

			

            if($couponid!=null && $couponid > 0) {

                // Show specific blog

                $condition.= " and Coupon.id = '".$couponid."' ";

                $coupondata = $this->Coupon->find('first',array("conditions"=>$condition));

                $this->set('couponrow',$coupondata); 

                //set google map for event address



                if($projectDetails['Project']['googlemapskey'])

                {                

                    require'EasyGoogleMap.class.php';

                    //$gm = & new EasyGoogleMap("ABQIAAAAoM-kEW8yHxWwveOZAouVXhTkQdzC1XuexHlQDsWmu58XcfHJ8xQB-xtA9nt_7NDWTsfJfHHxosdNZg");

                    $gm = & new EasyGoogleMap($projectDetails['Project']['googlemapskey']);

                    $gm->SetMarkerIconStyle('GT_FLAT');

                    $gm->SetMarkerIconColor('PACIFICA');

                    $gm->SetMapZoom(10);

                     if($coupondata['Event']['address'])

                        $gm->SetAddress($coupondata['Event']['address']);

                     else

                        $gm->SetAddress($coupondata['Event']['location']);

                        

                    $gm->SetInfoWindowText($coupondata['Event']['title']);

                    $gm->SetMapWidth(345); # default = 300

                    $gm->SetMapHeight(300); # default = 300

                    $this->set('gm',$gm); 

                }

                

                $this->set('gmkey',$projectDetails['Project']['googlemapskey']); 

                

            } else {



                $coupondata = $this->Coupon->find('all',array("conditions"=>$condition,'limit' => $eventlimit, 'page' => 1));

				$this->set('coupondata',$coupondata);

            }

			

			$this->set('eventlimit',$eventlimit);  

			$this->set('eventoffset',10);   

			

            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $this->set('meta_title',$projectDetails['Project']['sitename']);

            $this->set('page_title',$projectDetails['Project']['sitename']);



        }

        

         function iframeblog($p_id='1',$p_name=null,$bloglimit=10, $blogid=null){



            //Configure::write('debug', 2);    



            $this->layout= 'iframelayout';

            $datastyle=$this->getstyles();

            $this->Session->delete('styledata');

            $this->set('styledata',$datastyle);

            $this->Session->write("styledata",$datastyle);

            

            $this->set('page_url','iframeblog');

            

            

            $project_id=$p_id;

            $projectDetails=$this->getprojectdetails($project_id);   

            $this->set('project',$projectDetails);

            

            if($projectDetails)

            {

                $this->Session->delete('projectwebsite_id');

                $this->Session->delete('projectwebsite_name');

                $project_name=$projectDetails['Project']['project_name'];

                $this->set('project_id',$project_id);    

                $this->set('project_name',$project_name);    

                // Check User Login for different projects End

                $this->Session->write('projectwebsite_id', $project_id);

                $this->Session->write('projectwebsite_name',$project_name );

                

                //$_SESSION['projectwebsite_id']=$projectDetails['Project']['id'];

                if(empty($project_name)) $this->redirect('/companies/session_expired');

                

            }



            //$username = $this->Session->read("User.User.username");

            //$this->set('username',$username);



            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain); 



            ##import blog  model for processing

            App::import("Model", "Blog");



            $this->Blog =  & new Blog();   



            $condition = "project_id = '".$projectDetails['Project']['id']."' and  active_status='1' and delete_status='0'";

            if($blogid!=null && $blogid > 0) {

                // Show specific blog

                $condition.= " and id = '".$blogid."' ";

                $blogdata = $this->Blog->find('first',array("conditions"=>$condition));

                $this->set('blogdata',$blogdata);  

            }else{



                // Show blog list 

                $blogquery="Select Blog.*, (SELECT count(1) from blog_comments where blog_id=Blog.id) as commentcount from blogs Blog where ".$condition." order by Blog.created desc limit 0,".$bloglimit;

                $bloglist = $this->Blog->query($blogquery);

                // echo "<pre>"; print_r($bloglist); echo "</pre>";   exit;

                // find('all',array("conditions"=>$condition, 'order' =>'created desc', 'limit' => $bloglimit, 'page' => 1)); 

                $this->set('bloglist',$bloglist);

                $this->set('bloglimit',$bloglimit);  

                $this->set('blogoffset',10);   

            }





            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $this->set('meta_title',$projectDetails['Project']['sitename']);

            $this->set('page_title',$projectDetails['Project']['sitename']);



        }

        

        

        

         function iframechat($p_id='1',$p_name=null){



            // Configure::write('debug', 2);    

          //  $this->session_check_user();

            $this->layout= 'iframelayout';

            $datastyle=$this->getstyles();

            $this->Session->delete('styledata');

            $this->set('styledata',$datastyle);

            $this->Session->write("styledata",$datastyle);

            

            $this->set('page_url','iframechat');

            

            

            $project_id=$p_id;

            $projectDetails=$this->getprojectdetails($project_id);   

            $this->set('project',$projectDetails);

            

            if($projectDetails)

            {

                $this->Session->delete('projectwebsite_id');

                $this->Session->delete('projectwebsite_name');

                $project_name=$projectDetails['Project']['project_name'];

                $this->set('project_id',$project_id);    

                $this->set('project_name',$project_name);    

                // Check User Login for different projects End

                $this->Session->write('projectwebsite_id', $project_id);

                $this->Session->write('projectwebsite_name',$project_name );

                

                //$_SESSION['projectwebsite_id']=$projectDetails['Project']['id'];

                if(empty($project_name)) $this->redirect('/companies/session_expired');

                

            }

            

            $current_domain= $_SERVER['HTTP_HOST'];  

            $userid = $this->Session->read("User.User.id");  

            $this->set('userid',$userid);

            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);

    

            if($username){

                // Get user sessiond details 

                

                $user = $this->Session->read("User"); 

                // Check logged in user joined chat or not

                $condition = " User.id = '".$userid."' and User.delete_status='0' ";

                $userDetails = $this->User->find('first', array('conditions' => $condition, 'recursive' => 0));   

                $user_is_chatjoined= $userDetails['User']['is_chatjoined'];

                $this->set('user_is_chatjoined',$user_is_chatjoined);

                

                $userDetails['User']['last_login']=date("Y-m-d H:i:s");

                $userDetails['User']['is_loggedin']='1';

                $this->User->save($userDetails);

                

            }

            else

            {

                $this->redirect('http://'.$current_domain."/companies/iframelogin/".$project_id."/".$project_name."/chat");

            }

            

            

            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain); 



            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $this->set('meta_title',$projectDetails['Project']['sitename']);

            $this->set('page_title',$projectDetails['Project']['sitename']);



        }

        

        



        /*******************************************************************

        * Function Name: Iframelogin

        * Function Arguments: two

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 jul, 2011

        ********************************************************************/

        function iframecomment($frid=null,$prname=null){



		    $this->layout= 'iframelayout';

            $this->set('page_url','iframecomment');

                        //for active menu display

            $this->set('page_url','registeruser');

            $project_id=$frid;

            $projectDetails=$this->getprojectdetails($project_id);   

            $this->set('project',$projectDetails);     

			

            if($projectDetails){

			

                $this->Session->delete('projectwebsite_id');

                $this->Session->delete('projectwebsite_name');

                $project_name=$projectDetails['Project']['project_name'];

                $this->set('project_id',$project_id);    

                $this->set('project_name',$project_name);    

								

                // Check User Login for different projects End

                $this->Session->write('projectwebsite_id', $project_id);

                $this->Session->write('projectwebsite_name',$project_name );

                

                //$_SESSION['projectwebsite_id']=$projectDetails['Project']['id'];

                if(empty($project_name)) $this->redirect('/companies/session_expired');

               

            

                if($_SERVER['HTTP_HOST']=="192.168.1.225:8219")

                    $gmapapi="ABQIAAAAG9lOO_euEJeiZ69PkboU1xSOmCQh5bx71JQK74sG7wZ4eJrCjhQC6CmXjC2HZwl7dKR4G71xu3p-qQ";

                else

                    if($_SERVER['HTTP_HOST']=="75.125.190.162:9085")

                        $gmapapi ="ABQIAAAAG9lOO_euEJeiZ69PkboU1xQS7PAHfPFNfuyLJ21IhiM4-TUrkRSkk4S5WCyv5oLQZlQ21uKrmLDq3Q";

                    else

                        $gmapapi = $projectDetails['Project']['googlemapskey'];

				

                $this->set('gmap',$gmapapi);



                $this->set('searchresult',"");

				

               if(isset($this->data)){ 

				 	

                    $coinholder_ids= $this->CoinsHolder->find('all', array('conditions' => "CoinsHolder.serialnum  ='".trim($this->data['Company']['coinset'])."'",'fields'=>'id'));

					

                    if(is_array($coinholder_ids) && !empty($coinholder_ids)) {

                        $coinholder_ids1="";

                        foreach ($coinholder_ids as $coinholder_id){

                            if($coinholder_ids1=="")

                                $coinholder_ids1=$coinholder_id['CoinsHolder']['id'];

                            else

                                $coinholder_ids1.=",".$coinholder_id['CoinsHolder']['id'];

                        }           



                        $condition1="Comment.project_id='".$project_id."' and Comment.coin_holder_id in (".$coinholder_ids1.")  and Comment.offensive='0' and Comment.active_status='1' and Comment.delete_status='0'";



                        //$condition="Comment.project_id='".$project_id."' and Comment.offensive='0' and Comment.offensiveedit='0' and Comment.active_status='1' and Comment.delete_status='0'";

                        $field      = '';       

                        $order      = array('Comment.created DESC');

                        $comments = $this->Comment->find('all',array('conditions' => $condition1, 'fields' => $field, 'order' =>$order));

                        $this->set('comments',$comments);           

                    }

                    $this->set('searchresult',"yes");

                    $this->set('coinserial',$this->data['Company']['coinset']);

                }else

                {

				 	

                }                

            }



        }



            function iframes(){    

                           ##check user session live or not

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';        

            //for active menu display

            $this->set('page_url','eventpending');

            $projectid=$this->Session->read("projectwebsite_id");    

            $this->set("projectid",$projectid);

            $projectname=$this->Session->read("projectwebsite_name");    



            if(empty($projectname)) $this->redirect('/companies/session_expired');



                $prodtl = $this->projectdetailbyid($projectid);

                $projectname = $prodtl[0]['Project']['project_name'];

                $this->set("projectname",$projectname);

                

                

                App::import("Model", "ProjectGraphic");

                $this->ProjectGraphic =   & new ProjectGraphic();    

                #set the posted data

                ##check empty data

                if(!empty($this->data)) {

                    ##Show Option Page Graphic:

                        $conditions = "ProjectGraphic.project_id = '".$projectid."' AND  ProjectGraphic.delete_status = '0'";

                        $proj_grap_arr =  $this->ProjectGraphic->find("all",array('conditions'=>$conditions));

                        if(count($proj_grap_arr) > 0)

                        {

                            $this->ProjectGraphic->deleteAll($conditions, $cascade = true);

                        }



                        // For linkedin

                        if((isset($this->data['Companies']['imagenameold_link']['name']) && $this->data['Companies']['imagenameold_link']['name'] !='') || (isset($this->data['ProjectGraphic']['image_link']) && $this->data['ProjectGraphic']['image_link'] !='' && $this->data['Companies']['activestatus_link']==1)){

                            if(isset($this->data['Companies']['imagenameold_link']['name']) && $this->data['Companies']['imagenameold_link']['name'] !='') {

                                $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                                $this->File->setDestPath($filePath);

                                    

                                $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_link']['name']); 

                                $tmp1 = $this->data['Companies']['imagenameold_link']['tmp_name'];

                                $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33');

                            } else {

                                $fileNamesidea = $this->data['ProjectGraphic']['image_link'];

                            }



                            $this->data1['ProjectGraphic']['project_id'] = $projectid;

                            $this->data1['ProjectGraphic']['title'] = $this->data['Companies']['title_link'];

                            $this->data1['ProjectGraphic']['imagename'] = $fileNamesidea;

                            $this->data1['ProjectGraphic']['address'] = $this->data['Companies']['address_link'];



                            if(isset($this->data['Companies']['activestatus_link']) && $this->data['Companies']['activestatus_link']==1)

                                $this->data1['ProjectGraphic']['active_status'] = 1;

                            else

                                $this->data1['ProjectGraphic']['active_status'] = 0;



                            $this->ProjectGraphic->Save($this->data1['ProjectGraphic']);

                            $this->Session->setFlash('Social network added successfully.','default', array('class' => 'successmsg'));







                            

                        }

                        // For Facebook

                        unset($this->ProjectGraphic);

                        App::import('Model','ProjectGraphic');

                        $this->ProjectGraphic = new ProjectGraphic();

                        if((isset($this->data['Companies']['imagenameold_face']['name']) && $this->data['Companies']['imagenameold_face']['name'] !='') || (isset($this->data['ProjectGraphic']['image_face']) && $this->data['ProjectGraphic']['image_face'] !='' && $this->data['Companies']['activestatus_face']==1)){

                            if(isset($this->data['Companies']['imagenameold_face']['name']) && $this->data['Companies']['imagenameold_face']['name'] !='') {

                                $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                                $this->File->setDestPath($filePath);

                                    

                                $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_face']['name']); 

                                $tmp1 = $this->data['Companies']['imagenameold_face']['tmp_name'];

                                $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                            } else {

                                $fileNamesidea = $this->data['ProjectGraphic']['image_face'];

                            }



                            $this->data['ProjectGraphic']['project_id'] = $projectid;

                            $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_face'];

                            $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                            $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_face'];



                            if(isset($this->data['Companies']['activestatus_face']) && $this->data['Companies']['activestatus_face']==1)

                                $this->data1['ProjectGraphic']['active_status'] = 1;

                            else

                                $this->data1['ProjectGraphic']['active_status'] = 0;



                            $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                        }

                         // For Twitter

                          unset($this->ProjectGraphic);

                          App::import('Model','ProjectGraphic');

                          $this->ProjectGraphic = new ProjectGraphic();

                          if((isset($this->data['Companies']['imagenameold_twit']['name']) && $this->data['Companies']['imagenameold_twit']['name'] !='') || (isset($this->data['ProjectGraphic']['image_twit']) && $this->data['ProjectGraphic']['image_twit'] !='' && $this->data['Companies']['activestatus_twit']==1)){

                              if(isset($this->data['Companies']['imagenameold_twit']['name']) && $this->data['Companies']['imagenameold_twit']['name'] !='') {

                                  $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                                  $this->File->setDestPath($filePath);

                                      

                                  $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_twit']['name']); 

                                  $tmp1 = $this->data['Companies']['imagenameold_twit']['tmp_name'];

                                  $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                              } else {

                                  $fileNamesidea = $this->data['ProjectGraphic']['image_twit'];

                              }



                              $this->data['ProjectGraphic']['project_id'] = $projectid;

                              $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_twit'];

                              $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                              $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_twit'];



                              if(isset($this->data['Companies']['activestatus_twit']) && $this->data['Companies']['activestatus_twit']==1)

                                  $this->data1['ProjectGraphic']['active_status'] = 1;

                              else

                                  $this->data1['ProjectGraphic']['active_status'] = 0;



                              $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                          }

                        //For Donation

                        unset($this->ProjectGraphic);

                        App::import('Model','ProjectGraphic');

                        $this->ProjectGraphic = new ProjectGraphic();



                        if((isset($this->data['Companies']['imagenameold_don']['name']) && $this->data['Companies']['imagenameold_don']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don']) && $this->data['ProjectGraphic']['image_don'] !='' && $this->data['Companies']['activestatus_don']==1)){

                            if(isset($this->data['Companies']['imagenameold_don']['name']) && $this->data['Companies']['imagenameold_don']['name'] !='') {

                                $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                                $this->File->setDestPath($filePath);

                                    

                                $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don']['name']); 

                                $tmp1 = $this->data['Companies']['imagenameold_don']['tmp_name'];

                                $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                            } else {

                                $fileNamesidea = $this->data['ProjectGraphic']['image_don'];

                            }



                            $this->data['ProjectGraphic']['project_id'] = $projectid;

                            $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don'];

                            $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                            $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don'];



                            if(isset($this->data['Companies']['activestatus_don']) && $this->data['Companies']['activestatus_don']==1)

                                $this->data1['ProjectGraphic']['active_status'] = 1;

                            else

                                $this->data1['ProjectGraphic']['active_status'] = 0;





                            $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                        }

                

                      //For Donation1

                         unset($this->ProjectGraphic);

                         App::import('Model','ProjectGraphic');

                         $this->ProjectGraphic = new ProjectGraphic();

         

                         if((isset($this->data['Companies']['imagenameold_don1']['name']) && $this->data['Companies']['imagenameold_don1']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don1']) && $this->data['ProjectGraphic']['image_don1'] !='' && $this->data['Companies']['activestatus_don1']==1)){

                             if(isset($this->data['Companies']['imagenameold_don1']['name']) && $this->data['Companies']['imagenameold_don1']['name'] !='') {

                                 $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                                 $this->File->setDestPath($filePath);

                                     

                                 $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don1']['name']); 

                                 $tmp1 = $this->data['Companies']['imagenameold_don1']['tmp_name'];

                                 $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                             } else {

                                 $fileNamesidea = $this->data['ProjectGraphic']['image_don'];

                             }

         

                             $this->data['ProjectGraphic']['project_id'] = $projectid;

                             $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don1'];

                             $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                             $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don1'];

         

                             if(isset($this->data['Companies']['activestatus_don1']) && $this->data['Companies']['activestatus_don1']==1)

                                 $this->data1['ProjectGraphic']['active_status'] = 1;

                             else

                                 $this->data1['ProjectGraphic']['active_status'] = 0;

         

         

                             $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                        }

                          //For Donation2

                         unset($this->ProjectGraphic);

                         App::import('Model','ProjectGraphic');

                         $this->ProjectGraphic = new ProjectGraphic();

         

                         if((isset($this->data['Companies']['imagenameold_don2']['name']) && $this->data['Companies']['imagenameold_don2']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don2']) && $this->data['ProjectGraphic']['image_don2'] !='' && $this->data['Companies']['activestatus_don2']==1)){

                             if(isset($this->data['Companies']['imagenameold_don2']['name']) && $this->data['Companies']['imagenameold_don2']['name'] !='') {

                                 $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                                 $this->File->setDestPath($filePath);

                                     

                                 $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don2']['name']); 

                                 $tmp1 = $this->data['Companies']['imagenameold_don2']['tmp_name'];

                                 $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                             } else {

                                 $fileNamesidea = $this->data['ProjectGraphic']['image_don'];

                             }

         

                             $this->data['ProjectGraphic']['project_id'] = $projectid;

                             $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don2'];

                             $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                             $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don2'];

         

                             if(isset($this->data['Companies']['activestatus_don2']) && $this->data['Companies']['activestatus_don2']==1)

                                 $this->data1['ProjectGraphic']['active_status'] = 1;

                             else

                                 $this->data1['ProjectGraphic']['active_status'] = 0;

         

         

                             $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                        }

                        //For Donation3

                         unset($this->ProjectGraphic);

                         App::import('Model','ProjectGraphic');

                         $this->ProjectGraphic = new ProjectGraphic();

         

                         if((isset($this->data['Companies']['imagenameold_don3']['name']) && $this->data['Companies']['imagenameold_don3']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don3']) && $this->data['ProjectGraphic']['image_don3'] !='' && $this->data['Companies']['activestatus_don3']==1)){

                             if(isset($this->data['Companies']['imagenameold_don3']['name']) && $this->data['Companies']['imagenameold_don3']['name'] !='') {

                                 $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                                 $this->File->setDestPath($filePath);

                                     

                                 $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don3']['name']); 

                                 $tmp1 = $this->data['Companies']['imagenameold_don3']['tmp_name'];

                                 $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                             } else {

                                 $fileNamesidea = $this->data['ProjectGraphic']['image_don'];

                             }

         

                             $this->data['ProjectGraphic']['project_id'] = $projectid;

                             $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don3'];

                             $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                             $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don3'];

         

                             if(isset($this->data['Companies']['activestatus_don3']) && $this->data['Companies']['activestatus_don3']==1)

                                 $this->data1['ProjectGraphic']['active_status'] = 1;

                             else

                                 $this->data1['ProjectGraphic']['active_status'] = 0;

                             $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                        }



                    //For Donation3

                         unset($this->ProjectGraphic);

                         App::import('Model','ProjectGraphic');

                         $this->ProjectGraphic = new ProjectGraphic();

         

                         if((isset($this->data['Companies']['imagenameold_don4']['name']) && $this->data['Companies']['imagenameold_don4']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don4']) && $this->data['ProjectGraphic']['image_don4'] !='' && $this->data['Companies']['activestatus_don4']==1)){

                             if(isset($this->data['Companies']['imagenameold_don4']['name']) && $this->data['Companies']['imagenameold_don4']['name'] !='') {

                                 $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                                 $this->File->setDestPath($filePath);

                                     

                                 $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don4']['name']); 

                                 $tmp1 = $this->data['Companies']['imagenameold_don4']['tmp_name'];

                                 $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                             } else {

                                 $fileNamesidea = $this->data['ProjectGraphic']['image_don'];

                             }

         

                             $this->data['ProjectGraphic']['project_id'] = $projectid;

                             $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don4'];

                             $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                             $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don4'];

         

                             if(isset($this->data['Companies']['activestatus_don4']) && $this->data['Companies']['activestatus_don4']==1)

                                 $this->data1['ProjectGraphic']['active_status'] = 1;

                             else

                                 $this->data1['ProjectGraphic']['active_status'] = 0;

                             $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                        }



                    //For Donation4

                         unset($this->ProjectGraphic);

                         App::import('Model','ProjectGraphic');

                         $this->ProjectGraphic = new ProjectGraphic();

         

                         if((isset($this->data['Companies']['imagenameold_don5']['name']) && $this->data['Companies']['imagenameold_don5']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don5']) && $this->data['ProjectGraphic']['image_don5'] !='' && $this->data['Companies']['activestatus_don4']==1)){

                             if(isset($this->data['Companies']['imagenameold_don5']['name']) && $this->data['Companies']['imagenameold_don5']['name'] !='') {

                                 $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                                 $this->File->setDestPath($filePath);

                                     

                                 $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don5']['name']); 

                                 $tmp1 = $this->data['Companies']['imagenameold_don5']['tmp_name'];

                                 $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                             } else {

                                 $fileNamesidea = $this->data['ProjectGraphic']['image_don'];

                             }

         

                             $this->data['ProjectGraphic']['project_id'] = $projectid;

                             $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don5'];

                             $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                             $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don5'];

         

                             if(isset($this->data['Companies']['activestatus_don5']) && $this->data['Companies']['activestatus_don5']==1)

                                 $this->data1['ProjectGraphic']['active_status'] = 1;

                             else

                                 $this->data1['ProjectGraphic']['active_status'] = 0;

                             $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                        }



                        //For Donation5

                         unset($this->ProjectGraphic);

                         App::import('Model','ProjectGraphic');

                         $this->ProjectGraphic = new ProjectGraphic();

         

                         if((isset($this->data['Companies']['imagenameold_don6']['name']) && $this->data['Companies']['imagenameold_don6']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don6']) && $this->data['ProjectGraphic']['image_don6'] !='' && $this->data['Companies']['activestatus_don4']==1)){

                             if(isset($this->data['Companies']['imagenameold_don6']['name']) && $this->data['Companies']['imagenameold_don6']['name'] !='') {

                                 $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                                 $this->File->setDestPath($filePath);

                                     

                                 $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don6']['name']); 

                                 $tmp1 = $this->data['Companies']['imagenameold_don6']['tmp_name'];

                                 $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                             } else {

                                 $fileNamesidea = $this->data['ProjectGraphic']['image_don'];

                             }

         

                             $this->data['ProjectGraphic']['project_id'] = $projectid;

                             $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don6'];

                             $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                             $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don6'];

         

                             if(isset($this->data['Companies']['activestatus_don6']) && $this->data['Companies']['activestatus_don6']==1)

                                 $this->data1['ProjectGraphic']['active_status'] = 1;

                             else

                                 $this->data1['ProjectGraphic']['active_status'] = 0;

                             $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                        }  

                    //For Donation6

                         unset($this->ProjectGraphic);

                         App::import('Model','ProjectGraphic');

                         $this->ProjectGraphic = new ProjectGraphic();

         

                         if((isset($this->data['Companies']['imagenameold_don7']['name']) && $this->data['Companies']['imagenameold_don7']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don7']) && $this->data['ProjectGraphic']['image_don7'] !='' && $this->data['Companies']['activestatus_don4']==1)){

                             if(isset($this->data['Companies']['imagenameold_don7']['name']) && $this->data['Companies']['imagenameold_don7']['name'] !='') {

                                 $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                                 $this->File->setDestPath($filePath);

                                     

                                 $file_name1 = $this->File->setFileName($this->data['Companies']['imagenameold_don7']['name']); 

                                 $tmp1 = $this->data['Companies']['imagenameold_don7']['tmp_name'];

                                 $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                             } else {

                                 $fileNamesidea = $this->data['ProjectGraphic']['image_don'];

                             }

         

                             $this->data['ProjectGraphic']['project_id'] = $projectid;

                             $this->data['ProjectGraphic']['title'] = $this->data['Companies']['title_don7'];

                             $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                             $this->data['ProjectGraphic']['address'] = $this->data['Companies']['address_don7'];

         

                             if(isset($this->data['Companies']['activestatus_don7']) && $this->data['Companies']['activestatus_don7']==1)

                                 $this->data1['ProjectGraphic']['active_status'] = 1;

                             else

                                 $this->data1['ProjectGraphic']['active_status'] = 0;

                             $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                        }

                      //For Donation7

                         unset($this->ProjectGraphic);

                         App::import('Model','ProjectGraphic');

                         $this->ProjectGraphic = new ProjectGraphic();

         

                         if((isset($this->data['Admins']['imagenameold_don8']['name']) && $this->data['Admins']['imagenameold_don8']['name'] !='') || (isset($this->data['ProjectGraphic']['image_don8']) && $this->data['ProjectGraphic']['image_don8'] !='' && $this->data['Admins']['activestatus_don4']==1)){

                             if(isset($this->data['Admins']['imagenameold_don8']['name']) && $this->data['Admins']['imagenameold_don8']['name'] !='') {

                                 $filePath =  'img' . DS . $projectname . DS.'uploads' ;

                                 $this->File->setDestPath($filePath);

                                     

                                 $file_name1 = $this->File->setFileName($this->data['Admins']['imagenameold_don8']['name']); 

                                 $tmp1 = $this->data['Admins']['imagenameold_don8']['tmp_name'];

                                 $fileNamesidea = $this->File->uploadlogo($file_name1,$tmp1,true,'33x33'); 

                             } else {

                                 $fileNamesidea = $this->data['ProjectGraphic']['image_don'];

                             }

         

                             $this->data['ProjectGraphic']['project_id'] = $projectid;

                             $this->data['ProjectGraphic']['title'] = $this->data['Admins']['title_don8'];

                             $this->data['ProjectGraphic']['imagename'] = $fileNamesidea;

                             $this->data['ProjectGraphic']['address'] = $this->data['Admins']['address_don8'];

         

                             if(isset($this->data['Admins']['activestatus_don8']) && $this->data['Admins']['activestatus_don8']==1)

                                 $this->data1['ProjectGraphic']['active_status'] = 1;

                             else

                                 $this->data1['ProjectGraphic']['active_status'] = 0;

                             $this->ProjectGraphic->Save($this->data['ProjectGraphic']);

                        }



                      }

                      $conditiongra = "ProjectGraphic.project_id='$projectid' AND  ProjectGraphic.delete_status='0'";

                      //$conditiongra = "ProjectGrap$socialiconshic.project_id='$projectid' AND  ProjectGraphic.delete_status='0'";    

                      $graphicarr = $this->ProjectGraphic->find('all',array("conditions"=>$conditiongra,'order'=>'ProjectGraphic.id ASC'));

                      $this->set('graphiclist',$graphicarr);





                            # set help condition



                App::import("Model", "HelpContent");



                $this->HelpContent =  & new HelpContent();



                $condition = "HelpContent.id = '52'";  



                $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



                $this->set("hlpdata",$hlpdata);



                # set help condition   

        }



        

        

        

        

        /*******************************************************************

        * Function Name: suggestedlist

        * Function Arguments: two

        * Function Return: (array)

        * Purpose:

        * Created By      : SDN

        * Created: 16 jul, 2011

        ********************************************************************/







        function suggestedlist() {    



            

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';    



            //for active menu display

            $this->set('page_url','edit_project_detail');



            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");



                        App::import("Model", "Project");

            $this->Project =   & new Project();

            $this->set("project_id",$projectid);



            App::import("Model", "Sponsor");

            $sponsor =   & new Sponsor();

            App::import("Model", "User");

            $user =   & new User();



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '36'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



            App::import("Model", "ProjectType");

            $this->ProjectType =   & new ProjectType();



            //if(empty($project_name)) $this->redirect('/companies/session_expired');

            //             

            //$this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($projectid);



            $this->set('project',$projectDetails);    

            

            App::import("Model", "CommentType");

            $this->CommentType =   & new CommentType();

           

            $userid = $this->Session->read("User.User.id");

            ##check empty data

            if(!empty($this->data)) {



                //$this->data['Project']['id']=$projectid;



                /*    if($this->Project->Save($this->data['Project']))

                {

                $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));

                } */



                #set the posted data

                //$this->Project->set($this->data);

                #check server side validation

                //$errormsg = $this->Project->invalidFields();

                //             if(!$errormsg){



                if(!empty($this->data['ProjectType'])) {

                    //print_r($this->data);print $project_name;exit;

                    #set the posted data

                    $this->ProjectType->set($this->data['ProjectType']);

                    #check server side validation



                    $this->ProjectType->invalidFields();

                    #save data in project type table

                    $recid  = $this->data['ProjectType']['id'];

                    $ptname  = $this->data['ProjectType']['project_type_name'];

                    $condition = "ProjectType.id !=$recid AND  ProjectType.delete_status = '0'";

                    $ptdata = $this->ProjectType->find('all',array("conditions"=>$condition));

                    //print_r($this->data);exit;

                    if(!empty($ptdata)){



                        if($recid !=''){

                          $saveflag=true;

                       

                            if($this->ProjectType->Save($this->data['ProjectType'])){

                                $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));

                                if($this->data['ProjectType']['maxnumbercomment']>1)

                                {

                                     // unset sequence first

                                    $this->CommentType->query("UPDATE comment_types SET sequence_id = 0 WHERE project_id = '".$projectid."'");

                                    

                                    App::import("Model", "ProjectCommentType");

                                    $this->ProjectCommentType =   & new ProjectCommentType();

                                    for($i=0;$i<=$this->data['ProjectType']['maxnumbercomment'];$i++){

                                        

                                        if($this->data['ProjectType']['commenttypeoption'.$i]>0){

                                            // set sequence at comment type

                                             unset($this->data['CommentType']);

                                              $this->data['CommentType']['id']=$this->data['ProjectType']['commenttypeoption'.$i];

                                              $this->data['CommentType']['sequence_id']=$i;

                                              if($this->CommentType->Save($this->data['CommentType'])){    

                                                    $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));

                                              }else{

                                                $saveflag=false;

                                             }

                                            

                                            

                                            

                                            unset($this->data['ProjectCommentType']);

                                            $this->ProjectCommentType->create();

                                            $comment_type_id = $this->ProjectCommentType->find('first',array("conditions"=>"ProjectCommentType.project_type_id=$recid and ProjectCommentType.sequence_id=".$i." and ProjectCommentType.active_status='1' and ProjectCommentType.delete_status='0'", 'fields' =>"id"));

                                            if(is_array($comment_type_id) && !empty($comment_type_id))

                                            {

                                                $this->data['ProjectCommentType']['id']=$comment_type_id['ProjectCommentType']['id'];

                                            }

                                            $this->data['ProjectCommentType']['sequence_id']=$i;

                                            $this->data['ProjectCommentType']['comment_type_id']=$this->data['ProjectType']['commenttypeoption'.$i];

                                            $this->data['ProjectCommentType']['project_type_id']=$this->data['ProjectType']['id'];

                                            if($this->ProjectCommentType->Save($this->data['ProjectCommentType'])){    

                                                $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));

                                            }else{

                                                $saveflag=false;

                                            }

                                        }

                                    }



                                }

                                unset($this->data['CommentType']);

                                 if($this->data['ProjectType']['additional_comment']==1)

                                {

                                    $allowed_additional_comment_id=$this->data['ProjectType']['additionalcomment'];

                                    App::import("Model", "CommentType");

                                    $this->CommentType =   & new CommentType();

                                    // Select previously set additional comment id

                                     $condition = "CommentType.project_id ='$projectid' AND  CommentType.is_additional_allowed = '1'";

                                     $commenttypedata = $this->CommentType->find('first',array("conditions"=>$condition));

                                     $setnewid=false;

                                     if($commenttypedata){

                                         if($commenttypedata['CommentType']['id']!=$allowed_additional_comment_id){

                                              // Unset previously set additional comment id

                                                $this->CommentType->id =$commenttypedata['CommentType']['id'];

                                                $this->data = $this->CommentType->read();

                                                $this->data['CommentType']['is_additional_allowed']='0';

                                              if($this->CommentType->Save($this->data['CommentType'])){

                                                  // Set new addtional comment flag true

                                                  $setnewid=true;

                                              }



                                            

                                         }else{

                                             $setnewid=false;

                                             $this->data['CommentType']['id']=$commenttypedata['CommentType']['id']  ;

                                             $this->data['CommentType']['sequence_id']='1000';

                                             $this->CommentType->Save($this->data['CommentType']);

                                         }

                                      

                                     }else{

                                         // Set new addtional comment flag true

                                         $setnewid=true;

                                     }

                                     

                                     if($setnewid){

                                          // Set new addtional comment type id

                                          $this->CommentType->id =$allowed_additional_comment_id;

                                          $this->data = $this->CommentType->read();

                                          $this->data['CommentType']['is_additional_allowed']='1';

                                          $this->data['CommentType']['sequence_id']='1000';

                                              if($this->CommentType->Save($this->data['CommentType'])){

                                                   $this->Session->setFlash('Allow additional comment has beed saved.','default', array('class' => 'successmsg'));

                                              }else{

                                                $saveflag=false;

                                            } 

                                           

                                     }

                             

                                    

                                }

                                

                                if($saveflag==true){

                                    $this->Session->setFlash('Control information has been saved.','default', array('class' => 'successmsg'));

                                }else{

                                     $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));

                                }

                                //$this->Session->setFlash('Project Type updated Successfully.','default', array('class' => 'successmsg'));



                            }else{

                                $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));



                            }

                        }else{

                            $this->Session->setFlash('Invalid attempt for update.','default',array('class' => 'msgTXt'));

                        }

                    }else{



                        $this->Session->setFlash('Project Type with same name already exists.','default',array('class' => 'msgTXt'));

                    }

                    //$this->redirect("/companies/editprojectdtl");

                }else{



                        $recid = $this->data['Project']['project_type_id'];

                        $this->ProjectType->id = $recid;

                        //$this->data = $this->ProjectType->read();

                        $this->set("ProjectTypeId", $recid);

                    }                



                    if(isset($this->data['Action']['redirectpage'])){

                        $this->redirect('/companies/suggestedlist');

                    }else{

                        $this->redirect('/companies/suggestedlist');

                    }



                    //End upload images linke side A side B and logo  }

                }



            



            $this->Project->id = $projectid;

            $this->data = $this->Project->read();



            $project_type_id=$this->data['Project']['project_type_id'];

            App::import("Model", "ProjectType");

            $this->ProjectType =   & new ProjectType();

            $projecttypedetails=$this->ProjectType->find('first',array('conditions'=>"ProjectType.id=$project_type_id")); 





            $this->set('ProjectTypeId',$project_type_id);

            $this->data = array_merge($this->data,$projecttypedetails);

            

            // STEP: Get Maximum number comment types for project

            $condition = "CommentType.project_id='".$projectid."' and CommentType.sequence_id > 0 and CommentType.sequence_id < 1000 and CommentType.active_status='1' and CommentType.delete_status='0' ";

            $maxnumbercomment = $this->CommentType->find('count',array("conditions"=>$condition));

            if($maxnumbercomment){

                

            }else{

                $maxnumbercomment=0;

            }

            

            

            $this->set('maxnumber_comment',$maxnumbercomment);

         



        }

        

        

        function redirectlogout()

        {

            if(!empty($this->Cookie)){

                $pname= $this->Cookie->read('name'); 

                $project_id= $this->Cookie->read('id'); 



                $projectDetails=$this->getprojectdetails($project_id);    

                $logout_redirect=$projectDetails['Project']['logoutredirect'];



                //if logout redirect is set





                if(!empty($logout_redirect)){



                    $page_content= $this->Content->findById($logout_redirect);



                    $current_domain= $_SERVER['HTTP_HOST'];



                    /*for home page redirect*/

                    if($page_content['Content']['internal_alias']=='home-page'){

                        if(($current_domain=='www.coins4promo.com'|| $current_domain="coins4promo.com" || $current_domain=="192.168.1.225:8219") )

                        {



                            if(!empty($projectDetails['Project']['system_name']))



                                $this->redirect('/'.$projectDetails['Project']['system_name']);

                        }else{



                            $this->redirect('/');



                        }

                    }

                    /*home  redirect close*/



                    /*for content pages*/





                    $page=$page_content['Content']['internal_alias'];

                    if( $page=='logout' || $page=='login' )

                    {



                        $this->redirect('/companies/'.$page_content['Content']['alias']);



                    }



                    if( $page=='register' )

                    {



                        $this->redirect('/companies/user_register');



                    }



                    /* content*/

                    $this->redirect('/'.$page_content['Content']['alias']);



                }else { 

                    if(($current_domain=='www.coins4promo.com'|| $current_domain="coins4promo.com" || $current_domain=="192.168.1.225:8219"||$current_domain=="test.coins4promo") )

                        $this->redirect('/'.$projectDetails['Project']['project_name']);

                    else

                        $this->redirect('/');

                }

            }else {



                $this->redirect('/companies/session_expired');

            }













        }



        function __getlink(){



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");

            $projectDetails=$this->getprojectdetails($project_id);    

            $coin_redirect=$projectDetails['Project']['coin_redirect'];



            //if logout redirect is set

			 $current_domain= $_SERVER['HTTP_HOST'];



            if(!empty($coin_redirect)){



                $page_content= $this->Content->findById($coin_redirect);



                /*for home page redirect*/

                if($page_content['Content']['internal_alias']=='home-page'){

                    if(($current_domain=='www.coins4promo.com'|| $current_domain="coins4promo.com" || $current_domain=="192.168.1.225:8219") )

                    {

                        if(!empty($projectDetails['Project']['project_name']))

                            return '/'.$projectDetails['Project']['project_name'];

                    }else{

                       $this->redirect('/');

                    }

                }

                /*home  redirect close*/



                /*for content pages*/





                $page=$page_content['Content']['internal_alias'];

                if( $page=='logout' || $page=='login' )

                {



                    return '/companies/'.$page_content['Content']['alias'];



                }



                if( $page=='register' )

                {



                    return '/companies/user_register';



                }



                /* content*/

                return '/'.$page_content['Content']['alias'];



            }else { 

                if(($current_domain=='www.coins4promo.com'|| $current_domain="coins4promo.com" || $current_domain=="192.168.1.225:8219"||$current_domain=="test.coins4promo") )

                    return '/'.$projectDetails['Project']['project_name'];

                else

                    return '/';

            }







        }







        function view($commentId, $subcommentId = null)



        {



            $this->layout = false;



            $this->set(compact('commentId', 'subcommentId'));



        }//end view()











        function fbfeeds()



        {

            $this->session_check_user();





            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url','fbfeeds');



            $projectid    = $this->Session->read("projectwebsite_id");    



            $project_name =$this->Session->read("projectwebsite_name");





            $this->set(compact('projectid', 'project_name'));



        }//end view()





        function help($pageId)

        {

            $this->layout = false;

            $hlpdata = ClassRegistry::init('HelpContent')->find('all', array("conditions" => array('HelpContent.id' => $pageId)));

            $this->set(compact('hlpdata'));

        }



        /*

        * Function name   : regcoinset()

        * Description        : The action gettrigured by clicking on "add" button of "editholder" page to                         add coinset

        * Created On      : 22-08-11 (09:35pm)

        *

        */ 



        function regcoinset($holder_id){

            //Configure::write('debug',2);

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';



            // collect project name and project id

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            //    collect user id

            $userid = $this->Session->read("User.User.id");



            //    get project details    

            $projectDetails = $this->getprojectdetails($project_id);



            App::import("Model", "Coinset");

            $this->Coinset =   & new Coinset();



            $condition = " Coinset.project_id='".$project_id."' AND Coinset.startserialnum >= '". $this->data['CoinsHolder']['coinserial'] ."' OR Coinset.endserialnum <= '". $this->data['CoinsHolder']['coinserial'] ."' and Coinset.active_status='1' and Coinset.delete_status='0'";

            $coinsets = $this->Coinset->find('first', array('conditions' => $condition));



            if (is_array($coinsets) and !empty($coinsets)) {

                $coinset_id = $coinsets['Coinset']['id'];

            }

            //print_r($coinsets);exit;

            if(!empty($this->data)){



                //$this->CoinsHolder->invalidFields();

                //print_r($this->data);exit;

                $serz = $this->data['CoinsHolder']['coinserial'];

                $serz=str_pad($serz,7,"0",STR_PAD_LEFT);



                $errorString ='';



                if (trim($this->data['CoinsHolder']['coinserial']) == '') {

                    $errorString .= "Please insert Coin Serial.<br/>";

                } else 

                    if ($projectDetails['Project']['coins_verificationshow'] == 1) {

                        if (trim($this->data['CoinsHolder']['code']) == '') {

                            $errorString .="Please insert code.<br/>";

                        }

                }



                //  Stop Duplicate entry of the coin



                //  Flag for duplicate entry

                $duplicateEntry = false;



                $getCoins = '';

                $coinExits = '';



                App::import("Model", "CoinsHolder");

                $this->CoinsHolder =   & new CoinsHolder();

                $getCoin = $this->CoinsHolder->find('all', array('conditions'=>array('CoinsHolder.holder_id'=>$holder_id)));



                if(!empty($getCoin)){

                    foreach($getCoin as $checkCoin){

                        if($this->data['CoinsHolder']['coinserial'] == $checkCoin['CoinsHolder']['serialnum']){



                            $errorString ="Sorry! Coin already taken.<br/>";



                        } 

                    }

                }



                if (trim($errorString) !='') {

                    $this->Session->setFlash($errorString,'default',array('class' => 'msgTXt'));



                }

                else {



                    $this->data['CoinsHolder']['project_id'] = $project_id;

                    $this->data['CoinsHolder']['coinset_id'] = $coinset_id;

                    $this->data['CoinsHolder']['is_current_holder'] = '1';



                    $this->data['CoinsHolder']['holder_id']=$holder_id;

                    $this->data['CoinsHolder']['serialnum']=$serz;



                    App::import("Model", "CoinsHolder");

                    $this->CoinsHolder =   & new CoinsHolder();

                    // print_r($this->data['CoinsHolder']);exit;

                    if($this->CoinsHolder->save($this->data['CoinsHolder'])){

                        $this->Session->setFlash('The coin registered successfully.','default',array('class' => 'successmsg'));

                        if(isset($this->data['Action']['redirectpage'])){

                            // print_r($this->data['Action']['redirectpage']);exit;



                            $sessdata=$this->Session->read('newsortingby');

                            $this->redirect('/companies/editholder/'.$holder_id);

                        } else {

                            $this->redirect('/companies/editholder/'.$holder_id);

                        }



                    }else{

                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                    }



                }

            }

        }

        

        /**********************************************

        Configuration Menu  -  Points Function

        Sponsor panel

        

        **********************************************/

        

        function points(){

                //Configure::write('debug',2);

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';

            

            //collect project name and project id

            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            //collect user id

            $userid = $this->Session->read("User.User.id");



            //get project details    

            $projectDetails = $this->getprojectdetails($projectid);

            //get project related points information

            $points_info=$this->Point->query("select * , (select point from points where master_points.point_id=points.point_id and project_id='$projectid')as point , 

(select level_value from points where master_points.point_id=points.point_id and project_id='$projectid')as level_value,

(select is_active from points where master_points.point_id=points.point_id and project_id='$projectid')as is_active

from master_points order by master_points.display_order asc");

            

            for($i=0;$i<count($points_info);$i++) 

            {

               $points_info[$i]['points']['point']=$points_info[$i][0]['point']; 

               $points_info[$i]['points']['level_value']=$points_info[$i][0]['level_value'];

               $points_info[$i]['points']['is_active']=$points_info[$i][0]['is_active'];

            }

            

            $this->set("points_info",$points_info);

            

            $points_awards_info=$this->Point->query("select * from points_awards where project_id=$projectid order by id asc");

            $this->set("points_awards_info",$points_awards_info);



            $checkempty = true;

            ##check empty data

            if(!empty($this->data)) {

               $data_arr=$this->data['company'];

                

                 for($i=1;$i<=count($points_info);$i++)                

                 {

                     $check=$data_arr['check_'.$i];

                     $point=$data_arr['point_'.$i];

                     $level=$data_arr['level_'.$i];

                     

                     if($check!=0)

                     {

                        $is_active=1;

                        

                        if($point=="")

                        {

                            $this->Session->setFlash('Please fill value in checked checkbox','default',array('class' => 'msgTXt'));

                            $this->redirect('/companies/points');

                        }

                     }

                     else

                        $is_active=0;

                        

                     if($level!=0)

                     {

                        $level_value=$level;

                        

                     }

                     else

                        $level_value=0;

                        

                     $check_exists=$this->Point->query("select * from points where project_id=$projectid and point_id=$i");

                     

                     if(!empty($check_exists))

                     {

                             $check_exists=$this->Point->query("update points set is_active=$is_active,point= $point,level_value=$level_value where project_id=$projectid and point_id=$i");

                     }

                     else

                            $check_exists=$this->Point->query("insert into points value('',$point,$projectid,$i,$is_active,$level_value) ");

                            

                     

                 }

                 

                 

                 

                  for($i=1;$i<=10;$i++)

                  {

                    $check_award=$data_arr['check_award_'.$i];

                    $point_award=$data_arr['point_award_'.$i];

                    $image=$data_arr['award_image_'.$i];

                    $level="level_".$i;



                    if($check_award!=0)

                    {

                        $is_active=1;



                        if($point_award=="")

                        {

                            $this->Session->setFlash('Please fill value in checked checkbox','default',array('class' => 'msgTXt'));

                            $this->redirect('/companies/points');

                        }

                    }

                    else

                        $is_active=0;







                    $pass_arr=array(); 



                    //---------------------------------image upload



                    if($image["tmp_name"]!="")

                    {



                        if ((($image["type"] == "image/gif") || ($image["type"] == "image/jpeg") || ($image["type"] == "image/png") || ($image["type"] == "image/jpg") || ($image["type"] == "image/pjpeg")) && ($image["size"] < 200000) )

                        {

                            $ext=explode("/",$image["type"]);

                            $ext=$ext[1];



                            $up_dir="img/".$project_name."/points_images/";

                            $filename=$level.".".$ext;



                            if ($image["error"] > 0)

                            {

                                $errorString .="Error Uploading file.Try again.";

                            }

                            else

                            {

                                if (file_exists($up_dir))

                                {



                                    foreach(glob($up_dir.$level.'.*') as $v)        //delete existing files from directory then upload

                                    {

                                        unlink($v);

                                    }

                                    move_uploaded_file($image["tmp_name"],$up_dir.$filename);

                                }

                                else

                                {





                                    mkdir($up_dir, 0777);

                                    move_uploaded_file($image["tmp_name"],$up_dir.$filename);



                                }

                            }

                            $image_url=$up_dir.$filename;

                            $pass_arr['image_url']=$image_url; //upload image url 

                        }

                        else

                        {

                            $errorString .="Invalid File Type or Size";

                            $image_url="";

                        }           

                    }

                    else

                    {

                        $j=$i-1;

                        if($points_awards_info[$j]['points_awards']['related_image']=="")

                        {

                            $image_url="";

                        }

                        else

                        {                          

                            $image_url =$points_awards_info[$j]['points_awards']['related_image'];

                        }

                        

                            

                    }

                    //---------------------------------image upload    

                                                                               

                     

                    $check_exists=$this->Point->query("select * from points_awards where project_id=$projectid and level='$level'");



                    if(!empty($check_exists))

                    {

                        $q=$this->Point->query("update points_awards set is_active=$is_active,points_required='$point_award',related_image='$image_url' where project_id=$projectid and level='$level'");

                    }

                    else

                        $q=$this->Point->query("insert into points_awards value('',$projectid,'$level','$point_award','$image_url',$is_active) ");



                }

                 

                 

                 $this->Session->setFlash('Database updated Successfully.','default', array('class' => 'successmsg'));

                 

                 if(isset($this->data['Action']['redirectpage'])){



                                        $this->redirect('/companies/holderslist');



                                    }else{



                                        $this->redirect('/companies/points');



                                    }

                 



            }

            





        }

        

        

         function top_points(){



            ##Configure::write('debug',3);



            ##check user session live or not



            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';

            

            // collect project name and project id

            $projectid=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            //    collect user id

            $userid = $this->Session->read("User.User.id");

            

            $this->set('current_project_name',$project_name);



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }        





            ##import  Holder  model for processing

            App::import("Model", "Holder");

            $this->Holder =   & new Holder();    



            

            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '3'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition  



            $projectDetails=$this->getprojectdetails($projectid);    



            $this->set('project',$projectDetails);    



            $this->set('project_name',$projectDetails['Project']['project_name']);

            

      

            // STEP : GET ALL TYPES OF MEMBERS OF RELATED PROJECT

            $field='';

            $searchkey=""; 

            if(!empty($this->data))

            {        

               $searchkey=$this->data['Admin']['searchkey'];

            }

            $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 

            $member_type="";  // get all members

            $this->Pagination->total= count($this->Holder->getMemberListByProject($projectid, $member_type,$searchkey));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            if($order == "Holder.id ASC"){

                $order = "totalpoints DESC,Holder.lastnameshow ASC, Holder.firstname ASC";

            }

            $memberlist = $this->Holder->getMemberListByProject($projectid,$member_type,$searchkey,$order, $limit, $page);

            $this->set("memberlist",$memberlist);



        }

        

        

        

         function points_detail(){



            ##Configure::write('debug',3);



            ##check user session live or not



            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';



            // collect project name and project id

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            //    collect user id

            $userid = $this->Session->read("User.User.id");

       

            $this->set('current_project_name',$project_name);

            $this->set('project_id',$project_id);



            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }        





            ##import  Holder  model for processing

            App::import("Model", "Holder");

            $this->Holder =   & new Holder();    



            //for active menu display



            $this->set('page_url',"coinsetlist");





            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '3'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition  



            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);    



            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    



            $field='';



            if(!empty($this->data))



            {        

                $val=$this->data['Companies']['searchkey']; 

                $condition = "PointArchiveUser.project_id = '$projectid' and PointArchiveUser.member_id IN (select user_id from holders where firstname like '%$val%' or lastnameshow like '%$val%' or screenname like '%$val%')";   

            } 



            else



            {

               $condition = "PointArchiveUser.project_id = '$projectid' and PointArchiveUser.member_id IN  (SELECT id FROM users where delete_status='0')";

            }

            

             

            $this->Pagination->sortByClass    = 'PointArchiveUser'; ##initaite pagination             



            $this->Pagination->total= count($this->PointArchiveUser->find('all',array("conditions"=>$condition,)));



            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            

            $order = "PointArchiveUser.id DESC";

            

            $points_arr = $this->PointArchiveUser->find('all',array("conditions"=>$condition,'order' =>$order,'limit' => $limit, 'page' => $page));



            ##set Coinset data in variable



            $this->set("points_arr",$points_arr);



        }

        

        

        

        

        /***************non member list (members that are registered by admin in advance and later activated by user/member**************/



        function nonmemberslist(){



            ##Configure::write('debug',3);



            ##check user session live or not



            ##Configure::write('debug',3);



            ##check user session live or not

			// $check = $this->session_check_usertype();

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';



            // collect project name and project id

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            //    collect user id

            $userid = $this->Session->read("User.User.id");

            

            $this->set('current_project_name',$project_name);

            ##import  Holder  model for processing

            App::import("Model", "Holder");

            $this->Holder =   & new Holder();    



            //for active menu display



            $this->set('page_url',"nonmemberslist");



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '3'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition  





            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);    



            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    



                    // STEP : GET ALL Non Member OF RELATED PROJECT

         //   DebugBreak();             

            App::import("Model", "Holder");

            $this->Holder =   & new Holder();

            $field='';

            $searchkey=""; 

            if(!empty($this->data))

            {        

               $searchkey=$this->data['Companies']['searchkey'];

            }

            $this->Pagination->sortByClass    = 'Holder'; ##initaite pagination 

            $member_type="Non Member";  // get all members

            $this->Pagination->total= count($this->Holder->getMemberListByProject($project_id, $member_type,$searchkey));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

             if($order == "Holder.id ASC"){

                $order = "Holder.created DESC,Holder.lastnameshow ASC, Holder.firstname ASC";

            }

            $holderlist = $this->Holder->getMemberListByProject($project_id, $member_type,$searchkey,$order, $limit, $page);

            $this->set("holderlist",$holderlist); 



        }



        /**

        * QR CODE Generator Module Fucntions start here

        **********************************************************************************************************************************/

        

        /*

        * Function name   : qrcodegenerate()

        * Description : This function used to generate QR-code

        * Created On      : 16-08-11 

        *

        */ 



       function qrcodegenerate(){ 

            //Configure::write('debug',2);

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';



            // collect project name and project id

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            //    collect user id

            $userid = $this->Session->read("User.User.id");

       



            //for active menu display

           $this->set('page_url','grcodegenerate');

             $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain);

            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   

          

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project_name',$project_name);

            

            if(isset($_POST['getqrcode'])){ 

                   $qr_cnt_type= $_POST['qr_cnt_type'];

                   $qr_cnt= $_POST['qr_cnt']; 

                   $qr_size= $_POST['qr_size'];

                   $this->set('qr_cnt_type',$qr_cnt_type); 

                   $this->set('qr_cnt',$qr_cnt); 

                   $this->set('qr_size',$qr_size); 



                    $img_dest =  'img' . DS . $project_name . DS.'uploads'. DS.'qrcode.png' ;    

                    $this->set('img_dest',$img_dest);  

                   

                }



                 if(isset($_POST['downloadqrcode'])){ 

                   $qr_cnt_type= $_POST['qr_cnt_type'];

                   $qr_cnt= $_POST['qr_cnt']; 

                   $qr_size= $_POST['qr_size'];

                   $this->set('qr_cnt_type',$qr_cnt_type); 

                   $this->set('qr_cnt',$qr_cnt); 

                   $this->set('qr_size',$qr_size); 



                    //$ptname = $projectDetails['Project']['project_name']; //$this->data['Project']['projectname'];

                    $img_dest =  'img' . DS . $project_name . DS.'uploads'. DS.'qrcode.png' ;    

                    $this->set('img_dest',$img_dest);  

                    

                   // $filename= $this->data['Admin']['filename'];

                    $filepath =  'img/'.$project_name .'/uploads/qrcode.png' ;

                    $this->ForceDownload->forceDownload($filepath, 'qrcode.png');

                    

                 

                }



             if(isset($_POST['getqrcode']) || $_POST['qr_cnt']){

                   $qr_cnt_type= $_POST['qr_cnt_type'];

                   $qr_cnt= $_POST['qr_cnt']; 

                   $qr_size= $_POST['qr_size'];

                   $this->set('qr_cnt_type',$qr_cnt_type); 

                   $this->set('qr_cnt',$qr_cnt); 

                   $this->set('qr_size',$qr_size); 



                    //$ptname = $projectDetails['Project']['project_name']; //$this->data['Project']['projectname'];

                    $img_dest =  'img' . DS . $project_name . DS.'uploads'. DS.'qrcode.png' ;    

                    $this->set('img_dest',$img_dest);  

                    /*$filename=$this->Backup->getProjectBackup($project_id, $project_name);

                    if($filename){

                        //   $filename=$this->Backup->getDatabaseBackUP($filepath, $project_id);

                        $this->Session->setFlash("Backup generated successfully!.",'default',array('class' => 'successmsg'));        

                    }else{

                        $this->Session->setFlash("Opps! There seems to some problem. Please try later.",'default',array('class' => 'errormsg'));        

                    }*/

                }



                 if(isset($_POST['downloadqrcode'])){ 

                   $qr_cnt_type= $_POST['qr_cnt_type'];

                   $qr_cnt= $_POST['qr_cnt']; 

                   $qr_size= $_POST['qr_size'];

                   $this->set('qr_cnt_type',$qr_cnt_type); 

                   $this->set('qr_cnt',$qr_cnt); 

                   $this->set('qr_size',$qr_size); 



                    //$ptname = $projectDetails['Project']['project_name']; //$this->data['Project']['projectname'];

                    $img_dest =  'img' . DS . $project_name . DS.'uploads'. DS.'qrcode.png' ;    

                    $this->set('img_dest',$img_dest);  

                    

                   // $filename= $this->data['Admin']['filename'];

                    $filepath =  'img/'.$project_name .'/uploads/qrcode.png' ;

                    $this->ForceDownload->forceDownload($filepath, 'qrcode.png');

                    //$this->Session->setFlash("Qr Code downloaded successfully!.",'default',array('class' => 'successmsg'));

                 

                }



                        



            $projectid = $project_id; 

      }

      

      function get_qrcode_by_ajax(){     

                            //Configure::write('debug',2);

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';



            // collect project name and project id

            $project_id=$this->Session->read("projectwebsite_id");   

             $this->set('current_domain',$current_domain);

            $this->set('page_url','grcodegenerate');         

            //for active menu display

            $this->set('page_url','grcodegenerate');

           

           $this->layout = 'ajax';  

           $qr_cnt_type= $_POST['qr_cnt_type'];

           $qr_cnt= $_POST['qr_cnt']; 

           $qr_size= $_POST['qr_size'];

           $this->set('qr_cnt_type',$qr_cnt_type); 

           $this->set('qr_cnt',$qr_cnt); 

           $this->set('qr_size',$qr_size); 

            

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project_name',$project_name);

            //$ptname = $projectDetails['Project']['project_name']; //$this->data['Project']['projectname'];

            $img_dest =  'img' . DS . $project_name . DS.'uploads'. DS.'qrcode.png' ;    

            $this->set('img_dest',$img_dest);  

           //print_r($_REQUEST); exit;

      }

      

      function get_qrcode_file(){     

               //Configure::write('debug',2);

            $this->session_check_user();

            $this->layout= 'new_sponsor_layout';



            // collect project name and project id

            $project_id=$this->Session->read("projectwebsite_id");   

            $project_name=$this->Session->read("projectwebsite_name");       

            $projectDetails=$this->getprojectdetails($project_id);  

            $filepath =  'img/'.$project_name .'/uploads/qrcode.png' ;

            $this->ForceDownload->forceDownload($filepath, 'qrcode.png');

           // $this->Session->setFlash("Backup downloaded successfully!.",'default',array('class' => 'successmsg'));

            //$this->redirect('/companies/projectbackup');

               

        

            exit;  

      }  

      

      

     

      

      

      

      

      

      

    /**

      * Function for Form Type Enhancements

      */

    

      /**

        * fucntion to list all form types for related project

        * 

        */

        function formtypelist(){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','formtypelist');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project_name',$project_name);



            $projectid = $project_id;



            ##fetch data from Blog table for listing

             

            $field='';

                

            App::import("Model", "FormType");

            $this->FormType =  & new FormType();



            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){



                $searchkeyword = $this->data['Company']['searchkey'];







                $condition = "FormType.delete_status = '0' AND FormType.project_id = '".$project_id."' and (FormType.formtype_name LIKE '%".$searchkeyword."%' OR FormType.form_description  LIKE '%".$searchkeyword."%' )";



            }else{



                $condition = "FormType.delete_status = '0' AND FormType.project_id = '".$project_id."'";



            }



            $this->Pagination->sortByClass    = 'FormType'; ##initaite pagination 

            $this->Pagination->total= count($this->FormType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $formtypeArray = $this->FormType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            //  print_r($eventArray);    exit;    

            ##set project type data in variable

            $this->set("formtypedata",$formtypeArray);

        }     

      

      /*

       * Function name   : fromtype_add()

       * Description : This function used to add form types  for selected project

       * Created On      : 27-10-11 (Quad)

       */     

       function formtype_add($formtypeid=''){



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition       



            $this->set('project_name',$project_name);

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid=$project_id;        

            $this->set('projectid',$projectid);  

             App::import("Model", "FormType");

            $this->FormType =  & new FormType();               



            ##check empty data

            if(!empty($this->data)) {      

                 // echo "<pre>";  print_r($_REQUEST);  echo "</pre>";    

             $this->data['FormType']['project_id'] =$project_id;   

             // Default Setting for field inclusion and required field setting

             $this->data['FormType']['fld_firstname'] =1;   

             $this->data['FormType']['req_firstname'] =1;   

             $this->data['FormType']['fld_lastname'] =1;   

             $this->data['FormType']['req_lastname'] =1;   

             $this->data['FormType']['fld_title'] =0;   

             $this->data['FormType']['req_title'] =0;   

             $this->data['FormType']['fld_company'] =0;   

             $this->data['FormType']['req_company'] =0;   

             $this->data['FormType']['fld_phone'] =0;   

             $this->data['FormType']['req_phone'] =0;   

             $this->data['FormType']['fld_email'] =1;   

             $this->data['FormType']['req_email'] =1;   

             $this->data['FormType']['fld_address1'] =0;   

             $this->data['FormType']['req_address1'] =0;   

             $this->data['FormType']['fld_address2'] =0;   

             $this->data['FormType']['req_address2'] =0;   

             $this->data['FormType']['fld_city'] =0;   

             $this->data['FormType']['req_city'] =0;   

             $this->data['FormType']['fld_stprovince'] =0;   

             $this->data['FormType']['req_stprovince'] =0;   

             $this->data['FormType']['fld_country'] =0;   

             $this->data['FormType']['req_country'] =0;   

             $this->data['FormType']['fld_list1'] =0;   

             $this->data['FormType']['req_list1'] =1;   

             $this->data['FormType']['fld_list2'] =0;   

             $this->data['FormType']['req_list2'] =1;   

             $this->data['FormType']['fld_message'] =0;   

             $this->data['FormType']['req_message'] =1;   

             $strFormHtml="";

            if(isset($_REQUEST['chkfld'])){ 

                $strFormHtml="<table cellpadding='3' cellspacing='5' align='center' width='100%'><tbody>";

                    for($i=0; $i<sizeof($_REQUEST['chkfld']); $i++){

                        $fld=$_REQUEST['chkfld'][$i];

                        $fldnm= end(explode("_", $fld));

                        if($fldnm!="" && $fldnm!=NULL){  

                            // Check included field is set as required or not 

                            $req_fldnm="req_".$fldnm;

                            $fld_req=0;

                            $fld_req_html="";

                            if(in_array($req_fldnm, $_REQUEST['reqfld'])){

                                $fld_req=1;

                                $fld_req_html="<span style='color: red;'>*</span>";

                            }

                            $strFormHtml.="<tr>"; 

                            if($fldnm=="message"){

                                $strFormHtml.=" <td width='40%' align='right' valign='top'><label class='boldlabel'>".ucfirst($fldnm).$fld_req_html."</label></td>";

                                $strFormHtml.="<td width='60%'><span class='txtArea_top'><span class='newtxtArea_bot'> ";

                                $strFormHtml.="<textarea id='".$fld."' name='".$fld."' class='noBg'  cols='35' row='7' style='height: 100px;'></textarea> </span></span></td>"; 

                            }else if($fldnm=="list1" || $fldnm=="list2"){     

                                       

                                       $fld_label=  $this->data['FormType']['fld_'.$fldnm.'_label'];

                                       $order   = array("\r\n", "\n", "\r"); 

                                       $lst_fld_options= str_replace($order, "#", $this->data['FormType']['fld_'.$fldnm.'_options']); 

                                       $option_lines = explode("#",$lst_fld_options); 

                                        $strFormHtml.="<td width='40%' align='right' valign='top'><label class='boldlabel'>".ucfirst($fld_label).$fld_req_html."</label></td>";

                                        $strFormHtml.="<td width='60%'> <span class='txtArea_top'><span class='newtxtArea_bot'>";

                                        $strFormHtml.="<select name='fld_".$fldnm."' id='fld_".$fldnm."' empty='' class='multilist multi'>";

                                        $strFormHtml.="<option value=''>Select Options</option>";   

                                         for($l=0; $l < sizeof($option_lines); $l++){

                                               $strFormHtml.="  <option value='".$option_lines[$l]."'>".$option_lines[$l]."</option>";

                                         }

                                          $strFormHtml.="</select></span><span></td>";  

                                }else {

                                    if($fldnm=="stprovince") {

                                        $fldnm_lbl="ST/Province";

                                    }else if($fldnm=="zippostalcode") {

                                            $fldnm_lbl="Zip/Postal Code";

                                        }else{

                                            $fldnm_lbl=ucfirst($fldnm);

                                    }

                                    //  $strFormHtml.="<tr>"; 

                                    $strFormHtml.="<td width='40%' align='right' valign='top'><label class='boldlabel'>".$fldnm_lbl.$fld_req_html."</label></td>"; 

                                    $strFormHtml.="<td width='60%'><span class='intpSpan'><input type='text' id='".$fld."' name='".$fld."' class='inpt_txt_fld'  maxlength='200'> </span></td>"; 



                            }

                            $strFormHtml.="</tr>"; 

                            $this->data['FormType'][$fld] =1;    

                            $this->data['FormType'][$req_fldnm] =$fld_req;    

                        }              

                    }

                  

                $strFormHtml.="</tbody></table>";

                $this->data['FormType']['form_html'] =$strFormHtml; 

  

                #Save form type data              

             

                 if($this->FormType->Save($this->data['FormType'])){

                     if(isset($this->data['FormType']['id'])){

                            $lastinsertid = $this->data['FormType']['id'];

                     }else{

                         $lastinsertid = $this->FormType->getLastInsertId();

                     }

                     

                     $this->Session->setFlash('Form Type Added Successfully.','default', array('class' => 'successmsg'));  

                      if(isset($this->data['Action']['redirectpage'])){

                          $this->redirect("/companies/formtypelist"); 

                      }else{

                          $this->redirect("/companies/formtype_add/"); 

                      }  

                 }

                   

              //   echo "<pre>";  print_r($this->data['FormType']);  echo "</pre>";    

                 

            }



            }



            $this->set('selectedtemplateresponce',"");

            $this->set('selectedtemplateproj',""); 

            if($formtypeid){        // Read form type data and set it

               $this->FormType->id = $formtypeid;

               $this->data = $this->FormType->read();

                $this->set('formtypeid',$formtypeid);    

                $this->set('selectedtemplateresponce',$this->data['FormType']['emailtemplate_toresponce']);    

                $this->set('selectedtemplateproj',$this->data['FormType']['emailtemplate_toalert_mgr']);     

                $this->set('selectedcompanytype',$this->data['FormType']['company_type']);     

                $this->set('selectedcontacttype',$this->data['FormType']['contact_type']);     

            }

            

            // GET ALL CUSTOM EMAIL TEMPLATES

            $this->customtemplatelisting($project_id); 

            

             // GET ALL Company Types

            $this->companytypedropdown($project_id); 

            

             // GET ALL Contact Types

            $this->contacttypedropdown($project_id); 

          



        } 

        

        

       function iframeforms($project_id ='', $formtypeid =''){

			//echo $project_id;

			//echo $formtypeid;

			//print_r($_POST);

			//die("In test pahse");

			$this->layout = "iframelayout";

            if($project_id && $formtypeid){ 

                // STEP 10: Get Project details

                $projectDetails=$this->getprojectdetails($project_id);    

                $this->set('project',$projectDetails); 

                

                // STEP 20: GEt Form type details by formtype id 

                App::import("Model", "FormType");

                $this->FormType =  & new FormType(); 

                $this->FormType->id = $formtypeid;

                $this->data = $this->FormType->read();

                $rid = $this->data['FormType']['releation_type'];

                 if($this->data['FormType']){ 

                 // STEP 30: Check Form Submitted 

                 if(isset($_POST['send'])) {  

					//print_r($_POST);

					//die("In test pahse");				 

                    // Get Form Submit table object

                    // STEP 30.10: GEt Form type details by formtype id 

                    App::import("Model", "FormSubmit");

                    $this->FormSubmit =  & new FormSubmit();

                    // set Basic fields and values to Form Submit 

                    $this->data['FormSubmit']['project_id'] = $project_id;   

                    $this->data['FormSubmit']['formtype_id'] = $formtypeid;   

					$this->data['FormSubmit']['releation_type'] = $rid;   

                    $this->data['FormSubmit']['statustype_id'] =0;   

                    

                    // STEP 30.20: Set value of each filed of post to submited form data field and its value

                     foreach($_POST as $field => $value){

                        //  echo " Field ".$field." ==> ".$value;

                        if($field!="_method" && $field!="send") {

                            $this->data['FormSubmit'][$field] =$value;     

                        }

                              

                     }      

                     

                     // STEP 30.30:   SAve submitted form

					 //echo '<pre>';print_r($this->data);die;

                     if($this->FormSubmit->Save($this->data['FormSubmit'])){

                         $lastFormSubmitId=  $this->FormSubmit->getLastInsertID();

                        // STEP 30.40:  Add new COMPANY  and CONTACT to related project using company & contact info from submitted form

                            // STEP 30.40.10:  To add new company - Check Reqried fields are not empty 

                            // REquired Fields: Company Type, Company Name,  Address1, Country, State, city, zip, email

                            if($this->data['FormType']['company_type']!="" && $this->data['FormType']['company_type']!=null){

                                // Check fields are not empty   

                                if( isset($this->data['FormSubmit']['fld_company']) && $this->data['FormType']['fld_company']!="" 

                                    && isset($this->data['FormSubmit']['fld_address1']) && $this->data['FormType']['fld_address1']!="" 

                                    && isset($this->data['FormSubmit']['fld_country']) && $this->data['FormType']['fld_country']!=""

                                    && isset($this->data['FormSubmit']['fld_stprovince']) && $this->data['FormType']['fld_stprovince']!="" 

                                    && isset($this->data['FormSubmit']['fld_city']) && $this->data['FormType']['fld_city']!="" 

                                    && isset($this->data['FormSubmit']['fld_zippostalcode']) && $this->data['FormType']['fld_zippostalcode']!="" 

                                    && isset($this->data['FormSubmit']['fld_email']) && $this->data['FormType']['fld_email']!="" 

                                ){

                                    // STEP 30.40.20:  Check Company already exist with same company name, address, city state and county , company type at related   project

                                    $isCompanyExists=false;

                                    App::import("Model", "Company");

                                    $this->Company =  & new Company();

                                    $lastCompanyId=0;



                                    $compExistCondition="Company.project_id='".$project_id."'   AND Company.company_type_id='".$this->data['FormType']['company_type']."'    

                                    AND Company.company_name='".$this->data['FormSubmit']['fld_company']."' AND Company.address1='".$this->data['FormSubmit']['fld_address1']."' 

                                    AND Company.city='".$this->data['FormSubmit']['fld_city']."' AND Company.state='".$this->data['FormSubmit']['fld_stprovince']."' 

                                    AND Company.country='".$this->data['FormSubmit']['fld_country']."' AND Company.zipcode='".$this->data['FormSubmit']['fld_zippostalcode']."'";

                                    $companyArray = $this->Company->find('first',array("conditions"=>$compExistCondition));

                                    if($companyArray) {   

                                           $lastCompanyId=  $companyArray['Company']['id'];

                                           $isCompanyExists=true;

                                    }

                                    

                                    // STEP 30.40.30:  if not exists, add new company

                                    if($isCompanyExists==false){

                                       $this->data['Company']['project_id'] =$project_id;

                                       $this->data['Company']['company_type_id'] =$this->data['FormType']['company_type'];

                                       $this->data['Company']['company_name'] =$this->data['FormSubmit']['fld_company'];

                                       $this->data['Company']['address1'] =$this->data['FormSubmit']['fld_address1'];

                                       $this->data['Company']['city'] =$this->data['FormSubmit']['fld_city'];

                                       $this->data['Company']['state'] =$this->data['FormSubmit']['fld_stprovince'];

                                       $this->data['Company']['country'] =$this->data['FormSubmit']['fld_country'];

                                       $this->data['Company']['zipcode'] =$this->data['FormSubmit']['fld_zippostalcode'];

                                       $this->data['Company']['email'] =$this->data['FormSubmit']['fld_email'];

                                       if($this->data['FormSubmit']['fld_phone']!=""){

                                             $this->data['Company']['phone'] =$this->data['FormSubmit']['fld_phone'];    

                                       }

                                      

                                       if($this->Company->Save($this->data['Company'])){ 

                                            $lastCompanyId=  $this->Company->getLastInsertID();  

                                       }    

                                    }

                                    // if company id exists then only we can add contact

                                    if($lastCompanyId > 0){

                                             // STEP 30.40.40:  Add new contact  to relates project -  Check required fields are not empty  

                                            // REquired Fields: Company id, Contact type, title,first name, last name, email, Address1, Country, State, city, zip

                                            if($this->data['FormType']['contact_type']!="" && $this->data['FormType']['contact_type']!=null){    

                                                // Check fields are not empty   

                                                if( isset($this->data['FormSubmit']['fld_title']) && $this->data['FormType']['fld_title']!="" 

                                                    && isset($this->data['FormSubmit']['fld_firstname']) && $this->data['FormType']['fld_firstname']!="" 

                                                    && isset($this->data['FormSubmit']['fld_lastname']) && $this->data['FormType']['fld_lastname']!=""

                                                ){  

                                                    // STEP 30.40.50:   Check contact exists at related project  ???

                                                    

                                                    $isContactExists=false;

                                                    App::import("Model", "Contact");

                                                    $this->Contact =  & new Contact();

                                                    

                                                    $contExistCondition="Contact.project_id='".$project_id."' AND Contact.contact_type_id='".$this->data['FormType']['contact_type']."' 

                                                    AND Contact.firstname='".$this->data['FormSubmit']['fld_firstname']."' AND Contact.lastname='".$this->data['FormSubmit']['fld_lastname']."'  

                                                    AND Contact.jobtitle='".$this->data['FormSubmit']['fld_title']."' AND Contact.address1='".$this->data['FormSubmit']['fld_address1']."' 

                                                    AND Contact.city='".$this->data['FormSubmit']['fld_city']."' AND Contact.state='".$this->data['FormSubmit']['fld_stprovince']."' 

                                                    AND Contact.country='".$this->data['FormSubmit']['fld_country']."' AND Contact.zipcode='".$this->data['FormSubmit']['fld_zippostalcode']."'";

                                                    $contactArray = $this->Contact->find('all',array("conditions"=>$contExistCondition));

                                                    if($contactArray) {

                                                          $isContactExists=true;

                                                    }                       

                                                    // STEP 30.40.60: if not exists, add new contact

                                                    if($isContactExists==false){

                                                        $this->data['Contact']['project_id'] =$project_id;

                                                        $this->data['Contact']['contact_type_id'] =$this->data['FormType']['contact_type'];

                                                        $this->data['Contact']['company_id'] =$lastCompanyId;

                                                        $this->data['Contact']['firstname'] =$this->data['FormSubmit']['fld_firstname'];

                                                        $this->data['Contact']['lastname'] =$this->data['FormSubmit']['fld_lastname'];

                                                        $this->data['Contact']['email'] =$this->data['FormSubmit']['fld_email'];    

                                                        $this->data['Contact']['jobtitle'] =$this->data['FormSubmit']['fld_title'];

                                                        $this->data['Contact']['address1'] =$this->data['FormSubmit']['fld_address1'];

                                                        $this->data['Contact']['city'] =$this->data['FormSubmit']['fld_city'];

                                                        $this->data['Contact']['state'] =$this->data['FormSubmit']['fld_stprovince'];

                                                        $this->data['Contact']['country'] =$this->data['FormSubmit']['fld_country'];

                                                        $this->data['Contact']['zipcode'] =$this->data['FormSubmit']['fld_zippostalcode'];

                                                        if($this->data['FormSubmit']['fld_phone']!=""){

                                                            $this->data['Contact']['busphone'] =$this->data['FormSubmit']['fld_phone'];

                                                        }

                                                        $this->Contact->Save($this->data['Contact']);

                                                        /*if($this->Contact->Save($this->data['Contact'])){ 

                                                                  

                                                        } */ 

                                                    } 

                                                }

                                            }

                                        }

                                    

                                }

                                                       

                            }

                         

                         // STEP : Get last inserted form data 

                             $formCondition = "FormSubmit.delete_status = '0' AND FormSubmit.project_id = '".$project_id."' AND FormSubmit.id = '".$lastFormSubmitId."'";

                             $this->FormSubmit->bindModel(array('belongsTo'=>array(

                                    'Country'=>array('foreignKey'=>false, 'conditions'=>'FormSubmit.fld_country = Country.country_id'  ),

                                    'State'=>array('foreignKey'=>false, 'conditions'=>'FormSubmit.fld_stprovince = State.state_id'  )

                                    )));

                            $formSubmitArray = $this->FormSubmit->find('first',array("conditions"=>$formCondition));                 

                        // STEP 30.50:  Check whether respose email template set for Sender, if yes send response email template

                            if($this->data['FormType']['emailtemplate_toresponce']!=""){

                                                $response_temp_id=$this->data['FormType']['emailtemplate_toresponce'];

                                                $conditiontemp = "EmailTemplate.project_id = '$project_id' AND EmailTemplate.delete_status='0' AND EmailTemplate.id = '$response_temp_id'";

                                                $templatearr = $this->EmailTemplate->find('first',array("conditions"=>$conditiontemp));

                                                if($templatearr){

                                                        $tomailid=$this->data['FormSubmit']['fld_email'];

                                                        $toname=$this->data['FormSubmit']['fld_firstname'];

                                                        $subjectoff = $templatearr['EmailTemplate']['subject'];

                                                        $contentoff= $templatearr['EmailTemplate']['content'];

                                                        /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button   **/ 

                                                         ///////////////////////////////// append mail footer set by super admin -U /////////////////////////

                                                            $condition = "id='1'";

                                                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                                            $contentoff.=$mailfooter;

                                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                                        

                                                        

                                                        $current_domain= $_SERVER['HTTP_HOST'];  

                                                        $contentoff = $this->replaceImgPathInEmailContent($contentoff);

                                                        

                                                        $fromemail = $templatearr['EmailTemplate']['sender'];

                                                        /**

                                                        * OLD CODE

                                                        *  $findarr = array("[[TO_FIRSTNAME]]","[[FROM_FIRSTNAME]]","[[PROJECT_NAME]]");



                                                        $replacearr = array($toname,$sponsor_name,$projectDetails['Project']['system_name']);

                                                        ## replace content dynamically for path to image

                                                        $message = str_replace($findarr, $replacearr, $contentoff); 

                                                        * 

                                                        */

                                                        

                                                          

                                                         /**

                                                         * New Email Temp replacement code for data Elements 

                                                         */

                                                         //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                                            $dataEleValuesArray=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $tomailid);

                                                         //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                                           $dataEleValuesArray[DATA_ELEMENT_CONTACT_FIRSTNAME]= trim($formSubmitArray['FormSubmit']['fld_firstname']);  

                                                            $dataEleValuesArray[DATA_ELEMENT_CONTACT_LASTNAME]= trim($formSubmitArray['FormSubmit']['fld_lastname']);

                                                            $dataEleValuesArray[DATA_ELEMENT_CONTACT_ADDRESS1]= trim($formSubmitArray['FormSubmit']['fld_address1']);

                                                            $dataEleValuesArray[DATA_ELEMENT_CONTACT_ADDRESS2]= trim($formSubmitArray['FormSubmit']['fld_address2']);

                                                            $dataEleValuesArray[DATA_ELEMENT_CONTACT_CITY]= trim($formSubmitArray['FormSubmit']['fld_city']);

                                                            $dataEleValuesArray[DATA_ELEMENT_CONTACT_STATE]= trim($formSubmitArray['State']['state_name']);

                                                            $dataEleValuesArray[DATA_ELEMENT_CONTACT_ZIP]= trim($formSubmitArray['FormSubmit']['fld_zippostalcode']);

                                                            $dataEleValuesArray[DATA_ELEMENT_CONTACT_COUNTRY]= trim($formSubmitArray['Country']['country_name']);

                                                            $dataEleValuesArray[DATA_ELEMENT_CONTACT_PHONE]= trim($formSubmitArray['FormSubmit']['fld_phone']);

                                                            $dataEleValuesArray[DATA_ELEMENT_CONTACT_EMAIL]= trim($formSubmitArray['FormSubmit']['fld_email']);

                                                            $dataEleValuesArray[DATA_ELEMENT_CONTACT_COMPANY]= trim($formSubmitArray['FormSubmit']['fld_company']);

                                                            $dataEleValuesArray[DATA_ELEMENT_CONTACT_TITLE]= trim($formSubmitArray['FormSubmit']['fld_title']);

                                                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray);

                                                         //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                                            $subject=$this->EmailTemplates->insertDataElementValuesToContent($subjectoff);

                                                            $message=$this->EmailTemplates->insertDataElementValuesToContent($contentoff); 

                                                        if($this->Sendemail->sendMailContentWithCC($tomailid,$fromemail,$subjectoff,$message, $fromemail, $templatearr['EmailTemplate']['send_cc_email_to'])){ 

                                                            $offensmsg ="Response email sent successfully!";

                                                        }    

                                                }

                                           }

                                           

                        // STEP 30.60:  Check whether alter email template set for Project Manager, if yes send alert email template

                            if($this->data['FormType']['emailtemplate_toalert_mgr']!=""){ $contentoff="";

                                                $alert_temp_id=$this->data['FormType']['emailtemplate_toalert_mgr'];

                                                $conditiontemp = "EmailTemplate.project_id = '$project_id' AND EmailTemplate.delete_status='0' AND EmailTemplate.id = '$alert_temp_id'";

                                                $alerttemplatearr = $this->EmailTemplate->find('first',array("conditions"=>$conditiontemp));

                                                if($alerttemplatearr){

                                                        $subjectoff = $alerttemplatearr['EmailTemplate']['subject'];

                                                        $contentoff= $alerttemplatearr['EmailTemplate']['content'];

                                                        /** As Per discussion 12-29-2011  - Remove Mail Footer from live untile add 'Opt Out' button        **/   

                                                         ///////////////////////////////// append mail footer set by super admin -U /////////////////////////

                                                            $condition = "id='1'";

                                                            $mailfooter_data = $this->MailFooter->find('first',array('conditions' => $condition));

                                                            $mailfooter=$mailfooter_data['MailFooter']['footer_content'];                            

                                                            $contentoff.=$mailfooter;   

                                                        ///////////////////////////////// append mail footer set by super admin /////////////////////////

                                                      

                                                        

                                                        $current_domain= $_SERVER['HTTP_HOST'];  

                                                        $contentoff = $this->replaceImgPathInEmailContent($contentoff);

                                                        

                                                        $fromemail = $alerttemplatearr['EmailTemplate']['sender'];



                                                     //   $findarr = array("[[TO_FIRSTNAME]]","[[FROM_FIRSTNAME]]","[[PROJECT_NAME]]");



                                                     //   $replacearr = array($toname,$sponsor_name,$projectDetails['Project']['system_name']);

                                                        ## replace content dynamically for path to image

                                                     //   $message = str_replace($findarr, $replacearr, $contentoff);   

                                                       //STEP: INIT EMAIL TEMPLATES DATA ELEMENTS    

                                                            $dataEleValuesArray1=$this->EmailTemplates->initEmailTemplDataElemntsArray($project_id, $projectDetails, $projectDetails['Sponsor']['email'], "Sponsor");

                                                         //STEP : SET VALUES TO REQUIRED DATA ELEMENTS

                                                            $dataEleValuesArray1[DATA_ELEMENT_CONTACT_FIRSTNAME]= trim($formSubmitArray['FormSubmit']['fld_firstname']);  

                                                            $dataEleValuesArray1[DATA_ELEMENT_CONTACT_LASTNAME]= trim($formSubmitArray['FormSubmit']['fld_lastname']);

                                                            $dataEleValuesArray1[DATA_ELEMENT_CONTACT_ADDRESS1]= trim($formSubmitArray['FormSubmit']['fld_address1']);

                                                            $dataEleValuesArray1[DATA_ELEMENT_CONTACT_ADDRESS2]= trim($formSubmitArray['FormSubmit']['fld_address2']);

                                                            $dataEleValuesArray1[DATA_ELEMENT_CONTACT_CITY]= trim($formSubmitArray['FormSubmit']['fld_city']);

                                                            $dataEleValuesArray1[DATA_ELEMENT_CONTACT_STATE]= trim($formSubmitArray['State']['state_name']);

                                                            $dataEleValuesArray1[DATA_ELEMENT_CONTACT_ZIP]= trim($formSubmitArray['FormSubmit']['fld_zippostalcode']);

                                                            $dataEleValuesArray1[DATA_ELEMENT_CONTACT_COUNTRY]= trim($formSubmitArray['Country']['country_name']);

                                                            $dataEleValuesArray1[DATA_ELEMENT_CONTACT_PHONE]= trim($formSubmitArray['FormSubmit']['fld_phone']);

                                                            $dataEleValuesArray1[DATA_ELEMENT_CONTACT_EMAIL]= trim($formSubmitArray['FormSubmit']['fld_email']);

                                                            $dataEleValuesArray1[DATA_ELEMENT_CONTACT_COMPANY]= trim($formSubmitArray['FormSubmit']['fld_company']);

                                                            $dataEleValuesArray1[DATA_ELEMENT_CONTACT_TITLE]= trim($formSubmitArray['FormSubmit']['fld_title']);

                                                            $this->EmailTemplates->setEmailTempDataElementValuesArray($dataEleValuesArray1);

         

                                                         //STEP : INSERT VALUES AT DATA ELEMETNS FOR EMAIL SUBJECT AND EMAIL MESSAGE

                                                            $subject=$this->EmailTemplates->insertDataElementValuesToContent($subjectoff);

                                                            $message=$this->EmailTemplates->insertDataElementValuesToContent($contentoff); 

                                                             

                                                        if($this->Sendemail->sendMailContentWithCC($projectDetails['Sponsor']['email'],$fromemail,$subjectoff,$message, $fromemail, $alerttemplatearr['EmailTemplate']['send_cc_email_to'])){ 

                                                            $offensmsg ="Alert email sent successfully!";

                                                        }    

                                                }

                                          }

                                          

                                          $this->Session->setFlash('Form submitted Successfully.','default', array('class' => 'successmsg'));  

                                         $this->redirect("/companies/iframeforms/".$project_id."/".$formtypeid);   

                     }else{

                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt')); 

                        $this->redirect("/companies/iframeforms/".$project_id."/".$formtypeid);   

                     }

                   //  exit;    

                    }



                 // STEP 40: Create Form Html    

						$strFormHtml="<table cellpadding='3' cellspacing='5' align='center' width='100%'><tbody>";

						foreach($this->data['FormType'] as $key=>$val){

                            $fld=$key;

                            $fldname= explode("_", $fld);

                            if($val==1 && $fldname[0]=="fld" &&  $fld!="fld_list1_label" &&  $fld!="fld_list1_options" &&  $fld!="fld_list2_label" &&  $fld!="fld_list2_options" ){

                                $fldnm= $fldname[1];

                                if($fldnm!="" && $fldnm!=NULL){  

                                $strFormHtml.="<tr>"; 

                                if($fldnm=="message"){

                                    $strFormHtml.=" <td width='40%' align='right' valign='top'><label class='frmLbls frmLbl2'>".ucfirst($fldnm)."</label></td>";

                                    $strFormHtml.="<td width='60%'><span class='txtArea_top'><span class='newtxtArea_bot'> ";

                                    $strFormHtml.="<textarea id='".$fld."' name='".$fld."' class='noBg'  cols='35' row='7' style='height: 100px;'></textarea> </span></span></td>"; 

                                }else if($fldnm=="list1" || $fldnm=="list2"){    

                                           

                                           $fld_label=  $this->data['FormType']['fld_'.$fldnm.'_label'];

                                           $order   = array("\r\n", "\n", "\r"); 

                                           $lst_fld_options= str_replace($order, "#", $this->data['FormType']['fld_'.$fldnm.'_options']); 

                                           $option_lines = explode("#",$lst_fld_options); 

                                            $strFormHtml.="<td width='40%' align='right' valign='top' ><label class='frmLbls frmLbl2' >".ucfirst($fld_label)."</label></td>";

                                            $strFormHtml.="<td width='60%'> <span class='intpSpan'><span class='inptSpn_rht'>";

                                            $strFormHtml.="<select name='fld_".$fldnm."' id='fld_".$fldnm."' empty='' class='inpt_sel_fld'>";

                                            $strFormHtml.="<option value=''>Select Options</option>";   

                                             for($l=0; $l < sizeof($option_lines); $l++){

                                                   $strFormHtml.="  <option value='".$option_lines[$l]."'>".$option_lines[$l]."</option>";

                                             }

                                              $strFormHtml.="</select></span><span></td>";  

                                }else {

                                        if($fldnm=="stprovince") {

                                            $fldnm_lbl="ST/Province";

                                        }else if($fldnm=="zippostalcode") {

                                                $fldnm_lbl="Zip/Postal Code";

                                            }else{

                                                $fldnm_lbl=ucfirst($fldnm);

                                        }

                                        //  $strFormHtml.="<tr>"; 

                                        $strFormHtml.="<td width='40%' align='right' valign='top'><label class='frmLbls frmLbl2'>".$fldnm_lbl."</label></td>"; 

                                        $strFormHtml.="<td width='60%'><span class='intpSpan'><input type='text' id='".$fld."' name='".$fld."' class='inpt_txt_fld'  maxlength='200'> </span></td>"; 

                                }

                                $strFormHtml.="</tr>"; 

                            }     

                            } 

                        }

                      $strFormHtml.="</tbody></table>";  

                    

                    $this->set('strFormHtml',$strFormHtml); 

                 }

          } 

          

            ##country drop down

            $this->countrydroupdown();

            $this->statedroupdown();

            //echo 'suman '.$project_id;

            $this->set('project_id',$project_id);     

            $this->set('formtypeid',$formtypeid);       

        }

        

        /**

        * Function to get all custome email templates dorpdown bty ajax call 

        * 

        * @param mixed $project_id  - 

        * @param mixed $selectedid

        */

        function getemailtemplatesbyajax($project_id, $selectedid='',$is_event_temp=''){        

            $this->layout = false;

           

            $this->set("selectedid",$selectedid);

            // GET ALL CUSTOM EMAIL TEMPLATES

            $this->customtemplatelisting($project_id,$is_event_temp); 

           

        }

        

        function get_lastinsertedID($modelname){       

            $this->layout = false;

            

            App::import("Model", $modelname);

            $this->$modelname =  & new $modelname();

            

            //$lastid = $this->$modelname->getLastInsertId();

            $highest_id = $this->$modelname->field('id', null, 'id DESC'); 

            echo $highest_id;

            exit;

           

        }



         /**

        * Function to get all company types dorpdown bty ajax call 

        * 

        * @param mixed $project_id  - 

        * @param mixed $selectedid

        */

        function getcompanytypesbyajax($project_id, $selectedid=''){        

            $this->layout = false;    

            $this->set("selectedid",$selectedid);

            // GET ALL CUSTOM EMAIL TEMPLATES

            $this->companytypedropdown($project_id);  

           

        }

        

                /**

        * Function to get all contact type dorpdown bty ajax call 

        * 

        * @param mixed $project_id  - 

        * @param mixed $selectedid

        */

        function getcontacttypesbyajax($project_id, $selectedid=''){        

            $this->layout = false;    

            $this->set("selectedid",$selectedid);

            // GET ALL CUSTOM EMAIL TEMPLATES

            $this->contacttypedropdown($project_id);

           

        }

        

       /**

        * fucntion to list all form types for related project

        * 

        */

        function formsubmitlist(){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','formtypelist');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project_name',$project_name);



            $projectid = $project_id;



            ##fetch data from Blog table for listing

            

            $field='';

                

            App::import("Model", "FormType");

            $this->FormType =  & new FormType();

            

            App::import("Model", "FormSubmit");

            $this->FormSubmit =  & new FormSubmit();

            

            App::import("Model", "FormSubmitStatustype");

            $this->FormSubmitStatustype =  & new FormSubmitStatustype();



            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){



                $searchkeyword = $this->data['Company']['searchkey'];







                $condition = "FormSubmit.delete_status = '0' AND FormSubmit.project_id = '".$project_id."' and (FormSubmit.fld_firstname LIKE '%".$searchkeyword."%' OR FormSubmit.fld_lastname  LIKE '%".$searchkeyword."%' )";



            }else{



                $condition = "FormSubmit.delete_status = '0' AND FormSubmit.project_id = '".$project_id."'";



            }



            $this->Pagination->sortByClass    = 'FormSubmit'; ##initaite pagination 

             $this->FormSubmit->bindModel(array('belongsTo'=>array(

                    'FormType'=>array(

                    'foreignKey'=>false,

                    'conditions'=>'FormSubmit.formtype_id = FormType.id'

                    ),'FormSubmitStatustype'=>array('foreignKey'=>false, 'conditions'=>'FormSubmit.statustype_id = FormSubmitStatustype.id'  )

                    )));

            $this->Pagination->total= count($this->FormSubmit->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



             $this->FormSubmit->bindModel(array('belongsTo'=>array(

                    'FormType'=>array(

                    'foreignKey'=>false,

                    'conditions'=>'FormSubmit.formtype_id = FormType.id'

                    ),'FormSubmitStatustype'=>array('foreignKey'=>false, 'conditions'=>'FormSubmit.statustype_id = FormSubmitStatustype.id'  )

                    )));

            $formsubmitdata = $this->FormSubmit->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

    

            ##set project type data in variable

            $this->set("formsubmitdata",$formsubmitdata);

        } 

        

        /**

        * Function to download csv file for submitted forms

        * 

        */

         function forms_csvdownloads(){



            ##Configure::write('debug',3);

            ##check admin session live or not

            $this->layout = null;

            $this->autoLayout = false; 

            Configure::write('debug', '0');

            ##check user session live or not

            $this->session_check_user();

            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            # Import required models

            App::import("Model", "FormType");

            $this->FormType =  & new FormType();

            

            App::import("Model", "FormSubmit");

            $this->FormSubmit =  & new FormSubmit();

            

            App::import("Model", "FormSubmitStatustype");

            $this->FormSubmitStatustype =  & new FormSubmitStatustype();

            

            App::import("Model", "Country");

            $this->Country  =    &new Country();

            

            App::import("Model", "State");

            $this->State  =    &new State();  

               

            $condition = "FormSubmit.delete_status = '0' AND FormSubmit.project_id = '".$project_id."'";

             $this->FormSubmit->bindModel(array('belongsTo'=>array(

                    'FormType'=>array(

                    'foreignKey'=>false,

                    'conditions'=>'FormSubmit.formtype_id = FormType.id'

                    ),'FormSubmitStatustype'=>array('foreignKey'=>false, 'conditions'=>'FormSubmit.statustype_id = FormSubmitStatustype.id'  ),

                    'Country'=>array('foreignKey'=>false, 'conditions'=>'FormSubmit.fld_country = Country.country_id'  ),

                    'State'=>array('foreignKey'=>false, 'conditions'=>'FormSubmit.fld_stprovince = State.state_id'  )

                    )));

            $formsubmitdata = $this->FormSubmit->find('all',array("conditions"=>$condition));

            //echo "<pre>"; print_r($formsubmitdata);  echo "</pre>";   exit;    

            ##set project type data in variable

            $this->set("formsubmitdata",$formsubmitdata);



        }        

      

      

            /*

       * Function name   : fromtype_add()

       * Description : This function used to add form types  for selected project

       * Created On      : 27-10-11 (Quad)

       */     

       function formsubmitted($formubmittedid=''){

           



            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"coinsetlist");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '20'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition       



           # check form submitted id    

            if(empty($formubmittedid) || $formubmittedid=="" || $formubmittedid==null) $this->redirect('/companies/formsubmitlist');

            

            $this->set('project_name',$project_name);

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $projectid=$project_id;        

            $this->set('projectid',$projectid);  

            App::import("Model", "FormType");

            $this->FormType =  & new FormType();               



            App::import("Model", "FormSubmit");

            $this->FormSubmit =  & new FormSubmit(); 

            

            ##check empty data

            if(!empty($this->data)) {   

                 // echo "<pre>";  print_r($_REQUEST);  echo "</pre>";  

            // $this->data['FormSubmit']['project_id'] =$project_id;   

             if($formubmittedid){        

                    $this->data['FormSubmit']['id']=$formubmittedid;

 

                #Save form type data              

             

                 if($this->FormSubmit->Save($this->data['FormSubmit'])){

                     if(isset($this->data['FormSubmit']['id'])){

                            $lastinsertid = $this->data['FormType']['id'];

                     }else{

                         $lastinsertid = $this->FormType->getLastInsertId();

                     }

                      

                      $this->Session->setFlash('Form sumbitted updated successfully.','default', array('class' => 'successmsg'));  

                      $this->redirect("/companies/formsubmitlist/");   

                 }

                   

              //   echo "<pre>";  print_r($this->data['FormType']);  echo "</pre>";    

             } 

           



            }



            $this->set('selectedtemplateresponce',"");

            $this->set('selectedtemplateproj',""); 

            if($formubmittedid){        // Read form type data and set it

            

                    $this->FormSubmit->bindModel(array('belongsTo'=>array(

                    'FormType'=>array(

                    'foreignKey'=>false,

                    'conditions'=>'FormSubmit.formtype_id = FormType.id'

                    )/*,'Sponsor'=>array(                     'foreignKey'=>false,                    'conditions'=>'Project.sponsor_id = Sponsor.id'                    )*/

                    )));

               $this->FormSubmit->id = $formubmittedid;

               $this->data = $this->FormSubmit->read();

               if($this->data['FormSubmit']){

                    $this->set('formubmittedid',$formubmittedid);    

                    $this->set('selectedtemplateresponce',$this->data['FormType']['emailtemplate_toresponce']);    

                    $this->set('selectedtemplateproj',$this->data['FormType']['emailtemplate_toalert_mgr']);     

                    $this->set('selectedcompanytype',$this->data['FormType']['company_type']);     

                    $this->set('selectedcontacttype',$this->data['FormType']['contact_type']);   

                    $this->set('selectedstatustype',$this->data['FormSubmit']['statustype_id']);   

               }else{

                   $this->redirect("/companies/formsubmitlist/");  

               }



            }

            

            // GET ALL CUSTOM EMAIL TEMPLATES

            $this->customtemplatelisting($project_id); 

            

             // GET ALL Company Types

            $this->companytypedropdown($project_id); 

            

             // GET ALL Contact Types

            $this->contacttypedropdown($project_id); 

            

            // GEt ALl Form Status types

            $this->formstatustypedropdown($project_id);

          

            $this->countrydroupdown();



        } 

        

        

        

        

        

        

        /**

        * fucntion to list all form status type for selected project

        * 

        */

        function formstatustypelist(){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','formstatustypelist');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            



            $project_name=$projectDetails['Project']['project_name'];

            $this->set('project_name',$project_name);



            $projectid = $project_id;



            ##fetch data from FormSubmitstatustypes table for listing



            $field='';



            App::import("Model", "FormSubmitStatustype");

            $this->FormSubmitStatustype =   & new FormSubmitStatustype();



            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){



            $searchkeyword = $this->data['Company']['searchkey'];

            $condition = "FormSubmitStatustype.delete_status = '0' AND FormSubmitStatustype.project_id = '".$project_id."' and (FormSubmitStatustype.statustype_name LIKE '%".$searchkeyword."%')";



            }else{



                $condition = "FormSubmitStatustype.delete_status = '0' AND FormSubmitStatustype.project_id = '".$project_id."'";



            }



            $this->Pagination->sortByClass    = 'FormSubmitStatustype'; ##initaite pagination 

            $this->Pagination->total= count($this->FormSubmitStatustype->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);



            $statustypeArray = $this->FormSubmitStatustype->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            //  print_r($eventArray);    exit;    

            ##set project type data in variable

            $this->set("statustypedata",$statustypeArray);

        }

        

        

        

        /*

        * Function name   : formstatustype_add()

        * Description : This function used to add/edit form status type for project

        * Created On      : 22nd Nov 2011 

        *

        */     



        function formstatustype_add($statustypeid=''){

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';        



            //for active menu display

            $this->set('page_url','formstatustype_add');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    



            if(empty($project_name)) $this->redirect('/companies/session_expired');



            ##import Company  model for processing

            App::import("Model", "FormSubmitStatustype");



            $this->FormSubmitStatustype =  & new FormSubmitStatustype();   



            

            # set help condition



            App::import("Model", "HelpContent");



            $this->HelpContent =  & new HelpContent();



            $condition = "HelpContent.id = '20'";  



            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));



            $this->set("hlpdata",$hlpdata);



            # set help condition   



            $projectDetails=$this->getprojectdetails($project_id);    



            $this->set('project',$projectDetails);            



            $projectid = $project_id;



            $this->set('project_name',$projectDetails['Project']['project_name']);



            ##check empty data



            if(!empty($this->data)) {     

                $this->data['FormSubmitStatustype']['project_id'] = $projectid;

                $typeid= $this->data['FormSubmitStatustype']['id'];

                #set the posted data

                $this->FormSubmitStatustype->set($this->data);



                #check server side validation

                $errormsg = $this->FormSubmitStatustype->invalidFields();



                if(!$errormsg){

                    // $bid = $this->data['Blog']['id'];   

                    $statustype_name = $this->data['FormSubmitStatustype']['statustype_name'];

                    ##check already exists company name

                    if($this->FormSubmitStatustype->Save($this->data)){



                        if($typeid > 0){



                            $this->Session->setFlash('Status type updated Successfully.','default', array('class' => 'successmsg'));



                            if(isset($this->data['Action']['redirectpage'])){



                                $this->redirect('/companies/formstatustypelist');



                            }else{



                                $this->redirect("/companies/formstatustype_add/$statustypeid");



                            }



                        }else{



                            $this->Session->setFlash('Status type Added Successfully.','default', array('class' => 'successmsg'));



                            if(isset($this->data['Action']['redirectpage'])){



                                $this->redirect('/companies/formstatustypelist');



                            }else{



                                $this->redirect("/companies/formstatustype_add");       



                            }



                        }



                    }else{



                        $this->Session->setFlash('Error in processing.','default',array('class' => 'msgTXt'));    



                    }





                }



            }



            if($statustypeid){

                $this->FormSubmitStatustype->id = $statustypeid;

                $this->set('statustypeid', $statustypeid);  

                $this->set('statustypepageaction', "Edit");    

                $this->data = $this->FormSubmitStatustype->read();

            }else{

                $this->set('statustypeid', 0); 

                $this->set('statustypepageaction', "Add"); 

            }     





            $prodtl = $this->projectdetailbyid($projectid);



            $sponname = $this->getsponsornamebyprojectid($projectid);



            $this->set('sponorname',$sponname);



            $projectname = $prodtl[0]['Project']['project_name'];



            $this->set('projectname',$projectname);

        }



        /**

        * Function name : projectcontacttypes()

        * Description : This function used to dispaly list of all contact types of related project

        * Created On : 6th Dec 2011 (QUAD-U)

        *  

        */

        function projectcontacttypes(){

            $this->layout= 'new_sponsor_layout';        

           

            //STEP : Check user session

            $this->session_check_user(); 



            //STEP : Chekc project session and get project details

            $projectid =$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $projectDetails=$this->getprojectdetails($projectid);    

           

            //STEP : Get contact types data for selected project

                // STEP : IMPORT Contact TYpe Model

                App::import("Model", "ContactType");

                $this->ContactType =   & new ContactType(); 



                // STEP : Get Query String for sorting

                if(isset($_SERVER['QUERY_STRING']))

                {

                    $this->Session->delete("newsortingby");

                    $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                    $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                    $this->Session->write("newsortingby",$strdata);    



                }

                // STEP : Set filter condition  

                $field='';

                $condition = "delete_status = '0' and project_id='".$projectid."'";



                // STEP : Add Search Key condition to filter 

                if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                    $searchkeyword = $this->data['Company']['searchkey'];

                    $condition .= "  and (contact_type_name LIKE '%".$searchkeyword."%'  )";

                }



                // STEP : Pagination

                $this->Pagination->sortByClass    = 'ContactType'; ##initaite pagination 

                $this->Pagination->total= count($this->ContactType->find('all',array("conditions"=>$condition)));

                list($order,$limit,$page) = $this->Pagination->init($condition,$field);



                // STEP : Get all contact types records for project

                $contacttypedata = $this->ContactType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));  





            // STEP : Help Content

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '39'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);



            //STEP : Set Variables

            $this->set('page_url','projectcontacttypes');

            $this->set('current_project_name',$project_name); 

            $this->set('project',$projectDetails);            

            $this->set('project_name',$projectDetails['Project']['project_name']);    

            $this->set("contacttypedata",$contacttypedata); 

        }



        /**

        * Function to add or edit contact type for proejct

        *   

        * @param mixed $contacttypeid

        */

        function projectcontacttypes_add($contacttypeid=0, $returnurl="") {

              $this->layout= 'new_sponsor_layout';        

           

            //STEP : Check user session

            $this->session_check_user(); 



            //STEP : Chekc project session and get project details

            $projectid =$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $projectDetails=$this->getprojectdetails($projectid);    

           



            // STEP : Import Contact Type Model

            App::import("Model", "ContactType");

            $this->ContactType =   & new ContactType();



            // STEP :  If isset data , save contact type

            if(!empty($this->data)) {       



           // $returnurl=$this->data['Company']['returnurl'];         

                $ctid= $this->data['ContactType']['id'];  

               // #set the posted data

               $this->ContactType->set($this->data);



                #check server side validation

                $this->ContactType->invalidFields();

                $ptname = $this->data['ContactType']['contact_type_name'];

                

                if($ctid > 0)  {

                    $condition = "contact_type_name = '".$ptname."'    AND  delete_status = '0' and project_id='".$projectid."' and id!='".$ctid."'";

                    $ptdata = $this->ContactType->find('all',array("conditions"=>$condition));

                }else{

                   $condition = "contact_type_name = '".$ptname."'    AND  delete_status = '0' and project_id='".$projectid."'";

                   $ptdata = $this->ContactType->find('all',array("conditions"=>$condition)); 

                }

                if(!$ptdata){



                    $this->data['ContactType']['project_id']=$projectid; 

                    #save data in contact type table

                    if($this->ContactType->Save($this->data['ContactType'])){

                           if($returnurl!=""){  // if its pop-up window from addformtype

                          //   $gotourl=str_replace("_id_", "/", $returnurl);

                             $this->set("closeit","yes");

                          }else{

                                if($ctid > 0){



                                    $this->Session->setFlash('Contact Type updated Successfully.','default', array('class' => 'successmsg'));



                                    if(isset($this->data['Action']['redirectpage'])){



                                        $this->redirect('/companies/projectcontacttypes');



                                    }else{



                                        $this->redirect("/companies/projectcontacttypes_add/$ctid");



                                    }



                                }else{



                                    $this->Session->setFlash('Contact Type Added Successfully.','default', array('class' => 'successmsg'));



                                    if(isset($this->data['Action']['redirectpage'])){



                                        $this->redirect('/companies/projectcontacttypes');



                                    }else{



                                        $this->redirect("/companies/projectcontacttypes_add");       



                                    }



                                }

                          }

                    }else{

                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                          if(isset($this->data['Action']['redirectpage'])){

                             $sessdata=$this->Session->read('newsortingby');

                             $this->redirect('/'.$sessdata);

                         }else{

                                  $this->redirect('/companies/projectcontacttypes_add');

                         }

                    }



                }else{

                    $this->Session->setFlash('Contact Type with same name already exists.','default',array('class' => 'msgTXt'));

                     if(isset($this->data['Action']['redirectpage'])){

                             $sessdata=$this->Session->read('newsortingby');

                             $this->redirect('/'.$sessdata);

                     }else{

                              $this->redirect('/companies/projectcontacttypes_add');

                     }

                }



               

            }



            //STEP : if $contacttypeid is not 0 then read data

            if($contacttypeid){

                $this->ContactType->id = $contacttypeid;

                $this->set('contacttypeid', $contacttypeid);  

                $this->set('pageactionname', "Edit");    

                $this->data = $this->ContactType->read();

            }else{

                $this->set('contacttypeid', 0); 

                $this->set('pageactionname', "Add"); 

            }            

            //STEP : Set Variables

            $this->set('page_url','projectcontacttypes');

            $this->set('current_project_name',$project_name); 

            $this->set('project',$projectDetails);            

            $this->set('project_name',$projectDetails['Project']['project_name']);    

            $this->set("contacttypeid",$contacttypeid); 



            //STEP : Set Help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '57'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition

            $this->set("returnurl",$returnurl);       



        }

        

        

       /*

        * Function name   : projectcompanytypes()

        * Description : This function used to list all company list of related project

        * Created On      : 6th Dec 2011 - Project Company and contact type Enhancemnt - QUAD(UA)

        *

        */ 



        function projectcompanytypes(){

            $this->layout= 'new_sponsor_layout';        

           

            //STEP : Check user session

            $this->session_check_user(); 



            //STEP : Chekc project session and get project details

            $project_id =$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            

            //for active menu display

            $this->set('page_url',"projectcompanytypes");

            

            //STEP : Get Query string

            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }

            

                       

             //STEP :    Impost company type model

            App::import("Model", "CompanyType");

            $this->CompanyType =   & new CompanyType();   

             

             //STEP :    fetch data from project type table for listing

            $field='';

            $condition = "delete_status = '0' and project_id='".$project_id."' ";

            

            if(isset($this->data['Company']['searchkey']) && $this->data['Company']['searchkey']){

                $searchkeyword = $this->data['Company']['searchkey'];

                $condition .= "  and (company_type_name LIKE '%".$searchkeyword."%'  )";

            }

             //STEP :    Pagination

            $this->Pagination->sortByClass    = 'CompanyType'; ##initaite pagination 

            $this->Pagination->total= count($this->CompanyType->find('all',array("conditions"=>$condition)));

            list($order,$limit,$page) = $this->Pagination->init($condition,$field);

            

             //STEP :    Get company type records

            $companytypedata = $this->CompanyType->find('all',array("conditions"=>$condition, 'order' =>$order, 'limit' => $limit, 'page' => $page));

            $this->set("companytypedata",$companytypedata);



            //STEP :    set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '62'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



        }



        /**

        * Fucntion to add/ edit company type to project

        * 

        * @param mixed $companytypeid

        */

        function projectcompanytypes_add($companytypeid='', $returnurl=""){

            $this->layout= 'new_sponsor_layout';        

           

            //STEP : Check user session

            $this->session_check_user(); 



            //STEP : Chekc project session and get project details

            $projectid =$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $projectDetails=$this->getprojectdetails($projectid);    

           

                  

            // STEP : import company type model for processing

            App::import("Model", "CompanyType");

            $this->CompanyType =   & new CompanyType();

            

            // STEP :  If isset data , save contact type

            if(!empty($this->data)) {     

				//pr($this->data);die;

                //$returnurl=$this->data['Company']['returnurl'];             

                $ctid= $this->data['CompanyType']['id'];  

                #set the posted data

                $this->CompanyType->set($this->data);



                #check server side validation

                $this->CompanyType->invalidFields();

                $ptname = $this->data['CompanyType']['company_type_name'];



                if($ctid > 0)  {

                    $condition = "company_type_name = '".$ptname."'    AND  delete_status = '0' and project_id='".$projectid."' and id!='".$ctid."'";

                    $ptdata = $this->CompanyType->find('all',array("conditions"=>$condition));

                }else{

                   $condition = "company_type_name = '".$ptname."'    AND  delete_status = '0' and project_id='".$projectid."'";

                   $ptdata = $this->CompanyType->find('all',array("conditions"=>$condition)); 

                }



                if(!$ptdata){



                    $this->data['CompanyType']['project_id']=$projectid; 

                    #save data in contact type table

                    if($this->CompanyType->Save($this->data['CompanyType'])){

                          if($returnurl!=""){  // if its pop-up window from addformtype

                          //   $gotourl=str_replace("_id_", "/", $returnurl);

                             $this->set("closeit","yes");

                          }else{

                                if($ctid > 0){



                                    $this->Session->setFlash('Company Type updated Successfully.','default', array('class' => 'successmsg'));



                                    if(isset($this->data['Action']['redirectpage'])){



                                        $this->redirect('/companies/projectcompanytypes');



                                    }else{



                                        $this->redirect("/companies/projectcompanytypes_add/$ctid");



                                    }



                                }else{



                                    $this->Session->setFlash('Company Type Added Successfully.','default', array('class' => 'successmsg'));



                                    if(isset($this->data['Action']['redirectpage'])){



                                        $this->redirect('/companies/projectcompanytypes');



                                    }else{



                                        $this->redirect("/companies/projectcompanytypes_add");       



                                    }



                                }

                          }

                    }else{

                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                           if(isset($this->data['Action']['redirectpage'])){

                                $sessdata=$this->Session->read('newsortingby');

                                $this->redirect('/'.$sessdata);

                           }else{

                                $this->redirect('/companies/projectcompanytypes_add');

                           } 

                    }



                }else{

                    $this->Session->setFlash('Contact Type with same name already exists.','default',array('class' => 'msgTXt'));

                    if(isset($this->data['Action']['redirectpage'])){

                        $sessdata=$this->Session->read('newsortingby');

                        $this->redirect('/'.$sessdata);

                    }else{

                         $this->redirect('/companies/projectcompanytypes_add');

                    } 

                }



               

            }



            //STEP : if $contacttypeid is not 0 then read data

            if($companytypeid){

                $this->CompanyType->id = $companytypeid;

                $this->set('companytypeid', $companytypeid);  

                $this->set('pageactionname', "Edit");    

                $this->data = $this->CompanyType->read();

            }else{

                $this->set('companytypeid', 0); 

                $this->set('pageactionname', "Add"); 

            }            

            //STEP : Set Variables

            $this->set('page_url','projectcontacttypes');

            $this->set('current_project_name',$project_name); 

            $this->set('project',$projectDetails);            

            $this->set('project_name',$projectDetails['Project']['project_name']);    

            



            //STEP : Set Help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '57'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition

             $this->set("returnurl",$returnurl);  

        }

        

        

          /*

        * Function name   : projectmembertypes()

        * Description : This function used to list all member types of related project

        * Created On      : 20th Feb 2012 - Member Type and Member Enhncement  - QUAD(UA)

        *

        */ 



        function projectmembertypes(){

            $this->layout= 'new_sponsor_layout';        

           

            //STEP : Check user session

            $this->session_check_user(); 



            //STEP : Chekc project session and get project details

            $project_id =$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            

            //for active menu display

            $this->set('page_url',"projectmembertypes");

            

            //STEP : Get Query string

            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }

            

              //STEP :    set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '62'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition

            

                       

            

             

              

           /**

           * Fetch Holder Events  Listing 

           */

             //STEP :    Impost company type model

            App::import("Model", "MemberType");

            $this->MemberType =   & new MemberType();   

            

             if(!empty($this->data))

            {      

                $searchkey=$this->data['Company']['searchkey'];

            }else{

                $searchkey="";

            }

            $condMemberTypes=$this->MemberType->getMemberTypesByProjectCondition($project_id,$searchkey);

            $field='';

            $this->Pagination->sortByClass    = 'MemberType'; ##initaite pagination 

           

            $this->Pagination->total= count($this->MemberType->getMemberTypesByProject($condMemberTypes));    

            list($order,$limit,$page) = $this->Pagination->init($condMemberTypes,$field);            

            $membertypelist = $this->MemberType->getMemberTypesByProject($condMemberTypes,$order, $limit, $page);



            ##set Coinset data in variable            

            $this->set("membertypelist",$membertypelist);



          



        }

        

         /**

        * Fucntion to add/ edit member type to project

        * 

        * @param mixed $membertypeid

        */

        function projectmembertypes_add($membertypeid='', $returnurl=""){

			$this->layout= 'new_sponsor_layout';                   

            //STEP : Check user session

            $this->session_check_user(); 

            //STEP : Chekc project session and get project details

            $projectid =$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $projectDetails=$this->getprojectdetails($projectid);    

            $this->set('project',$projectDetails);            

            

            //for active menu display

            $this->set('page_url',"projectmembertypes_add");          

       

                  

            // STEP : import company type model for processing

               App::import("Model", "MemberType");

            $this->MemberType =   & new MemberType();

            

            // STEP :  If isset data , save contact type

            if(!empty($this->data)) {   

               //$returnurl=$this->data['Company']['returnurl'];        

                $ctid= $this->data['MemberType']['id'];  

                #set the posted data

                $this->MemberType->set($this->data);



                #check server side validation

                $this->MemberType->invalidFields();

                $ptname = $this->data['MemberType']['member_type'];



                if($ctid > 0)  {

                    $condition = "member_type = '".$ptname."'    AND  delete_status = '0' and project_id='".$projectid."' and id!='".$ctid."'";

                    $ptdata = $this->MemberType->find('all',array("conditions"=>$condition));

                }else{

                   $condition = "member_type = '".$ptname."'    AND  delete_status = '0' and project_id='".$projectid."'";

                   $ptdata = $this->MemberType->find('all',array("conditions"=>$condition)); 

                }



                if(!$ptdata){



                    $this->data['MemberType']['project_id']=$projectid; 

                    #save data in contact type table

                    if($this->MemberType->Save($this->data['MemberType'])){

                          if($returnurl!=""){  // if its pop-up window from addformtype

                          //   $gotourl=str_replace("_id_", "/", $returnurl);

                             $this->set("closeit","yes");

                          }else{

                               if($ctid > 0){

                                    $this->Session->setFlash('Member Type updated Successfully.','default', array('class' => 'successmsg'));

                                    if(isset($this->data['Action']['redirectpage'])){

                                        $this->redirect('/companies/projectmembertypes');

                                    }else{

                                        $this->redirect("/companies/projectmembertypes_add/$ctid");

                                    }

                               }else{

                                    $this->Session->setFlash('Member Type Added Successfully.','default', array('class' => 'successmsg'));

                                    if(isset($this->data['Action']['redirectpage'])){

                                        $this->redirect('/companies/projectmembertypes');

                                    }else{

                                        $this->redirect("/companies/projectmembertypes_add");       

                                    }

                               }

                          }



                    }else{

                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                          if(isset($this->data['Action']['redirectpage'])){

                                $sessdata=$this->Session->read('newsortingby');

                                $this->redirect('/'.$sessdata);

                            }else{

                                $this->redirect('/companies/projectmembertypes_add');

                            }

                         

                    }



                }else{

                    $this->Session->setFlash('Member Type with same name already exists.','default',array('class' => 'msgTXt'));

                      if(isset($this->data['Action']['redirectpage'])){

                            $sessdata=$this->Session->read('newsortingby');

                            $this->redirect('/'.$sessdata);

                        }else{

                            $this->redirect('/companies/projectcompanytypes_add');

                        }

                }



              

            }



            //STEP : if $contacttypeid is not 0 then read data

			

            if($membertypeid){

                $this->MemberType->id = $membertypeid;

                $this->set('membertypeid', $membertypeid);  

                $this->set('pageactionname', "Edit");    

                $this->data = $this->MemberType->read();

				//pr($this->data);

				

            }else{

                $this->set('membertypeid', 0); 

                $this->set('pageactionname', "Add"); 

            }            

            //STEP : Set Variables

            $this->set('page_url','projectcontacttypes');

            $this->set('current_project_name',$project_name); 

            $this->set('project',$projectDetails);            

            $this->set('project_name',$projectDetails['Project']['project_name']);    

            



            //STEP : Set Help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '57'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition

            

            $this->set("returnurl",$returnurl);   

        }

        

                        /*

        * Function name   : projectdonatelevels()

        * Description : This function used to list all donation levels of related project

        * Created On      : 22nd Feb 2012 - Member Type and Member Enhncement  - QUAD(UA)

        *

        */ 



        function projectdonatelevels(){

            $this->layout= 'new_sponsor_layout';        

           

            //STEP : Check user session

            $this->session_check_user(); 



            //STEP : Chekc project session and get project details

            $project_id =$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);            

            

            //for active menu display

            $this->set('page_url',"projectmembertypes");

            

            //STEP : Get Query string

            if(isset($_SERVER['QUERY_STRING']))

            {

                $this->Session->delete("newsortingby");

                $strloc=strpos($_SERVER['QUERY_STRING'],'=');

                $strdata=substr($_SERVER['QUERY_STRING'],$strloc+1);    

                $this->Session->write("newsortingby",$strdata);    



            }

            

              //STEP :    set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '62'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition



          //    DebugBreak();  

           /**

           * Fetch Holder Events  Listing 

           */

             //STEP :    Impost company type model

            App::import("Model", "DonationLevel");

            $this->DonationLevel =   & new DonationLevel();   

            

             if(!empty($this->data))

            {      

                $searchkey=$this->data['Company']['searchkey'];

            }else{

                $searchkey="";

            }

            $cond='';//$this->MemberType->getMemberTypesByProjectCondition($project_id,$searchkey);

            $field='';

            $this->Pagination->sortByClass    = 'DonationLevel'; ##initaite pagination 

           

            $this->Pagination->total= count($this->DonationLevel->getDonationLevelsByProject($project_id, $searchkey));    

            list($order,$limit,$page) = $this->Pagination->init($cond,$field);            

            $donationlevellist = $this->DonationLevel->getDonationLevelsByProject($project_id, $searchkey,$order, $limit, $page);



            ##set Coinset data in variable            

            $this->set("donationlevellist",$donationlevellist);

         }

         /**

        * Fucntion to add/ edit company type to project

        * 

        * @param mixed $companytypeid

        */

        function projectdonatelevels_add($levelid='', $returnurl=""){

            $this->layout= 'new_sponsor_layout';                   

            //STEP : Check user session

            $this->session_check_user(); 



            //STEP : Chekc project session and get project details

            $projectid =$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $projectDetails=$this->getprojectdetails($projectid);    

            $this->set('project',$projectDetails);    

                  

            // STEP : import company type model for processing

            App::import("Model", "DonationLevel");

            $this->DonationLevel =   & new DonationLevel();

            

            // STEP :  If isset data , save contact type

            if(!empty($this->data)) {  

				//pr($this->data);die;

              // $returnurl=$this->data['Company']['returnurl'];        

                $ctid= $this->data['DonationLevel']['id'];  

                #set the posted data

                $this->DonationLevel->set($this->data);



                #check server side validation

                $this->DonationLevel->invalidFields();

                $level_name = $this->data['DonationLevel']['level_name'];

                $level_number = $this->data['DonationLevel']['level_number'];



                if($ctid > 0)  {

                    $condition = "level_name = '".$level_name."' AND level_number = '".$level_number."'  AND  delete_status = '0' and project_id='".$projectid."' and id!='".$ctid."'";

                    $ptdata = $this->DonationLevel->find('all',array("conditions"=>$condition));

                }else{

                   $condition = "level_name = '".$level_name."'  AND level_number = '".$level_number."'  AND  delete_status = '0' and project_id='".$projectid."'";

                   $ptdata = $this->DonationLevel->find('all',array("conditions"=>$condition)); 

                }



                if(!$ptdata){



                    $this->data['DonationLevel']['project_id']=$projectid; 

                    #save data in contact type table

                    if($this->DonationLevel->Save($this->data['DonationLevel'])){

                          if($returnurl!=""){  // if its pop-up window from addformtype

                          //   $gotourl=str_replace("_id_", "/", $returnurl);

                             $this->set("closeit","yes");

                          }else{

                               if($ctid > 0){

                                    $this->Session->setFlash('Donation Level updated Successfully.','default', array('class' => 'successmsg'));

                                    if(isset($this->data['Action']['redirectpage'])){

                                        $this->redirect('/companies/projectdonatelevels');

                                    }else{

                                        $this->redirect("/companies/projectdonatelevels_add/$ctid");

                                    }

                               }else{

                                    $this->Session->setFlash('Donation Level Added Successfully.','default', array('class' => 'successmsg'));

                                    if(isset($this->data['Action']['redirectpage'])){

                                        $this->redirect('/companies/projectdonatelevels');

                                    }else{

                                        $this->redirect("/companies/projectdonatelevels_add");       

                                    }

                               }

                          }



                          

                    }else{

                        $this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

                          if(isset($this->data['Action']['redirectpage'])){

                                $sessdata=$this->Session->read('newsortingby');

                                $this->redirect('/'.$sessdata);

                            }else{

                                $this->redirect('/companies/projectdonatelevels_add');

                            }

                         

                    }



                }else{

                    $this->Session->setFlash('Donation Level with same name already exists.','default',array('class' => 'msgTXt'));

                      if(isset($this->data['Action']['redirectpage'])){

                            $sessdata=$this->Session->read('newsortingby');

                            $this->redirect('/'.$sessdata);

                        }else{

                            $this->redirect('/companies/projectdonatelevels_add');

                        }

                }



              

            }

                

            //STEP : if $contacttypeid is not 0 then read data

            if($levelid){

                $this->DonationLevel->id = $levelid;

                $this->set('levelid', $levelid);  

                $this->set('pageactionname', "Edit");    

                $this->data = $this->DonationLevel->read();

                $level_num='01';

                $level_lowrange='0';

                if($this->data['DonationLevel']){

                    $level_num=$this->data['DonationLevel']['level_number'];

                    $level_lowrange=$this->data['DonationLevel']['level_lowerrange']; 

                }

            }else{

                $this->set('membertypeid', 0); 

                $this->set('pageactionname', "Add"); 

                $level_num='01';

                $level_lowrange='0';

                $lastlevel=$this->DonationLevel->getLastDonationLevelOfProject($projectid);

                if($lastlevel){

                    $level_num=$lastlevel['DonationLevel']['level_number']+1;

                    $level_lowrange=$lastlevel['DonationLevel']['level_upperrange']+1; 

                }

            }           

            $this->set('level_num',$level_num);   

            $this->set('level_lowrange',$level_lowrange);   

             

            //STEP : Set Variables

            $this->set('page_url','projectcontacttypes');

            $this->set('current_project_name',$project_name); 

            $this->set('project',$projectDetails);            

            $this->set('project_name',$projectDetails['Project']['project_name']);    

            



            //STEP : Set Help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '57'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition

            

            $this->set("returnurl",$returnurl);   

        }

        

        

                           /*

        * Function name   : coming_soon()

        * Description : coming soon  page

        * Created On      : 5th March 2012

        *

        */



          function coming_soon($tabpagename, $topmenuname='donation'){    

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"memberhistory");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $this->set('project_name',$project_name);   

            //$this->set("recordid",$holderid);

            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '5'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      



             /* Project Details */

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;    

            

             /* Get Session Member profile edit */

             $projecteditmember = $this->Session->read("projecteditmember");        

             $this->set('projecteditmember',$projecteditmember);

       

             $this->set("tabpagename",$tabpagename);

            $this->set("topmenuname",$topmenuname);  

          }   

      

        /**

       * Function access shopping cart admin panel with PM auto login to open cart system

       * Ref - Shopping cart Enahcemnt document 

       *  Created : 13th March 2012 ( QUAD- UA) 

       */

         

      

          function projectshoppingcart(){    

            ##check user session live or not

            $this->session_check_user();



            $this->layout= 'new_sponsor_layout';



            //for active menu display

            $this->set('page_url',"projectshoppingcart");



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name"); 

            $this->set('project_name',$project_name);   



            if(empty($project_name)) $this->redirect('/companies/session_expired');





            # set help condition

            App::import("Model", "HelpContent");

            $this->HelpContent =  & new HelpContent();

            $condition = "HelpContent.id = '5'";  

            $hlpdata= $this->HelpContent->find('all',array("conditions"=>$condition));

            $this->set("hlpdata",$hlpdata);

            # set help condition      



             /* Project Details */

            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project_id',$project_id);    

            $this->set('project',$projectDetails);    

            $this->set('project_name',$projectDetails['Project']['project_name']);

            $projectid=$project_id;  

            

              # import ProjectShoppingCart    

            App::import("Model", "ProjectShoppingCart");

            $this->ProjectShoppingCart =  & new ProjectShoppingCart();

            $shoppingCart=$this->ProjectShoppingCart->getShoppingCartByProject($project_id);

            $this->set("shoppingCartData",$shoppingCart);    

            

            

          }   

        

        

        

      /**

       * Function access shopping cart admin panel with PM auto login to open cart system

       * Ref - Shopping cart Enahcemnt document 

       *  Created : 13th March 2012 ( QUAD- UA) 

       */

         

      

          function shoppingcart($pagealias="shopping-cart"){    

                // Configure::write('debug', 2);    

                                                   

            $this->layout= 'internal_layout';          

            //for active menu display

            $this->set('page_url','shoppingcart');



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            $userid = $this->Session->read("User.User.id");  

                          

            if(empty($project_name)) $this->redirect('/companies/session_expired');



            //STEP : GET PAGE CONTENT

            $condition="Content.alias='".$pagealias."' and Content.project_id=".$project_id." and Content.active_status='1' and Content.delete_status='0' ";

            $page_content= $this->Content->find($condition,NULL,NULL,NULL,NULL,1);     

            $this->set('meta_description',$page_content['Content']['metadescription']);

            $this->set('meta_keyword',$page_content['Content']['metakeyword']);

            $this->set('meta_title',$page_content['Content']['metatitle']);

            $this->set('meta_isindex',$page_content['Content']['meta_isindex']);

            $this->set('meta_isfollow',$page_content['Content']['meta_isfollow']);

            $this->set('page_title',$page_content['Content']['title']);

            $this->set('page_content',$page_content);

             

            

            $this->set('project_name',$project_name);    



            $projectDetails=$this->getprojectdetails($project_id);    

            $this->set('project',$projectDetails);    



            $username = $this->Session->read("User.User.username");

            $this->set('username',$username);

            

            $holder_id = $this->Session->read("User.Holder.id");

            $this->set('holder_id',$holder_id);



            $current_domain= $_SERVER['HTTP_HOST']; 

            $this->set('current_domain',$current_domain); 

           

    

            

            # import ProjectShoppingCart    

            App::import("Model", "ProjectShoppingCart");

            $this->ProjectShoppingCart =  & new ProjectShoppingCart();

            $shoppingCart=$this->ProjectShoppingCart->getShoppingCartByProject($project_id);

            

			//echo "<pre>";

			//print_r($shoppingCart);

			

			$this->set("shoppingCartData",$shoppingCart);    

            

            

          }



		function agreement() {

			if(!$this->Session->check('Agreeemnt_project.pid')){

				$this->redirect(array('controller'=>'companies','action'=>'login'));

			}

			$Agreeemnt_project_id 	= 0;

			$Agreeemnt_project_id 	= $this->Session->read('Agreeemnt_project.pid');

			$Agreeemnt_user_id 		= $this->Session->read('Agreeemnt_project.uid');

			$agreementData = '';

			$this->Session->delete('Agreeemnt_project');

			if($Agreeemnt_project_id) {

				App::import("Model", "Project");

				$this->Project =   & new Project();

				App::import("Model", "UserAgreement");

				$this->UserAgreement =   & new UserAgreement();

				$this->UserAgreement->bindModel(array('belongsTo'=>array(

															'Project'=>array(

																	'foreignKey'=>false,

																	'conditions'=>'Project.user_agreement_id = UserAgreement.id'

															)

														)

												)

										);

										

				$projectAgreeDataArr = $this->UserAgreement->find('first',array('conditions'=>array('Project.id'=>$Agreeemnt_project_id),'fields'=>'UserAgreement.agreement_content'));

				$agreementData = $projectAgreeDataArr['UserAgreement']['agreement_content'];

			}

			$this->set('agreementData',$agreementData);

			$this->set('Agreeemnt_user_id',$Agreeemnt_user_id);

			

			$datastyle=$this->getstyles();

            $this->Session->delete('styledata');

            $this->set('styledata',$datastyle);

            $this->Session->write("styledata",$datastyle);

            $this->layout= 'internal_layout';



            $project_id=$this->Session->read("projectwebsite_id");    

            $project_name=$this->Session->read("projectwebsite_name");    

            if(empty($project_name)) $this->redirect(array('controller'=>'companies','action' =>'session_expired'));

            $this->set('project_name',$project_name);



            $projectDetails=$this->getprojectdetails($project_id);

            $this->set('project',$projectDetails);

            $loutouturl = $this->getlogouturl($projectDetails['Project']['logoutredirect']);

            $this->Session->write('logouturl', $loutouturl);





            $this->set('meta_description',$projectDetails['Project']['sitemetadescription']);

            $this->set('meta_keyword',$projectDetails['Project']['sitemetakeyword']);

            $this->set('meta_title',$projectDetails['Project']['sitename']);

            $this->set('page_title',$projectDetails['Project']['sitename']);



            $page_content=$this->getcontents("login");

			$this->set('page_content',$page_content);

		}



		function do_agree() {

			if(isset($this->data) && !empty($this->data['User']['id']) && $this->data['User']['acceptation'] == 1){ 

				App::import("Model", "User");

				$this->User =   & new User();

				

				$this->data['User']['last_login'] = date("Y-m-d H:i:s");

				if($this->User->save($this->data))

				$this->Session->setFlash('Project license agreement accepted Successfully.','default', array('class' => 'successmsg'));

			}

			$this->redirect(array('controller'=>'companies','action'=>'login'));

		}

		

		function getTodayMessage($userid=null,$project_id=null,$sponserid=null) {

			App::import('Model','Message');

            $this->Message = new Message(); 

			$mm = $this->Message->find('first',array("conditions"=>array('project_id'=>$project_id,'from_holderid'=>$sponserid,'fromusertype'=>'sponsor','active_status'=>'1','delete_status'=>'0','to_holderid LIKE'=>'%,'.$userid.',%'),'fields'=>'msg_content','order'=>'id DESC'));

			// "MATCH(Message.to_holderid) AGAINST('".$needle".' IN BOOLEAN MODE)" 

			return $mm['Message']['msg_content']; 	

		}

		

		

		 function iframeregisterbtn($frid=null,$prname=null){

			

			$this->layout= '';

			$this->set('page_url','registeruser');

            $project_id=$frid;

            $projectDetails=$this->getprojectdetails($project_id);   

            $this->set('project',$projectDetails);

			$this->set('project_name',$prname);        

			

			App::import('Model','Theme');

            $this->Theme = new Theme(); 

			$condition = 'Theme.project_id='.$project_id;

			$themedata = $this->Theme->find('first', array('conditions' => $condition));

			$this->set('background',$themedata['Theme']['bgregisterbtn']);

		 }

		 

		 function iframecommentbtn($frid=null,$prname=null){

			

			$this->layout= '';

			$this->set('page_url','registeruser');

            $project_id=$frid;

            $projectDetails=$this->getprojectdetails($project_id);   

            $this->set('project',$projectDetails);

						$this->set('project_name',$prname);        

			App::import('Model','Theme');

            $this->Theme = new Theme(); 

			$condition = 'Theme.project_id='.$project_id;

			$themedata = $this->Theme->find('first', array('conditions' => $condition));

			$this->set('background',$themedata['Theme']['bgcommentbtn']);

			

		   $condition="(Content.internal_alias='home-page' or Content.alias='home-page' or Content.alias='home_page') and Content.project_id=".$projectDetails['Project']['id']." and Content.active_status='1' and Content.delete_status='0' ";



            $noofcomments = $this->Comment->find('count',array('conditions' => "Comment.project_id='".$projectDetails['Project']['id']."'  and Comment.offensive='0'  and  Comment.active_status='1' and Comment.delete_status='0'"));

			

			$this->set('noofcomments',$noofcomments);

			     

		 }

		 

		  function iframeshowcoins($frid=null,$prname=null){

			$this->layout= '';

			$this->set('page_url','registeruser');

            $project_id=$frid;

            $projectDetails=$this->getprojectdetails($project_id);   

            $this->set('project',$projectDetails);

			$this->set('project_name',$prname);        			

			App::import('Model','Theme');

            $this->Theme = new Theme(); 

			$condition = 'Theme.project_id='.$project_id;

			$themedata = $this->Theme->find('first', array('conditions' => $condition));

			$this->set('background',$themedata['Theme']['bgaroundcoins']);

			

	  		$conditioncoinset = "project_id = '".$projectDetails['Project']['id']."' and  active_status='1' and delete_status='0'";

			##check already exists company name

			$consetdata1 = $this->Coinset->find('first',array("conditions"=>$conditioncoinset));

			//pr($consetdata1);

		    $this->set('coinsdetail',$consetdata1);

			

   		    $href_coin_image=$this->__getlink();

            $this->set('href_coin_image',$href_coin_image);

			     

		 }



		

		 function iframesurvey($recid='0', $memberid = 0 ){

		 

		 	if($memberid ==0 ){

		 	$USER   = $this->Session->read('User');

			if(empty($USER)){

				$this->set('showsurvey', 0);

			}else{

				$this->set('showsurvey', 1);

				$this->set('member_id', $this->Session->read("User.Holder.id"));

			}}else{

				$this->set('member_id', $memberid);

			}

		 	

		 	$this->layout = "iframelayout";

		 	App::import("Model", "Survey");

		 	$this->Survey =  & new Survey();

		 	

		 	$this->Survey->id = $recid;

		 	$this->data = $this->Survey->read();

		 	$this->set('recid', $this->data['Survey']['id']);

		 }

		 

		 function surveyaction(){

		 	 

		 	App::import("Model", "SurveyResponse");

		 	$this->SurveyResponse =  & new SurveyResponse();



		 	if(isset($_POST['id']))

		 		$this->data['SurveyResponse']['survey_id'] = $_POST['id'];



		 	if(isset($_POST['member_id']))

		 		$this->data['SurveyResponse']['member_id'] = $_POST['member_id'];



		 	if(isset($_POST['0']))

		 		$this->data['SurveyResponse']['response1'] = $_POST['0'];



		 	if(isset($_POST['1']))

		 		$this->data['SurveyResponse']['response2'] = $_POST['1'];



		 	if(isset($_POST['2']))

		 		$this->data['SurveyResponse']['response3'] = $_POST['2'];



		 	if(isset($_POST['3']))

		 		$this->data['SurveyResponse']['response4'] = $_POST['3'];



		 	if(isset($_POST['4']))

		 		$this->data['SurveyResponse']['response5'] = $_POST['4'];



		 	if(isset($_POST['5']))

		 		$this->data['SurveyResponse']['response6'] = $_POST['5'];

		 		

		 	if($this->SurveyResponse->save($this->data)){

		 		$this->Session->setFlash('Thank you.','default', array('class' => 'successmsg'));

		 	}else{	 		 	

		 		$this->Session->setFlash('Error in processing. Please try again','default',array('class' => 'msgTXt'));

		 	}	

		 	

		 	$this->redirect(array('controller'=>'companies','action'=>'iframesurvey',$_POST['id'] ));

		 }

		function facebooklogin(){

	   	 $this->layout=false;

		 require('facebook.php');

		 $project_id = '1';

		 $projectDetails = $this->getprojectdetails($project_id);

	   	 $facebook = new Facebook(array(

                        'appId' => $projectDetails['Project']['facebookappkey'],

                        'secret' => $projectDetails['Project']['facebooksecretkey'],

                        'cookie' => true,

						'redirect_url'=>Configure::read('App.base_url').'companies/facebooklogin'

                        ));

						

		$facebook->destroySession();		

		$FB_LOGIN_URL = $facebook->getLoginUrl(array(

 		'scope' => 'email,user_birthday'

		));

	 	$sessiontest = $facebook->getUser();	

     	if(!empty($sessiontest))

		 {

		   $user = $facebook->api('/me');		

		//echo '<pre>'; print_r($user);  die;

		   #------Check user is alreayd register------------------

		   App::import("Model","User");

            $this->User = new User();

              $condition = "fbid = '".$user['id']."' AND  delete_status = '0'";

            $userData = $this->User->find('first',array("conditions"=>$condition));

			

			if($userData){

				

				//$this->Session->write('User', 'User');

				//print_r($userData);

				$this->Session->write('User', $userData);

				//print_r($this->Session->read('User'));die;

				$this->redirect(array('controller'=>'companies','action'=>'dashboard'));

			}else{

				$facebookSesion = array(

						'oauth_provider' => 'facebook',	

						'oauth_uid' => $user['id'],	

						'first_name' => $user['first_name'],

						'last_name' => $user['last_name'],

						'email'	=>$user['email']

						);

					$this->Session->write('facebookSesion', $facebookSesion);

					$this->redirect(array('controller'=>'companies','action'=>'registeruser'));	

			}  

		   #------------------------------------------------

	  }

	  else

	  {

		/*$this->Session->setFlash('User has canceled authentication!','default',array('class' => 'errormsg1'));

		$this->redirect('/companies/registeruser');	 */				

		header("Location:".$FB_LOGIN_URL);

		exit(0);				 

	  } 



   }



   

   

   

   function iframecouponcalendar($year = null, $month = null)

   {

   	

    $this->layout= 'iframelayout'; 

   	//for active menu display

   	$this->set('page_url','calendar');

   

   	$project_id = 1;

   		

   	$this->set('page_url','calendar');

   	# set help condition

   	$this->set("hlpdata",$this->getHelpContent('20'));

   	# set help condition

   	

   	$projectDetails=$this->getprojectdetails($project_id);

   	$project_name=$projectDetails['Project']['project_name'];

   		

   	$current_domain= Configure::read('App.base_url');

   	//$current_domain=$current_domain."/gosocialsolutions/";

   	$current_domain=$current_domain;

   		

   	App::import("Model", "Coupon");

   	$this->Coupon =   & new Coupon();

   	

   	$current_date=date('Y-m-d');

   		

   		

   	$condition = "Coupon.project_id = '".$project_id."' AND Coupon.delete_status ='0' AND Coupon.coupon_end_by_date >='".$current_date."'";

   		

   	$this->Coupon->bindModel(array('belongsTo'=>array(

   			'CouponType'=>array(

   					'foreignKey'=>'type'

   			))));

   	// get all the events from the database.

   	$coupons = $this->Coupon->find('all',array("conditions"=>$condition));

   	

   	// insert rows to an array.

   	for ($a=0; count($coupons)> $a; $a++){

   		$validate_coupon = $this->Coupon->find('first',array('conditions' => "Coupon.id='".$coupons[$a]['Coupon']['id']."'  AND Coupon.delete_status='0' AND Coupon.coupon_end_by_date >= '".$current_date."'"));

   			

   		//echo '<pre>';print_r($validate_coupon);die;

   		if(!empty($validate_coupon))

   		{

   			$starttime=date('Y-m-d H:i:s', strtotime($coupons[$a]['Coupon']['starttime']));

   			$endtime=date('Y-m-d H:i:s', strtotime($coupons[$a]['Coupon']['coupon_end_by_date']));

   	

   			if($starttime >= $current_date)

   				$url = $current_domain."companies/iframecoupon/0/";

   			else

   				$url = $current_domain."companies/iframecoupon/0/";

				

   			$rows[]= '{"id":'.$coupons[$a]['Coupon']['id'].', "title":"'.$coupons[$a]['Coupon']['title'].'", "start":"'.$starttime.'","end":"'.$endtime.'","url":"'.$url.$coupons[$a]['Coupon']['id'].'", "className":"2","type":"2"}';

   		}

   	

   	}

   	

   	// convert the array to a string.

   	if (isset($rows)){

   		$convertojson = implode(",", $rows);

   	}else{

   		$convertojson ="";

   	}

   	

   	//pass the string to the json variable. this will then be passed  and printed to the javascript code.

   	$this->set('json',$convertojson);

   }

   

    } //end class

?>

